// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Battle.pb.h"
// @@protoc_insertion_point(imports)

@implementation BattleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BattleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BattleResultIsValidValue(BattleResult value) {
  switch (value) {
    case BattleResultAttackerWin:
    case BattleResultDefenderWin:
    case BattleResultAttackerFlee:
      return YES;
    default:
      return NO;
  }
}
@interface PvpProto ()
@property (strong) MinimumUserProtoWithLevel* defender;
@property (strong) NSMutableArray * mutableDefenderMonstersList;
@property int32_t prospectiveCashWinnings;
@property int32_t prospectiveOilWinnings;
@property (strong) UserPvpLeagueProto* pvpLeagueStats;
@property (strong) NSString* defenderMsg;
@end

@implementation PvpProto

- (BOOL) hasDefender {
  return !!hasDefender_;
}
- (void) setHasDefender:(BOOL) value_ {
  hasDefender_ = !!value_;
}
@synthesize defender;
@synthesize mutableDefenderMonstersList;
@dynamic defenderMonstersList;
- (BOOL) hasProspectiveCashWinnings {
  return !!hasProspectiveCashWinnings_;
}
- (void) setHasProspectiveCashWinnings:(BOOL) value_ {
  hasProspectiveCashWinnings_ = !!value_;
}
@synthesize prospectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings {
  return !!hasProspectiveOilWinnings_;
}
- (void) setHasProspectiveOilWinnings:(BOOL) value_ {
  hasProspectiveOilWinnings_ = !!value_;
}
@synthesize prospectiveOilWinnings;
- (BOOL) hasPvpLeagueStats {
  return !!hasPvpLeagueStats_;
}
- (void) setHasPvpLeagueStats:(BOOL) value_ {
  hasPvpLeagueStats_ = !!value_;
}
@synthesize pvpLeagueStats;
- (BOOL) hasDefenderMsg {
  return !!hasDefenderMsg_;
}
- (void) setHasDefenderMsg:(BOOL) value_ {
  hasDefenderMsg_ = !!value_;
}
@synthesize defenderMsg;
- (id) init {
  if ((self = [super init])) {
    self.defender = [MinimumUserProtoWithLevel defaultInstance];
    self.prospectiveCashWinnings = 0;
    self.prospectiveOilWinnings = 0;
    self.pvpLeagueStats = [UserPvpLeagueProto defaultInstance];
    self.defenderMsg = @"";
  }
  return self;
}
static PvpProto* defaultPvpProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpProto class]) {
    defaultPvpProtoInstance = [[PvpProto alloc] init];
  }
}
+ (PvpProto*) defaultInstance {
  return defaultPvpProtoInstance;
}
- (PvpProto*) defaultInstance {
  return defaultPvpProtoInstance;
}
- (NSArray *)defenderMonstersList {
  return mutableDefenderMonstersList;
}
- (PvpMonsterProto*)defenderMonstersAtIndex:(NSUInteger)index {
  return [mutableDefenderMonstersList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDefender) {
    [output writeMessage:1 value:self.defender];
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasProspectiveCashWinnings) {
    [output writeInt32:4 value:self.prospectiveCashWinnings];
  }
  if (self.hasProspectiveOilWinnings) {
    [output writeInt32:5 value:self.prospectiveOilWinnings];
  }
  if (self.hasPvpLeagueStats) {
    [output writeMessage:6 value:self.pvpLeagueStats];
  }
  if (self.hasDefenderMsg) {
    [output writeString:7 value:self.defenderMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDefender) {
    size_ += computeMessageSize(1, self.defender);
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasProspectiveCashWinnings) {
    size_ += computeInt32Size(4, self.prospectiveCashWinnings);
  }
  if (self.hasProspectiveOilWinnings) {
    size_ += computeInt32Size(5, self.prospectiveOilWinnings);
  }
  if (self.hasPvpLeagueStats) {
    size_ += computeMessageSize(6, self.pvpLeagueStats);
  }
  if (self.hasDefenderMsg) {
    size_ += computeStringSize(7, self.defenderMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpProto*) parseFromData:(NSData*) data {
  return (PvpProto*)[[[PvpProto builder] mergeFromData:data] build];
}
+ (PvpProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpProto*)[[[PvpProto builder] mergeFromInputStream:input] build];
}
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpProto*)[[[PvpProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpProto_Builder*) builder {
  return [[PvpProto_Builder alloc] init];
}
+ (PvpProto_Builder*) builderWithPrototype:(PvpProto*) prototype {
  return [[PvpProto builder] mergeFrom:prototype];
}
- (PvpProto_Builder*) builder {
  return [PvpProto builder];
}
- (PvpProto_Builder*) toBuilder {
  return [PvpProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDefender) {
    [output appendFormat:@"%@%@ {\n", indent, @"defender"];
    [self.defender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasProspectiveCashWinnings) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveCashWinnings", [NSNumber numberWithInteger:self.prospectiveCashWinnings]];
  }
  if (self.hasProspectiveOilWinnings) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveOilWinnings", [NSNumber numberWithInteger:self.prospectiveOilWinnings]];
  }
  if (self.hasPvpLeagueStats) {
    [output appendFormat:@"%@%@ {\n", indent, @"pvpLeagueStats"];
    [self.pvpLeagueStats writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefenderMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderMsg", self.defenderMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpProto class]]) {
    return NO;
  }
  PvpProto *otherMessage = other;
  return
      self.hasDefender == otherMessage.hasDefender &&
      (!self.hasDefender || [self.defender isEqual:otherMessage.defender]) &&
      [self.defenderMonstersList isEqualToArray:otherMessage.defenderMonstersList] &&
      self.hasProspectiveCashWinnings == otherMessage.hasProspectiveCashWinnings &&
      (!self.hasProspectiveCashWinnings || self.prospectiveCashWinnings == otherMessage.prospectiveCashWinnings) &&
      self.hasProspectiveOilWinnings == otherMessage.hasProspectiveOilWinnings &&
      (!self.hasProspectiveOilWinnings || self.prospectiveOilWinnings == otherMessage.prospectiveOilWinnings) &&
      self.hasPvpLeagueStats == otherMessage.hasPvpLeagueStats &&
      (!self.hasPvpLeagueStats || [self.pvpLeagueStats isEqual:otherMessage.pvpLeagueStats]) &&
      self.hasDefenderMsg == otherMessage.hasDefenderMsg &&
      (!self.hasDefenderMsg || [self.defenderMsg isEqual:otherMessage.defenderMsg]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDefender) {
    hashCode = hashCode * 31 + [self.defender hash];
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasProspectiveCashWinnings) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveCashWinnings] hash];
  }
  if (self.hasProspectiveOilWinnings) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveOilWinnings] hash];
  }
  if (self.hasPvpLeagueStats) {
    hashCode = hashCode * 31 + [self.pvpLeagueStats hash];
  }
  if (self.hasDefenderMsg) {
    hashCode = hashCode * 31 + [self.defenderMsg hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpProto_Builder()
@property (strong) PvpProto* result;
@end

@implementation PvpProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpProto_Builder*) clear {
  self.result = [[PvpProto alloc] init];
  return self;
}
- (PvpProto_Builder*) clone {
  return [PvpProto builderWithPrototype:result];
}
- (PvpProto*) defaultInstance {
  return [PvpProto defaultInstance];
}
- (PvpProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpProto*) buildPartial {
  PvpProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpProto_Builder*) mergeFrom:(PvpProto*) other {
  if (other == [PvpProto defaultInstance]) {
    return self;
  }
  if (other.hasDefender) {
    [self mergeDefender:other.defender];
  }
  if (other.mutableDefenderMonstersList.count > 0) {
    if (result.mutableDefenderMonstersList == nil) {
      result.mutableDefenderMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableDefenderMonstersList];
    } else {
      [result.mutableDefenderMonstersList addObjectsFromArray:other.mutableDefenderMonstersList];
    }
  }
  if (other.hasProspectiveCashWinnings) {
    [self setProspectiveCashWinnings:other.prospectiveCashWinnings];
  }
  if (other.hasProspectiveOilWinnings) {
    [self setProspectiveOilWinnings:other.prospectiveOilWinnings];
  }
  if (other.hasPvpLeagueStats) {
    [self mergePvpLeagueStats:other.pvpLeagueStats];
  }
  if (other.hasDefenderMsg) {
    [self setDefenderMsg:other.defenderMsg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProtoWithLevel_Builder* subBuilder = [MinimumUserProtoWithLevel builder];
        if (self.hasDefender) {
          [subBuilder mergeFrom:self.defender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefender:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PvpMonsterProto_Builder* subBuilder = [PvpMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDefenderMonsters:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setProspectiveCashWinnings:[input readInt32]];
        break;
      }
      case 40: {
        [self setProspectiveOilWinnings:[input readInt32]];
        break;
      }
      case 50: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasPvpLeagueStats) {
          [subBuilder mergeFrom:self.pvpLeagueStats];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPvpLeagueStats:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setDefenderMsg:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasDefender {
  return result.hasDefender;
}
- (MinimumUserProtoWithLevel*) defender {
  return result.defender;
}
- (PvpProto_Builder*) setDefender:(MinimumUserProtoWithLevel*) value {
  result.hasDefender = YES;
  result.defender = value;
  return self;
}
- (PvpProto_Builder*) setDefender_Builder:(MinimumUserProtoWithLevel_Builder*) builderForValue {
  return [self setDefender:[builderForValue build]];
}
- (PvpProto_Builder*) mergeDefender:(MinimumUserProtoWithLevel*) value {
  if (result.hasDefender &&
      result.defender != [MinimumUserProtoWithLevel defaultInstance]) {
    result.defender =
      [[[MinimumUserProtoWithLevel builderWithPrototype:result.defender] mergeFrom:value] buildPartial];
  } else {
    result.defender = value;
  }
  result.hasDefender = YES;
  return self;
}
- (PvpProto_Builder*) clearDefender {
  result.hasDefender = NO;
  result.defender = [MinimumUserProtoWithLevel defaultInstance];
  return self;
}
- (NSMutableArray *)defenderMonstersList {
  return result.mutableDefenderMonstersList;
}
- (PvpMonsterProto*)defenderMonstersAtIndex:(NSUInteger)index {
  return [result defenderMonstersAtIndex:index];
}
- (PvpProto_Builder *)addDefenderMonsters:(PvpMonsterProto*)value {
  if (result.mutableDefenderMonstersList == nil) {
    result.mutableDefenderMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableDefenderMonstersList addObject:value];
  return self;
}
- (PvpProto_Builder *)addAllDefenderMonsters:(NSArray *)array {
  if (result.mutableDefenderMonstersList == nil) {
    result.mutableDefenderMonstersList = [NSMutableArray array];
  }
  [result.mutableDefenderMonstersList addObjectsFromArray:array];
  return self;
}
- (PvpProto_Builder *)clearDefenderMonsters {
  result.mutableDefenderMonstersList = nil;
  return self;
}
- (BOOL) hasProspectiveCashWinnings {
  return result.hasProspectiveCashWinnings;
}
- (int32_t) prospectiveCashWinnings {
  return result.prospectiveCashWinnings;
}
- (PvpProto_Builder*) setProspectiveCashWinnings:(int32_t) value {
  result.hasProspectiveCashWinnings = YES;
  result.prospectiveCashWinnings = value;
  return self;
}
- (PvpProto_Builder*) clearProspectiveCashWinnings {
  result.hasProspectiveCashWinnings = NO;
  result.prospectiveCashWinnings = 0;
  return self;
}
- (BOOL) hasProspectiveOilWinnings {
  return result.hasProspectiveOilWinnings;
}
- (int32_t) prospectiveOilWinnings {
  return result.prospectiveOilWinnings;
}
- (PvpProto_Builder*) setProspectiveOilWinnings:(int32_t) value {
  result.hasProspectiveOilWinnings = YES;
  result.prospectiveOilWinnings = value;
  return self;
}
- (PvpProto_Builder*) clearProspectiveOilWinnings {
  result.hasProspectiveOilWinnings = NO;
  result.prospectiveOilWinnings = 0;
  return self;
}
- (BOOL) hasPvpLeagueStats {
  return result.hasPvpLeagueStats;
}
- (UserPvpLeagueProto*) pvpLeagueStats {
  return result.pvpLeagueStats;
}
- (PvpProto_Builder*) setPvpLeagueStats:(UserPvpLeagueProto*) value {
  result.hasPvpLeagueStats = YES;
  result.pvpLeagueStats = value;
  return self;
}
- (PvpProto_Builder*) setPvpLeagueStats_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setPvpLeagueStats:[builderForValue build]];
}
- (PvpProto_Builder*) mergePvpLeagueStats:(UserPvpLeagueProto*) value {
  if (result.hasPvpLeagueStats &&
      result.pvpLeagueStats != [UserPvpLeagueProto defaultInstance]) {
    result.pvpLeagueStats =
      [[[UserPvpLeagueProto builderWithPrototype:result.pvpLeagueStats] mergeFrom:value] buildPartial];
  } else {
    result.pvpLeagueStats = value;
  }
  result.hasPvpLeagueStats = YES;
  return self;
}
- (PvpProto_Builder*) clearPvpLeagueStats {
  result.hasPvpLeagueStats = NO;
  result.pvpLeagueStats = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefenderMsg {
  return result.hasDefenderMsg;
}
- (NSString*) defenderMsg {
  return result.defenderMsg;
}
- (PvpProto_Builder*) setDefenderMsg:(NSString*) value {
  result.hasDefenderMsg = YES;
  result.defenderMsg = value;
  return self;
}
- (PvpProto_Builder*) clearDefenderMsg {
  result.hasDefenderMsg = NO;
  result.defenderMsg = @"";
  return self;
}
@end

@interface PvpMonsterProto ()
@property (strong) MinimumUserMonsterProto* defenderMonster;
@property int32_t monsterIdDropped;
@end

@implementation PvpMonsterProto

- (BOOL) hasDefenderMonster {
  return !!hasDefenderMonster_;
}
- (void) setHasDefenderMonster:(BOOL) value_ {
  hasDefenderMonster_ = !!value_;
}
@synthesize defenderMonster;
- (BOOL) hasMonsterIdDropped {
  return !!hasMonsterIdDropped_;
}
- (void) setHasMonsterIdDropped:(BOOL) value_ {
  hasMonsterIdDropped_ = !!value_;
}
@synthesize monsterIdDropped;
- (id) init {
  if ((self = [super init])) {
    self.defenderMonster = [MinimumUserMonsterProto defaultInstance];
    self.monsterIdDropped = 0;
  }
  return self;
}
static PvpMonsterProto* defaultPvpMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpMonsterProto class]) {
    defaultPvpMonsterProtoInstance = [[PvpMonsterProto alloc] init];
  }
}
+ (PvpMonsterProto*) defaultInstance {
  return defaultPvpMonsterProtoInstance;
}
- (PvpMonsterProto*) defaultInstance {
  return defaultPvpMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDefenderMonster) {
    [output writeMessage:1 value:self.defenderMonster];
  }
  if (self.hasMonsterIdDropped) {
    [output writeInt32:2 value:self.monsterIdDropped];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDefenderMonster) {
    size_ += computeMessageSize(1, self.defenderMonster);
  }
  if (self.hasMonsterIdDropped) {
    size_ += computeInt32Size(2, self.monsterIdDropped);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpMonsterProto*) parseFromData:(NSData*) data {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromData:data] build];
}
+ (PvpMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromInputStream:input] build];
}
+ (PvpMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpMonsterProto_Builder*) builder {
  return [[PvpMonsterProto_Builder alloc] init];
}
+ (PvpMonsterProto_Builder*) builderWithPrototype:(PvpMonsterProto*) prototype {
  return [[PvpMonsterProto builder] mergeFrom:prototype];
}
- (PvpMonsterProto_Builder*) builder {
  return [PvpMonsterProto builder];
}
- (PvpMonsterProto_Builder*) toBuilder {
  return [PvpMonsterProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDefenderMonster) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderMonster"];
    [self.defenderMonster writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMonsterIdDropped) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterIdDropped", [NSNumber numberWithInteger:self.monsterIdDropped]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpMonsterProto class]]) {
    return NO;
  }
  PvpMonsterProto *otherMessage = other;
  return
      self.hasDefenderMonster == otherMessage.hasDefenderMonster &&
      (!self.hasDefenderMonster || [self.defenderMonster isEqual:otherMessage.defenderMonster]) &&
      self.hasMonsterIdDropped == otherMessage.hasMonsterIdDropped &&
      (!self.hasMonsterIdDropped || self.monsterIdDropped == otherMessage.monsterIdDropped) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDefenderMonster) {
    hashCode = hashCode * 31 + [self.defenderMonster hash];
  }
  if (self.hasMonsterIdDropped) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterIdDropped] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpMonsterProto_Builder()
@property (strong) PvpMonsterProto* result;
@end

@implementation PvpMonsterProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpMonsterProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpMonsterProto_Builder*) clear {
  self.result = [[PvpMonsterProto alloc] init];
  return self;
}
- (PvpMonsterProto_Builder*) clone {
  return [PvpMonsterProto builderWithPrototype:result];
}
- (PvpMonsterProto*) defaultInstance {
  return [PvpMonsterProto defaultInstance];
}
- (PvpMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpMonsterProto*) buildPartial {
  PvpMonsterProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpMonsterProto_Builder*) mergeFrom:(PvpMonsterProto*) other {
  if (other == [PvpMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasDefenderMonster) {
    [self mergeDefenderMonster:other.defenderMonster];
  }
  if (other.hasMonsterIdDropped) {
    [self setMonsterIdDropped:other.monsterIdDropped];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserMonsterProto_Builder* subBuilder = [MinimumUserMonsterProto builder];
        if (self.hasDefenderMonster) {
          [subBuilder mergeFrom:self.defenderMonster];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefenderMonster:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setMonsterIdDropped:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDefenderMonster {
  return result.hasDefenderMonster;
}
- (MinimumUserMonsterProto*) defenderMonster {
  return result.defenderMonster;
}
- (PvpMonsterProto_Builder*) setDefenderMonster:(MinimumUserMonsterProto*) value {
  result.hasDefenderMonster = YES;
  result.defenderMonster = value;
  return self;
}
- (PvpMonsterProto_Builder*) setDefenderMonster_Builder:(MinimumUserMonsterProto_Builder*) builderForValue {
  return [self setDefenderMonster:[builderForValue build]];
}
- (PvpMonsterProto_Builder*) mergeDefenderMonster:(MinimumUserMonsterProto*) value {
  if (result.hasDefenderMonster &&
      result.defenderMonster != [MinimumUserMonsterProto defaultInstance]) {
    result.defenderMonster =
      [[[MinimumUserMonsterProto builderWithPrototype:result.defenderMonster] mergeFrom:value] buildPartial];
  } else {
    result.defenderMonster = value;
  }
  result.hasDefenderMonster = YES;
  return self;
}
- (PvpMonsterProto_Builder*) clearDefenderMonster {
  result.hasDefenderMonster = NO;
  result.defenderMonster = [MinimumUserMonsterProto defaultInstance];
  return self;
}
- (BOOL) hasMonsterIdDropped {
  return result.hasMonsterIdDropped;
}
- (int32_t) monsterIdDropped {
  return result.monsterIdDropped;
}
- (PvpMonsterProto_Builder*) setMonsterIdDropped:(int32_t) value {
  result.hasMonsterIdDropped = YES;
  result.monsterIdDropped = value;
  return self;
}
- (PvpMonsterProto_Builder*) clearMonsterIdDropped {
  result.hasMonsterIdDropped = NO;
  result.monsterIdDropped = 0;
  return self;
}
@end

@interface PvpHistoryProto ()
@property int64_t battleEndTime;
@property (strong) FullUserProto* attacker;
@property (strong) NSMutableArray * mutableAttackersMonstersList;
@property BOOL attackerWon;
@property int32_t defenderCashChange;
@property int32_t defenderOilChange;
@property BOOL exactedRevenge;
@property int32_t prospectiveCashWinnings;
@property int32_t prospectiveOilWinnings;
@property (strong) UserPvpLeagueProto* attackerBefore;
@property (strong) UserPvpLeagueProto* attackerAfter;
@property (strong) UserPvpLeagueProto* defenderBefore;
@property (strong) UserPvpLeagueProto* defenderAfter;
@end

@implementation PvpHistoryProto

- (BOOL) hasBattleEndTime {
  return !!hasBattleEndTime_;
}
- (void) setHasBattleEndTime:(BOOL) value_ {
  hasBattleEndTime_ = !!value_;
}
@synthesize battleEndTime;
- (BOOL) hasAttacker {
  return !!hasAttacker_;
}
- (void) setHasAttacker:(BOOL) value_ {
  hasAttacker_ = !!value_;
}
@synthesize attacker;
@synthesize mutableAttackersMonstersList;
@dynamic attackersMonstersList;
- (BOOL) hasAttackerWon {
  return !!hasAttackerWon_;
}
- (void) setHasAttackerWon:(BOOL) value_ {
  hasAttackerWon_ = !!value_;
}
- (BOOL) attackerWon {
  return !!attackerWon_;
}
- (void) setAttackerWon:(BOOL) value_ {
  attackerWon_ = !!value_;
}
- (BOOL) hasDefenderCashChange {
  return !!hasDefenderCashChange_;
}
- (void) setHasDefenderCashChange:(BOOL) value_ {
  hasDefenderCashChange_ = !!value_;
}
@synthesize defenderCashChange;
- (BOOL) hasDefenderOilChange {
  return !!hasDefenderOilChange_;
}
- (void) setHasDefenderOilChange:(BOOL) value_ {
  hasDefenderOilChange_ = !!value_;
}
@synthesize defenderOilChange;
- (BOOL) hasExactedRevenge {
  return !!hasExactedRevenge_;
}
- (void) setHasExactedRevenge:(BOOL) value_ {
  hasExactedRevenge_ = !!value_;
}
- (BOOL) exactedRevenge {
  return !!exactedRevenge_;
}
- (void) setExactedRevenge:(BOOL) value_ {
  exactedRevenge_ = !!value_;
}
- (BOOL) hasProspectiveCashWinnings {
  return !!hasProspectiveCashWinnings_;
}
- (void) setHasProspectiveCashWinnings:(BOOL) value_ {
  hasProspectiveCashWinnings_ = !!value_;
}
@synthesize prospectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings {
  return !!hasProspectiveOilWinnings_;
}
- (void) setHasProspectiveOilWinnings:(BOOL) value_ {
  hasProspectiveOilWinnings_ = !!value_;
}
@synthesize prospectiveOilWinnings;
- (BOOL) hasAttackerBefore {
  return !!hasAttackerBefore_;
}
- (void) setHasAttackerBefore:(BOOL) value_ {
  hasAttackerBefore_ = !!value_;
}
@synthesize attackerBefore;
- (BOOL) hasAttackerAfter {
  return !!hasAttackerAfter_;
}
- (void) setHasAttackerAfter:(BOOL) value_ {
  hasAttackerAfter_ = !!value_;
}
@synthesize attackerAfter;
- (BOOL) hasDefenderBefore {
  return !!hasDefenderBefore_;
}
- (void) setHasDefenderBefore:(BOOL) value_ {
  hasDefenderBefore_ = !!value_;
}
@synthesize defenderBefore;
- (BOOL) hasDefenderAfter {
  return !!hasDefenderAfter_;
}
- (void) setHasDefenderAfter:(BOOL) value_ {
  hasDefenderAfter_ = !!value_;
}
@synthesize defenderAfter;
- (id) init {
  if ((self = [super init])) {
    self.battleEndTime = 0L;
    self.attacker = [FullUserProto defaultInstance];
    self.attackerWon = NO;
    self.defenderCashChange = 0;
    self.defenderOilChange = 0;
    self.exactedRevenge = NO;
    self.prospectiveCashWinnings = 0;
    self.prospectiveOilWinnings = 0;
    self.attackerBefore = [UserPvpLeagueProto defaultInstance];
    self.attackerAfter = [UserPvpLeagueProto defaultInstance];
    self.defenderBefore = [UserPvpLeagueProto defaultInstance];
    self.defenderAfter = [UserPvpLeagueProto defaultInstance];
  }
  return self;
}
static PvpHistoryProto* defaultPvpHistoryProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpHistoryProto class]) {
    defaultPvpHistoryProtoInstance = [[PvpHistoryProto alloc] init];
  }
}
+ (PvpHistoryProto*) defaultInstance {
  return defaultPvpHistoryProtoInstance;
}
- (PvpHistoryProto*) defaultInstance {
  return defaultPvpHistoryProtoInstance;
}
- (NSArray *)attackersMonstersList {
  return mutableAttackersMonstersList;
}
- (PvpMonsterProto*)attackersMonstersAtIndex:(NSUInteger)index {
  return [mutableAttackersMonstersList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAttacker) {
    [output writeMessage:1 value:self.attacker];
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttackerWon) {
    [output writeBool:3 value:self.attackerWon];
  }
  if (self.hasDefenderCashChange) {
    [output writeSInt32:4 value:self.defenderCashChange];
  }
  if (self.hasDefenderOilChange) {
    [output writeSInt32:5 value:self.defenderOilChange];
  }
  if (self.hasExactedRevenge) {
    [output writeBool:6 value:self.exactedRevenge];
  }
  if (self.hasProspectiveCashWinnings) {
    [output writeInt32:7 value:self.prospectiveCashWinnings];
  }
  if (self.hasProspectiveOilWinnings) {
    [output writeInt32:8 value:self.prospectiveOilWinnings];
  }
  if (self.hasBattleEndTime) {
    [output writeInt64:9 value:self.battleEndTime];
  }
  if (self.hasAttackerBefore) {
    [output writeMessage:10 value:self.attackerBefore];
  }
  if (self.hasAttackerAfter) {
    [output writeMessage:11 value:self.attackerAfter];
  }
  if (self.hasDefenderBefore) {
    [output writeMessage:12 value:self.defenderBefore];
  }
  if (self.hasDefenderAfter) {
    [output writeMessage:13 value:self.defenderAfter];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAttacker) {
    size_ += computeMessageSize(1, self.attacker);
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttackerWon) {
    size_ += computeBoolSize(3, self.attackerWon);
  }
  if (self.hasDefenderCashChange) {
    size_ += computeSInt32Size(4, self.defenderCashChange);
  }
  if (self.hasDefenderOilChange) {
    size_ += computeSInt32Size(5, self.defenderOilChange);
  }
  if (self.hasExactedRevenge) {
    size_ += computeBoolSize(6, self.exactedRevenge);
  }
  if (self.hasProspectiveCashWinnings) {
    size_ += computeInt32Size(7, self.prospectiveCashWinnings);
  }
  if (self.hasProspectiveOilWinnings) {
    size_ += computeInt32Size(8, self.prospectiveOilWinnings);
  }
  if (self.hasBattleEndTime) {
    size_ += computeInt64Size(9, self.battleEndTime);
  }
  if (self.hasAttackerBefore) {
    size_ += computeMessageSize(10, self.attackerBefore);
  }
  if (self.hasAttackerAfter) {
    size_ += computeMessageSize(11, self.attackerAfter);
  }
  if (self.hasDefenderBefore) {
    size_ += computeMessageSize(12, self.defenderBefore);
  }
  if (self.hasDefenderAfter) {
    size_ += computeMessageSize(13, self.defenderAfter);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpHistoryProto*) parseFromData:(NSData*) data {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromData:data] build];
}
+ (PvpHistoryProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromInputStream:input] build];
}
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto_Builder*) builder {
  return [[PvpHistoryProto_Builder alloc] init];
}
+ (PvpHistoryProto_Builder*) builderWithPrototype:(PvpHistoryProto*) prototype {
  return [[PvpHistoryProto builder] mergeFrom:prototype];
}
- (PvpHistoryProto_Builder*) builder {
  return [PvpHistoryProto builder];
}
- (PvpHistoryProto_Builder*) toBuilder {
  return [PvpHistoryProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAttacker) {
    [output appendFormat:@"%@%@ {\n", indent, @"attacker"];
    [self.attacker writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"attackersMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttackerWon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attackerWon", [NSNumber numberWithBool:self.attackerWon]];
  }
  if (self.hasDefenderCashChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderCashChange", [NSNumber numberWithInteger:self.defenderCashChange]];
  }
  if (self.hasDefenderOilChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderOilChange", [NSNumber numberWithInteger:self.defenderOilChange]];
  }
  if (self.hasExactedRevenge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"exactedRevenge", [NSNumber numberWithBool:self.exactedRevenge]];
  }
  if (self.hasProspectiveCashWinnings) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveCashWinnings", [NSNumber numberWithInteger:self.prospectiveCashWinnings]];
  }
  if (self.hasProspectiveOilWinnings) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveOilWinnings", [NSNumber numberWithInteger:self.prospectiveOilWinnings]];
  }
  if (self.hasBattleEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battleEndTime", [NSNumber numberWithLongLong:self.battleEndTime]];
  }
  if (self.hasAttackerBefore) {
    [output appendFormat:@"%@%@ {\n", indent, @"attackerBefore"];
    [self.attackerBefore writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttackerAfter) {
    [output appendFormat:@"%@%@ {\n", indent, @"attackerAfter"];
    [self.attackerAfter writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefenderBefore) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderBefore"];
    [self.defenderBefore writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefenderAfter) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderAfter"];
    [self.defenderAfter writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpHistoryProto class]]) {
    return NO;
  }
  PvpHistoryProto *otherMessage = other;
  return
      self.hasAttacker == otherMessage.hasAttacker &&
      (!self.hasAttacker || [self.attacker isEqual:otherMessage.attacker]) &&
      [self.attackersMonstersList isEqualToArray:otherMessage.attackersMonstersList] &&
      self.hasAttackerWon == otherMessage.hasAttackerWon &&
      (!self.hasAttackerWon || self.attackerWon == otherMessage.attackerWon) &&
      self.hasDefenderCashChange == otherMessage.hasDefenderCashChange &&
      (!self.hasDefenderCashChange || self.defenderCashChange == otherMessage.defenderCashChange) &&
      self.hasDefenderOilChange == otherMessage.hasDefenderOilChange &&
      (!self.hasDefenderOilChange || self.defenderOilChange == otherMessage.defenderOilChange) &&
      self.hasExactedRevenge == otherMessage.hasExactedRevenge &&
      (!self.hasExactedRevenge || self.exactedRevenge == otherMessage.exactedRevenge) &&
      self.hasProspectiveCashWinnings == otherMessage.hasProspectiveCashWinnings &&
      (!self.hasProspectiveCashWinnings || self.prospectiveCashWinnings == otherMessage.prospectiveCashWinnings) &&
      self.hasProspectiveOilWinnings == otherMessage.hasProspectiveOilWinnings &&
      (!self.hasProspectiveOilWinnings || self.prospectiveOilWinnings == otherMessage.prospectiveOilWinnings) &&
      self.hasBattleEndTime == otherMessage.hasBattleEndTime &&
      (!self.hasBattleEndTime || self.battleEndTime == otherMessage.battleEndTime) &&
      self.hasAttackerBefore == otherMessage.hasAttackerBefore &&
      (!self.hasAttackerBefore || [self.attackerBefore isEqual:otherMessage.attackerBefore]) &&
      self.hasAttackerAfter == otherMessage.hasAttackerAfter &&
      (!self.hasAttackerAfter || [self.attackerAfter isEqual:otherMessage.attackerAfter]) &&
      self.hasDefenderBefore == otherMessage.hasDefenderBefore &&
      (!self.hasDefenderBefore || [self.defenderBefore isEqual:otherMessage.defenderBefore]) &&
      self.hasDefenderAfter == otherMessage.hasDefenderAfter &&
      (!self.hasDefenderAfter || [self.defenderAfter isEqual:otherMessage.defenderAfter]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAttacker) {
    hashCode = hashCode * 31 + [self.attacker hash];
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttackerWon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.attackerWon] hash];
  }
  if (self.hasDefenderCashChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defenderCashChange] hash];
  }
  if (self.hasDefenderOilChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defenderOilChange] hash];
  }
  if (self.hasExactedRevenge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.exactedRevenge] hash];
  }
  if (self.hasProspectiveCashWinnings) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveCashWinnings] hash];
  }
  if (self.hasProspectiveOilWinnings) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveOilWinnings] hash];
  }
  if (self.hasBattleEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.battleEndTime] hash];
  }
  if (self.hasAttackerBefore) {
    hashCode = hashCode * 31 + [self.attackerBefore hash];
  }
  if (self.hasAttackerAfter) {
    hashCode = hashCode * 31 + [self.attackerAfter hash];
  }
  if (self.hasDefenderBefore) {
    hashCode = hashCode * 31 + [self.defenderBefore hash];
  }
  if (self.hasDefenderAfter) {
    hashCode = hashCode * 31 + [self.defenderAfter hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpHistoryProto_Builder()
@property (strong) PvpHistoryProto* result;
@end

@implementation PvpHistoryProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpHistoryProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpHistoryProto_Builder*) clear {
  self.result = [[PvpHistoryProto alloc] init];
  return self;
}
- (PvpHistoryProto_Builder*) clone {
  return [PvpHistoryProto builderWithPrototype:result];
}
- (PvpHistoryProto*) defaultInstance {
  return [PvpHistoryProto defaultInstance];
}
- (PvpHistoryProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpHistoryProto*) buildPartial {
  PvpHistoryProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpHistoryProto_Builder*) mergeFrom:(PvpHistoryProto*) other {
  if (other == [PvpHistoryProto defaultInstance]) {
    return self;
  }
  if (other.hasBattleEndTime) {
    [self setBattleEndTime:other.battleEndTime];
  }
  if (other.hasAttacker) {
    [self mergeAttacker:other.attacker];
  }
  if (other.mutableAttackersMonstersList.count > 0) {
    if (result.mutableAttackersMonstersList == nil) {
      result.mutableAttackersMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableAttackersMonstersList];
    } else {
      [result.mutableAttackersMonstersList addObjectsFromArray:other.mutableAttackersMonstersList];
    }
  }
  if (other.hasAttackerWon) {
    [self setAttackerWon:other.attackerWon];
  }
  if (other.hasDefenderCashChange) {
    [self setDefenderCashChange:other.defenderCashChange];
  }
  if (other.hasDefenderOilChange) {
    [self setDefenderOilChange:other.defenderOilChange];
  }
  if (other.hasExactedRevenge) {
    [self setExactedRevenge:other.exactedRevenge];
  }
  if (other.hasProspectiveCashWinnings) {
    [self setProspectiveCashWinnings:other.prospectiveCashWinnings];
  }
  if (other.hasProspectiveOilWinnings) {
    [self setProspectiveOilWinnings:other.prospectiveOilWinnings];
  }
  if (other.hasAttackerBefore) {
    [self mergeAttackerBefore:other.attackerBefore];
  }
  if (other.hasAttackerAfter) {
    [self mergeAttackerAfter:other.attackerAfter];
  }
  if (other.hasDefenderBefore) {
    [self mergeDefenderBefore:other.defenderBefore];
  }
  if (other.hasDefenderAfter) {
    [self mergeDefenderAfter:other.defenderAfter];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FullUserProto_Builder* subBuilder = [FullUserProto builder];
        if (self.hasAttacker) {
          [subBuilder mergeFrom:self.attacker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttacker:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PvpMonsterProto_Builder* subBuilder = [PvpMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttackersMonsters:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setAttackerWon:[input readBool]];
        break;
      }
      case 32: {
        [self setDefenderCashChange:[input readSInt32]];
        break;
      }
      case 40: {
        [self setDefenderOilChange:[input readSInt32]];
        break;
      }
      case 48: {
        [self setExactedRevenge:[input readBool]];
        break;
      }
      case 56: {
        [self setProspectiveCashWinnings:[input readInt32]];
        break;
      }
      case 64: {
        [self setProspectiveOilWinnings:[input readInt32]];
        break;
      }
      case 72: {
        [self setBattleEndTime:[input readInt64]];
        break;
      }
      case 82: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasAttackerBefore) {
          [subBuilder mergeFrom:self.attackerBefore];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttackerBefore:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasAttackerAfter) {
          [subBuilder mergeFrom:self.attackerAfter];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttackerAfter:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasDefenderBefore) {
          [subBuilder mergeFrom:self.defenderBefore];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefenderBefore:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasDefenderAfter) {
          [subBuilder mergeFrom:self.defenderAfter];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefenderAfter:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasBattleEndTime {
  return result.hasBattleEndTime;
}
- (int64_t) battleEndTime {
  return result.battleEndTime;
}
- (PvpHistoryProto_Builder*) setBattleEndTime:(int64_t) value {
  result.hasBattleEndTime = YES;
  result.battleEndTime = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearBattleEndTime {
  result.hasBattleEndTime = NO;
  result.battleEndTime = 0L;
  return self;
}
- (BOOL) hasAttacker {
  return result.hasAttacker;
}
- (FullUserProto*) attacker {
  return result.attacker;
}
- (PvpHistoryProto_Builder*) setAttacker:(FullUserProto*) value {
  result.hasAttacker = YES;
  result.attacker = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttacker_Builder:(FullUserProto_Builder*) builderForValue {
  return [self setAttacker:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttacker:(FullUserProto*) value {
  if (result.hasAttacker &&
      result.attacker != [FullUserProto defaultInstance]) {
    result.attacker =
      [[[FullUserProto builderWithPrototype:result.attacker] mergeFrom:value] buildPartial];
  } else {
    result.attacker = value;
  }
  result.hasAttacker = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttacker {
  result.hasAttacker = NO;
  result.attacker = [FullUserProto defaultInstance];
  return self;
}
- (NSMutableArray *)attackersMonstersList {
  return result.mutableAttackersMonstersList;
}
- (PvpMonsterProto*)attackersMonstersAtIndex:(NSUInteger)index {
  return [result attackersMonstersAtIndex:index];
}
- (PvpHistoryProto_Builder *)addAttackersMonsters:(PvpMonsterProto*)value {
  if (result.mutableAttackersMonstersList == nil) {
    result.mutableAttackersMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableAttackersMonstersList addObject:value];
  return self;
}
- (PvpHistoryProto_Builder *)addAllAttackersMonsters:(NSArray *)array {
  if (result.mutableAttackersMonstersList == nil) {
    result.mutableAttackersMonstersList = [NSMutableArray array];
  }
  [result.mutableAttackersMonstersList addObjectsFromArray:array];
  return self;
}
- (PvpHistoryProto_Builder *)clearAttackersMonsters {
  result.mutableAttackersMonstersList = nil;
  return self;
}
- (BOOL) hasAttackerWon {
  return result.hasAttackerWon;
}
- (BOOL) attackerWon {
  return result.attackerWon;
}
- (PvpHistoryProto_Builder*) setAttackerWon:(BOOL) value {
  result.hasAttackerWon = YES;
  result.attackerWon = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerWon {
  result.hasAttackerWon = NO;
  result.attackerWon = NO;
  return self;
}
- (BOOL) hasDefenderCashChange {
  return result.hasDefenderCashChange;
}
- (int32_t) defenderCashChange {
  return result.defenderCashChange;
}
- (PvpHistoryProto_Builder*) setDefenderCashChange:(int32_t) value {
  result.hasDefenderCashChange = YES;
  result.defenderCashChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderCashChange {
  result.hasDefenderCashChange = NO;
  result.defenderCashChange = 0;
  return self;
}
- (BOOL) hasDefenderOilChange {
  return result.hasDefenderOilChange;
}
- (int32_t) defenderOilChange {
  return result.defenderOilChange;
}
- (PvpHistoryProto_Builder*) setDefenderOilChange:(int32_t) value {
  result.hasDefenderOilChange = YES;
  result.defenderOilChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderOilChange {
  result.hasDefenderOilChange = NO;
  result.defenderOilChange = 0;
  return self;
}
- (BOOL) hasExactedRevenge {
  return result.hasExactedRevenge;
}
- (BOOL) exactedRevenge {
  return result.exactedRevenge;
}
- (PvpHistoryProto_Builder*) setExactedRevenge:(BOOL) value {
  result.hasExactedRevenge = YES;
  result.exactedRevenge = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearExactedRevenge {
  result.hasExactedRevenge = NO;
  result.exactedRevenge = NO;
  return self;
}
- (BOOL) hasProspectiveCashWinnings {
  return result.hasProspectiveCashWinnings;
}
- (int32_t) prospectiveCashWinnings {
  return result.prospectiveCashWinnings;
}
- (PvpHistoryProto_Builder*) setProspectiveCashWinnings:(int32_t) value {
  result.hasProspectiveCashWinnings = YES;
  result.prospectiveCashWinnings = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearProspectiveCashWinnings {
  result.hasProspectiveCashWinnings = NO;
  result.prospectiveCashWinnings = 0;
  return self;
}
- (BOOL) hasProspectiveOilWinnings {
  return result.hasProspectiveOilWinnings;
}
- (int32_t) prospectiveOilWinnings {
  return result.prospectiveOilWinnings;
}
- (PvpHistoryProto_Builder*) setProspectiveOilWinnings:(int32_t) value {
  result.hasProspectiveOilWinnings = YES;
  result.prospectiveOilWinnings = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearProspectiveOilWinnings {
  result.hasProspectiveOilWinnings = NO;
  result.prospectiveOilWinnings = 0;
  return self;
}
- (BOOL) hasAttackerBefore {
  return result.hasAttackerBefore;
}
- (UserPvpLeagueProto*) attackerBefore {
  return result.attackerBefore;
}
- (PvpHistoryProto_Builder*) setAttackerBefore:(UserPvpLeagueProto*) value {
  result.hasAttackerBefore = YES;
  result.attackerBefore = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttackerBefore_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setAttackerBefore:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttackerBefore:(UserPvpLeagueProto*) value {
  if (result.hasAttackerBefore &&
      result.attackerBefore != [UserPvpLeagueProto defaultInstance]) {
    result.attackerBefore =
      [[[UserPvpLeagueProto builderWithPrototype:result.attackerBefore] mergeFrom:value] buildPartial];
  } else {
    result.attackerBefore = value;
  }
  result.hasAttackerBefore = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerBefore {
  result.hasAttackerBefore = NO;
  result.attackerBefore = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasAttackerAfter {
  return result.hasAttackerAfter;
}
- (UserPvpLeagueProto*) attackerAfter {
  return result.attackerAfter;
}
- (PvpHistoryProto_Builder*) setAttackerAfter:(UserPvpLeagueProto*) value {
  result.hasAttackerAfter = YES;
  result.attackerAfter = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttackerAfter_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setAttackerAfter:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttackerAfter:(UserPvpLeagueProto*) value {
  if (result.hasAttackerAfter &&
      result.attackerAfter != [UserPvpLeagueProto defaultInstance]) {
    result.attackerAfter =
      [[[UserPvpLeagueProto builderWithPrototype:result.attackerAfter] mergeFrom:value] buildPartial];
  } else {
    result.attackerAfter = value;
  }
  result.hasAttackerAfter = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerAfter {
  result.hasAttackerAfter = NO;
  result.attackerAfter = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefenderBefore {
  return result.hasDefenderBefore;
}
- (UserPvpLeagueProto*) defenderBefore {
  return result.defenderBefore;
}
- (PvpHistoryProto_Builder*) setDefenderBefore:(UserPvpLeagueProto*) value {
  result.hasDefenderBefore = YES;
  result.defenderBefore = value;
  return self;
}
- (PvpHistoryProto_Builder*) setDefenderBefore_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setDefenderBefore:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeDefenderBefore:(UserPvpLeagueProto*) value {
  if (result.hasDefenderBefore &&
      result.defenderBefore != [UserPvpLeagueProto defaultInstance]) {
    result.defenderBefore =
      [[[UserPvpLeagueProto builderWithPrototype:result.defenderBefore] mergeFrom:value] buildPartial];
  } else {
    result.defenderBefore = value;
  }
  result.hasDefenderBefore = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderBefore {
  result.hasDefenderBefore = NO;
  result.defenderBefore = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefenderAfter {
  return result.hasDefenderAfter;
}
- (UserPvpLeagueProto*) defenderAfter {
  return result.defenderAfter;
}
- (PvpHistoryProto_Builder*) setDefenderAfter:(UserPvpLeagueProto*) value {
  result.hasDefenderAfter = YES;
  result.defenderAfter = value;
  return self;
}
- (PvpHistoryProto_Builder*) setDefenderAfter_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setDefenderAfter:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeDefenderAfter:(UserPvpLeagueProto*) value {
  if (result.hasDefenderAfter &&
      result.defenderAfter != [UserPvpLeagueProto defaultInstance]) {
    result.defenderAfter =
      [[[UserPvpLeagueProto builderWithPrototype:result.defenderAfter] mergeFrom:value] buildPartial];
  } else {
    result.defenderAfter = value;
  }
  result.hasDefenderAfter = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderAfter {
  result.hasDefenderAfter = NO;
  result.defenderAfter = [UserPvpLeagueProto defaultInstance];
  return self;
}
@end

@interface PvpLeagueProto ()
@property int32_t leagueId;
@property (strong) NSString* leagueName;
@property (strong) NSString* imgPrefix;
@property (strong) NSString* description;
@end

@implementation PvpLeagueProto

- (BOOL) hasLeagueId {
  return !!hasLeagueId_;
}
- (void) setHasLeagueId:(BOOL) value_ {
  hasLeagueId_ = !!value_;
}
@synthesize leagueId;
- (BOOL) hasLeagueName {
  return !!hasLeagueName_;
}
- (void) setHasLeagueName:(BOOL) value_ {
  hasLeagueName_ = !!value_;
}
@synthesize leagueName;
- (BOOL) hasImgPrefix {
  return !!hasImgPrefix_;
}
- (void) setHasImgPrefix:(BOOL) value_ {
  hasImgPrefix_ = !!value_;
}
@synthesize imgPrefix;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (id) init {
  if ((self = [super init])) {
    self.leagueId = 0;
    self.leagueName = @"";
    self.imgPrefix = @"";
    self.description = @"";
  }
  return self;
}
static PvpLeagueProto* defaultPvpLeagueProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpLeagueProto class]) {
    defaultPvpLeagueProtoInstance = [[PvpLeagueProto alloc] init];
  }
}
+ (PvpLeagueProto*) defaultInstance {
  return defaultPvpLeagueProtoInstance;
}
- (PvpLeagueProto*) defaultInstance {
  return defaultPvpLeagueProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLeagueId) {
    [output writeInt32:1 value:self.leagueId];
  }
  if (self.hasLeagueName) {
    [output writeString:2 value:self.leagueName];
  }
  if (self.hasImgPrefix) {
    [output writeString:3 value:self.imgPrefix];
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLeagueId) {
    size_ += computeInt32Size(1, self.leagueId);
  }
  if (self.hasLeagueName) {
    size_ += computeStringSize(2, self.leagueName);
  }
  if (self.hasImgPrefix) {
    size_ += computeStringSize(3, self.imgPrefix);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(5, self.description);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpLeagueProto*) parseFromData:(NSData*) data {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromData:data] build];
}
+ (PvpLeagueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpLeagueProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromInputStream:input] build];
}
+ (PvpLeagueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpLeagueProto_Builder*) builder {
  return [[PvpLeagueProto_Builder alloc] init];
}
+ (PvpLeagueProto_Builder*) builderWithPrototype:(PvpLeagueProto*) prototype {
  return [[PvpLeagueProto builder] mergeFrom:prototype];
}
- (PvpLeagueProto_Builder*) builder {
  return [PvpLeagueProto builder];
}
- (PvpLeagueProto_Builder*) toBuilder {
  return [PvpLeagueProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLeagueId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueId", [NSNumber numberWithInteger:self.leagueId]];
  }
  if (self.hasLeagueName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueName", self.leagueName];
  }
  if (self.hasImgPrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgPrefix", self.imgPrefix];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpLeagueProto class]]) {
    return NO;
  }
  PvpLeagueProto *otherMessage = other;
  return
      self.hasLeagueId == otherMessage.hasLeagueId &&
      (!self.hasLeagueId || self.leagueId == otherMessage.leagueId) &&
      self.hasLeagueName == otherMessage.hasLeagueName &&
      (!self.hasLeagueName || [self.leagueName isEqual:otherMessage.leagueName]) &&
      self.hasImgPrefix == otherMessage.hasImgPrefix &&
      (!self.hasImgPrefix || [self.imgPrefix isEqual:otherMessage.imgPrefix]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLeagueId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.leagueId] hash];
  }
  if (self.hasLeagueName) {
    hashCode = hashCode * 31 + [self.leagueName hash];
  }
  if (self.hasImgPrefix) {
    hashCode = hashCode * 31 + [self.imgPrefix hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpLeagueProto_Builder()
@property (strong) PvpLeagueProto* result;
@end

@implementation PvpLeagueProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpLeagueProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpLeagueProto_Builder*) clear {
  self.result = [[PvpLeagueProto alloc] init];
  return self;
}
- (PvpLeagueProto_Builder*) clone {
  return [PvpLeagueProto builderWithPrototype:result];
}
- (PvpLeagueProto*) defaultInstance {
  return [PvpLeagueProto defaultInstance];
}
- (PvpLeagueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpLeagueProto*) buildPartial {
  PvpLeagueProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpLeagueProto_Builder*) mergeFrom:(PvpLeagueProto*) other {
  if (other == [PvpLeagueProto defaultInstance]) {
    return self;
  }
  if (other.hasLeagueId) {
    [self setLeagueId:other.leagueId];
  }
  if (other.hasLeagueName) {
    [self setLeagueName:other.leagueName];
  }
  if (other.hasImgPrefix) {
    [self setImgPrefix:other.imgPrefix];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLeagueId:[input readInt32]];
        break;
      }
      case 18: {
        [self setLeagueName:[input readString]];
        break;
      }
      case 26: {
        [self setImgPrefix:[input readString]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLeagueId {
  return result.hasLeagueId;
}
- (int32_t) leagueId {
  return result.leagueId;
}
- (PvpLeagueProto_Builder*) setLeagueId:(int32_t) value {
  result.hasLeagueId = YES;
  result.leagueId = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearLeagueId {
  result.hasLeagueId = NO;
  result.leagueId = 0;
  return self;
}
- (BOOL) hasLeagueName {
  return result.hasLeagueName;
}
- (NSString*) leagueName {
  return result.leagueName;
}
- (PvpLeagueProto_Builder*) setLeagueName:(NSString*) value {
  result.hasLeagueName = YES;
  result.leagueName = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearLeagueName {
  result.hasLeagueName = NO;
  result.leagueName = @"";
  return self;
}
- (BOOL) hasImgPrefix {
  return result.hasImgPrefix;
}
- (NSString*) imgPrefix {
  return result.imgPrefix;
}
- (PvpLeagueProto_Builder*) setImgPrefix:(NSString*) value {
  result.hasImgPrefix = YES;
  result.imgPrefix = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearImgPrefix {
  result.hasImgPrefix = NO;
  result.imgPrefix = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (PvpLeagueProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
