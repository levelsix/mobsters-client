// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Battle.pb.h"

@implementation BattleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BattleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BattleResultIsValidValue(BattleResult value) {
  switch (value) {
    case BattleResultAttackerWin:
    case BattleResultDefenderWin:
    case BattleResultAttackerFlee:
      return YES;
    default:
      return NO;
  }
}
@interface MinimumUserProtoWithBattleHistory ()
@property (retain) MinimumUserProtoWithLevel* minUserProtoWithLevel;
@property int32_t battlesWon;
@property int32_t battlesLost;
@property int32_t battlesFled;
@end

@implementation MinimumUserProtoWithBattleHistory

- (BOOL) hasMinUserProtoWithLevel {
  return !!hasMinUserProtoWithLevel_;
}
- (void) setHasMinUserProtoWithLevel:(BOOL) value {
  hasMinUserProtoWithLevel_ = !!value;
}
@synthesize minUserProtoWithLevel;
- (BOOL) hasBattlesWon {
  return !!hasBattlesWon_;
}
- (void) setHasBattlesWon:(BOOL) value {
  hasBattlesWon_ = !!value;
}
@synthesize battlesWon;
- (BOOL) hasBattlesLost {
  return !!hasBattlesLost_;
}
- (void) setHasBattlesLost:(BOOL) value {
  hasBattlesLost_ = !!value;
}
@synthesize battlesLost;
- (BOOL) hasBattlesFled {
  return !!hasBattlesFled_;
}
- (void) setHasBattlesFled:(BOOL) value {
  hasBattlesFled_ = !!value;
}
@synthesize battlesFled;
- (void) dealloc {
  self.minUserProtoWithLevel = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.minUserProtoWithLevel = [MinimumUserProtoWithLevel defaultInstance];
    self.battlesWon = 0;
    self.battlesLost = 0;
    self.battlesFled = 0;
  }
  return self;
}
static MinimumUserProtoWithBattleHistory* defaultMinimumUserProtoWithBattleHistoryInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserProtoWithBattleHistory class]) {
    defaultMinimumUserProtoWithBattleHistoryInstance = [[MinimumUserProtoWithBattleHistory alloc] init];
  }
}
+ (MinimumUserProtoWithBattleHistory*) defaultInstance {
  return defaultMinimumUserProtoWithBattleHistoryInstance;
}
- (MinimumUserProtoWithBattleHistory*) defaultInstance {
  return defaultMinimumUserProtoWithBattleHistoryInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMinUserProtoWithLevel) {
    [output writeMessage:1 value:self.minUserProtoWithLevel];
  }
  if (self.hasBattlesWon) {
    [output writeInt32:2 value:self.battlesWon];
  }
  if (self.hasBattlesLost) {
    [output writeInt32:3 value:self.battlesLost];
  }
  if (self.hasBattlesFled) {
    [output writeInt32:4 value:self.battlesFled];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMinUserProtoWithLevel) {
    size += computeMessageSize(1, self.minUserProtoWithLevel);
  }
  if (self.hasBattlesWon) {
    size += computeInt32Size(2, self.battlesWon);
  }
  if (self.hasBattlesLost) {
    size += computeInt32Size(3, self.battlesLost);
  }
  if (self.hasBattlesFled) {
    size += computeInt32Size(4, self.battlesFled);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MinimumUserProtoWithBattleHistory*) parseFromData:(NSData*) data {
  return (MinimumUserProtoWithBattleHistory*)[[[MinimumUserProtoWithBattleHistory builder] mergeFromData:data] build];
}
+ (MinimumUserProtoWithBattleHistory*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithBattleHistory*)[[[MinimumUserProtoWithBattleHistory builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithBattleHistory*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserProtoWithBattleHistory*)[[[MinimumUserProtoWithBattleHistory builder] mergeFromInputStream:input] build];
}
+ (MinimumUserProtoWithBattleHistory*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithBattleHistory*)[[[MinimumUserProtoWithBattleHistory builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithBattleHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserProtoWithBattleHistory*)[[[MinimumUserProtoWithBattleHistory builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserProtoWithBattleHistory*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithBattleHistory*)[[[MinimumUserProtoWithBattleHistory builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithBattleHistory_Builder*) builder {
  return [[[MinimumUserProtoWithBattleHistory_Builder alloc] init] autorelease];
}
+ (MinimumUserProtoWithBattleHistory_Builder*) builderWithPrototype:(MinimumUserProtoWithBattleHistory*) prototype {
  return [[MinimumUserProtoWithBattleHistory builder] mergeFrom:prototype];
}
- (MinimumUserProtoWithBattleHistory_Builder*) builder {
  return [MinimumUserProtoWithBattleHistory builder];
}
@end

@interface MinimumUserProtoWithBattleHistory_Builder()
@property (retain) MinimumUserProtoWithBattleHistory* result;
@end

@implementation MinimumUserProtoWithBattleHistory_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MinimumUserProtoWithBattleHistory alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserProtoWithBattleHistory_Builder*) clear {
  self.result = [[[MinimumUserProtoWithBattleHistory alloc] init] autorelease];
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) clone {
  return [MinimumUserProtoWithBattleHistory builderWithPrototype:result];
}
- (MinimumUserProtoWithBattleHistory*) defaultInstance {
  return [MinimumUserProtoWithBattleHistory defaultInstance];
}
- (MinimumUserProtoWithBattleHistory*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserProtoWithBattleHistory*) buildPartial {
  MinimumUserProtoWithBattleHistory* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MinimumUserProtoWithBattleHistory_Builder*) mergeFrom:(MinimumUserProtoWithBattleHistory*) other {
  if (other == [MinimumUserProtoWithBattleHistory defaultInstance]) {
    return self;
  }
  if (other.hasMinUserProtoWithLevel) {
    [self mergeMinUserProtoWithLevel:other.minUserProtoWithLevel];
  }
  if (other.hasBattlesWon) {
    [self setBattlesWon:other.battlesWon];
  }
  if (other.hasBattlesLost) {
    [self setBattlesLost:other.battlesLost];
  }
  if (other.hasBattlesFled) {
    [self setBattlesFled:other.battlesFled];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserProtoWithBattleHistory_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProtoWithLevel_Builder* subBuilder = [MinimumUserProtoWithLevel builder];
        if (self.hasMinUserProtoWithLevel) {
          [subBuilder mergeFrom:self.minUserProtoWithLevel];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMinUserProtoWithLevel:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setBattlesWon:[input readInt32]];
        break;
      }
      case 24: {
        [self setBattlesLost:[input readInt32]];
        break;
      }
      case 32: {
        [self setBattlesFled:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMinUserProtoWithLevel {
  return result.hasMinUserProtoWithLevel;
}
- (MinimumUserProtoWithLevel*) minUserProtoWithLevel {
  return result.minUserProtoWithLevel;
}
- (MinimumUserProtoWithBattleHistory_Builder*) setMinUserProtoWithLevel:(MinimumUserProtoWithLevel*) value {
  result.hasMinUserProtoWithLevel = YES;
  result.minUserProtoWithLevel = value;
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) setMinUserProtoWithLevelBuilder:(MinimumUserProtoWithLevel_Builder*) builderForValue {
  return [self setMinUserProtoWithLevel:[builderForValue build]];
}
- (MinimumUserProtoWithBattleHistory_Builder*) mergeMinUserProtoWithLevel:(MinimumUserProtoWithLevel*) value {
  if (result.hasMinUserProtoWithLevel &&
      result.minUserProtoWithLevel != [MinimumUserProtoWithLevel defaultInstance]) {
    result.minUserProtoWithLevel =
      [[[MinimumUserProtoWithLevel builderWithPrototype:result.minUserProtoWithLevel] mergeFrom:value] buildPartial];
  } else {
    result.minUserProtoWithLevel = value;
  }
  result.hasMinUserProtoWithLevel = YES;
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) clearMinUserProtoWithLevel {
  result.hasMinUserProtoWithLevel = NO;
  result.minUserProtoWithLevel = [MinimumUserProtoWithLevel defaultInstance];
  return self;
}
- (BOOL) hasBattlesWon {
  return result.hasBattlesWon;
}
- (int32_t) battlesWon {
  return result.battlesWon;
}
- (MinimumUserProtoWithBattleHistory_Builder*) setBattlesWon:(int32_t) value {
  result.hasBattlesWon = YES;
  result.battlesWon = value;
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) clearBattlesWon {
  result.hasBattlesWon = NO;
  result.battlesWon = 0;
  return self;
}
- (BOOL) hasBattlesLost {
  return result.hasBattlesLost;
}
- (int32_t) battlesLost {
  return result.battlesLost;
}
- (MinimumUserProtoWithBattleHistory_Builder*) setBattlesLost:(int32_t) value {
  result.hasBattlesLost = YES;
  result.battlesLost = value;
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) clearBattlesLost {
  result.hasBattlesLost = NO;
  result.battlesLost = 0;
  return self;
}
- (BOOL) hasBattlesFled {
  return result.hasBattlesFled;
}
- (int32_t) battlesFled {
  return result.battlesFled;
}
- (MinimumUserProtoWithBattleHistory_Builder*) setBattlesFled:(int32_t) value {
  result.hasBattlesFled = YES;
  result.battlesFled = value;
  return self;
}
- (MinimumUserProtoWithBattleHistory_Builder*) clearBattlesFled {
  result.hasBattlesFled = NO;
  result.battlesFled = 0;
  return self;
}
@end

@interface PvpProto ()
@property (retain) MinimumUserProtoWithLevel* defender;
@property int32_t curElo;
@property (retain) NSMutableArray* mutableDefenderMonstersList;
@property int32_t prospectiveCashWinnings;
@property int32_t prospectiveOilWinnings;
@end

@implementation PvpProto

- (BOOL) hasDefender {
  return !!hasDefender_;
}
- (void) setHasDefender:(BOOL) value {
  hasDefender_ = !!value;
}
@synthesize defender;
- (BOOL) hasCurElo {
  return !!hasCurElo_;
}
- (void) setHasCurElo:(BOOL) value {
  hasCurElo_ = !!value;
}
@synthesize curElo;
@synthesize mutableDefenderMonstersList;
- (BOOL) hasProspectiveCashWinnings {
  return !!hasProspectiveCashWinnings_;
}
- (void) setHasProspectiveCashWinnings:(BOOL) value {
  hasProspectiveCashWinnings_ = !!value;
}
@synthesize prospectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings {
  return !!hasProspectiveOilWinnings_;
}
- (void) setHasProspectiveOilWinnings:(BOOL) value {
  hasProspectiveOilWinnings_ = !!value;
}
@synthesize prospectiveOilWinnings;
- (void) dealloc {
  self.defender = nil;
  self.mutableDefenderMonstersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.defender = [MinimumUserProtoWithLevel defaultInstance];
    self.curElo = 0;
    self.prospectiveCashWinnings = 0;
    self.prospectiveOilWinnings = 0;
  }
  return self;
}
static PvpProto* defaultPvpProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpProto class]) {
    defaultPvpProtoInstance = [[PvpProto alloc] init];
  }
}
+ (PvpProto*) defaultInstance {
  return defaultPvpProtoInstance;
}
- (PvpProto*) defaultInstance {
  return defaultPvpProtoInstance;
}
- (NSArray*) defenderMonstersList {
  return mutableDefenderMonstersList;
}
- (MinimumUserMonsterProto*) defenderMonstersAtIndex:(int32_t) index {
  id value = [mutableDefenderMonstersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDefender) {
    [output writeMessage:1 value:self.defender];
  }
  if (self.hasCurElo) {
    [output writeInt32:2 value:self.curElo];
  }
  for (MinimumUserMonsterProto* element in self.defenderMonstersList) {
    [output writeMessage:3 value:element];
  }
  if (self.hasProspectiveCashWinnings) {
    [output writeInt32:4 value:self.prospectiveCashWinnings];
  }
  if (self.hasProspectiveOilWinnings) {
    [output writeInt32:5 value:self.prospectiveOilWinnings];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasDefender) {
    size += computeMessageSize(1, self.defender);
  }
  if (self.hasCurElo) {
    size += computeInt32Size(2, self.curElo);
  }
  for (MinimumUserMonsterProto* element in self.defenderMonstersList) {
    size += computeMessageSize(3, element);
  }
  if (self.hasProspectiveCashWinnings) {
    size += computeInt32Size(4, self.prospectiveCashWinnings);
  }
  if (self.hasProspectiveOilWinnings) {
    size += computeInt32Size(5, self.prospectiveOilWinnings);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PvpProto*) parseFromData:(NSData*) data {
  return (PvpProto*)[[[PvpProto builder] mergeFromData:data] build];
}
+ (PvpProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpProto*)[[[PvpProto builder] mergeFromInputStream:input] build];
}
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpProto*)[[[PvpProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpProto_Builder*) builder {
  return [[[PvpProto_Builder alloc] init] autorelease];
}
+ (PvpProto_Builder*) builderWithPrototype:(PvpProto*) prototype {
  return [[PvpProto builder] mergeFrom:prototype];
}
- (PvpProto_Builder*) builder {
  return [PvpProto builder];
}
@end

@interface PvpProto_Builder()
@property (retain) PvpProto* result;
@end

@implementation PvpProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PvpProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpProto_Builder*) clear {
  self.result = [[[PvpProto alloc] init] autorelease];
  return self;
}
- (PvpProto_Builder*) clone {
  return [PvpProto builderWithPrototype:result];
}
- (PvpProto*) defaultInstance {
  return [PvpProto defaultInstance];
}
- (PvpProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpProto*) buildPartial {
  PvpProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PvpProto_Builder*) mergeFrom:(PvpProto*) other {
  if (other == [PvpProto defaultInstance]) {
    return self;
  }
  if (other.hasDefender) {
    [self mergeDefender:other.defender];
  }
  if (other.hasCurElo) {
    [self setCurElo:other.curElo];
  }
  if (other.mutableDefenderMonstersList.count > 0) {
    if (result.mutableDefenderMonstersList == nil) {
      result.mutableDefenderMonstersList = [NSMutableArray array];
    }
    [result.mutableDefenderMonstersList addObjectsFromArray:other.mutableDefenderMonstersList];
  }
  if (other.hasProspectiveCashWinnings) {
    [self setProspectiveCashWinnings:other.prospectiveCashWinnings];
  }
  if (other.hasProspectiveOilWinnings) {
    [self setProspectiveOilWinnings:other.prospectiveOilWinnings];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProtoWithLevel_Builder* subBuilder = [MinimumUserProtoWithLevel builder];
        if (self.hasDefender) {
          [subBuilder mergeFrom:self.defender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefender:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setCurElo:[input readInt32]];
        break;
      }
      case 26: {
        MinimumUserMonsterProto_Builder* subBuilder = [MinimumUserMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDefenderMonsters:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setProspectiveCashWinnings:[input readInt32]];
        break;
      }
      case 40: {
        [self setProspectiveOilWinnings:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDefender {
  return result.hasDefender;
}
- (MinimumUserProtoWithLevel*) defender {
  return result.defender;
}
- (PvpProto_Builder*) setDefender:(MinimumUserProtoWithLevel*) value {
  result.hasDefender = YES;
  result.defender = value;
  return self;
}
- (PvpProto_Builder*) setDefenderBuilder:(MinimumUserProtoWithLevel_Builder*) builderForValue {
  return [self setDefender:[builderForValue build]];
}
- (PvpProto_Builder*) mergeDefender:(MinimumUserProtoWithLevel*) value {
  if (result.hasDefender &&
      result.defender != [MinimumUserProtoWithLevel defaultInstance]) {
    result.defender =
      [[[MinimumUserProtoWithLevel builderWithPrototype:result.defender] mergeFrom:value] buildPartial];
  } else {
    result.defender = value;
  }
  result.hasDefender = YES;
  return self;
}
- (PvpProto_Builder*) clearDefender {
  result.hasDefender = NO;
  result.defender = [MinimumUserProtoWithLevel defaultInstance];
  return self;
}
- (BOOL) hasCurElo {
  return result.hasCurElo;
}
- (int32_t) curElo {
  return result.curElo;
}
- (PvpProto_Builder*) setCurElo:(int32_t) value {
  result.hasCurElo = YES;
  result.curElo = value;
  return self;
}
- (PvpProto_Builder*) clearCurElo {
  result.hasCurElo = NO;
  result.curElo = 0;
  return self;
}
- (NSArray*) defenderMonstersList {
  if (result.mutableDefenderMonstersList == nil) { return [NSArray array]; }
  return result.mutableDefenderMonstersList;
}
- (MinimumUserMonsterProto*) defenderMonstersAtIndex:(int32_t) index {
  return [result defenderMonstersAtIndex:index];
}
- (PvpProto_Builder*) replaceDefenderMonstersAtIndex:(int32_t) index with:(MinimumUserMonsterProto*) value {
  [result.mutableDefenderMonstersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PvpProto_Builder*) addAllDefenderMonsters:(NSArray*) values {
  if (result.mutableDefenderMonstersList == nil) {
    result.mutableDefenderMonstersList = [NSMutableArray array];
  }
  [result.mutableDefenderMonstersList addObjectsFromArray:values];
  return self;
}
- (PvpProto_Builder*) clearDefenderMonstersList {
  result.mutableDefenderMonstersList = nil;
  return self;
}
- (PvpProto_Builder*) addDefenderMonsters:(MinimumUserMonsterProto*) value {
  if (result.mutableDefenderMonstersList == nil) {
    result.mutableDefenderMonstersList = [NSMutableArray array];
  }
  [result.mutableDefenderMonstersList addObject:value];
  return self;
}
- (BOOL) hasProspectiveCashWinnings {
  return result.hasProspectiveCashWinnings;
}
- (int32_t) prospectiveCashWinnings {
  return result.prospectiveCashWinnings;
}
- (PvpProto_Builder*) setProspectiveCashWinnings:(int32_t) value {
  result.hasProspectiveCashWinnings = YES;
  result.prospectiveCashWinnings = value;
  return self;
}
- (PvpProto_Builder*) clearProspectiveCashWinnings {
  result.hasProspectiveCashWinnings = NO;
  result.prospectiveCashWinnings = 0;
  return self;
}
- (BOOL) hasProspectiveOilWinnings {
  return result.hasProspectiveOilWinnings;
}
- (int32_t) prospectiveOilWinnings {
  return result.prospectiveOilWinnings;
}
- (PvpProto_Builder*) setProspectiveOilWinnings:(int32_t) value {
  result.hasProspectiveOilWinnings = YES;
  result.prospectiveOilWinnings = value;
  return self;
}
- (PvpProto_Builder*) clearProspectiveOilWinnings {
  result.hasProspectiveOilWinnings = NO;
  result.prospectiveOilWinnings = 0;
  return self;
}
@end

@interface PvpHistoryProto ()
@property int64_t battleEndTime;
@property (retain) FullUserProto* attacker;
@property (retain) NSMutableArray* mutableAttackersMonstersList;
@property BOOL attackerWon;
@property int32_t defenderCashChange;
@property int32_t defenderOilChange;
@property BOOL exactedRevenge;
@property int32_t prospectiveCashWinnings;
@property int32_t prospectiveOilWinnings;
@end

@implementation PvpHistoryProto

- (BOOL) hasBattleEndTime {
  return !!hasBattleEndTime_;
}
- (void) setHasBattleEndTime:(BOOL) value {
  hasBattleEndTime_ = !!value;
}
@synthesize battleEndTime;
- (BOOL) hasAttacker {
  return !!hasAttacker_;
}
- (void) setHasAttacker:(BOOL) value {
  hasAttacker_ = !!value;
}
@synthesize attacker;
@synthesize mutableAttackersMonstersList;
- (BOOL) hasAttackerWon {
  return !!hasAttackerWon_;
}
- (void) setHasAttackerWon:(BOOL) value {
  hasAttackerWon_ = !!value;
}
- (BOOL) attackerWon {
  return !!attackerWon_;
}
- (void) setAttackerWon:(BOOL) value {
  attackerWon_ = !!value;
}
- (BOOL) hasDefenderCashChange {
  return !!hasDefenderCashChange_;
}
- (void) setHasDefenderCashChange:(BOOL) value {
  hasDefenderCashChange_ = !!value;
}
@synthesize defenderCashChange;
- (BOOL) hasDefenderOilChange {
  return !!hasDefenderOilChange_;
}
- (void) setHasDefenderOilChange:(BOOL) value {
  hasDefenderOilChange_ = !!value;
}
@synthesize defenderOilChange;
- (BOOL) hasExactedRevenge {
  return !!hasExactedRevenge_;
}
- (void) setHasExactedRevenge:(BOOL) value {
  hasExactedRevenge_ = !!value;
}
- (BOOL) exactedRevenge {
  return !!exactedRevenge_;
}
- (void) setExactedRevenge:(BOOL) value {
  exactedRevenge_ = !!value;
}
- (BOOL) hasProspectiveCashWinnings {
  return !!hasProspectiveCashWinnings_;
}
- (void) setHasProspectiveCashWinnings:(BOOL) value {
  hasProspectiveCashWinnings_ = !!value;
}
@synthesize prospectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings {
  return !!hasProspectiveOilWinnings_;
}
- (void) setHasProspectiveOilWinnings:(BOOL) value {
  hasProspectiveOilWinnings_ = !!value;
}
@synthesize prospectiveOilWinnings;
- (void) dealloc {
  self.attacker = nil;
  self.mutableAttackersMonstersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.battleEndTime = 0L;
    self.attacker = [FullUserProto defaultInstance];
    self.attackerWon = NO;
    self.defenderCashChange = 0;
    self.defenderOilChange = 0;
    self.exactedRevenge = NO;
    self.prospectiveCashWinnings = 0;
    self.prospectiveOilWinnings = 0;
  }
  return self;
}
static PvpHistoryProto* defaultPvpHistoryProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpHistoryProto class]) {
    defaultPvpHistoryProtoInstance = [[PvpHistoryProto alloc] init];
  }
}
+ (PvpHistoryProto*) defaultInstance {
  return defaultPvpHistoryProtoInstance;
}
- (PvpHistoryProto*) defaultInstance {
  return defaultPvpHistoryProtoInstance;
}
- (NSArray*) attackersMonstersList {
  return mutableAttackersMonstersList;
}
- (MinimumUserMonsterProto*) attackersMonstersAtIndex:(int32_t) index {
  id value = [mutableAttackersMonstersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAttacker) {
    [output writeMessage:1 value:self.attacker];
  }
  for (MinimumUserMonsterProto* element in self.attackersMonstersList) {
    [output writeMessage:2 value:element];
  }
  if (self.hasAttackerWon) {
    [output writeBool:3 value:self.attackerWon];
  }
  if (self.hasDefenderCashChange) {
    [output writeSInt32:4 value:self.defenderCashChange];
  }
  if (self.hasDefenderOilChange) {
    [output writeSInt32:5 value:self.defenderOilChange];
  }
  if (self.hasExactedRevenge) {
    [output writeBool:6 value:self.exactedRevenge];
  }
  if (self.hasProspectiveCashWinnings) {
    [output writeInt32:7 value:self.prospectiveCashWinnings];
  }
  if (self.hasProspectiveOilWinnings) {
    [output writeInt32:8 value:self.prospectiveOilWinnings];
  }
  if (self.hasBattleEndTime) {
    [output writeInt64:9 value:self.battleEndTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAttacker) {
    size += computeMessageSize(1, self.attacker);
  }
  for (MinimumUserMonsterProto* element in self.attackersMonstersList) {
    size += computeMessageSize(2, element);
  }
  if (self.hasAttackerWon) {
    size += computeBoolSize(3, self.attackerWon);
  }
  if (self.hasDefenderCashChange) {
    size += computeSInt32Size(4, self.defenderCashChange);
  }
  if (self.hasDefenderOilChange) {
    size += computeSInt32Size(5, self.defenderOilChange);
  }
  if (self.hasExactedRevenge) {
    size += computeBoolSize(6, self.exactedRevenge);
  }
  if (self.hasProspectiveCashWinnings) {
    size += computeInt32Size(7, self.prospectiveCashWinnings);
  }
  if (self.hasProspectiveOilWinnings) {
    size += computeInt32Size(8, self.prospectiveOilWinnings);
  }
  if (self.hasBattleEndTime) {
    size += computeInt64Size(9, self.battleEndTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (PvpHistoryProto*) parseFromData:(NSData*) data {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromData:data] build];
}
+ (PvpHistoryProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromInputStream:input] build];
}
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto_Builder*) builder {
  return [[[PvpHistoryProto_Builder alloc] init] autorelease];
}
+ (PvpHistoryProto_Builder*) builderWithPrototype:(PvpHistoryProto*) prototype {
  return [[PvpHistoryProto builder] mergeFrom:prototype];
}
- (PvpHistoryProto_Builder*) builder {
  return [PvpHistoryProto builder];
}
@end

@interface PvpHistoryProto_Builder()
@property (retain) PvpHistoryProto* result;
@end

@implementation PvpHistoryProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[PvpHistoryProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpHistoryProto_Builder*) clear {
  self.result = [[[PvpHistoryProto alloc] init] autorelease];
  return self;
}
- (PvpHistoryProto_Builder*) clone {
  return [PvpHistoryProto builderWithPrototype:result];
}
- (PvpHistoryProto*) defaultInstance {
  return [PvpHistoryProto defaultInstance];
}
- (PvpHistoryProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpHistoryProto*) buildPartial {
  PvpHistoryProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (PvpHistoryProto_Builder*) mergeFrom:(PvpHistoryProto*) other {
  if (other == [PvpHistoryProto defaultInstance]) {
    return self;
  }
  if (other.hasBattleEndTime) {
    [self setBattleEndTime:other.battleEndTime];
  }
  if (other.hasAttacker) {
    [self mergeAttacker:other.attacker];
  }
  if (other.mutableAttackersMonstersList.count > 0) {
    if (result.mutableAttackersMonstersList == nil) {
      result.mutableAttackersMonstersList = [NSMutableArray array];
    }
    [result.mutableAttackersMonstersList addObjectsFromArray:other.mutableAttackersMonstersList];
  }
  if (other.hasAttackerWon) {
    [self setAttackerWon:other.attackerWon];
  }
  if (other.hasDefenderCashChange) {
    [self setDefenderCashChange:other.defenderCashChange];
  }
  if (other.hasDefenderOilChange) {
    [self setDefenderOilChange:other.defenderOilChange];
  }
  if (other.hasExactedRevenge) {
    [self setExactedRevenge:other.exactedRevenge];
  }
  if (other.hasProspectiveCashWinnings) {
    [self setProspectiveCashWinnings:other.prospectiveCashWinnings];
  }
  if (other.hasProspectiveOilWinnings) {
    [self setProspectiveOilWinnings:other.prospectiveOilWinnings];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FullUserProto_Builder* subBuilder = [FullUserProto builder];
        if (self.hasAttacker) {
          [subBuilder mergeFrom:self.attacker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttacker:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        MinimumUserMonsterProto_Builder* subBuilder = [MinimumUserMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttackersMonsters:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setAttackerWon:[input readBool]];
        break;
      }
      case 32: {
        [self setDefenderCashChange:[input readSInt32]];
        break;
      }
      case 40: {
        [self setDefenderOilChange:[input readSInt32]];
        break;
      }
      case 48: {
        [self setExactedRevenge:[input readBool]];
        break;
      }
      case 56: {
        [self setProspectiveCashWinnings:[input readInt32]];
        break;
      }
      case 64: {
        [self setProspectiveOilWinnings:[input readInt32]];
        break;
      }
      case 72: {
        [self setBattleEndTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasBattleEndTime {
  return result.hasBattleEndTime;
}
- (int64_t) battleEndTime {
  return result.battleEndTime;
}
- (PvpHistoryProto_Builder*) setBattleEndTime:(int64_t) value {
  result.hasBattleEndTime = YES;
  result.battleEndTime = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearBattleEndTime {
  result.hasBattleEndTime = NO;
  result.battleEndTime = 0L;
  return self;
}
- (BOOL) hasAttacker {
  return result.hasAttacker;
}
- (FullUserProto*) attacker {
  return result.attacker;
}
- (PvpHistoryProto_Builder*) setAttacker:(FullUserProto*) value {
  result.hasAttacker = YES;
  result.attacker = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttackerBuilder:(FullUserProto_Builder*) builderForValue {
  return [self setAttacker:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttacker:(FullUserProto*) value {
  if (result.hasAttacker &&
      result.attacker != [FullUserProto defaultInstance]) {
    result.attacker =
      [[[FullUserProto builderWithPrototype:result.attacker] mergeFrom:value] buildPartial];
  } else {
    result.attacker = value;
  }
  result.hasAttacker = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttacker {
  result.hasAttacker = NO;
  result.attacker = [FullUserProto defaultInstance];
  return self;
}
- (NSArray*) attackersMonstersList {
  if (result.mutableAttackersMonstersList == nil) { return [NSArray array]; }
  return result.mutableAttackersMonstersList;
}
- (MinimumUserMonsterProto*) attackersMonstersAtIndex:(int32_t) index {
  return [result attackersMonstersAtIndex:index];
}
- (PvpHistoryProto_Builder*) replaceAttackersMonstersAtIndex:(int32_t) index with:(MinimumUserMonsterProto*) value {
  [result.mutableAttackersMonstersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (PvpHistoryProto_Builder*) addAllAttackersMonsters:(NSArray*) values {
  if (result.mutableAttackersMonstersList == nil) {
    result.mutableAttackersMonstersList = [NSMutableArray array];
  }
  [result.mutableAttackersMonstersList addObjectsFromArray:values];
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackersMonstersList {
  result.mutableAttackersMonstersList = nil;
  return self;
}
- (PvpHistoryProto_Builder*) addAttackersMonsters:(MinimumUserMonsterProto*) value {
  if (result.mutableAttackersMonstersList == nil) {
    result.mutableAttackersMonstersList = [NSMutableArray array];
  }
  [result.mutableAttackersMonstersList addObject:value];
  return self;
}
- (BOOL) hasAttackerWon {
  return result.hasAttackerWon;
}
- (BOOL) attackerWon {
  return result.attackerWon;
}
- (PvpHistoryProto_Builder*) setAttackerWon:(BOOL) value {
  result.hasAttackerWon = YES;
  result.attackerWon = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerWon {
  result.hasAttackerWon = NO;
  result.attackerWon = NO;
  return self;
}
- (BOOL) hasDefenderCashChange {
  return result.hasDefenderCashChange;
}
- (int32_t) defenderCashChange {
  return result.defenderCashChange;
}
- (PvpHistoryProto_Builder*) setDefenderCashChange:(int32_t) value {
  result.hasDefenderCashChange = YES;
  result.defenderCashChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderCashChange {
  result.hasDefenderCashChange = NO;
  result.defenderCashChange = 0;
  return self;
}
- (BOOL) hasDefenderOilChange {
  return result.hasDefenderOilChange;
}
- (int32_t) defenderOilChange {
  return result.defenderOilChange;
}
- (PvpHistoryProto_Builder*) setDefenderOilChange:(int32_t) value {
  result.hasDefenderOilChange = YES;
  result.defenderOilChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderOilChange {
  result.hasDefenderOilChange = NO;
  result.defenderOilChange = 0;
  return self;
}
- (BOOL) hasExactedRevenge {
  return result.hasExactedRevenge;
}
- (BOOL) exactedRevenge {
  return result.exactedRevenge;
}
- (PvpHistoryProto_Builder*) setExactedRevenge:(BOOL) value {
  result.hasExactedRevenge = YES;
  result.exactedRevenge = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearExactedRevenge {
  result.hasExactedRevenge = NO;
  result.exactedRevenge = NO;
  return self;
}
- (BOOL) hasProspectiveCashWinnings {
  return result.hasProspectiveCashWinnings;
}
- (int32_t) prospectiveCashWinnings {
  return result.prospectiveCashWinnings;
}
- (PvpHistoryProto_Builder*) setProspectiveCashWinnings:(int32_t) value {
  result.hasProspectiveCashWinnings = YES;
  result.prospectiveCashWinnings = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearProspectiveCashWinnings {
  result.hasProspectiveCashWinnings = NO;
  result.prospectiveCashWinnings = 0;
  return self;
}
- (BOOL) hasProspectiveOilWinnings {
  return result.hasProspectiveOilWinnings;
}
- (int32_t) prospectiveOilWinnings {
  return result.prospectiveOilWinnings;
}
- (PvpHistoryProto_Builder*) setProspectiveOilWinnings:(int32_t) value {
  result.hasProspectiveOilWinnings = YES;
  result.prospectiveOilWinnings = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearProspectiveOilWinnings {
  result.hasProspectiveOilWinnings = NO;
  result.prospectiveOilWinnings = 0;
  return self;
}
@end

