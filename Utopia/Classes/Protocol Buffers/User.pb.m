// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "User.pb.h"
// @@protoc_insertion_point(imports)

@implementation UserRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MinimumClanProto ()
@property (strong) NSString* clanUuid;
@property (strong) NSString* name;
@property int64_t createTime;
@property (strong) NSString* description;
@property (strong) NSString* tag;
@property BOOL requestToJoinRequired;
@property int32_t clanIconId;
@end

@implementation MinimumClanProto

- (BOOL) hasClanUuid {
  return !!hasClanUuid_;
}
- (void) setHasClanUuid:(BOOL) value_ {
  hasClanUuid_ = !!value_;
}
@synthesize clanUuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) value_ {
  hasTag_ = !!value_;
}
@synthesize tag;
- (BOOL) hasRequestToJoinRequired {
  return !!hasRequestToJoinRequired_;
}
- (void) setHasRequestToJoinRequired:(BOOL) value_ {
  hasRequestToJoinRequired_ = !!value_;
}
- (BOOL) requestToJoinRequired {
  return !!requestToJoinRequired_;
}
- (void) setRequestToJoinRequired:(BOOL) value_ {
  requestToJoinRequired_ = !!value_;
}
- (BOOL) hasClanIconId {
  return !!hasClanIconId_;
}
- (void) setHasClanIconId:(BOOL) value_ {
  hasClanIconId_ = !!value_;
}
@synthesize clanIconId;
- (id) init {
  if ((self = [super init])) {
    self.clanUuid = @"";
    self.name = @"";
    self.createTime = 0L;
    self.description = @"";
    self.tag = @"";
    self.requestToJoinRequired = NO;
    self.clanIconId = 0;
  }
  return self;
}
static MinimumClanProto* defaultMinimumClanProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumClanProto class]) {
    defaultMinimumClanProtoInstance = [[MinimumClanProto alloc] init];
  }
}
+ (MinimumClanProto*) defaultInstance {
  return defaultMinimumClanProtoInstance;
}
- (MinimumClanProto*) defaultInstance {
  return defaultMinimumClanProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClanUuid) {
    [output writeString:1 value:self.clanUuid];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasCreateTime) {
    [output writeInt64:4 value:self.createTime];
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.description];
  }
  if (self.hasTag) {
    [output writeString:6 value:self.tag];
  }
  if (self.hasRequestToJoinRequired) {
    [output writeBool:7 value:self.requestToJoinRequired];
  }
  if (self.hasClanIconId) {
    [output writeInt32:8 value:self.clanIconId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasClanUuid) {
    size_ += computeStringSize(1, self.clanUuid);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasCreateTime) {
    size_ += computeInt64Size(4, self.createTime);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(5, self.description);
  }
  if (self.hasTag) {
    size_ += computeStringSize(6, self.tag);
  }
  if (self.hasRequestToJoinRequired) {
    size_ += computeBoolSize(7, self.requestToJoinRequired);
  }
  if (self.hasClanIconId) {
    size_ += computeInt32Size(8, self.clanIconId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumClanProto*) parseFromData:(NSData*) data {
  return (MinimumClanProto*)[[[MinimumClanProto builder] mergeFromData:data] build];
}
+ (MinimumClanProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumClanProto*)[[[MinimumClanProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumClanProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumClanProto*)[[[MinimumClanProto builder] mergeFromInputStream:input] build];
}
+ (MinimumClanProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumClanProto*)[[[MinimumClanProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumClanProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumClanProto*)[[[MinimumClanProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumClanProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumClanProto*)[[[MinimumClanProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumClanProto_Builder*) builder {
  return [[MinimumClanProto_Builder alloc] init];
}
+ (MinimumClanProto_Builder*) builderWithPrototype:(MinimumClanProto*) prototype {
  return [[MinimumClanProto builder] mergeFrom:prototype];
}
- (MinimumClanProto_Builder*) builder {
  return [MinimumClanProto builder];
}
- (MinimumClanProto_Builder*) toBuilder {
  return [MinimumClanProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasClanUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanUuid", self.clanUuid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithLongLong:self.createTime]];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasRequestToJoinRequired) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requestToJoinRequired", [NSNumber numberWithBool:self.requestToJoinRequired]];
  }
  if (self.hasClanIconId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanIconId", [NSNumber numberWithInteger:self.clanIconId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumClanProto class]]) {
    return NO;
  }
  MinimumClanProto *otherMessage = other;
  return
      self.hasClanUuid == otherMessage.hasClanUuid &&
      (!self.hasClanUuid || [self.clanUuid isEqual:otherMessage.clanUuid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasRequestToJoinRequired == otherMessage.hasRequestToJoinRequired &&
      (!self.hasRequestToJoinRequired || self.requestToJoinRequired == otherMessage.requestToJoinRequired) &&
      self.hasClanIconId == otherMessage.hasClanIconId &&
      (!self.hasClanIconId || self.clanIconId == otherMessage.clanIconId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasClanUuid) {
    hashCode = hashCode * 31 + [self.clanUuid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createTime] hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasRequestToJoinRequired) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.requestToJoinRequired] hash];
  }
  if (self.hasClanIconId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.clanIconId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumClanProto_Builder()
@property (strong) MinimumClanProto* result;
@end

@implementation MinimumClanProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumClanProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumClanProto_Builder*) clear {
  self.result = [[MinimumClanProto alloc] init];
  return self;
}
- (MinimumClanProto_Builder*) clone {
  return [MinimumClanProto builderWithPrototype:result];
}
- (MinimumClanProto*) defaultInstance {
  return [MinimumClanProto defaultInstance];
}
- (MinimumClanProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumClanProto*) buildPartial {
  MinimumClanProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumClanProto_Builder*) mergeFrom:(MinimumClanProto*) other {
  if (other == [MinimumClanProto defaultInstance]) {
    return self;
  }
  if (other.hasClanUuid) {
    [self setClanUuid:other.clanUuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasRequestToJoinRequired) {
    [self setRequestToJoinRequired:other.requestToJoinRequired];
  }
  if (other.hasClanIconId) {
    [self setClanIconId:other.clanIconId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumClanProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumClanProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClanUuid:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setCreateTime:[input readInt64]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
      case 50: {
        [self setTag:[input readString]];
        break;
      }
      case 56: {
        [self setRequestToJoinRequired:[input readBool]];
        break;
      }
      case 64: {
        [self setClanIconId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasClanUuid {
  return result.hasClanUuid;
}
- (NSString*) clanUuid {
  return result.clanUuid;
}
- (MinimumClanProto_Builder*) setClanUuid:(NSString*) value {
  result.hasClanUuid = YES;
  result.clanUuid = value;
  return self;
}
- (MinimumClanProto_Builder*) clearClanUuid {
  result.hasClanUuid = NO;
  result.clanUuid = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MinimumClanProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MinimumClanProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int64_t) createTime {
  return result.createTime;
}
- (MinimumClanProto_Builder*) setCreateTime:(int64_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (MinimumClanProto_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0L;
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (MinimumClanProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (MinimumClanProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasTag {
  return result.hasTag;
}
- (NSString*) tag {
  return result.tag;
}
- (MinimumClanProto_Builder*) setTag:(NSString*) value {
  result.hasTag = YES;
  result.tag = value;
  return self;
}
- (MinimumClanProto_Builder*) clearTag {
  result.hasTag = NO;
  result.tag = @"";
  return self;
}
- (BOOL) hasRequestToJoinRequired {
  return result.hasRequestToJoinRequired;
}
- (BOOL) requestToJoinRequired {
  return result.requestToJoinRequired;
}
- (MinimumClanProto_Builder*) setRequestToJoinRequired:(BOOL) value {
  result.hasRequestToJoinRequired = YES;
  result.requestToJoinRequired = value;
  return self;
}
- (MinimumClanProto_Builder*) clearRequestToJoinRequired {
  result.hasRequestToJoinRequired = NO;
  result.requestToJoinRequired = NO;
  return self;
}
- (BOOL) hasClanIconId {
  return result.hasClanIconId;
}
- (int32_t) clanIconId {
  return result.clanIconId;
}
- (MinimumClanProto_Builder*) setClanIconId:(int32_t) value {
  result.hasClanIconId = YES;
  result.clanIconId = value;
  return self;
}
- (MinimumClanProto_Builder*) clearClanIconId {
  result.hasClanIconId = NO;
  result.clanIconId = 0;
  return self;
}
@end

@interface MinimumUserProto ()
@property (strong) NSString* userUuid;
@property (strong) NSString* name;
@property (strong) MinimumClanProto* clan;
@property int32_t avatarMonsterId;
@end

@implementation MinimumUserProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasClan {
  return !!hasClan_;
}
- (void) setHasClan:(BOOL) value_ {
  hasClan_ = !!value_;
}
@synthesize clan;
- (BOOL) hasAvatarMonsterId {
  return !!hasAvatarMonsterId_;
}
- (void) setHasAvatarMonsterId:(BOOL) value_ {
  hasAvatarMonsterId_ = !!value_;
}
@synthesize avatarMonsterId;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.name = @"";
    self.clan = [MinimumClanProto defaultInstance];
    self.avatarMonsterId = 0;
  }
  return self;
}
static MinimumUserProto* defaultMinimumUserProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserProto class]) {
    defaultMinimumUserProtoInstance = [[MinimumUserProto alloc] init];
  }
}
+ (MinimumUserProto*) defaultInstance {
  return defaultMinimumUserProtoInstance;
}
- (MinimumUserProto*) defaultInstance {
  return defaultMinimumUserProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasClan) {
    [output writeMessage:3 value:self.clan];
  }
  if (self.hasAvatarMonsterId) {
    [output writeInt32:4 value:self.avatarMonsterId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasClan) {
    size_ += computeMessageSize(3, self.clan);
  }
  if (self.hasAvatarMonsterId) {
    size_ += computeInt32Size(4, self.avatarMonsterId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserProto*) parseFromData:(NSData*) data {
  return (MinimumUserProto*)[[[MinimumUserProto builder] mergeFromData:data] build];
}
+ (MinimumUserProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProto*)[[[MinimumUserProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserProto*)[[[MinimumUserProto builder] mergeFromInputStream:input] build];
}
+ (MinimumUserProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProto*)[[[MinimumUserProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserProto*)[[[MinimumUserProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProto*)[[[MinimumUserProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProto_Builder*) builder {
  return [[MinimumUserProto_Builder alloc] init];
}
+ (MinimumUserProto_Builder*) builderWithPrototype:(MinimumUserProto*) prototype {
  return [[MinimumUserProto builder] mergeFrom:prototype];
}
- (MinimumUserProto_Builder*) builder {
  return [MinimumUserProto builder];
}
- (MinimumUserProto_Builder*) toBuilder {
  return [MinimumUserProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasClan) {
    [output appendFormat:@"%@%@ {\n", indent, @"clan"];
    [self.clan writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAvatarMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarMonsterId", [NSNumber numberWithInteger:self.avatarMonsterId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserProto class]]) {
    return NO;
  }
  MinimumUserProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasClan == otherMessage.hasClan &&
      (!self.hasClan || [self.clan isEqual:otherMessage.clan]) &&
      self.hasAvatarMonsterId == otherMessage.hasAvatarMonsterId &&
      (!self.hasAvatarMonsterId || self.avatarMonsterId == otherMessage.avatarMonsterId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasClan) {
    hashCode = hashCode * 31 + [self.clan hash];
  }
  if (self.hasAvatarMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.avatarMonsterId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserProto_Builder()
@property (strong) MinimumUserProto* result;
@end

@implementation MinimumUserProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserProto_Builder*) clear {
  self.result = [[MinimumUserProto alloc] init];
  return self;
}
- (MinimumUserProto_Builder*) clone {
  return [MinimumUserProto builderWithPrototype:result];
}
- (MinimumUserProto*) defaultInstance {
  return [MinimumUserProto defaultInstance];
}
- (MinimumUserProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserProto*) buildPartial {
  MinimumUserProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserProto_Builder*) mergeFrom:(MinimumUserProto*) other {
  if (other == [MinimumUserProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasClan) {
    [self mergeClan:other.clan];
  }
  if (other.hasAvatarMonsterId) {
    [self setAvatarMonsterId:other.avatarMonsterId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        MinimumClanProto_Builder* subBuilder = [MinimumClanProto builder];
        if (self.hasClan) {
          [subBuilder mergeFrom:self.clan];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setClan:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setAvatarMonsterId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (MinimumUserProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (MinimumUserProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MinimumUserProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MinimumUserProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasClan {
  return result.hasClan;
}
- (MinimumClanProto*) clan {
  return result.clan;
}
- (MinimumUserProto_Builder*) setClan:(MinimumClanProto*) value {
  result.hasClan = YES;
  result.clan = value;
  return self;
}
- (MinimumUserProto_Builder*) setClan_Builder:(MinimumClanProto_Builder*) builderForValue {
  return [self setClan:[builderForValue build]];
}
- (MinimumUserProto_Builder*) mergeClan:(MinimumClanProto*) value {
  if (result.hasClan &&
      result.clan != [MinimumClanProto defaultInstance]) {
    result.clan =
      [[[MinimumClanProto builderWithPrototype:result.clan] mergeFrom:value] buildPartial];
  } else {
    result.clan = value;
  }
  result.hasClan = YES;
  return self;
}
- (MinimumUserProto_Builder*) clearClan {
  result.hasClan = NO;
  result.clan = [MinimumClanProto defaultInstance];
  return self;
}
- (BOOL) hasAvatarMonsterId {
  return result.hasAvatarMonsterId;
}
- (int32_t) avatarMonsterId {
  return result.avatarMonsterId;
}
- (MinimumUserProto_Builder*) setAvatarMonsterId:(int32_t) value {
  result.hasAvatarMonsterId = YES;
  result.avatarMonsterId = value;
  return self;
}
- (MinimumUserProto_Builder*) clearAvatarMonsterId {
  result.hasAvatarMonsterId = NO;
  result.avatarMonsterId = 0;
  return self;
}
@end

@interface MinimumUserProtoWithLevel ()
@property (strong) MinimumUserProto* minUserProto;
@property int32_t level;
@end

@implementation MinimumUserProtoWithLevel

- (BOOL) hasMinUserProto {
  return !!hasMinUserProto_;
}
- (void) setHasMinUserProto:(BOOL) value_ {
  hasMinUserProto_ = !!value_;
}
@synthesize minUserProto;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (id) init {
  if ((self = [super init])) {
    self.minUserProto = [MinimumUserProto defaultInstance];
    self.level = 0;
  }
  return self;
}
static MinimumUserProtoWithLevel* defaultMinimumUserProtoWithLevelInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserProtoWithLevel class]) {
    defaultMinimumUserProtoWithLevelInstance = [[MinimumUserProtoWithLevel alloc] init];
  }
}
+ (MinimumUserProtoWithLevel*) defaultInstance {
  return defaultMinimumUserProtoWithLevelInstance;
}
- (MinimumUserProtoWithLevel*) defaultInstance {
  return defaultMinimumUserProtoWithLevelInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMinUserProto) {
    [output writeMessage:1 value:self.minUserProto];
  }
  if (self.hasLevel) {
    [output writeInt32:2 value:self.level];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMinUserProto) {
    size_ += computeMessageSize(1, self.minUserProto);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(2, self.level);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserProtoWithLevel*) parseFromData:(NSData*) data {
  return (MinimumUserProtoWithLevel*)[[[MinimumUserProtoWithLevel builder] mergeFromData:data] build];
}
+ (MinimumUserProtoWithLevel*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithLevel*)[[[MinimumUserProtoWithLevel builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithLevel*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserProtoWithLevel*)[[[MinimumUserProtoWithLevel builder] mergeFromInputStream:input] build];
}
+ (MinimumUserProtoWithLevel*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithLevel*)[[[MinimumUserProtoWithLevel builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithLevel*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserProtoWithLevel*)[[[MinimumUserProtoWithLevel builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserProtoWithLevel*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithLevel*)[[[MinimumUserProtoWithLevel builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithLevel_Builder*) builder {
  return [[MinimumUserProtoWithLevel_Builder alloc] init];
}
+ (MinimumUserProtoWithLevel_Builder*) builderWithPrototype:(MinimumUserProtoWithLevel*) prototype {
  return [[MinimumUserProtoWithLevel builder] mergeFrom:prototype];
}
- (MinimumUserProtoWithLevel_Builder*) builder {
  return [MinimumUserProtoWithLevel builder];
}
- (MinimumUserProtoWithLevel_Builder*) toBuilder {
  return [MinimumUserProtoWithLevel builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMinUserProto) {
    [output appendFormat:@"%@%@ {\n", indent, @"minUserProto"];
    [self.minUserProto writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserProtoWithLevel class]]) {
    return NO;
  }
  MinimumUserProtoWithLevel *otherMessage = other;
  return
      self.hasMinUserProto == otherMessage.hasMinUserProto &&
      (!self.hasMinUserProto || [self.minUserProto isEqual:otherMessage.minUserProto]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMinUserProto) {
    hashCode = hashCode * 31 + [self.minUserProto hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserProtoWithLevel_Builder()
@property (strong) MinimumUserProtoWithLevel* result;
@end

@implementation MinimumUserProtoWithLevel_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserProtoWithLevel alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserProtoWithLevel_Builder*) clear {
  self.result = [[MinimumUserProtoWithLevel alloc] init];
  return self;
}
- (MinimumUserProtoWithLevel_Builder*) clone {
  return [MinimumUserProtoWithLevel builderWithPrototype:result];
}
- (MinimumUserProtoWithLevel*) defaultInstance {
  return [MinimumUserProtoWithLevel defaultInstance];
}
- (MinimumUserProtoWithLevel*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserProtoWithLevel*) buildPartial {
  MinimumUserProtoWithLevel* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserProtoWithLevel_Builder*) mergeFrom:(MinimumUserProtoWithLevel*) other {
  if (other == [MinimumUserProtoWithLevel defaultInstance]) {
    return self;
  }
  if (other.hasMinUserProto) {
    [self mergeMinUserProto:other.minUserProto];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserProtoWithLevel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserProtoWithLevel_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasMinUserProto) {
          [subBuilder mergeFrom:self.minUserProto];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMinUserProto:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setLevel:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMinUserProto {
  return result.hasMinUserProto;
}
- (MinimumUserProto*) minUserProto {
  return result.minUserProto;
}
- (MinimumUserProtoWithLevel_Builder*) setMinUserProto:(MinimumUserProto*) value {
  result.hasMinUserProto = YES;
  result.minUserProto = value;
  return self;
}
- (MinimumUserProtoWithLevel_Builder*) setMinUserProto_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setMinUserProto:[builderForValue build]];
}
- (MinimumUserProtoWithLevel_Builder*) mergeMinUserProto:(MinimumUserProto*) value {
  if (result.hasMinUserProto &&
      result.minUserProto != [MinimumUserProto defaultInstance]) {
    result.minUserProto =
      [[[MinimumUserProto builderWithPrototype:result.minUserProto] mergeFrom:value] buildPartial];
  } else {
    result.minUserProto = value;
  }
  result.hasMinUserProto = YES;
  return self;
}
- (MinimumUserProtoWithLevel_Builder*) clearMinUserProto {
  result.hasMinUserProto = NO;
  result.minUserProto = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (MinimumUserProtoWithLevel_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (MinimumUserProtoWithLevel_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
@end

@interface MinimumUserProtoWithFacebookId ()
@property (strong) MinimumUserProto* minUserProto;
@property (strong) NSString* facebookId;
@end

@implementation MinimumUserProtoWithFacebookId

- (BOOL) hasMinUserProto {
  return !!hasMinUserProto_;
}
- (void) setHasMinUserProto:(BOOL) value_ {
  hasMinUserProto_ = !!value_;
}
@synthesize minUserProto;
- (BOOL) hasFacebookId {
  return !!hasFacebookId_;
}
- (void) setHasFacebookId:(BOOL) value_ {
  hasFacebookId_ = !!value_;
}
@synthesize facebookId;
- (id) init {
  if ((self = [super init])) {
    self.minUserProto = [MinimumUserProto defaultInstance];
    self.facebookId = @"";
  }
  return self;
}
static MinimumUserProtoWithFacebookId* defaultMinimumUserProtoWithFacebookIdInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserProtoWithFacebookId class]) {
    defaultMinimumUserProtoWithFacebookIdInstance = [[MinimumUserProtoWithFacebookId alloc] init];
  }
}
+ (MinimumUserProtoWithFacebookId*) defaultInstance {
  return defaultMinimumUserProtoWithFacebookIdInstance;
}
- (MinimumUserProtoWithFacebookId*) defaultInstance {
  return defaultMinimumUserProtoWithFacebookIdInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMinUserProto) {
    [output writeMessage:1 value:self.minUserProto];
  }
  if (self.hasFacebookId) {
    [output writeString:2 value:self.facebookId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMinUserProto) {
    size_ += computeMessageSize(1, self.minUserProto);
  }
  if (self.hasFacebookId) {
    size_ += computeStringSize(2, self.facebookId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserProtoWithFacebookId*) parseFromData:(NSData*) data {
  return (MinimumUserProtoWithFacebookId*)[[[MinimumUserProtoWithFacebookId builder] mergeFromData:data] build];
}
+ (MinimumUserProtoWithFacebookId*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithFacebookId*)[[[MinimumUserProtoWithFacebookId builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithFacebookId*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserProtoWithFacebookId*)[[[MinimumUserProtoWithFacebookId builder] mergeFromInputStream:input] build];
}
+ (MinimumUserProtoWithFacebookId*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithFacebookId*)[[[MinimumUserProtoWithFacebookId builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithFacebookId*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserProtoWithFacebookId*)[[[MinimumUserProtoWithFacebookId builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserProtoWithFacebookId*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithFacebookId*)[[[MinimumUserProtoWithFacebookId builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithFacebookId_Builder*) builder {
  return [[MinimumUserProtoWithFacebookId_Builder alloc] init];
}
+ (MinimumUserProtoWithFacebookId_Builder*) builderWithPrototype:(MinimumUserProtoWithFacebookId*) prototype {
  return [[MinimumUserProtoWithFacebookId builder] mergeFrom:prototype];
}
- (MinimumUserProtoWithFacebookId_Builder*) builder {
  return [MinimumUserProtoWithFacebookId builder];
}
- (MinimumUserProtoWithFacebookId_Builder*) toBuilder {
  return [MinimumUserProtoWithFacebookId builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMinUserProto) {
    [output appendFormat:@"%@%@ {\n", indent, @"minUserProto"];
    [self.minUserProto writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasFacebookId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"facebookId", self.facebookId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserProtoWithFacebookId class]]) {
    return NO;
  }
  MinimumUserProtoWithFacebookId *otherMessage = other;
  return
      self.hasMinUserProto == otherMessage.hasMinUserProto &&
      (!self.hasMinUserProto || [self.minUserProto isEqual:otherMessage.minUserProto]) &&
      self.hasFacebookId == otherMessage.hasFacebookId &&
      (!self.hasFacebookId || [self.facebookId isEqual:otherMessage.facebookId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMinUserProto) {
    hashCode = hashCode * 31 + [self.minUserProto hash];
  }
  if (self.hasFacebookId) {
    hashCode = hashCode * 31 + [self.facebookId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserProtoWithFacebookId_Builder()
@property (strong) MinimumUserProtoWithFacebookId* result;
@end

@implementation MinimumUserProtoWithFacebookId_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserProtoWithFacebookId alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserProtoWithFacebookId_Builder*) clear {
  self.result = [[MinimumUserProtoWithFacebookId alloc] init];
  return self;
}
- (MinimumUserProtoWithFacebookId_Builder*) clone {
  return [MinimumUserProtoWithFacebookId builderWithPrototype:result];
}
- (MinimumUserProtoWithFacebookId*) defaultInstance {
  return [MinimumUserProtoWithFacebookId defaultInstance];
}
- (MinimumUserProtoWithFacebookId*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserProtoWithFacebookId*) buildPartial {
  MinimumUserProtoWithFacebookId* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserProtoWithFacebookId_Builder*) mergeFrom:(MinimumUserProtoWithFacebookId*) other {
  if (other == [MinimumUserProtoWithFacebookId defaultInstance]) {
    return self;
  }
  if (other.hasMinUserProto) {
    [self mergeMinUserProto:other.minUserProto];
  }
  if (other.hasFacebookId) {
    [self setFacebookId:other.facebookId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserProtoWithFacebookId_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserProtoWithFacebookId_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasMinUserProto) {
          [subBuilder mergeFrom:self.minUserProto];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMinUserProto:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setFacebookId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMinUserProto {
  return result.hasMinUserProto;
}
- (MinimumUserProto*) minUserProto {
  return result.minUserProto;
}
- (MinimumUserProtoWithFacebookId_Builder*) setMinUserProto:(MinimumUserProto*) value {
  result.hasMinUserProto = YES;
  result.minUserProto = value;
  return self;
}
- (MinimumUserProtoWithFacebookId_Builder*) setMinUserProto_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setMinUserProto:[builderForValue build]];
}
- (MinimumUserProtoWithFacebookId_Builder*) mergeMinUserProto:(MinimumUserProto*) value {
  if (result.hasMinUserProto &&
      result.minUserProto != [MinimumUserProto defaultInstance]) {
    result.minUserProto =
      [[[MinimumUserProto builderWithPrototype:result.minUserProto] mergeFrom:value] buildPartial];
  } else {
    result.minUserProto = value;
  }
  result.hasMinUserProto = YES;
  return self;
}
- (MinimumUserProtoWithFacebookId_Builder*) clearMinUserProto {
  result.hasMinUserProto = NO;
  result.minUserProto = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasFacebookId {
  return result.hasFacebookId;
}
- (NSString*) facebookId {
  return result.facebookId;
}
- (MinimumUserProtoWithFacebookId_Builder*) setFacebookId:(NSString*) value {
  result.hasFacebookId = YES;
  result.facebookId = value;
  return self;
}
- (MinimumUserProtoWithFacebookId_Builder*) clearFacebookId {
  result.hasFacebookId = NO;
  result.facebookId = @"";
  return self;
}
@end

@interface MinimumUserProtoWithMaxResources ()
@property (strong) MinimumUserProto* minUserProto;
@property int32_t maxCash;
@property int32_t maxOil;
@end

@implementation MinimumUserProtoWithMaxResources

- (BOOL) hasMinUserProto {
  return !!hasMinUserProto_;
}
- (void) setHasMinUserProto:(BOOL) value_ {
  hasMinUserProto_ = !!value_;
}
@synthesize minUserProto;
- (BOOL) hasMaxCash {
  return !!hasMaxCash_;
}
- (void) setHasMaxCash:(BOOL) value_ {
  hasMaxCash_ = !!value_;
}
@synthesize maxCash;
- (BOOL) hasMaxOil {
  return !!hasMaxOil_;
}
- (void) setHasMaxOil:(BOOL) value_ {
  hasMaxOil_ = !!value_;
}
@synthesize maxOil;
- (id) init {
  if ((self = [super init])) {
    self.minUserProto = [MinimumUserProto defaultInstance];
    self.maxCash = 0;
    self.maxOil = 0;
  }
  return self;
}
static MinimumUserProtoWithMaxResources* defaultMinimumUserProtoWithMaxResourcesInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserProtoWithMaxResources class]) {
    defaultMinimumUserProtoWithMaxResourcesInstance = [[MinimumUserProtoWithMaxResources alloc] init];
  }
}
+ (MinimumUserProtoWithMaxResources*) defaultInstance {
  return defaultMinimumUserProtoWithMaxResourcesInstance;
}
- (MinimumUserProtoWithMaxResources*) defaultInstance {
  return defaultMinimumUserProtoWithMaxResourcesInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMinUserProto) {
    [output writeMessage:1 value:self.minUserProto];
  }
  if (self.hasMaxCash) {
    [output writeInt32:2 value:self.maxCash];
  }
  if (self.hasMaxOil) {
    [output writeInt32:3 value:self.maxOil];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMinUserProto) {
    size_ += computeMessageSize(1, self.minUserProto);
  }
  if (self.hasMaxCash) {
    size_ += computeInt32Size(2, self.maxCash);
  }
  if (self.hasMaxOil) {
    size_ += computeInt32Size(3, self.maxOil);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserProtoWithMaxResources*) parseFromData:(NSData*) data {
  return (MinimumUserProtoWithMaxResources*)[[[MinimumUserProtoWithMaxResources builder] mergeFromData:data] build];
}
+ (MinimumUserProtoWithMaxResources*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithMaxResources*)[[[MinimumUserProtoWithMaxResources builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithMaxResources*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserProtoWithMaxResources*)[[[MinimumUserProtoWithMaxResources builder] mergeFromInputStream:input] build];
}
+ (MinimumUserProtoWithMaxResources*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithMaxResources*)[[[MinimumUserProtoWithMaxResources builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithMaxResources*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserProtoWithMaxResources*)[[[MinimumUserProtoWithMaxResources builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserProtoWithMaxResources*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserProtoWithMaxResources*)[[[MinimumUserProtoWithMaxResources builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserProtoWithMaxResources_Builder*) builder {
  return [[MinimumUserProtoWithMaxResources_Builder alloc] init];
}
+ (MinimumUserProtoWithMaxResources_Builder*) builderWithPrototype:(MinimumUserProtoWithMaxResources*) prototype {
  return [[MinimumUserProtoWithMaxResources builder] mergeFrom:prototype];
}
- (MinimumUserProtoWithMaxResources_Builder*) builder {
  return [MinimumUserProtoWithMaxResources builder];
}
- (MinimumUserProtoWithMaxResources_Builder*) toBuilder {
  return [MinimumUserProtoWithMaxResources builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMinUserProto) {
    [output appendFormat:@"%@%@ {\n", indent, @"minUserProto"];
    [self.minUserProto writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMaxCash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxCash", [NSNumber numberWithInteger:self.maxCash]];
  }
  if (self.hasMaxOil) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxOil", [NSNumber numberWithInteger:self.maxOil]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserProtoWithMaxResources class]]) {
    return NO;
  }
  MinimumUserProtoWithMaxResources *otherMessage = other;
  return
      self.hasMinUserProto == otherMessage.hasMinUserProto &&
      (!self.hasMinUserProto || [self.minUserProto isEqual:otherMessage.minUserProto]) &&
      self.hasMaxCash == otherMessage.hasMaxCash &&
      (!self.hasMaxCash || self.maxCash == otherMessage.maxCash) &&
      self.hasMaxOil == otherMessage.hasMaxOil &&
      (!self.hasMaxOil || self.maxOil == otherMessage.maxOil) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMinUserProto) {
    hashCode = hashCode * 31 + [self.minUserProto hash];
  }
  if (self.hasMaxCash) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxCash] hash];
  }
  if (self.hasMaxOil) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxOil] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserProtoWithMaxResources_Builder()
@property (strong) MinimumUserProtoWithMaxResources* result;
@end

@implementation MinimumUserProtoWithMaxResources_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserProtoWithMaxResources alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserProtoWithMaxResources_Builder*) clear {
  self.result = [[MinimumUserProtoWithMaxResources alloc] init];
  return self;
}
- (MinimumUserProtoWithMaxResources_Builder*) clone {
  return [MinimumUserProtoWithMaxResources builderWithPrototype:result];
}
- (MinimumUserProtoWithMaxResources*) defaultInstance {
  return [MinimumUserProtoWithMaxResources defaultInstance];
}
- (MinimumUserProtoWithMaxResources*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserProtoWithMaxResources*) buildPartial {
  MinimumUserProtoWithMaxResources* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserProtoWithMaxResources_Builder*) mergeFrom:(MinimumUserProtoWithMaxResources*) other {
  if (other == [MinimumUserProtoWithMaxResources defaultInstance]) {
    return self;
  }
  if (other.hasMinUserProto) {
    [self mergeMinUserProto:other.minUserProto];
  }
  if (other.hasMaxCash) {
    [self setMaxCash:other.maxCash];
  }
  if (other.hasMaxOil) {
    [self setMaxOil:other.maxOil];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserProtoWithMaxResources_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserProtoWithMaxResources_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasMinUserProto) {
          [subBuilder mergeFrom:self.minUserProto];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMinUserProto:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setMaxCash:[input readInt32]];
        break;
      }
      case 24: {
        [self setMaxOil:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMinUserProto {
  return result.hasMinUserProto;
}
- (MinimumUserProto*) minUserProto {
  return result.minUserProto;
}
- (MinimumUserProtoWithMaxResources_Builder*) setMinUserProto:(MinimumUserProto*) value {
  result.hasMinUserProto = YES;
  result.minUserProto = value;
  return self;
}
- (MinimumUserProtoWithMaxResources_Builder*) setMinUserProto_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setMinUserProto:[builderForValue build]];
}
- (MinimumUserProtoWithMaxResources_Builder*) mergeMinUserProto:(MinimumUserProto*) value {
  if (result.hasMinUserProto &&
      result.minUserProto != [MinimumUserProto defaultInstance]) {
    result.minUserProto =
      [[[MinimumUserProto builderWithPrototype:result.minUserProto] mergeFrom:value] buildPartial];
  } else {
    result.minUserProto = value;
  }
  result.hasMinUserProto = YES;
  return self;
}
- (MinimumUserProtoWithMaxResources_Builder*) clearMinUserProto {
  result.hasMinUserProto = NO;
  result.minUserProto = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasMaxCash {
  return result.hasMaxCash;
}
- (int32_t) maxCash {
  return result.maxCash;
}
- (MinimumUserProtoWithMaxResources_Builder*) setMaxCash:(int32_t) value {
  result.hasMaxCash = YES;
  result.maxCash = value;
  return self;
}
- (MinimumUserProtoWithMaxResources_Builder*) clearMaxCash {
  result.hasMaxCash = NO;
  result.maxCash = 0;
  return self;
}
- (BOOL) hasMaxOil {
  return result.hasMaxOil;
}
- (int32_t) maxOil {
  return result.maxOil;
}
- (MinimumUserProtoWithMaxResources_Builder*) setMaxOil:(int32_t) value {
  result.hasMaxOil = YES;
  result.maxOil = value;
  return self;
}
- (MinimumUserProtoWithMaxResources_Builder*) clearMaxOil {
  result.hasMaxOil = NO;
  result.maxOil = 0;
  return self;
}
@end

@interface UserFacebookInviteForSlotProto ()
@property (strong) NSString* inviteUuid;
@property (strong) MinimumUserProtoWithFacebookId* inviter;
@property (strong) NSString* recipientFacebookId;
@property int64_t timeOfInvite;
@property int64_t timeAccepted;
@property (strong) NSString* userStructUuid;
@property int32_t structFbLvl;
@property int64_t redeemedTime;
@end

@implementation UserFacebookInviteForSlotProto

- (BOOL) hasInviteUuid {
  return !!hasInviteUuid_;
}
- (void) setHasInviteUuid:(BOOL) value_ {
  hasInviteUuid_ = !!value_;
}
@synthesize inviteUuid;
- (BOOL) hasInviter {
  return !!hasInviter_;
}
- (void) setHasInviter:(BOOL) value_ {
  hasInviter_ = !!value_;
}
@synthesize inviter;
- (BOOL) hasRecipientFacebookId {
  return !!hasRecipientFacebookId_;
}
- (void) setHasRecipientFacebookId:(BOOL) value_ {
  hasRecipientFacebookId_ = !!value_;
}
@synthesize recipientFacebookId;
- (BOOL) hasTimeOfInvite {
  return !!hasTimeOfInvite_;
}
- (void) setHasTimeOfInvite:(BOOL) value_ {
  hasTimeOfInvite_ = !!value_;
}
@synthesize timeOfInvite;
- (BOOL) hasTimeAccepted {
  return !!hasTimeAccepted_;
}
- (void) setHasTimeAccepted:(BOOL) value_ {
  hasTimeAccepted_ = !!value_;
}
@synthesize timeAccepted;
- (BOOL) hasUserStructUuid {
  return !!hasUserStructUuid_;
}
- (void) setHasUserStructUuid:(BOOL) value_ {
  hasUserStructUuid_ = !!value_;
}
@synthesize userStructUuid;
- (BOOL) hasStructFbLvl {
  return !!hasStructFbLvl_;
}
- (void) setHasStructFbLvl:(BOOL) value_ {
  hasStructFbLvl_ = !!value_;
}
@synthesize structFbLvl;
- (BOOL) hasRedeemedTime {
  return !!hasRedeemedTime_;
}
- (void) setHasRedeemedTime:(BOOL) value_ {
  hasRedeemedTime_ = !!value_;
}
@synthesize redeemedTime;
- (id) init {
  if ((self = [super init])) {
    self.inviteUuid = @"";
    self.inviter = [MinimumUserProtoWithFacebookId defaultInstance];
    self.recipientFacebookId = @"";
    self.timeOfInvite = 0L;
    self.timeAccepted = 0L;
    self.userStructUuid = @"";
    self.structFbLvl = 0;
    self.redeemedTime = 0L;
  }
  return self;
}
static UserFacebookInviteForSlotProto* defaultUserFacebookInviteForSlotProtoInstance = nil;
+ (void) initialize {
  if (self == [UserFacebookInviteForSlotProto class]) {
    defaultUserFacebookInviteForSlotProtoInstance = [[UserFacebookInviteForSlotProto alloc] init];
  }
}
+ (UserFacebookInviteForSlotProto*) defaultInstance {
  return defaultUserFacebookInviteForSlotProtoInstance;
}
- (UserFacebookInviteForSlotProto*) defaultInstance {
  return defaultUserFacebookInviteForSlotProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInviteUuid) {
    [output writeString:1 value:self.inviteUuid];
  }
  if (self.hasInviter) {
    [output writeMessage:2 value:self.inviter];
  }
  if (self.hasRecipientFacebookId) {
    [output writeString:3 value:self.recipientFacebookId];
  }
  if (self.hasTimeOfInvite) {
    [output writeInt64:4 value:self.timeOfInvite];
  }
  if (self.hasTimeAccepted) {
    [output writeInt64:5 value:self.timeAccepted];
  }
  if (self.hasUserStructUuid) {
    [output writeString:6 value:self.userStructUuid];
  }
  if (self.hasStructFbLvl) {
    [output writeInt32:7 value:self.structFbLvl];
  }
  if (self.hasRedeemedTime) {
    [output writeInt64:8 value:self.redeemedTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInviteUuid) {
    size_ += computeStringSize(1, self.inviteUuid);
  }
  if (self.hasInviter) {
    size_ += computeMessageSize(2, self.inviter);
  }
  if (self.hasRecipientFacebookId) {
    size_ += computeStringSize(3, self.recipientFacebookId);
  }
  if (self.hasTimeOfInvite) {
    size_ += computeInt64Size(4, self.timeOfInvite);
  }
  if (self.hasTimeAccepted) {
    size_ += computeInt64Size(5, self.timeAccepted);
  }
  if (self.hasUserStructUuid) {
    size_ += computeStringSize(6, self.userStructUuid);
  }
  if (self.hasStructFbLvl) {
    size_ += computeInt32Size(7, self.structFbLvl);
  }
  if (self.hasRedeemedTime) {
    size_ += computeInt64Size(8, self.redeemedTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserFacebookInviteForSlotProto*) parseFromData:(NSData*) data {
  return (UserFacebookInviteForSlotProto*)[[[UserFacebookInviteForSlotProto builder] mergeFromData:data] build];
}
+ (UserFacebookInviteForSlotProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserFacebookInviteForSlotProto*)[[[UserFacebookInviteForSlotProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserFacebookInviteForSlotProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserFacebookInviteForSlotProto*)[[[UserFacebookInviteForSlotProto builder] mergeFromInputStream:input] build];
}
+ (UserFacebookInviteForSlotProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserFacebookInviteForSlotProto*)[[[UserFacebookInviteForSlotProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserFacebookInviteForSlotProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserFacebookInviteForSlotProto*)[[[UserFacebookInviteForSlotProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserFacebookInviteForSlotProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserFacebookInviteForSlotProto*)[[[UserFacebookInviteForSlotProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserFacebookInviteForSlotProto_Builder*) builder {
  return [[UserFacebookInviteForSlotProto_Builder alloc] init];
}
+ (UserFacebookInviteForSlotProto_Builder*) builderWithPrototype:(UserFacebookInviteForSlotProto*) prototype {
  return [[UserFacebookInviteForSlotProto builder] mergeFrom:prototype];
}
- (UserFacebookInviteForSlotProto_Builder*) builder {
  return [UserFacebookInviteForSlotProto builder];
}
- (UserFacebookInviteForSlotProto_Builder*) toBuilder {
  return [UserFacebookInviteForSlotProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInviteUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"inviteUuid", self.inviteUuid];
  }
  if (self.hasInviter) {
    [output appendFormat:@"%@%@ {\n", indent, @"inviter"];
    [self.inviter writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRecipientFacebookId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"recipientFacebookId", self.recipientFacebookId];
  }
  if (self.hasTimeOfInvite) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeOfInvite", [NSNumber numberWithLongLong:self.timeOfInvite]];
  }
  if (self.hasTimeAccepted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeAccepted", [NSNumber numberWithLongLong:self.timeAccepted]];
  }
  if (self.hasUserStructUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userStructUuid", self.userStructUuid];
  }
  if (self.hasStructFbLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"structFbLvl", [NSNumber numberWithInteger:self.structFbLvl]];
  }
  if (self.hasRedeemedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"redeemedTime", [NSNumber numberWithLongLong:self.redeemedTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserFacebookInviteForSlotProto class]]) {
    return NO;
  }
  UserFacebookInviteForSlotProto *otherMessage = other;
  return
      self.hasInviteUuid == otherMessage.hasInviteUuid &&
      (!self.hasInviteUuid || [self.inviteUuid isEqual:otherMessage.inviteUuid]) &&
      self.hasInviter == otherMessage.hasInviter &&
      (!self.hasInviter || [self.inviter isEqual:otherMessage.inviter]) &&
      self.hasRecipientFacebookId == otherMessage.hasRecipientFacebookId &&
      (!self.hasRecipientFacebookId || [self.recipientFacebookId isEqual:otherMessage.recipientFacebookId]) &&
      self.hasTimeOfInvite == otherMessage.hasTimeOfInvite &&
      (!self.hasTimeOfInvite || self.timeOfInvite == otherMessage.timeOfInvite) &&
      self.hasTimeAccepted == otherMessage.hasTimeAccepted &&
      (!self.hasTimeAccepted || self.timeAccepted == otherMessage.timeAccepted) &&
      self.hasUserStructUuid == otherMessage.hasUserStructUuid &&
      (!self.hasUserStructUuid || [self.userStructUuid isEqual:otherMessage.userStructUuid]) &&
      self.hasStructFbLvl == otherMessage.hasStructFbLvl &&
      (!self.hasStructFbLvl || self.structFbLvl == otherMessage.structFbLvl) &&
      self.hasRedeemedTime == otherMessage.hasRedeemedTime &&
      (!self.hasRedeemedTime || self.redeemedTime == otherMessage.redeemedTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInviteUuid) {
    hashCode = hashCode * 31 + [self.inviteUuid hash];
  }
  if (self.hasInviter) {
    hashCode = hashCode * 31 + [self.inviter hash];
  }
  if (self.hasRecipientFacebookId) {
    hashCode = hashCode * 31 + [self.recipientFacebookId hash];
  }
  if (self.hasTimeOfInvite) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeOfInvite] hash];
  }
  if (self.hasTimeAccepted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeAccepted] hash];
  }
  if (self.hasUserStructUuid) {
    hashCode = hashCode * 31 + [self.userStructUuid hash];
  }
  if (self.hasStructFbLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.structFbLvl] hash];
  }
  if (self.hasRedeemedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.redeemedTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserFacebookInviteForSlotProto_Builder()
@property (strong) UserFacebookInviteForSlotProto* result;
@end

@implementation UserFacebookInviteForSlotProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserFacebookInviteForSlotProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserFacebookInviteForSlotProto_Builder*) clear {
  self.result = [[UserFacebookInviteForSlotProto alloc] init];
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clone {
  return [UserFacebookInviteForSlotProto builderWithPrototype:result];
}
- (UserFacebookInviteForSlotProto*) defaultInstance {
  return [UserFacebookInviteForSlotProto defaultInstance];
}
- (UserFacebookInviteForSlotProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserFacebookInviteForSlotProto*) buildPartial {
  UserFacebookInviteForSlotProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserFacebookInviteForSlotProto_Builder*) mergeFrom:(UserFacebookInviteForSlotProto*) other {
  if (other == [UserFacebookInviteForSlotProto defaultInstance]) {
    return self;
  }
  if (other.hasInviteUuid) {
    [self setInviteUuid:other.inviteUuid];
  }
  if (other.hasInviter) {
    [self mergeInviter:other.inviter];
  }
  if (other.hasRecipientFacebookId) {
    [self setRecipientFacebookId:other.recipientFacebookId];
  }
  if (other.hasTimeOfInvite) {
    [self setTimeOfInvite:other.timeOfInvite];
  }
  if (other.hasTimeAccepted) {
    [self setTimeAccepted:other.timeAccepted];
  }
  if (other.hasUserStructUuid) {
    [self setUserStructUuid:other.userStructUuid];
  }
  if (other.hasStructFbLvl) {
    [self setStructFbLvl:other.structFbLvl];
  }
  if (other.hasRedeemedTime) {
    [self setRedeemedTime:other.redeemedTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserFacebookInviteForSlotProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setInviteUuid:[input readString]];
        break;
      }
      case 18: {
        MinimumUserProtoWithFacebookId_Builder* subBuilder = [MinimumUserProtoWithFacebookId builder];
        if (self.hasInviter) {
          [subBuilder mergeFrom:self.inviter];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setInviter:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setRecipientFacebookId:[input readString]];
        break;
      }
      case 32: {
        [self setTimeOfInvite:[input readInt64]];
        break;
      }
      case 40: {
        [self setTimeAccepted:[input readInt64]];
        break;
      }
      case 50: {
        [self setUserStructUuid:[input readString]];
        break;
      }
      case 56: {
        [self setStructFbLvl:[input readInt32]];
        break;
      }
      case 64: {
        [self setRedeemedTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasInviteUuid {
  return result.hasInviteUuid;
}
- (NSString*) inviteUuid {
  return result.inviteUuid;
}
- (UserFacebookInviteForSlotProto_Builder*) setInviteUuid:(NSString*) value {
  result.hasInviteUuid = YES;
  result.inviteUuid = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearInviteUuid {
  result.hasInviteUuid = NO;
  result.inviteUuid = @"";
  return self;
}
- (BOOL) hasInviter {
  return result.hasInviter;
}
- (MinimumUserProtoWithFacebookId*) inviter {
  return result.inviter;
}
- (UserFacebookInviteForSlotProto_Builder*) setInviter:(MinimumUserProtoWithFacebookId*) value {
  result.hasInviter = YES;
  result.inviter = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) setInviter_Builder:(MinimumUserProtoWithFacebookId_Builder*) builderForValue {
  return [self setInviter:[builderForValue build]];
}
- (UserFacebookInviteForSlotProto_Builder*) mergeInviter:(MinimumUserProtoWithFacebookId*) value {
  if (result.hasInviter &&
      result.inviter != [MinimumUserProtoWithFacebookId defaultInstance]) {
    result.inviter =
      [[[MinimumUserProtoWithFacebookId builderWithPrototype:result.inviter] mergeFrom:value] buildPartial];
  } else {
    result.inviter = value;
  }
  result.hasInviter = YES;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearInviter {
  result.hasInviter = NO;
  result.inviter = [MinimumUserProtoWithFacebookId defaultInstance];
  return self;
}
- (BOOL) hasRecipientFacebookId {
  return result.hasRecipientFacebookId;
}
- (NSString*) recipientFacebookId {
  return result.recipientFacebookId;
}
- (UserFacebookInviteForSlotProto_Builder*) setRecipientFacebookId:(NSString*) value {
  result.hasRecipientFacebookId = YES;
  result.recipientFacebookId = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearRecipientFacebookId {
  result.hasRecipientFacebookId = NO;
  result.recipientFacebookId = @"";
  return self;
}
- (BOOL) hasTimeOfInvite {
  return result.hasTimeOfInvite;
}
- (int64_t) timeOfInvite {
  return result.timeOfInvite;
}
- (UserFacebookInviteForSlotProto_Builder*) setTimeOfInvite:(int64_t) value {
  result.hasTimeOfInvite = YES;
  result.timeOfInvite = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearTimeOfInvite {
  result.hasTimeOfInvite = NO;
  result.timeOfInvite = 0L;
  return self;
}
- (BOOL) hasTimeAccepted {
  return result.hasTimeAccepted;
}
- (int64_t) timeAccepted {
  return result.timeAccepted;
}
- (UserFacebookInviteForSlotProto_Builder*) setTimeAccepted:(int64_t) value {
  result.hasTimeAccepted = YES;
  result.timeAccepted = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearTimeAccepted {
  result.hasTimeAccepted = NO;
  result.timeAccepted = 0L;
  return self;
}
- (BOOL) hasUserStructUuid {
  return result.hasUserStructUuid;
}
- (NSString*) userStructUuid {
  return result.userStructUuid;
}
- (UserFacebookInviteForSlotProto_Builder*) setUserStructUuid:(NSString*) value {
  result.hasUserStructUuid = YES;
  result.userStructUuid = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearUserStructUuid {
  result.hasUserStructUuid = NO;
  result.userStructUuid = @"";
  return self;
}
- (BOOL) hasStructFbLvl {
  return result.hasStructFbLvl;
}
- (int32_t) structFbLvl {
  return result.structFbLvl;
}
- (UserFacebookInviteForSlotProto_Builder*) setStructFbLvl:(int32_t) value {
  result.hasStructFbLvl = YES;
  result.structFbLvl = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearStructFbLvl {
  result.hasStructFbLvl = NO;
  result.structFbLvl = 0;
  return self;
}
- (BOOL) hasRedeemedTime {
  return result.hasRedeemedTime;
}
- (int64_t) redeemedTime {
  return result.redeemedTime;
}
- (UserFacebookInviteForSlotProto_Builder*) setRedeemedTime:(int64_t) value {
  result.hasRedeemedTime = YES;
  result.redeemedTime = value;
  return self;
}
- (UserFacebookInviteForSlotProto_Builder*) clearRedeemedTime {
  result.hasRedeemedTime = NO;
  result.redeemedTime = 0L;
  return self;
}
@end

@interface FullUserProto ()
@property (strong) NSString* userUuid;
@property (strong) NSString* name;
@property int32_t level;
@property int32_t gems;
@property int32_t cash;
@property int32_t oil;
@property int32_t experience;
@property int32_t tasksCompleted;
@property (strong) NSString* referralCode;
@property int32_t numReferrals;
@property int64_t lastLoginTime;
@property int64_t lastLogoutTime;
@property BOOL isFake;
@property BOOL isAdmin;
@property int32_t numCoinsRetrievedFromStructs;
@property int32_t numOilRetrievedFromStructs;
@property (strong) MinimumClanProto* clan;
@property BOOL hasReceivedfbReward;
@property int32_t numBeginnerSalesPurchased;
@property (strong) NSString* facebookId;
@property (strong) NSString* gameCenterId;
@property int64_t lastObstacleSpawnedTime;
@property int32_t numObstaclesRemoved;
@property int32_t avatarMonsterId;
@property (strong) UserPvpLeagueProto* pvpLeagueInfo;
@property int64_t lastMiniJobSpawnedTime;
@property int64_t lastFreeBoosterPackTime;
@property int32_t numClanHelps;
@property int64_t lastSecretGiftCollectTime;
@property (strong) NSString* pvpDefendingMessage;
@property (strong) NSString* udidForHistory;
@property (strong) NSString* deviceToken;
@property int32_t numBadges;
@property int64_t createTime;
@property int32_t apsalarId;
@property int32_t numConsecutiveDaysPlayed;
@property int64_t lastWallPostNotificationTime;
@property (strong) NSString* kabamNaid;
@property BOOL fbIdSetOnUserCreate;
@property (strong) NSString* udid;
@end

@implementation FullUserProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasGems {
  return !!hasGems_;
}
- (void) setHasGems:(BOOL) value_ {
  hasGems_ = !!value_;
}
@synthesize gems;
- (BOOL) hasCash {
  return !!hasCash_;
}
- (void) setHasCash:(BOOL) value_ {
  hasCash_ = !!value_;
}
@synthesize cash;
- (BOOL) hasOil {
  return !!hasOil_;
}
- (void) setHasOil:(BOOL) value_ {
  hasOil_ = !!value_;
}
@synthesize oil;
- (BOOL) hasExperience {
  return !!hasExperience_;
}
- (void) setHasExperience:(BOOL) value_ {
  hasExperience_ = !!value_;
}
@synthesize experience;
- (BOOL) hasTasksCompleted {
  return !!hasTasksCompleted_;
}
- (void) setHasTasksCompleted:(BOOL) value_ {
  hasTasksCompleted_ = !!value_;
}
@synthesize tasksCompleted;
- (BOOL) hasReferralCode {
  return !!hasReferralCode_;
}
- (void) setHasReferralCode:(BOOL) value_ {
  hasReferralCode_ = !!value_;
}
@synthesize referralCode;
- (BOOL) hasNumReferrals {
  return !!hasNumReferrals_;
}
- (void) setHasNumReferrals:(BOOL) value_ {
  hasNumReferrals_ = !!value_;
}
@synthesize numReferrals;
- (BOOL) hasLastLoginTime {
  return !!hasLastLoginTime_;
}
- (void) setHasLastLoginTime:(BOOL) value_ {
  hasLastLoginTime_ = !!value_;
}
@synthesize lastLoginTime;
- (BOOL) hasLastLogoutTime {
  return !!hasLastLogoutTime_;
}
- (void) setHasLastLogoutTime:(BOOL) value_ {
  hasLastLogoutTime_ = !!value_;
}
@synthesize lastLogoutTime;
- (BOOL) hasIsFake {
  return !!hasIsFake_;
}
- (void) setHasIsFake:(BOOL) value_ {
  hasIsFake_ = !!value_;
}
- (BOOL) isFake {
  return !!isFake_;
}
- (void) setIsFake:(BOOL) value_ {
  isFake_ = !!value_;
}
- (BOOL) hasIsAdmin {
  return !!hasIsAdmin_;
}
- (void) setHasIsAdmin:(BOOL) value_ {
  hasIsAdmin_ = !!value_;
}
- (BOOL) isAdmin {
  return !!isAdmin_;
}
- (void) setIsAdmin:(BOOL) value_ {
  isAdmin_ = !!value_;
}
- (BOOL) hasNumCoinsRetrievedFromStructs {
  return !!hasNumCoinsRetrievedFromStructs_;
}
- (void) setHasNumCoinsRetrievedFromStructs:(BOOL) value_ {
  hasNumCoinsRetrievedFromStructs_ = !!value_;
}
@synthesize numCoinsRetrievedFromStructs;
- (BOOL) hasNumOilRetrievedFromStructs {
  return !!hasNumOilRetrievedFromStructs_;
}
- (void) setHasNumOilRetrievedFromStructs:(BOOL) value_ {
  hasNumOilRetrievedFromStructs_ = !!value_;
}
@synthesize numOilRetrievedFromStructs;
- (BOOL) hasClan {
  return !!hasClan_;
}
- (void) setHasClan:(BOOL) value_ {
  hasClan_ = !!value_;
}
@synthesize clan;
- (BOOL) hasHasReceivedfbReward {
  return !!hasHasReceivedfbReward_;
}
- (void) setHasHasReceivedfbReward:(BOOL) value_ {
  hasHasReceivedfbReward_ = !!value_;
}
- (BOOL) hasReceivedfbReward {
  return !!hasReceivedfbReward_;
}
- (void) setHasReceivedfbReward:(BOOL) value_ {
  hasReceivedfbReward_ = !!value_;
}
- (BOOL) hasNumBeginnerSalesPurchased {
  return !!hasNumBeginnerSalesPurchased_;
}
- (void) setHasNumBeginnerSalesPurchased:(BOOL) value_ {
  hasNumBeginnerSalesPurchased_ = !!value_;
}
@synthesize numBeginnerSalesPurchased;
- (BOOL) hasFacebookId {
  return !!hasFacebookId_;
}
- (void) setHasFacebookId:(BOOL) value_ {
  hasFacebookId_ = !!value_;
}
@synthesize facebookId;
- (BOOL) hasGameCenterId {
  return !!hasGameCenterId_;
}
- (void) setHasGameCenterId:(BOOL) value_ {
  hasGameCenterId_ = !!value_;
}
@synthesize gameCenterId;
- (BOOL) hasLastObstacleSpawnedTime {
  return !!hasLastObstacleSpawnedTime_;
}
- (void) setHasLastObstacleSpawnedTime:(BOOL) value_ {
  hasLastObstacleSpawnedTime_ = !!value_;
}
@synthesize lastObstacleSpawnedTime;
- (BOOL) hasNumObstaclesRemoved {
  return !!hasNumObstaclesRemoved_;
}
- (void) setHasNumObstaclesRemoved:(BOOL) value_ {
  hasNumObstaclesRemoved_ = !!value_;
}
@synthesize numObstaclesRemoved;
- (BOOL) hasAvatarMonsterId {
  return !!hasAvatarMonsterId_;
}
- (void) setHasAvatarMonsterId:(BOOL) value_ {
  hasAvatarMonsterId_ = !!value_;
}
@synthesize avatarMonsterId;
- (BOOL) hasPvpLeagueInfo {
  return !!hasPvpLeagueInfo_;
}
- (void) setHasPvpLeagueInfo:(BOOL) value_ {
  hasPvpLeagueInfo_ = !!value_;
}
@synthesize pvpLeagueInfo;
- (BOOL) hasLastMiniJobSpawnedTime {
  return !!hasLastMiniJobSpawnedTime_;
}
- (void) setHasLastMiniJobSpawnedTime:(BOOL) value_ {
  hasLastMiniJobSpawnedTime_ = !!value_;
}
@synthesize lastMiniJobSpawnedTime;
- (BOOL) hasLastFreeBoosterPackTime {
  return !!hasLastFreeBoosterPackTime_;
}
- (void) setHasLastFreeBoosterPackTime:(BOOL) value_ {
  hasLastFreeBoosterPackTime_ = !!value_;
}
@synthesize lastFreeBoosterPackTime;
- (BOOL) hasNumClanHelps {
  return !!hasNumClanHelps_;
}
- (void) setHasNumClanHelps:(BOOL) value_ {
  hasNumClanHelps_ = !!value_;
}
@synthesize numClanHelps;
- (BOOL) hasLastSecretGiftCollectTime {
  return !!hasLastSecretGiftCollectTime_;
}
- (void) setHasLastSecretGiftCollectTime:(BOOL) value_ {
  hasLastSecretGiftCollectTime_ = !!value_;
}
@synthesize lastSecretGiftCollectTime;
- (BOOL) hasPvpDefendingMessage {
  return !!hasPvpDefendingMessage_;
}
- (void) setHasPvpDefendingMessage:(BOOL) value_ {
  hasPvpDefendingMessage_ = !!value_;
}
@synthesize pvpDefendingMessage;
- (BOOL) hasUdidForHistory {
  return !!hasUdidForHistory_;
}
- (void) setHasUdidForHistory:(BOOL) value_ {
  hasUdidForHistory_ = !!value_;
}
@synthesize udidForHistory;
- (BOOL) hasDeviceToken {
  return !!hasDeviceToken_;
}
- (void) setHasDeviceToken:(BOOL) value_ {
  hasDeviceToken_ = !!value_;
}
@synthesize deviceToken;
- (BOOL) hasNumBadges {
  return !!hasNumBadges_;
}
- (void) setHasNumBadges:(BOOL) value_ {
  hasNumBadges_ = !!value_;
}
@synthesize numBadges;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (BOOL) hasApsalarId {
  return !!hasApsalarId_;
}
- (void) setHasApsalarId:(BOOL) value_ {
  hasApsalarId_ = !!value_;
}
@synthesize apsalarId;
- (BOOL) hasNumConsecutiveDaysPlayed {
  return !!hasNumConsecutiveDaysPlayed_;
}
- (void) setHasNumConsecutiveDaysPlayed:(BOOL) value_ {
  hasNumConsecutiveDaysPlayed_ = !!value_;
}
@synthesize numConsecutiveDaysPlayed;
- (BOOL) hasLastWallPostNotificationTime {
  return !!hasLastWallPostNotificationTime_;
}
- (void) setHasLastWallPostNotificationTime:(BOOL) value_ {
  hasLastWallPostNotificationTime_ = !!value_;
}
@synthesize lastWallPostNotificationTime;
- (BOOL) hasKabamNaid {
  return !!hasKabamNaid_;
}
- (void) setHasKabamNaid:(BOOL) value_ {
  hasKabamNaid_ = !!value_;
}
@synthesize kabamNaid;
- (BOOL) hasFbIdSetOnUserCreate {
  return !!hasFbIdSetOnUserCreate_;
}
- (void) setHasFbIdSetOnUserCreate:(BOOL) value_ {
  hasFbIdSetOnUserCreate_ = !!value_;
}
- (BOOL) fbIdSetOnUserCreate {
  return !!fbIdSetOnUserCreate_;
}
- (void) setFbIdSetOnUserCreate:(BOOL) value_ {
  fbIdSetOnUserCreate_ = !!value_;
}
- (BOOL) hasUdid {
  return !!hasUdid_;
}
- (void) setHasUdid:(BOOL) value_ {
  hasUdid_ = !!value_;
}
@synthesize udid;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.name = @"";
    self.level = 0;
    self.gems = 0;
    self.cash = 0;
    self.oil = 0;
    self.experience = 0;
    self.tasksCompleted = 0;
    self.referralCode = @"";
    self.numReferrals = 0;
    self.lastLoginTime = 0L;
    self.lastLogoutTime = 0L;
    self.isFake = NO;
    self.isAdmin = NO;
    self.numCoinsRetrievedFromStructs = 0;
    self.numOilRetrievedFromStructs = 0;
    self.clan = [MinimumClanProto defaultInstance];
    self.hasReceivedfbReward = NO;
    self.numBeginnerSalesPurchased = 0;
    self.facebookId = @"";
    self.gameCenterId = @"";
    self.lastObstacleSpawnedTime = 0L;
    self.numObstaclesRemoved = 0;
    self.avatarMonsterId = 0;
    self.pvpLeagueInfo = [UserPvpLeagueProto defaultInstance];
    self.lastMiniJobSpawnedTime = 0L;
    self.lastFreeBoosterPackTime = 0L;
    self.numClanHelps = 0;
    self.lastSecretGiftCollectTime = 0L;
    self.pvpDefendingMessage = @"";
    self.udidForHistory = @"";
    self.deviceToken = @"";
    self.numBadges = 0;
    self.createTime = 0L;
    self.apsalarId = 0;
    self.numConsecutiveDaysPlayed = 0;
    self.lastWallPostNotificationTime = 0L;
    self.kabamNaid = @"";
    self.fbIdSetOnUserCreate = NO;
    self.udid = @"";
  }
  return self;
}
static FullUserProto* defaultFullUserProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserProto class]) {
    defaultFullUserProtoInstance = [[FullUserProto alloc] init];
  }
}
+ (FullUserProto*) defaultInstance {
  return defaultFullUserProtoInstance;
}
- (FullUserProto*) defaultInstance {
  return defaultFullUserProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasLevel) {
    [output writeInt32:3 value:self.level];
  }
  if (self.hasGems) {
    [output writeInt32:4 value:self.gems];
  }
  if (self.hasCash) {
    [output writeInt32:5 value:self.cash];
  }
  if (self.hasExperience) {
    [output writeInt32:6 value:self.experience];
  }
  if (self.hasTasksCompleted) {
    [output writeInt32:7 value:self.tasksCompleted];
  }
  if (self.hasReferralCode) {
    [output writeString:11 value:self.referralCode];
  }
  if (self.hasNumReferrals) {
    [output writeInt32:12 value:self.numReferrals];
  }
  if (self.hasUdid) {
    [output writeString:13 value:self.udid];
  }
  if (self.hasLastLoginTime) {
    [output writeInt64:14 value:self.lastLoginTime];
  }
  if (self.hasLastLogoutTime) {
    [output writeInt64:15 value:self.lastLogoutTime];
  }
  if (self.hasDeviceToken) {
    [output writeString:16 value:self.deviceToken];
  }
  if (self.hasNumBadges) {
    [output writeInt32:18 value:self.numBadges];
  }
  if (self.hasIsFake) {
    [output writeBool:19 value:self.isFake];
  }
  if (self.hasCreateTime) {
    [output writeInt64:20 value:self.createTime];
  }
  if (self.hasIsAdmin) {
    [output writeBool:21 value:self.isAdmin];
  }
  if (self.hasApsalarId) {
    [output writeInt32:22 value:self.apsalarId];
  }
  if (self.hasNumCoinsRetrievedFromStructs) {
    [output writeInt32:23 value:self.numCoinsRetrievedFromStructs];
  }
  if (self.hasNumConsecutiveDaysPlayed) {
    [output writeInt32:24 value:self.numConsecutiveDaysPlayed];
  }
  if (self.hasClan) {
    [output writeMessage:25 value:self.clan];
  }
  if (self.hasLastWallPostNotificationTime) {
    [output writeInt64:26 value:self.lastWallPostNotificationTime];
  }
  if (self.hasKabamNaid) {
    [output writeString:27 value:self.kabamNaid];
  }
  if (self.hasHasReceivedfbReward) {
    [output writeBool:28 value:self.hasReceivedfbReward];
  }
  if (self.hasNumBeginnerSalesPurchased) {
    [output writeInt32:30 value:self.numBeginnerSalesPurchased];
  }
  if (self.hasFacebookId) {
    [output writeString:40 value:self.facebookId];
  }
  if (self.hasOil) {
    [output writeInt32:42 value:self.oil];
  }
  if (self.hasNumOilRetrievedFromStructs) {
    [output writeInt32:43 value:self.numOilRetrievedFromStructs];
  }
  if (self.hasFbIdSetOnUserCreate) {
    [output writeBool:44 value:self.fbIdSetOnUserCreate];
  }
  if (self.hasGameCenterId) {
    [output writeString:45 value:self.gameCenterId];
  }
  if (self.hasUdidForHistory) {
    [output writeString:46 value:self.udidForHistory];
  }
  if (self.hasLastObstacleSpawnedTime) {
    [output writeInt64:47 value:self.lastObstacleSpawnedTime];
  }
  if (self.hasPvpLeagueInfo) {
    [output writeMessage:48 value:self.pvpLeagueInfo];
  }
  if (self.hasNumObstaclesRemoved) {
    [output writeInt32:49 value:self.numObstaclesRemoved];
  }
  if (self.hasLastMiniJobSpawnedTime) {
    [output writeInt64:50 value:self.lastMiniJobSpawnedTime];
  }
  if (self.hasAvatarMonsterId) {
    [output writeInt32:51 value:self.avatarMonsterId];
  }
  if (self.hasLastFreeBoosterPackTime) {
    [output writeInt64:52 value:self.lastFreeBoosterPackTime];
  }
  if (self.hasNumClanHelps) {
    [output writeInt32:53 value:self.numClanHelps];
  }
  if (self.hasLastSecretGiftCollectTime) {
    [output writeInt64:54 value:self.lastSecretGiftCollectTime];
  }
  if (self.hasPvpDefendingMessage) {
    [output writeString:56 value:self.pvpDefendingMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(3, self.level);
  }
  if (self.hasGems) {
    size_ += computeInt32Size(4, self.gems);
  }
  if (self.hasCash) {
    size_ += computeInt32Size(5, self.cash);
  }
  if (self.hasExperience) {
    size_ += computeInt32Size(6, self.experience);
  }
  if (self.hasTasksCompleted) {
    size_ += computeInt32Size(7, self.tasksCompleted);
  }
  if (self.hasReferralCode) {
    size_ += computeStringSize(11, self.referralCode);
  }
  if (self.hasNumReferrals) {
    size_ += computeInt32Size(12, self.numReferrals);
  }
  if (self.hasUdid) {
    size_ += computeStringSize(13, self.udid);
  }
  if (self.hasLastLoginTime) {
    size_ += computeInt64Size(14, self.lastLoginTime);
  }
  if (self.hasLastLogoutTime) {
    size_ += computeInt64Size(15, self.lastLogoutTime);
  }
  if (self.hasDeviceToken) {
    size_ += computeStringSize(16, self.deviceToken);
  }
  if (self.hasNumBadges) {
    size_ += computeInt32Size(18, self.numBadges);
  }
  if (self.hasIsFake) {
    size_ += computeBoolSize(19, self.isFake);
  }
  if (self.hasCreateTime) {
    size_ += computeInt64Size(20, self.createTime);
  }
  if (self.hasIsAdmin) {
    size_ += computeBoolSize(21, self.isAdmin);
  }
  if (self.hasApsalarId) {
    size_ += computeInt32Size(22, self.apsalarId);
  }
  if (self.hasNumCoinsRetrievedFromStructs) {
    size_ += computeInt32Size(23, self.numCoinsRetrievedFromStructs);
  }
  if (self.hasNumConsecutiveDaysPlayed) {
    size_ += computeInt32Size(24, self.numConsecutiveDaysPlayed);
  }
  if (self.hasClan) {
    size_ += computeMessageSize(25, self.clan);
  }
  if (self.hasLastWallPostNotificationTime) {
    size_ += computeInt64Size(26, self.lastWallPostNotificationTime);
  }
  if (self.hasKabamNaid) {
    size_ += computeStringSize(27, self.kabamNaid);
  }
  if (self.hasHasReceivedfbReward) {
    size_ += computeBoolSize(28, self.hasReceivedfbReward);
  }
  if (self.hasNumBeginnerSalesPurchased) {
    size_ += computeInt32Size(30, self.numBeginnerSalesPurchased);
  }
  if (self.hasFacebookId) {
    size_ += computeStringSize(40, self.facebookId);
  }
  if (self.hasOil) {
    size_ += computeInt32Size(42, self.oil);
  }
  if (self.hasNumOilRetrievedFromStructs) {
    size_ += computeInt32Size(43, self.numOilRetrievedFromStructs);
  }
  if (self.hasFbIdSetOnUserCreate) {
    size_ += computeBoolSize(44, self.fbIdSetOnUserCreate);
  }
  if (self.hasGameCenterId) {
    size_ += computeStringSize(45, self.gameCenterId);
  }
  if (self.hasUdidForHistory) {
    size_ += computeStringSize(46, self.udidForHistory);
  }
  if (self.hasLastObstacleSpawnedTime) {
    size_ += computeInt64Size(47, self.lastObstacleSpawnedTime);
  }
  if (self.hasPvpLeagueInfo) {
    size_ += computeMessageSize(48, self.pvpLeagueInfo);
  }
  if (self.hasNumObstaclesRemoved) {
    size_ += computeInt32Size(49, self.numObstaclesRemoved);
  }
  if (self.hasLastMiniJobSpawnedTime) {
    size_ += computeInt64Size(50, self.lastMiniJobSpawnedTime);
  }
  if (self.hasAvatarMonsterId) {
    size_ += computeInt32Size(51, self.avatarMonsterId);
  }
  if (self.hasLastFreeBoosterPackTime) {
    size_ += computeInt64Size(52, self.lastFreeBoosterPackTime);
  }
  if (self.hasNumClanHelps) {
    size_ += computeInt32Size(53, self.numClanHelps);
  }
  if (self.hasLastSecretGiftCollectTime) {
    size_ += computeInt64Size(54, self.lastSecretGiftCollectTime);
  }
  if (self.hasPvpDefendingMessage) {
    size_ += computeStringSize(56, self.pvpDefendingMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FullUserProto*) parseFromData:(NSData*) data {
  return (FullUserProto*)[[[FullUserProto builder] mergeFromData:data] build];
}
+ (FullUserProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserProto*)[[[FullUserProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserProto*)[[[FullUserProto builder] mergeFromInputStream:input] build];
}
+ (FullUserProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserProto*)[[[FullUserProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserProto*)[[[FullUserProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserProto*)[[[FullUserProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserProto_Builder*) builder {
  return [[FullUserProto_Builder alloc] init];
}
+ (FullUserProto_Builder*) builderWithPrototype:(FullUserProto*) prototype {
  return [[FullUserProto builder] mergeFrom:prototype];
}
- (FullUserProto_Builder*) builder {
  return [FullUserProto builder];
}
- (FullUserProto_Builder*) toBuilder {
  return [FullUserProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasGems) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gems", [NSNumber numberWithInteger:self.gems]];
  }
  if (self.hasCash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cash", [NSNumber numberWithInteger:self.cash]];
  }
  if (self.hasExperience) {
    [output appendFormat:@"%@%@: %@\n", indent, @"experience", [NSNumber numberWithInteger:self.experience]];
  }
  if (self.hasTasksCompleted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tasksCompleted", [NSNumber numberWithInteger:self.tasksCompleted]];
  }
  if (self.hasReferralCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"referralCode", self.referralCode];
  }
  if (self.hasNumReferrals) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numReferrals", [NSNumber numberWithInteger:self.numReferrals]];
  }
  if (self.hasUdid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udid", self.udid];
  }
  if (self.hasLastLoginTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastLoginTime", [NSNumber numberWithLongLong:self.lastLoginTime]];
  }
  if (self.hasLastLogoutTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastLogoutTime", [NSNumber numberWithLongLong:self.lastLogoutTime]];
  }
  if (self.hasDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceToken", self.deviceToken];
  }
  if (self.hasNumBadges) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numBadges", [NSNumber numberWithInteger:self.numBadges]];
  }
  if (self.hasIsFake) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFake", [NSNumber numberWithBool:self.isFake]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithLongLong:self.createTime]];
  }
  if (self.hasIsAdmin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isAdmin", [NSNumber numberWithBool:self.isAdmin]];
  }
  if (self.hasApsalarId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"apsalarId", [NSNumber numberWithInteger:self.apsalarId]];
  }
  if (self.hasNumCoinsRetrievedFromStructs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numCoinsRetrievedFromStructs", [NSNumber numberWithInteger:self.numCoinsRetrievedFromStructs]];
  }
  if (self.hasNumConsecutiveDaysPlayed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numConsecutiveDaysPlayed", [NSNumber numberWithInteger:self.numConsecutiveDaysPlayed]];
  }
  if (self.hasClan) {
    [output appendFormat:@"%@%@ {\n", indent, @"clan"];
    [self.clan writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLastWallPostNotificationTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastWallPostNotificationTime", [NSNumber numberWithLongLong:self.lastWallPostNotificationTime]];
  }
  if (self.hasKabamNaid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"kabamNaid", self.kabamNaid];
  }
  if (self.hasHasReceivedfbReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasReceivedfbReward", [NSNumber numberWithBool:self.hasReceivedfbReward]];
  }
  if (self.hasNumBeginnerSalesPurchased) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numBeginnerSalesPurchased", [NSNumber numberWithInteger:self.numBeginnerSalesPurchased]];
  }
  if (self.hasFacebookId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"facebookId", self.facebookId];
  }
  if (self.hasOil) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oil", [NSNumber numberWithInteger:self.oil]];
  }
  if (self.hasNumOilRetrievedFromStructs) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numOilRetrievedFromStructs", [NSNumber numberWithInteger:self.numOilRetrievedFromStructs]];
  }
  if (self.hasFbIdSetOnUserCreate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fbIdSetOnUserCreate", [NSNumber numberWithBool:self.fbIdSetOnUserCreate]];
  }
  if (self.hasGameCenterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gameCenterId", self.gameCenterId];
  }
  if (self.hasUdidForHistory) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udidForHistory", self.udidForHistory];
  }
  if (self.hasLastObstacleSpawnedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastObstacleSpawnedTime", [NSNumber numberWithLongLong:self.lastObstacleSpawnedTime]];
  }
  if (self.hasPvpLeagueInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"pvpLeagueInfo"];
    [self.pvpLeagueInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasNumObstaclesRemoved) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numObstaclesRemoved", [NSNumber numberWithInteger:self.numObstaclesRemoved]];
  }
  if (self.hasLastMiniJobSpawnedTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastMiniJobSpawnedTime", [NSNumber numberWithLongLong:self.lastMiniJobSpawnedTime]];
  }
  if (self.hasAvatarMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avatarMonsterId", [NSNumber numberWithInteger:self.avatarMonsterId]];
  }
  if (self.hasLastFreeBoosterPackTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastFreeBoosterPackTime", [NSNumber numberWithLongLong:self.lastFreeBoosterPackTime]];
  }
  if (self.hasNumClanHelps) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numClanHelps", [NSNumber numberWithInteger:self.numClanHelps]];
  }
  if (self.hasLastSecretGiftCollectTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lastSecretGiftCollectTime", [NSNumber numberWithLongLong:self.lastSecretGiftCollectTime]];
  }
  if (self.hasPvpDefendingMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pvpDefendingMessage", self.pvpDefendingMessage];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FullUserProto class]]) {
    return NO;
  }
  FullUserProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasGems == otherMessage.hasGems &&
      (!self.hasGems || self.gems == otherMessage.gems) &&
      self.hasCash == otherMessage.hasCash &&
      (!self.hasCash || self.cash == otherMessage.cash) &&
      self.hasExperience == otherMessage.hasExperience &&
      (!self.hasExperience || self.experience == otherMessage.experience) &&
      self.hasTasksCompleted == otherMessage.hasTasksCompleted &&
      (!self.hasTasksCompleted || self.tasksCompleted == otherMessage.tasksCompleted) &&
      self.hasReferralCode == otherMessage.hasReferralCode &&
      (!self.hasReferralCode || [self.referralCode isEqual:otherMessage.referralCode]) &&
      self.hasNumReferrals == otherMessage.hasNumReferrals &&
      (!self.hasNumReferrals || self.numReferrals == otherMessage.numReferrals) &&
      self.hasUdid == otherMessage.hasUdid &&
      (!self.hasUdid || [self.udid isEqual:otherMessage.udid]) &&
      self.hasLastLoginTime == otherMessage.hasLastLoginTime &&
      (!self.hasLastLoginTime || self.lastLoginTime == otherMessage.lastLoginTime) &&
      self.hasLastLogoutTime == otherMessage.hasLastLogoutTime &&
      (!self.hasLastLogoutTime || self.lastLogoutTime == otherMessage.lastLogoutTime) &&
      self.hasDeviceToken == otherMessage.hasDeviceToken &&
      (!self.hasDeviceToken || [self.deviceToken isEqual:otherMessage.deviceToken]) &&
      self.hasNumBadges == otherMessage.hasNumBadges &&
      (!self.hasNumBadges || self.numBadges == otherMessage.numBadges) &&
      self.hasIsFake == otherMessage.hasIsFake &&
      (!self.hasIsFake || self.isFake == otherMessage.isFake) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      self.hasIsAdmin == otherMessage.hasIsAdmin &&
      (!self.hasIsAdmin || self.isAdmin == otherMessage.isAdmin) &&
      self.hasApsalarId == otherMessage.hasApsalarId &&
      (!self.hasApsalarId || self.apsalarId == otherMessage.apsalarId) &&
      self.hasNumCoinsRetrievedFromStructs == otherMessage.hasNumCoinsRetrievedFromStructs &&
      (!self.hasNumCoinsRetrievedFromStructs || self.numCoinsRetrievedFromStructs == otherMessage.numCoinsRetrievedFromStructs) &&
      self.hasNumConsecutiveDaysPlayed == otherMessage.hasNumConsecutiveDaysPlayed &&
      (!self.hasNumConsecutiveDaysPlayed || self.numConsecutiveDaysPlayed == otherMessage.numConsecutiveDaysPlayed) &&
      self.hasClan == otherMessage.hasClan &&
      (!self.hasClan || [self.clan isEqual:otherMessage.clan]) &&
      self.hasLastWallPostNotificationTime == otherMessage.hasLastWallPostNotificationTime &&
      (!self.hasLastWallPostNotificationTime || self.lastWallPostNotificationTime == otherMessage.lastWallPostNotificationTime) &&
      self.hasKabamNaid == otherMessage.hasKabamNaid &&
      (!self.hasKabamNaid || [self.kabamNaid isEqual:otherMessage.kabamNaid]) &&
      self.hasHasReceivedfbReward == otherMessage.hasHasReceivedfbReward &&
      (!self.hasHasReceivedfbReward || self.hasReceivedfbReward == otherMessage.hasReceivedfbReward) &&
      self.hasNumBeginnerSalesPurchased == otherMessage.hasNumBeginnerSalesPurchased &&
      (!self.hasNumBeginnerSalesPurchased || self.numBeginnerSalesPurchased == otherMessage.numBeginnerSalesPurchased) &&
      self.hasFacebookId == otherMessage.hasFacebookId &&
      (!self.hasFacebookId || [self.facebookId isEqual:otherMessage.facebookId]) &&
      self.hasOil == otherMessage.hasOil &&
      (!self.hasOil || self.oil == otherMessage.oil) &&
      self.hasNumOilRetrievedFromStructs == otherMessage.hasNumOilRetrievedFromStructs &&
      (!self.hasNumOilRetrievedFromStructs || self.numOilRetrievedFromStructs == otherMessage.numOilRetrievedFromStructs) &&
      self.hasFbIdSetOnUserCreate == otherMessage.hasFbIdSetOnUserCreate &&
      (!self.hasFbIdSetOnUserCreate || self.fbIdSetOnUserCreate == otherMessage.fbIdSetOnUserCreate) &&
      self.hasGameCenterId == otherMessage.hasGameCenterId &&
      (!self.hasGameCenterId || [self.gameCenterId isEqual:otherMessage.gameCenterId]) &&
      self.hasUdidForHistory == otherMessage.hasUdidForHistory &&
      (!self.hasUdidForHistory || [self.udidForHistory isEqual:otherMessage.udidForHistory]) &&
      self.hasLastObstacleSpawnedTime == otherMessage.hasLastObstacleSpawnedTime &&
      (!self.hasLastObstacleSpawnedTime || self.lastObstacleSpawnedTime == otherMessage.lastObstacleSpawnedTime) &&
      self.hasPvpLeagueInfo == otherMessage.hasPvpLeagueInfo &&
      (!self.hasPvpLeagueInfo || [self.pvpLeagueInfo isEqual:otherMessage.pvpLeagueInfo]) &&
      self.hasNumObstaclesRemoved == otherMessage.hasNumObstaclesRemoved &&
      (!self.hasNumObstaclesRemoved || self.numObstaclesRemoved == otherMessage.numObstaclesRemoved) &&
      self.hasLastMiniJobSpawnedTime == otherMessage.hasLastMiniJobSpawnedTime &&
      (!self.hasLastMiniJobSpawnedTime || self.lastMiniJobSpawnedTime == otherMessage.lastMiniJobSpawnedTime) &&
      self.hasAvatarMonsterId == otherMessage.hasAvatarMonsterId &&
      (!self.hasAvatarMonsterId || self.avatarMonsterId == otherMessage.avatarMonsterId) &&
      self.hasLastFreeBoosterPackTime == otherMessage.hasLastFreeBoosterPackTime &&
      (!self.hasLastFreeBoosterPackTime || self.lastFreeBoosterPackTime == otherMessage.lastFreeBoosterPackTime) &&
      self.hasNumClanHelps == otherMessage.hasNumClanHelps &&
      (!self.hasNumClanHelps || self.numClanHelps == otherMessage.numClanHelps) &&
      self.hasLastSecretGiftCollectTime == otherMessage.hasLastSecretGiftCollectTime &&
      (!self.hasLastSecretGiftCollectTime || self.lastSecretGiftCollectTime == otherMessage.lastSecretGiftCollectTime) &&
      self.hasPvpDefendingMessage == otherMessage.hasPvpDefendingMessage &&
      (!self.hasPvpDefendingMessage || [self.pvpDefendingMessage isEqual:otherMessage.pvpDefendingMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasGems) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gems] hash];
  }
  if (self.hasCash) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cash] hash];
  }
  if (self.hasExperience) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.experience] hash];
  }
  if (self.hasTasksCompleted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tasksCompleted] hash];
  }
  if (self.hasReferralCode) {
    hashCode = hashCode * 31 + [self.referralCode hash];
  }
  if (self.hasNumReferrals) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numReferrals] hash];
  }
  if (self.hasUdid) {
    hashCode = hashCode * 31 + [self.udid hash];
  }
  if (self.hasLastLoginTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastLoginTime] hash];
  }
  if (self.hasLastLogoutTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastLogoutTime] hash];
  }
  if (self.hasDeviceToken) {
    hashCode = hashCode * 31 + [self.deviceToken hash];
  }
  if (self.hasNumBadges) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numBadges] hash];
  }
  if (self.hasIsFake) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFake] hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.createTime] hash];
  }
  if (self.hasIsAdmin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isAdmin] hash];
  }
  if (self.hasApsalarId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.apsalarId] hash];
  }
  if (self.hasNumCoinsRetrievedFromStructs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numCoinsRetrievedFromStructs] hash];
  }
  if (self.hasNumConsecutiveDaysPlayed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numConsecutiveDaysPlayed] hash];
  }
  if (self.hasClan) {
    hashCode = hashCode * 31 + [self.clan hash];
  }
  if (self.hasLastWallPostNotificationTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastWallPostNotificationTime] hash];
  }
  if (self.hasKabamNaid) {
    hashCode = hashCode * 31 + [self.kabamNaid hash];
  }
  if (self.hasHasReceivedfbReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasReceivedfbReward] hash];
  }
  if (self.hasNumBeginnerSalesPurchased) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numBeginnerSalesPurchased] hash];
  }
  if (self.hasFacebookId) {
    hashCode = hashCode * 31 + [self.facebookId hash];
  }
  if (self.hasOil) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oil] hash];
  }
  if (self.hasNumOilRetrievedFromStructs) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numOilRetrievedFromStructs] hash];
  }
  if (self.hasFbIdSetOnUserCreate) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.fbIdSetOnUserCreate] hash];
  }
  if (self.hasGameCenterId) {
    hashCode = hashCode * 31 + [self.gameCenterId hash];
  }
  if (self.hasUdidForHistory) {
    hashCode = hashCode * 31 + [self.udidForHistory hash];
  }
  if (self.hasLastObstacleSpawnedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastObstacleSpawnedTime] hash];
  }
  if (self.hasPvpLeagueInfo) {
    hashCode = hashCode * 31 + [self.pvpLeagueInfo hash];
  }
  if (self.hasNumObstaclesRemoved) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numObstaclesRemoved] hash];
  }
  if (self.hasLastMiniJobSpawnedTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastMiniJobSpawnedTime] hash];
  }
  if (self.hasAvatarMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.avatarMonsterId] hash];
  }
  if (self.hasLastFreeBoosterPackTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastFreeBoosterPackTime] hash];
  }
  if (self.hasNumClanHelps) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numClanHelps] hash];
  }
  if (self.hasLastSecretGiftCollectTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.lastSecretGiftCollectTime] hash];
  }
  if (self.hasPvpDefendingMessage) {
    hashCode = hashCode * 31 + [self.pvpDefendingMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FullUserProto_Builder()
@property (strong) FullUserProto* result;
@end

@implementation FullUserProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FullUserProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserProto_Builder*) clear {
  self.result = [[FullUserProto alloc] init];
  return self;
}
- (FullUserProto_Builder*) clone {
  return [FullUserProto builderWithPrototype:result];
}
- (FullUserProto*) defaultInstance {
  return [FullUserProto defaultInstance];
}
- (FullUserProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserProto*) buildPartial {
  FullUserProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FullUserProto_Builder*) mergeFrom:(FullUserProto*) other {
  if (other == [FullUserProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasGems) {
    [self setGems:other.gems];
  }
  if (other.hasCash) {
    [self setCash:other.cash];
  }
  if (other.hasOil) {
    [self setOil:other.oil];
  }
  if (other.hasExperience) {
    [self setExperience:other.experience];
  }
  if (other.hasTasksCompleted) {
    [self setTasksCompleted:other.tasksCompleted];
  }
  if (other.hasReferralCode) {
    [self setReferralCode:other.referralCode];
  }
  if (other.hasNumReferrals) {
    [self setNumReferrals:other.numReferrals];
  }
  if (other.hasLastLoginTime) {
    [self setLastLoginTime:other.lastLoginTime];
  }
  if (other.hasLastLogoutTime) {
    [self setLastLogoutTime:other.lastLogoutTime];
  }
  if (other.hasIsFake) {
    [self setIsFake:other.isFake];
  }
  if (other.hasIsAdmin) {
    [self setIsAdmin:other.isAdmin];
  }
  if (other.hasNumCoinsRetrievedFromStructs) {
    [self setNumCoinsRetrievedFromStructs:other.numCoinsRetrievedFromStructs];
  }
  if (other.hasNumOilRetrievedFromStructs) {
    [self setNumOilRetrievedFromStructs:other.numOilRetrievedFromStructs];
  }
  if (other.hasClan) {
    [self mergeClan:other.clan];
  }
  if (other.hasHasReceivedfbReward) {
    [self setHasReceivedfbReward:other.hasReceivedfbReward];
  }
  if (other.hasNumBeginnerSalesPurchased) {
    [self setNumBeginnerSalesPurchased:other.numBeginnerSalesPurchased];
  }
  if (other.hasFacebookId) {
    [self setFacebookId:other.facebookId];
  }
  if (other.hasGameCenterId) {
    [self setGameCenterId:other.gameCenterId];
  }
  if (other.hasLastObstacleSpawnedTime) {
    [self setLastObstacleSpawnedTime:other.lastObstacleSpawnedTime];
  }
  if (other.hasNumObstaclesRemoved) {
    [self setNumObstaclesRemoved:other.numObstaclesRemoved];
  }
  if (other.hasAvatarMonsterId) {
    [self setAvatarMonsterId:other.avatarMonsterId];
  }
  if (other.hasPvpLeagueInfo) {
    [self mergePvpLeagueInfo:other.pvpLeagueInfo];
  }
  if (other.hasLastMiniJobSpawnedTime) {
    [self setLastMiniJobSpawnedTime:other.lastMiniJobSpawnedTime];
  }
  if (other.hasLastFreeBoosterPackTime) {
    [self setLastFreeBoosterPackTime:other.lastFreeBoosterPackTime];
  }
  if (other.hasNumClanHelps) {
    [self setNumClanHelps:other.numClanHelps];
  }
  if (other.hasLastSecretGiftCollectTime) {
    [self setLastSecretGiftCollectTime:other.lastSecretGiftCollectTime];
  }
  if (other.hasPvpDefendingMessage) {
    [self setPvpDefendingMessage:other.pvpDefendingMessage];
  }
  if (other.hasUdidForHistory) {
    [self setUdidForHistory:other.udidForHistory];
  }
  if (other.hasDeviceToken) {
    [self setDeviceToken:other.deviceToken];
  }
  if (other.hasNumBadges) {
    [self setNumBadges:other.numBadges];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  if (other.hasApsalarId) {
    [self setApsalarId:other.apsalarId];
  }
  if (other.hasNumConsecutiveDaysPlayed) {
    [self setNumConsecutiveDaysPlayed:other.numConsecutiveDaysPlayed];
  }
  if (other.hasLastWallPostNotificationTime) {
    [self setLastWallPostNotificationTime:other.lastWallPostNotificationTime];
  }
  if (other.hasKabamNaid) {
    [self setKabamNaid:other.kabamNaid];
  }
  if (other.hasFbIdSetOnUserCreate) {
    [self setFbIdSetOnUserCreate:other.fbIdSetOnUserCreate];
  }
  if (other.hasUdid) {
    [self setUdid:other.udid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setGems:[input readInt32]];
        break;
      }
      case 40: {
        [self setCash:[input readInt32]];
        break;
      }
      case 48: {
        [self setExperience:[input readInt32]];
        break;
      }
      case 56: {
        [self setTasksCompleted:[input readInt32]];
        break;
      }
      case 90: {
        [self setReferralCode:[input readString]];
        break;
      }
      case 96: {
        [self setNumReferrals:[input readInt32]];
        break;
      }
      case 106: {
        [self setUdid:[input readString]];
        break;
      }
      case 112: {
        [self setLastLoginTime:[input readInt64]];
        break;
      }
      case 120: {
        [self setLastLogoutTime:[input readInt64]];
        break;
      }
      case 130: {
        [self setDeviceToken:[input readString]];
        break;
      }
      case 144: {
        [self setNumBadges:[input readInt32]];
        break;
      }
      case 152: {
        [self setIsFake:[input readBool]];
        break;
      }
      case 160: {
        [self setCreateTime:[input readInt64]];
        break;
      }
      case 168: {
        [self setIsAdmin:[input readBool]];
        break;
      }
      case 176: {
        [self setApsalarId:[input readInt32]];
        break;
      }
      case 184: {
        [self setNumCoinsRetrievedFromStructs:[input readInt32]];
        break;
      }
      case 192: {
        [self setNumConsecutiveDaysPlayed:[input readInt32]];
        break;
      }
      case 202: {
        MinimumClanProto_Builder* subBuilder = [MinimumClanProto builder];
        if (self.hasClan) {
          [subBuilder mergeFrom:self.clan];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setClan:[subBuilder buildPartial]];
        break;
      }
      case 208: {
        [self setLastWallPostNotificationTime:[input readInt64]];
        break;
      }
      case 218: {
        [self setKabamNaid:[input readString]];
        break;
      }
      case 224: {
        [self setHasReceivedfbReward:[input readBool]];
        break;
      }
      case 240: {
        [self setNumBeginnerSalesPurchased:[input readInt32]];
        break;
      }
      case 322: {
        [self setFacebookId:[input readString]];
        break;
      }
      case 336: {
        [self setOil:[input readInt32]];
        break;
      }
      case 344: {
        [self setNumOilRetrievedFromStructs:[input readInt32]];
        break;
      }
      case 352: {
        [self setFbIdSetOnUserCreate:[input readBool]];
        break;
      }
      case 362: {
        [self setGameCenterId:[input readString]];
        break;
      }
      case 370: {
        [self setUdidForHistory:[input readString]];
        break;
      }
      case 376: {
        [self setLastObstacleSpawnedTime:[input readInt64]];
        break;
      }
      case 386: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasPvpLeagueInfo) {
          [subBuilder mergeFrom:self.pvpLeagueInfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPvpLeagueInfo:[subBuilder buildPartial]];
        break;
      }
      case 392: {
        [self setNumObstaclesRemoved:[input readInt32]];
        break;
      }
      case 400: {
        [self setLastMiniJobSpawnedTime:[input readInt64]];
        break;
      }
      case 408: {
        [self setAvatarMonsterId:[input readInt32]];
        break;
      }
      case 416: {
        [self setLastFreeBoosterPackTime:[input readInt64]];
        break;
      }
      case 424: {
        [self setNumClanHelps:[input readInt32]];
        break;
      }
      case 432: {
        [self setLastSecretGiftCollectTime:[input readInt64]];
        break;
      }
      case 450: {
        [self setPvpDefendingMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (FullUserProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (FullUserProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FullUserProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FullUserProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (FullUserProto_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (FullUserProto_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasGems {
  return result.hasGems;
}
- (int32_t) gems {
  return result.gems;
}
- (FullUserProto_Builder*) setGems:(int32_t) value {
  result.hasGems = YES;
  result.gems = value;
  return self;
}
- (FullUserProto_Builder*) clearGems {
  result.hasGems = NO;
  result.gems = 0;
  return self;
}
- (BOOL) hasCash {
  return result.hasCash;
}
- (int32_t) cash {
  return result.cash;
}
- (FullUserProto_Builder*) setCash:(int32_t) value {
  result.hasCash = YES;
  result.cash = value;
  return self;
}
- (FullUserProto_Builder*) clearCash {
  result.hasCash = NO;
  result.cash = 0;
  return self;
}
- (BOOL) hasOil {
  return result.hasOil;
}
- (int32_t) oil {
  return result.oil;
}
- (FullUserProto_Builder*) setOil:(int32_t) value {
  result.hasOil = YES;
  result.oil = value;
  return self;
}
- (FullUserProto_Builder*) clearOil {
  result.hasOil = NO;
  result.oil = 0;
  return self;
}
- (BOOL) hasExperience {
  return result.hasExperience;
}
- (int32_t) experience {
  return result.experience;
}
- (FullUserProto_Builder*) setExperience:(int32_t) value {
  result.hasExperience = YES;
  result.experience = value;
  return self;
}
- (FullUserProto_Builder*) clearExperience {
  result.hasExperience = NO;
  result.experience = 0;
  return self;
}
- (BOOL) hasTasksCompleted {
  return result.hasTasksCompleted;
}
- (int32_t) tasksCompleted {
  return result.tasksCompleted;
}
- (FullUserProto_Builder*) setTasksCompleted:(int32_t) value {
  result.hasTasksCompleted = YES;
  result.tasksCompleted = value;
  return self;
}
- (FullUserProto_Builder*) clearTasksCompleted {
  result.hasTasksCompleted = NO;
  result.tasksCompleted = 0;
  return self;
}
- (BOOL) hasReferralCode {
  return result.hasReferralCode;
}
- (NSString*) referralCode {
  return result.referralCode;
}
- (FullUserProto_Builder*) setReferralCode:(NSString*) value {
  result.hasReferralCode = YES;
  result.referralCode = value;
  return self;
}
- (FullUserProto_Builder*) clearReferralCode {
  result.hasReferralCode = NO;
  result.referralCode = @"";
  return self;
}
- (BOOL) hasNumReferrals {
  return result.hasNumReferrals;
}
- (int32_t) numReferrals {
  return result.numReferrals;
}
- (FullUserProto_Builder*) setNumReferrals:(int32_t) value {
  result.hasNumReferrals = YES;
  result.numReferrals = value;
  return self;
}
- (FullUserProto_Builder*) clearNumReferrals {
  result.hasNumReferrals = NO;
  result.numReferrals = 0;
  return self;
}
- (BOOL) hasLastLoginTime {
  return result.hasLastLoginTime;
}
- (int64_t) lastLoginTime {
  return result.lastLoginTime;
}
- (FullUserProto_Builder*) setLastLoginTime:(int64_t) value {
  result.hasLastLoginTime = YES;
  result.lastLoginTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastLoginTime {
  result.hasLastLoginTime = NO;
  result.lastLoginTime = 0L;
  return self;
}
- (BOOL) hasLastLogoutTime {
  return result.hasLastLogoutTime;
}
- (int64_t) lastLogoutTime {
  return result.lastLogoutTime;
}
- (FullUserProto_Builder*) setLastLogoutTime:(int64_t) value {
  result.hasLastLogoutTime = YES;
  result.lastLogoutTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastLogoutTime {
  result.hasLastLogoutTime = NO;
  result.lastLogoutTime = 0L;
  return self;
}
- (BOOL) hasIsFake {
  return result.hasIsFake;
}
- (BOOL) isFake {
  return result.isFake;
}
- (FullUserProto_Builder*) setIsFake:(BOOL) value {
  result.hasIsFake = YES;
  result.isFake = value;
  return self;
}
- (FullUserProto_Builder*) clearIsFake {
  result.hasIsFake = NO;
  result.isFake = NO;
  return self;
}
- (BOOL) hasIsAdmin {
  return result.hasIsAdmin;
}
- (BOOL) isAdmin {
  return result.isAdmin;
}
- (FullUserProto_Builder*) setIsAdmin:(BOOL) value {
  result.hasIsAdmin = YES;
  result.isAdmin = value;
  return self;
}
- (FullUserProto_Builder*) clearIsAdmin {
  result.hasIsAdmin = NO;
  result.isAdmin = NO;
  return self;
}
- (BOOL) hasNumCoinsRetrievedFromStructs {
  return result.hasNumCoinsRetrievedFromStructs;
}
- (int32_t) numCoinsRetrievedFromStructs {
  return result.numCoinsRetrievedFromStructs;
}
- (FullUserProto_Builder*) setNumCoinsRetrievedFromStructs:(int32_t) value {
  result.hasNumCoinsRetrievedFromStructs = YES;
  result.numCoinsRetrievedFromStructs = value;
  return self;
}
- (FullUserProto_Builder*) clearNumCoinsRetrievedFromStructs {
  result.hasNumCoinsRetrievedFromStructs = NO;
  result.numCoinsRetrievedFromStructs = 0;
  return self;
}
- (BOOL) hasNumOilRetrievedFromStructs {
  return result.hasNumOilRetrievedFromStructs;
}
- (int32_t) numOilRetrievedFromStructs {
  return result.numOilRetrievedFromStructs;
}
- (FullUserProto_Builder*) setNumOilRetrievedFromStructs:(int32_t) value {
  result.hasNumOilRetrievedFromStructs = YES;
  result.numOilRetrievedFromStructs = value;
  return self;
}
- (FullUserProto_Builder*) clearNumOilRetrievedFromStructs {
  result.hasNumOilRetrievedFromStructs = NO;
  result.numOilRetrievedFromStructs = 0;
  return self;
}
- (BOOL) hasClan {
  return result.hasClan;
}
- (MinimumClanProto*) clan {
  return result.clan;
}
- (FullUserProto_Builder*) setClan:(MinimumClanProto*) value {
  result.hasClan = YES;
  result.clan = value;
  return self;
}
- (FullUserProto_Builder*) setClan_Builder:(MinimumClanProto_Builder*) builderForValue {
  return [self setClan:[builderForValue build]];
}
- (FullUserProto_Builder*) mergeClan:(MinimumClanProto*) value {
  if (result.hasClan &&
      result.clan != [MinimumClanProto defaultInstance]) {
    result.clan =
      [[[MinimumClanProto builderWithPrototype:result.clan] mergeFrom:value] buildPartial];
  } else {
    result.clan = value;
  }
  result.hasClan = YES;
  return self;
}
- (FullUserProto_Builder*) clearClan {
  result.hasClan = NO;
  result.clan = [MinimumClanProto defaultInstance];
  return self;
}
- (BOOL) hasHasReceivedfbReward {
  return result.hasHasReceivedfbReward;
}
- (BOOL) hasReceivedfbReward {
  return result.hasReceivedfbReward;
}
- (FullUserProto_Builder*) setHasReceivedfbReward:(BOOL) value {
  result.hasHasReceivedfbReward = YES;
  result.hasReceivedfbReward = value;
  return self;
}
- (FullUserProto_Builder*) clearHasReceivedfbReward {
  result.hasHasReceivedfbReward = NO;
  result.hasReceivedfbReward = NO;
  return self;
}
- (BOOL) hasNumBeginnerSalesPurchased {
  return result.hasNumBeginnerSalesPurchased;
}
- (int32_t) numBeginnerSalesPurchased {
  return result.numBeginnerSalesPurchased;
}
- (FullUserProto_Builder*) setNumBeginnerSalesPurchased:(int32_t) value {
  result.hasNumBeginnerSalesPurchased = YES;
  result.numBeginnerSalesPurchased = value;
  return self;
}
- (FullUserProto_Builder*) clearNumBeginnerSalesPurchased {
  result.hasNumBeginnerSalesPurchased = NO;
  result.numBeginnerSalesPurchased = 0;
  return self;
}
- (BOOL) hasFacebookId {
  return result.hasFacebookId;
}
- (NSString*) facebookId {
  return result.facebookId;
}
- (FullUserProto_Builder*) setFacebookId:(NSString*) value {
  result.hasFacebookId = YES;
  result.facebookId = value;
  return self;
}
- (FullUserProto_Builder*) clearFacebookId {
  result.hasFacebookId = NO;
  result.facebookId = @"";
  return self;
}
- (BOOL) hasGameCenterId {
  return result.hasGameCenterId;
}
- (NSString*) gameCenterId {
  return result.gameCenterId;
}
- (FullUserProto_Builder*) setGameCenterId:(NSString*) value {
  result.hasGameCenterId = YES;
  result.gameCenterId = value;
  return self;
}
- (FullUserProto_Builder*) clearGameCenterId {
  result.hasGameCenterId = NO;
  result.gameCenterId = @"";
  return self;
}
- (BOOL) hasLastObstacleSpawnedTime {
  return result.hasLastObstacleSpawnedTime;
}
- (int64_t) lastObstacleSpawnedTime {
  return result.lastObstacleSpawnedTime;
}
- (FullUserProto_Builder*) setLastObstacleSpawnedTime:(int64_t) value {
  result.hasLastObstacleSpawnedTime = YES;
  result.lastObstacleSpawnedTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastObstacleSpawnedTime {
  result.hasLastObstacleSpawnedTime = NO;
  result.lastObstacleSpawnedTime = 0L;
  return self;
}
- (BOOL) hasNumObstaclesRemoved {
  return result.hasNumObstaclesRemoved;
}
- (int32_t) numObstaclesRemoved {
  return result.numObstaclesRemoved;
}
- (FullUserProto_Builder*) setNumObstaclesRemoved:(int32_t) value {
  result.hasNumObstaclesRemoved = YES;
  result.numObstaclesRemoved = value;
  return self;
}
- (FullUserProto_Builder*) clearNumObstaclesRemoved {
  result.hasNumObstaclesRemoved = NO;
  result.numObstaclesRemoved = 0;
  return self;
}
- (BOOL) hasAvatarMonsterId {
  return result.hasAvatarMonsterId;
}
- (int32_t) avatarMonsterId {
  return result.avatarMonsterId;
}
- (FullUserProto_Builder*) setAvatarMonsterId:(int32_t) value {
  result.hasAvatarMonsterId = YES;
  result.avatarMonsterId = value;
  return self;
}
- (FullUserProto_Builder*) clearAvatarMonsterId {
  result.hasAvatarMonsterId = NO;
  result.avatarMonsterId = 0;
  return self;
}
- (BOOL) hasPvpLeagueInfo {
  return result.hasPvpLeagueInfo;
}
- (UserPvpLeagueProto*) pvpLeagueInfo {
  return result.pvpLeagueInfo;
}
- (FullUserProto_Builder*) setPvpLeagueInfo:(UserPvpLeagueProto*) value {
  result.hasPvpLeagueInfo = YES;
  result.pvpLeagueInfo = value;
  return self;
}
- (FullUserProto_Builder*) setPvpLeagueInfo_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setPvpLeagueInfo:[builderForValue build]];
}
- (FullUserProto_Builder*) mergePvpLeagueInfo:(UserPvpLeagueProto*) value {
  if (result.hasPvpLeagueInfo &&
      result.pvpLeagueInfo != [UserPvpLeagueProto defaultInstance]) {
    result.pvpLeagueInfo =
      [[[UserPvpLeagueProto builderWithPrototype:result.pvpLeagueInfo] mergeFrom:value] buildPartial];
  } else {
    result.pvpLeagueInfo = value;
  }
  result.hasPvpLeagueInfo = YES;
  return self;
}
- (FullUserProto_Builder*) clearPvpLeagueInfo {
  result.hasPvpLeagueInfo = NO;
  result.pvpLeagueInfo = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasLastMiniJobSpawnedTime {
  return result.hasLastMiniJobSpawnedTime;
}
- (int64_t) lastMiniJobSpawnedTime {
  return result.lastMiniJobSpawnedTime;
}
- (FullUserProto_Builder*) setLastMiniJobSpawnedTime:(int64_t) value {
  result.hasLastMiniJobSpawnedTime = YES;
  result.lastMiniJobSpawnedTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastMiniJobSpawnedTime {
  result.hasLastMiniJobSpawnedTime = NO;
  result.lastMiniJobSpawnedTime = 0L;
  return self;
}
- (BOOL) hasLastFreeBoosterPackTime {
  return result.hasLastFreeBoosterPackTime;
}
- (int64_t) lastFreeBoosterPackTime {
  return result.lastFreeBoosterPackTime;
}
- (FullUserProto_Builder*) setLastFreeBoosterPackTime:(int64_t) value {
  result.hasLastFreeBoosterPackTime = YES;
  result.lastFreeBoosterPackTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastFreeBoosterPackTime {
  result.hasLastFreeBoosterPackTime = NO;
  result.lastFreeBoosterPackTime = 0L;
  return self;
}
- (BOOL) hasNumClanHelps {
  return result.hasNumClanHelps;
}
- (int32_t) numClanHelps {
  return result.numClanHelps;
}
- (FullUserProto_Builder*) setNumClanHelps:(int32_t) value {
  result.hasNumClanHelps = YES;
  result.numClanHelps = value;
  return self;
}
- (FullUserProto_Builder*) clearNumClanHelps {
  result.hasNumClanHelps = NO;
  result.numClanHelps = 0;
  return self;
}
- (BOOL) hasLastSecretGiftCollectTime {
  return result.hasLastSecretGiftCollectTime;
}
- (int64_t) lastSecretGiftCollectTime {
  return result.lastSecretGiftCollectTime;
}
- (FullUserProto_Builder*) setLastSecretGiftCollectTime:(int64_t) value {
  result.hasLastSecretGiftCollectTime = YES;
  result.lastSecretGiftCollectTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastSecretGiftCollectTime {
  result.hasLastSecretGiftCollectTime = NO;
  result.lastSecretGiftCollectTime = 0L;
  return self;
}
- (BOOL) hasPvpDefendingMessage {
  return result.hasPvpDefendingMessage;
}
- (NSString*) pvpDefendingMessage {
  return result.pvpDefendingMessage;
}
- (FullUserProto_Builder*) setPvpDefendingMessage:(NSString*) value {
  result.hasPvpDefendingMessage = YES;
  result.pvpDefendingMessage = value;
  return self;
}
- (FullUserProto_Builder*) clearPvpDefendingMessage {
  result.hasPvpDefendingMessage = NO;
  result.pvpDefendingMessage = @"";
  return self;
}
- (BOOL) hasUdidForHistory {
  return result.hasUdidForHistory;
}
- (NSString*) udidForHistory {
  return result.udidForHistory;
}
- (FullUserProto_Builder*) setUdidForHistory:(NSString*) value {
  result.hasUdidForHistory = YES;
  result.udidForHistory = value;
  return self;
}
- (FullUserProto_Builder*) clearUdidForHistory {
  result.hasUdidForHistory = NO;
  result.udidForHistory = @"";
  return self;
}
- (BOOL) hasDeviceToken {
  return result.hasDeviceToken;
}
- (NSString*) deviceToken {
  return result.deviceToken;
}
- (FullUserProto_Builder*) setDeviceToken:(NSString*) value {
  result.hasDeviceToken = YES;
  result.deviceToken = value;
  return self;
}
- (FullUserProto_Builder*) clearDeviceToken {
  result.hasDeviceToken = NO;
  result.deviceToken = @"";
  return self;
}
- (BOOL) hasNumBadges {
  return result.hasNumBadges;
}
- (int32_t) numBadges {
  return result.numBadges;
}
- (FullUserProto_Builder*) setNumBadges:(int32_t) value {
  result.hasNumBadges = YES;
  result.numBadges = value;
  return self;
}
- (FullUserProto_Builder*) clearNumBadges {
  result.hasNumBadges = NO;
  result.numBadges = 0;
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int64_t) createTime {
  return result.createTime;
}
- (FullUserProto_Builder*) setCreateTime:(int64_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (FullUserProto_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0L;
  return self;
}
- (BOOL) hasApsalarId {
  return result.hasApsalarId;
}
- (int32_t) apsalarId {
  return result.apsalarId;
}
- (FullUserProto_Builder*) setApsalarId:(int32_t) value {
  result.hasApsalarId = YES;
  result.apsalarId = value;
  return self;
}
- (FullUserProto_Builder*) clearApsalarId {
  result.hasApsalarId = NO;
  result.apsalarId = 0;
  return self;
}
- (BOOL) hasNumConsecutiveDaysPlayed {
  return result.hasNumConsecutiveDaysPlayed;
}
- (int32_t) numConsecutiveDaysPlayed {
  return result.numConsecutiveDaysPlayed;
}
- (FullUserProto_Builder*) setNumConsecutiveDaysPlayed:(int32_t) value {
  result.hasNumConsecutiveDaysPlayed = YES;
  result.numConsecutiveDaysPlayed = value;
  return self;
}
- (FullUserProto_Builder*) clearNumConsecutiveDaysPlayed {
  result.hasNumConsecutiveDaysPlayed = NO;
  result.numConsecutiveDaysPlayed = 0;
  return self;
}
- (BOOL) hasLastWallPostNotificationTime {
  return result.hasLastWallPostNotificationTime;
}
- (int64_t) lastWallPostNotificationTime {
  return result.lastWallPostNotificationTime;
}
- (FullUserProto_Builder*) setLastWallPostNotificationTime:(int64_t) value {
  result.hasLastWallPostNotificationTime = YES;
  result.lastWallPostNotificationTime = value;
  return self;
}
- (FullUserProto_Builder*) clearLastWallPostNotificationTime {
  result.hasLastWallPostNotificationTime = NO;
  result.lastWallPostNotificationTime = 0L;
  return self;
}
- (BOOL) hasKabamNaid {
  return result.hasKabamNaid;
}
- (NSString*) kabamNaid {
  return result.kabamNaid;
}
- (FullUserProto_Builder*) setKabamNaid:(NSString*) value {
  result.hasKabamNaid = YES;
  result.kabamNaid = value;
  return self;
}
- (FullUserProto_Builder*) clearKabamNaid {
  result.hasKabamNaid = NO;
  result.kabamNaid = @"";
  return self;
}
- (BOOL) hasFbIdSetOnUserCreate {
  return result.hasFbIdSetOnUserCreate;
}
- (BOOL) fbIdSetOnUserCreate {
  return result.fbIdSetOnUserCreate;
}
- (FullUserProto_Builder*) setFbIdSetOnUserCreate:(BOOL) value {
  result.hasFbIdSetOnUserCreate = YES;
  result.fbIdSetOnUserCreate = value;
  return self;
}
- (FullUserProto_Builder*) clearFbIdSetOnUserCreate {
  result.hasFbIdSetOnUserCreate = NO;
  result.fbIdSetOnUserCreate = NO;
  return self;
}
- (BOOL) hasUdid {
  return result.hasUdid;
}
- (NSString*) udid {
  return result.udid;
}
- (FullUserProto_Builder*) setUdid:(NSString*) value {
  result.hasUdid = YES;
  result.udid = value;
  return self;
}
- (FullUserProto_Builder*) clearUdid {
  result.hasUdid = NO;
  result.udid = @"";
  return self;
}
@end

@interface StaticUserLevelInfoProto ()
@property int32_t level;
@property int32_t requiredExperience;
@end

@implementation StaticUserLevelInfoProto

- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasRequiredExperience {
  return !!hasRequiredExperience_;
}
- (void) setHasRequiredExperience:(BOOL) value_ {
  hasRequiredExperience_ = !!value_;
}
@synthesize requiredExperience;
- (id) init {
  if ((self = [super init])) {
    self.level = 0;
    self.requiredExperience = 0;
  }
  return self;
}
static StaticUserLevelInfoProto* defaultStaticUserLevelInfoProtoInstance = nil;
+ (void) initialize {
  if (self == [StaticUserLevelInfoProto class]) {
    defaultStaticUserLevelInfoProtoInstance = [[StaticUserLevelInfoProto alloc] init];
  }
}
+ (StaticUserLevelInfoProto*) defaultInstance {
  return defaultStaticUserLevelInfoProtoInstance;
}
- (StaticUserLevelInfoProto*) defaultInstance {
  return defaultStaticUserLevelInfoProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLevel) {
    [output writeInt32:1 value:self.level];
  }
  if (self.hasRequiredExperience) {
    [output writeInt32:2 value:self.requiredExperience];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLevel) {
    size_ += computeInt32Size(1, self.level);
  }
  if (self.hasRequiredExperience) {
    size_ += computeInt32Size(2, self.requiredExperience);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StaticUserLevelInfoProto*) parseFromData:(NSData*) data {
  return (StaticUserLevelInfoProto*)[[[StaticUserLevelInfoProto builder] mergeFromData:data] build];
}
+ (StaticUserLevelInfoProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticUserLevelInfoProto*)[[[StaticUserLevelInfoProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StaticUserLevelInfoProto*) parseFromInputStream:(NSInputStream*) input {
  return (StaticUserLevelInfoProto*)[[[StaticUserLevelInfoProto builder] mergeFromInputStream:input] build];
}
+ (StaticUserLevelInfoProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticUserLevelInfoProto*)[[[StaticUserLevelInfoProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StaticUserLevelInfoProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StaticUserLevelInfoProto*)[[[StaticUserLevelInfoProto builder] mergeFromCodedInputStream:input] build];
}
+ (StaticUserLevelInfoProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticUserLevelInfoProto*)[[[StaticUserLevelInfoProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StaticUserLevelInfoProto_Builder*) builder {
  return [[StaticUserLevelInfoProto_Builder alloc] init];
}
+ (StaticUserLevelInfoProto_Builder*) builderWithPrototype:(StaticUserLevelInfoProto*) prototype {
  return [[StaticUserLevelInfoProto builder] mergeFrom:prototype];
}
- (StaticUserLevelInfoProto_Builder*) builder {
  return [StaticUserLevelInfoProto builder];
}
- (StaticUserLevelInfoProto_Builder*) toBuilder {
  return [StaticUserLevelInfoProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasRequiredExperience) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiredExperience", [NSNumber numberWithInteger:self.requiredExperience]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StaticUserLevelInfoProto class]]) {
    return NO;
  }
  StaticUserLevelInfoProto *otherMessage = other;
  return
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasRequiredExperience == otherMessage.hasRequiredExperience &&
      (!self.hasRequiredExperience || self.requiredExperience == otherMessage.requiredExperience) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasRequiredExperience) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requiredExperience] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StaticUserLevelInfoProto_Builder()
@property (strong) StaticUserLevelInfoProto* result;
@end

@implementation StaticUserLevelInfoProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[StaticUserLevelInfoProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StaticUserLevelInfoProto_Builder*) clear {
  self.result = [[StaticUserLevelInfoProto alloc] init];
  return self;
}
- (StaticUserLevelInfoProto_Builder*) clone {
  return [StaticUserLevelInfoProto builderWithPrototype:result];
}
- (StaticUserLevelInfoProto*) defaultInstance {
  return [StaticUserLevelInfoProto defaultInstance];
}
- (StaticUserLevelInfoProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StaticUserLevelInfoProto*) buildPartial {
  StaticUserLevelInfoProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (StaticUserLevelInfoProto_Builder*) mergeFrom:(StaticUserLevelInfoProto*) other {
  if (other == [StaticUserLevelInfoProto defaultInstance]) {
    return self;
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasRequiredExperience) {
    [self setRequiredExperience:other.requiredExperience];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StaticUserLevelInfoProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StaticUserLevelInfoProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 16: {
        [self setRequiredExperience:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (StaticUserLevelInfoProto_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (StaticUserLevelInfoProto_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasRequiredExperience {
  return result.hasRequiredExperience;
}
- (int32_t) requiredExperience {
  return result.requiredExperience;
}
- (StaticUserLevelInfoProto_Builder*) setRequiredExperience:(int32_t) value {
  result.hasRequiredExperience = YES;
  result.requiredExperience = value;
  return self;
}
- (StaticUserLevelInfoProto_Builder*) clearRequiredExperience {
  result.hasRequiredExperience = NO;
  result.requiredExperience = 0;
  return self;
}
@end

@interface UserPvpLeagueProto ()
@property (strong) NSString* userUuid;
@property int32_t leagueId;
@property int32_t rank;
@property int32_t elo;
@property int32_t battlesWon;
@property int32_t battlesLost;
@property int64_t shieldEndTime;
@property Float32 monsterDmgMultiplier;
@end

@implementation UserPvpLeagueProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasLeagueId {
  return !!hasLeagueId_;
}
- (void) setHasLeagueId:(BOOL) value_ {
  hasLeagueId_ = !!value_;
}
@synthesize leagueId;
- (BOOL) hasRank {
  return !!hasRank_;
}
- (void) setHasRank:(BOOL) value_ {
  hasRank_ = !!value_;
}
@synthesize rank;
- (BOOL) hasElo {
  return !!hasElo_;
}
- (void) setHasElo:(BOOL) value_ {
  hasElo_ = !!value_;
}
@synthesize elo;
- (BOOL) hasBattlesWon {
  return !!hasBattlesWon_;
}
- (void) setHasBattlesWon:(BOOL) value_ {
  hasBattlesWon_ = !!value_;
}
@synthesize battlesWon;
- (BOOL) hasBattlesLost {
  return !!hasBattlesLost_;
}
- (void) setHasBattlesLost:(BOOL) value_ {
  hasBattlesLost_ = !!value_;
}
@synthesize battlesLost;
- (BOOL) hasShieldEndTime {
  return !!hasShieldEndTime_;
}
- (void) setHasShieldEndTime:(BOOL) value_ {
  hasShieldEndTime_ = !!value_;
}
@synthesize shieldEndTime;
- (BOOL) hasMonsterDmgMultiplier {
  return !!hasMonsterDmgMultiplier_;
}
- (void) setHasMonsterDmgMultiplier:(BOOL) value_ {
  hasMonsterDmgMultiplier_ = !!value_;
}
@synthesize monsterDmgMultiplier;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.leagueId = 0;
    self.rank = 0;
    self.elo = 0;
    self.battlesWon = 0;
    self.battlesLost = 0;
    self.shieldEndTime = 0L;
    self.monsterDmgMultiplier = 0;
  }
  return self;
}
static UserPvpLeagueProto* defaultUserPvpLeagueProtoInstance = nil;
+ (void) initialize {
  if (self == [UserPvpLeagueProto class]) {
    defaultUserPvpLeagueProtoInstance = [[UserPvpLeagueProto alloc] init];
  }
}
+ (UserPvpLeagueProto*) defaultInstance {
  return defaultUserPvpLeagueProtoInstance;
}
- (UserPvpLeagueProto*) defaultInstance {
  return defaultUserPvpLeagueProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasLeagueId) {
    [output writeInt32:2 value:self.leagueId];
  }
  if (self.hasRank) {
    [output writeInt32:3 value:self.rank];
  }
  if (self.hasElo) {
    [output writeInt32:4 value:self.elo];
  }
  if (self.hasBattlesWon) {
    [output writeInt32:5 value:self.battlesWon];
  }
  if (self.hasBattlesLost) {
    [output writeInt32:6 value:self.battlesLost];
  }
  if (self.hasShieldEndTime) {
    [output writeInt64:7 value:self.shieldEndTime];
  }
  if (self.hasMonsterDmgMultiplier) {
    [output writeFloat:8 value:self.monsterDmgMultiplier];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasLeagueId) {
    size_ += computeInt32Size(2, self.leagueId);
  }
  if (self.hasRank) {
    size_ += computeInt32Size(3, self.rank);
  }
  if (self.hasElo) {
    size_ += computeInt32Size(4, self.elo);
  }
  if (self.hasBattlesWon) {
    size_ += computeInt32Size(5, self.battlesWon);
  }
  if (self.hasBattlesLost) {
    size_ += computeInt32Size(6, self.battlesLost);
  }
  if (self.hasShieldEndTime) {
    size_ += computeInt64Size(7, self.shieldEndTime);
  }
  if (self.hasMonsterDmgMultiplier) {
    size_ += computeFloatSize(8, self.monsterDmgMultiplier);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserPvpLeagueProto*) parseFromData:(NSData*) data {
  return (UserPvpLeagueProto*)[[[UserPvpLeagueProto builder] mergeFromData:data] build];
}
+ (UserPvpLeagueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPvpLeagueProto*)[[[UserPvpLeagueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserPvpLeagueProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserPvpLeagueProto*)[[[UserPvpLeagueProto builder] mergeFromInputStream:input] build];
}
+ (UserPvpLeagueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPvpLeagueProto*)[[[UserPvpLeagueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserPvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserPvpLeagueProto*)[[[UserPvpLeagueProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserPvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPvpLeagueProto*)[[[UserPvpLeagueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserPvpLeagueProto_Builder*) builder {
  return [[UserPvpLeagueProto_Builder alloc] init];
}
+ (UserPvpLeagueProto_Builder*) builderWithPrototype:(UserPvpLeagueProto*) prototype {
  return [[UserPvpLeagueProto builder] mergeFrom:prototype];
}
- (UserPvpLeagueProto_Builder*) builder {
  return [UserPvpLeagueProto builder];
}
- (UserPvpLeagueProto_Builder*) toBuilder {
  return [UserPvpLeagueProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasLeagueId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueId", [NSNumber numberWithInteger:self.leagueId]];
  }
  if (self.hasRank) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rank", [NSNumber numberWithInteger:self.rank]];
  }
  if (self.hasElo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"elo", [NSNumber numberWithInteger:self.elo]];
  }
  if (self.hasBattlesWon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battlesWon", [NSNumber numberWithInteger:self.battlesWon]];
  }
  if (self.hasBattlesLost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battlesLost", [NSNumber numberWithInteger:self.battlesLost]];
  }
  if (self.hasShieldEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shieldEndTime", [NSNumber numberWithLongLong:self.shieldEndTime]];
  }
  if (self.hasMonsterDmgMultiplier) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterDmgMultiplier", [NSNumber numberWithFloat:self.monsterDmgMultiplier]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserPvpLeagueProto class]]) {
    return NO;
  }
  UserPvpLeagueProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasLeagueId == otherMessage.hasLeagueId &&
      (!self.hasLeagueId || self.leagueId == otherMessage.leagueId) &&
      self.hasRank == otherMessage.hasRank &&
      (!self.hasRank || self.rank == otherMessage.rank) &&
      self.hasElo == otherMessage.hasElo &&
      (!self.hasElo || self.elo == otherMessage.elo) &&
      self.hasBattlesWon == otherMessage.hasBattlesWon &&
      (!self.hasBattlesWon || self.battlesWon == otherMessage.battlesWon) &&
      self.hasBattlesLost == otherMessage.hasBattlesLost &&
      (!self.hasBattlesLost || self.battlesLost == otherMessage.battlesLost) &&
      self.hasShieldEndTime == otherMessage.hasShieldEndTime &&
      (!self.hasShieldEndTime || self.shieldEndTime == otherMessage.shieldEndTime) &&
      self.hasMonsterDmgMultiplier == otherMessage.hasMonsterDmgMultiplier &&
      (!self.hasMonsterDmgMultiplier || self.monsterDmgMultiplier == otherMessage.monsterDmgMultiplier) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasLeagueId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.leagueId] hash];
  }
  if (self.hasRank) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rank] hash];
  }
  if (self.hasElo) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.elo] hash];
  }
  if (self.hasBattlesWon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.battlesWon] hash];
  }
  if (self.hasBattlesLost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.battlesLost] hash];
  }
  if (self.hasShieldEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.shieldEndTime] hash];
  }
  if (self.hasMonsterDmgMultiplier) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.monsterDmgMultiplier] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserPvpLeagueProto_Builder()
@property (strong) UserPvpLeagueProto* result;
@end

@implementation UserPvpLeagueProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserPvpLeagueProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserPvpLeagueProto_Builder*) clear {
  self.result = [[UserPvpLeagueProto alloc] init];
  return self;
}
- (UserPvpLeagueProto_Builder*) clone {
  return [UserPvpLeagueProto builderWithPrototype:result];
}
- (UserPvpLeagueProto*) defaultInstance {
  return [UserPvpLeagueProto defaultInstance];
}
- (UserPvpLeagueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserPvpLeagueProto*) buildPartial {
  UserPvpLeagueProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserPvpLeagueProto_Builder*) mergeFrom:(UserPvpLeagueProto*) other {
  if (other == [UserPvpLeagueProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasLeagueId) {
    [self setLeagueId:other.leagueId];
  }
  if (other.hasRank) {
    [self setRank:other.rank];
  }
  if (other.hasElo) {
    [self setElo:other.elo];
  }
  if (other.hasBattlesWon) {
    [self setBattlesWon:other.battlesWon];
  }
  if (other.hasBattlesLost) {
    [self setBattlesLost:other.battlesLost];
  }
  if (other.hasShieldEndTime) {
    [self setShieldEndTime:other.shieldEndTime];
  }
  if (other.hasMonsterDmgMultiplier) {
    [self setMonsterDmgMultiplier:other.monsterDmgMultiplier];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserPvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserPvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 16: {
        [self setLeagueId:[input readInt32]];
        break;
      }
      case 24: {
        [self setRank:[input readInt32]];
        break;
      }
      case 32: {
        [self setElo:[input readInt32]];
        break;
      }
      case 40: {
        [self setBattlesWon:[input readInt32]];
        break;
      }
      case 48: {
        [self setBattlesLost:[input readInt32]];
        break;
      }
      case 56: {
        [self setShieldEndTime:[input readInt64]];
        break;
      }
      case 69: {
        [self setMonsterDmgMultiplier:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (UserPvpLeagueProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasLeagueId {
  return result.hasLeagueId;
}
- (int32_t) leagueId {
  return result.leagueId;
}
- (UserPvpLeagueProto_Builder*) setLeagueId:(int32_t) value {
  result.hasLeagueId = YES;
  result.leagueId = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearLeagueId {
  result.hasLeagueId = NO;
  result.leagueId = 0;
  return self;
}
- (BOOL) hasRank {
  return result.hasRank;
}
- (int32_t) rank {
  return result.rank;
}
- (UserPvpLeagueProto_Builder*) setRank:(int32_t) value {
  result.hasRank = YES;
  result.rank = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearRank {
  result.hasRank = NO;
  result.rank = 0;
  return self;
}
- (BOOL) hasElo {
  return result.hasElo;
}
- (int32_t) elo {
  return result.elo;
}
- (UserPvpLeagueProto_Builder*) setElo:(int32_t) value {
  result.hasElo = YES;
  result.elo = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearElo {
  result.hasElo = NO;
  result.elo = 0;
  return self;
}
- (BOOL) hasBattlesWon {
  return result.hasBattlesWon;
}
- (int32_t) battlesWon {
  return result.battlesWon;
}
- (UserPvpLeagueProto_Builder*) setBattlesWon:(int32_t) value {
  result.hasBattlesWon = YES;
  result.battlesWon = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearBattlesWon {
  result.hasBattlesWon = NO;
  result.battlesWon = 0;
  return self;
}
- (BOOL) hasBattlesLost {
  return result.hasBattlesLost;
}
- (int32_t) battlesLost {
  return result.battlesLost;
}
- (UserPvpLeagueProto_Builder*) setBattlesLost:(int32_t) value {
  result.hasBattlesLost = YES;
  result.battlesLost = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearBattlesLost {
  result.hasBattlesLost = NO;
  result.battlesLost = 0;
  return self;
}
- (BOOL) hasShieldEndTime {
  return result.hasShieldEndTime;
}
- (int64_t) shieldEndTime {
  return result.shieldEndTime;
}
- (UserPvpLeagueProto_Builder*) setShieldEndTime:(int64_t) value {
  result.hasShieldEndTime = YES;
  result.shieldEndTime = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearShieldEndTime {
  result.hasShieldEndTime = NO;
  result.shieldEndTime = 0L;
  return self;
}
- (BOOL) hasMonsterDmgMultiplier {
  return result.hasMonsterDmgMultiplier;
}
- (Float32) monsterDmgMultiplier {
  return result.monsterDmgMultiplier;
}
- (UserPvpLeagueProto_Builder*) setMonsterDmgMultiplier:(Float32) value {
  result.hasMonsterDmgMultiplier = YES;
  result.monsterDmgMultiplier = value;
  return self;
}
- (UserPvpLeagueProto_Builder*) clearMonsterDmgMultiplier {
  result.hasMonsterDmgMultiplier = NO;
  result.monsterDmgMultiplier = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
