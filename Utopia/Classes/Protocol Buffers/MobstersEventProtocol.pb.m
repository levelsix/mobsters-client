// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MobstersEventProtocol.pb.h"

@implementation MobstersEventProtocolRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MobstersEventProtocolRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [BattleRoot registerAllExtensions:registry];
    [BoosterPackStuffRoot registerAllExtensions:registry];
    [ChatRoot registerAllExtensions:registry];
    [CityRoot registerAllExtensions:registry];
    [ClanRoot registerAllExtensions:registry];
    [EventApnsRoot registerAllExtensions:registry];
    [EventBoosterPackRoot registerAllExtensions:registry];
    [EventChatRoot registerAllExtensions:registry];
    [EventCityRoot registerAllExtensions:registry];
    [EventClanRoot registerAllExtensions:registry];
    [EventDungeonRoot registerAllExtensions:registry];
    [EventInAppPurchaseRoot registerAllExtensions:registry];
    [EventMonsterRoot registerAllExtensions:registry];
    [EventPvpRoot registerAllExtensions:registry];
    [EventQuestRoot registerAllExtensions:registry];
    [EventReferralRoot registerAllExtensions:registry];
    [EventStartupRoot registerAllExtensions:registry];
    [EventStaticDataRoot registerAllExtensions:registry];
    [EventStructureRoot registerAllExtensions:registry];
    [EventTournamentRoot registerAllExtensions:registry];
    [EventUserRoot registerAllExtensions:registry];
    [InAppPurchaseRoot registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [QuestStuffRoot registerAllExtensions:registry];
    [StaticDataRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    [TaskRoot registerAllExtensions:registry];
    [TournamentStuffRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL MobstersEventProtocolRequestIsValidValue(MobstersEventProtocolRequest value) {
  switch (value) {
    case MobstersEventProtocolRequestCStartupEvent:
    case MobstersEventProtocolRequestCInAppPurchaseEvent:
    case MobstersEventProtocolRequestCPurchaseNormStructureEvent:
    case MobstersEventProtocolRequestCMoveOrRotateNormStructureEvent:
    case MobstersEventProtocolRequestCSellNormStructureEvent:
    case MobstersEventProtocolRequestCUpgradeNormStructureEvent:
    case MobstersEventProtocolRequestCRetrieveCurrencyFromNormStructureEvent:
    case MobstersEventProtocolRequestCFinishNormStructWaittimeWithDiamondsEvent:
    case MobstersEventProtocolRequestCNormStructWaitCompleteEvent:
    case MobstersEventProtocolRequestCLoadPlayerCityEvent:
    case MobstersEventProtocolRequestCQuestAcceptEvent:
    case MobstersEventProtocolRequestCQuestProgressEvent:
    case MobstersEventProtocolRequestCQuestRedeemEvent:
    case MobstersEventProtocolRequestCPurchaseCityExpansionEvent:
    case MobstersEventProtocolRequestCExpansionWaitCompleteEvent:
    case MobstersEventProtocolRequestCLevelUpEvent:
    case MobstersEventProtocolRequestCEnableApnsEvent:
    case MobstersEventProtocolRequestCUserCreateEvent:
    case MobstersEventProtocolRequestCLoadCityEvent:
    case MobstersEventProtocolRequestCRetrieveUsersForUserIdsEvent:
    case MobstersEventProtocolRequestCEarnFreeDiamondsEvent:
    case MobstersEventProtocolRequestCSendGroupChatEvent:
    case MobstersEventProtocolRequestCCreateClanEvent:
    case MobstersEventProtocolRequestCLeaveClanEvent:
    case MobstersEventProtocolRequestCRequestJoinClanEvent:
    case MobstersEventProtocolRequestCRetractRequestJoinClanEvent:
    case MobstersEventProtocolRequestCApproveOrRejectRequestToJoinClanEvent:
    case MobstersEventProtocolRequestCTransferClanOwnership:
    case MobstersEventProtocolRequestCRetrieveClanInfoEvent:
    case MobstersEventProtocolRequestCChangeClanDescriptionEvent:
    case MobstersEventProtocolRequestCBootPlayerFromClanEvent:
    case MobstersEventProtocolRequestCPickLockBoxEvent:
    case MobstersEventProtocolRequestCRetrieveTournamentRankingsEvent:
    case MobstersEventProtocolRequestCSubmitMonsterEnhancementEvent:
    case MobstersEventProtocolRequestCPurchaseBoosterPackEvent:
    case MobstersEventProtocolRequestCChangeClanJoinTypeEvent:
    case MobstersEventProtocolRequestCPrivateChatPostEvent:
    case MobstersEventProtocolRequestCRetrievePrivateChatPostEvent:
    case MobstersEventProtocolRequestCRedeemUserLockBoxItemsEvent:
    case MobstersEventProtocolRequestCBeginDungeonEvent:
    case MobstersEventProtocolRequestCEndDungeonEvent:
    case MobstersEventProtocolRequestCReviveInDungeonEvent:
    case MobstersEventProtocolRequestCQueueUpEvent:
    case MobstersEventProtocolRequestCUpdateMonsterHealthEvent:
    case MobstersEventProtocolRequestCHealMonsterEvent:
    case MobstersEventProtocolRequestCHealMonsterWaitTimeCompleteEvent:
    case MobstersEventProtocolRequestCAddMonsterToBattleTeamEvent:
    case MobstersEventProtocolRequestCRemoveMonsterFromBattleTeamEvent:
    case MobstersEventProtocolRequestCIncreaseMonsterInventorySlotEvent:
    case MobstersEventProtocolRequestCEnhancementWaitTimeCompleteEvent:
    case MobstersEventProtocolRequestCCombineUserMonsterPiecesEvent:
    case MobstersEventProtocolRequestCSellUserMonsterEvent:
    case MobstersEventProtocolRequestCInviteFbFriendsForSlotsEvent:
    case MobstersEventProtocolRequestCAcceptAndRejectFbInviteForSlotsEvent:
    case MobstersEventProtocolRequestCLogoutEvent:
      return YES;
    default:
      return NO;
  }
}
BOOL MobstersEventProtocolResponseIsValidValue(MobstersEventProtocolResponse value) {
  switch (value) {
    case MobstersEventProtocolResponseSStartupEvent:
    case MobstersEventProtocolResponseSInAppPurchaseEvent:
    case MobstersEventProtocolResponseSPurchaseNormStructureEvent:
    case MobstersEventProtocolResponseSMoveOrRotateNormStructureEvent:
    case MobstersEventProtocolResponseSSellNormStructureEvent:
    case MobstersEventProtocolResponseSUpgradeNormStructureEvent:
    case MobstersEventProtocolResponseSRetrieveCurrencyFromNormStructureEvent:
    case MobstersEventProtocolResponseSFinishNormStructWaittimeWithDiamondsEvent:
    case MobstersEventProtocolResponseSNormStructWaitCompleteEvent:
    case MobstersEventProtocolResponseSLoadPlayerCityEvent:
    case MobstersEventProtocolResponseSQuestAcceptEvent:
    case MobstersEventProtocolResponseSQuestProgressEvent:
    case MobstersEventProtocolResponseSQuestRedeemEvent:
    case MobstersEventProtocolResponseSPurchaseCityExpansionEvent:
    case MobstersEventProtocolResponseSExpansionWaitCompleteEvent:
    case MobstersEventProtocolResponseSLevelUpEvent:
    case MobstersEventProtocolResponseSEnableApnsEvent:
    case MobstersEventProtocolResponseSUserCreateEvent:
    case MobstersEventProtocolResponseSLoadCityEvent:
    case MobstersEventProtocolResponseSRetrieveUsersForUserIdsEvent:
    case MobstersEventProtocolResponseSEarnFreeDiamondsEvent:
    case MobstersEventProtocolResponseSSendGroupChatEvent:
    case MobstersEventProtocolResponseSCreateClanEvent:
    case MobstersEventProtocolResponseSLeaveClanEvent:
    case MobstersEventProtocolResponseSRequestJoinClanEvent:
    case MobstersEventProtocolResponseSRetractRequestJoinClanEvent:
    case MobstersEventProtocolResponseSApproveOrRejectRequestToJoinClanEvent:
    case MobstersEventProtocolResponseSTransferClanOwnership:
    case MobstersEventProtocolResponseSRetrieveClanInfoEvent:
    case MobstersEventProtocolResponseSChangeClanDescriptionEvent:
    case MobstersEventProtocolResponseSBootPlayerFromClanEvent:
    case MobstersEventProtocolResponseSPickLockBoxEvent:
    case MobstersEventProtocolResponseSRetrieveTournamentRankingsEvent:
    case MobstersEventProtocolResponseSSubmitMonsterEnhancementEvent:
    case MobstersEventProtocolResponseSPurchaseBoosterPackEvent:
    case MobstersEventProtocolResponseSChangeClanJoinTypeEvent:
    case MobstersEventProtocolResponseSPrivateChatPostEvent:
    case MobstersEventProtocolResponseSRetrievePrivateChatPostEvent:
    case MobstersEventProtocolResponseSRedeemUserLockBoxItemsEvent:
    case MobstersEventProtocolResponseSBeginDungeonEvent:
    case MobstersEventProtocolResponseSEndDungeonEvent:
    case MobstersEventProtocolResponseSReviveInDungeonEvent:
    case MobstersEventProtocolResponseSQueueUpEvent:
    case MobstersEventProtocolResponseSUpdateMonsterHealthEvent:
    case MobstersEventProtocolResponseSHealMonsterEvent:
    case MobstersEventProtocolResponseSHealMonsterWaitTimeCompleteEvent:
    case MobstersEventProtocolResponseSAddMonsterToBattleTeamEvent:
    case MobstersEventProtocolResponseSRemoveMonsterFromBattleTeamEvent:
    case MobstersEventProtocolResponseSIncreaseMonsterInventorySlotEvent:
    case MobstersEventProtocolResponseSEnhancementWaitTimeCompleteEvent:
    case MobstersEventProtocolResponseSCombineUserMonsterPiecesEvent:
    case MobstersEventProtocolResponseSSellUserMonsterEvent:
    case MobstersEventProtocolResponseSInviteFbFriendsForSlotsEvent:
    case MobstersEventProtocolResponseSAcceptAndRejectFbInviteForSlotsEvent:
    case MobstersEventProtocolResponseSUpdateClientUserEvent:
    case MobstersEventProtocolResponseSReferralCodeUsedEvent:
    case MobstersEventProtocolResponseSPurgeStaticDataEvent:
    case MobstersEventProtocolResponseSReceivedGroupChatEvent:
    case MobstersEventProtocolResponseSSendAdminMessageEvent:
    case MobstersEventProtocolResponseSGeneralNotificationEvent:
    case MobstersEventProtocolResponseSReceivedRareBoosterPurchaseEvent:
      return YES;
    default:
      return NO;
  }
}
