// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "EventPvp.pb.h"

@implementation EventPvpRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [EventPvpRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface QueueUpRequestProto ()
@property (retain) MinimumUserProto* attacker;
@property (retain) NSMutableArray* mutableSeenUserIdsList;
@property int64_t clientTime;
@end

@implementation QueueUpRequestProto

- (BOOL) hasAttacker {
  return !!hasAttacker_;
}
- (void) setHasAttacker:(BOOL) value {
  hasAttacker_ = !!value;
}
@synthesize attacker;
@synthesize mutableSeenUserIdsList;
- (BOOL) hasClientTime {
  return !!hasClientTime_;
}
- (void) setHasClientTime:(BOOL) value {
  hasClientTime_ = !!value;
}
@synthesize clientTime;
- (void) dealloc {
  self.attacker = nil;
  self.mutableSeenUserIdsList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.attacker = [MinimumUserProto defaultInstance];
    self.clientTime = 0L;
  }
  return self;
}
static QueueUpRequestProto* defaultQueueUpRequestProtoInstance = nil;
+ (void) initialize {
  if (self == [QueueUpRequestProto class]) {
    defaultQueueUpRequestProtoInstance = [[QueueUpRequestProto alloc] init];
  }
}
+ (QueueUpRequestProto*) defaultInstance {
  return defaultQueueUpRequestProtoInstance;
}
- (QueueUpRequestProto*) defaultInstance {
  return defaultQueueUpRequestProtoInstance;
}
- (NSArray*) seenUserIdsList {
  return mutableSeenUserIdsList;
}
- (int32_t) seenUserIdsAtIndex:(int32_t) index {
  id value = [mutableSeenUserIdsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAttacker) {
    [output writeMessage:1 value:self.attacker];
  }
  for (NSNumber* value in self.mutableSeenUserIdsList) {
    [output writeInt32:2 value:[value intValue]];
  }
  if (self.hasClientTime) {
    [output writeInt64:3 value:self.clientTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAttacker) {
    size += computeMessageSize(1, self.attacker);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableSeenUserIdsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableSeenUserIdsList.count;
  }
  if (self.hasClientTime) {
    size += computeInt64Size(3, self.clientTime);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (QueueUpRequestProto*) parseFromData:(NSData*) data {
  return (QueueUpRequestProto*)[[[QueueUpRequestProto builder] mergeFromData:data] build];
}
+ (QueueUpRequestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QueueUpRequestProto*)[[[QueueUpRequestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QueueUpRequestProto*) parseFromInputStream:(NSInputStream*) input {
  return (QueueUpRequestProto*)[[[QueueUpRequestProto builder] mergeFromInputStream:input] build];
}
+ (QueueUpRequestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QueueUpRequestProto*)[[[QueueUpRequestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QueueUpRequestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QueueUpRequestProto*)[[[QueueUpRequestProto builder] mergeFromCodedInputStream:input] build];
}
+ (QueueUpRequestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QueueUpRequestProto*)[[[QueueUpRequestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QueueUpRequestProto_Builder*) builder {
  return [[[QueueUpRequestProto_Builder alloc] init] autorelease];
}
+ (QueueUpRequestProto_Builder*) builderWithPrototype:(QueueUpRequestProto*) prototype {
  return [[QueueUpRequestProto builder] mergeFrom:prototype];
}
- (QueueUpRequestProto_Builder*) builder {
  return [QueueUpRequestProto builder];
}
@end

@interface QueueUpRequestProto_Builder()
@property (retain) QueueUpRequestProto* result;
@end

@implementation QueueUpRequestProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[QueueUpRequestProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (QueueUpRequestProto_Builder*) clear {
  self.result = [[[QueueUpRequestProto alloc] init] autorelease];
  return self;
}
- (QueueUpRequestProto_Builder*) clone {
  return [QueueUpRequestProto builderWithPrototype:result];
}
- (QueueUpRequestProto*) defaultInstance {
  return [QueueUpRequestProto defaultInstance];
}
- (QueueUpRequestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QueueUpRequestProto*) buildPartial {
  QueueUpRequestProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (QueueUpRequestProto_Builder*) mergeFrom:(QueueUpRequestProto*) other {
  if (other == [QueueUpRequestProto defaultInstance]) {
    return self;
  }
  if (other.hasAttacker) {
    [self mergeAttacker:other.attacker];
  }
  if (other.mutableSeenUserIdsList.count > 0) {
    if (result.mutableSeenUserIdsList == nil) {
      result.mutableSeenUserIdsList = [NSMutableArray array];
    }
    [result.mutableSeenUserIdsList addObjectsFromArray:other.mutableSeenUserIdsList];
  }
  if (other.hasClientTime) {
    [self setClientTime:other.clientTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QueueUpRequestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QueueUpRequestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasAttacker) {
          [subBuilder mergeFrom:self.attacker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttacker:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self addSeenUserIds:[input readInt32]];
        break;
      }
      case 24: {
        [self setClientTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasAttacker {
  return result.hasAttacker;
}
- (MinimumUserProto*) attacker {
  return result.attacker;
}
- (QueueUpRequestProto_Builder*) setAttacker:(MinimumUserProto*) value {
  result.hasAttacker = YES;
  result.attacker = value;
  return self;
}
- (QueueUpRequestProto_Builder*) setAttackerBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setAttacker:[builderForValue build]];
}
- (QueueUpRequestProto_Builder*) mergeAttacker:(MinimumUserProto*) value {
  if (result.hasAttacker &&
      result.attacker != [MinimumUserProto defaultInstance]) {
    result.attacker =
      [[[MinimumUserProto builderWithPrototype:result.attacker] mergeFrom:value] buildPartial];
  } else {
    result.attacker = value;
  }
  result.hasAttacker = YES;
  return self;
}
- (QueueUpRequestProto_Builder*) clearAttacker {
  result.hasAttacker = NO;
  result.attacker = [MinimumUserProto defaultInstance];
  return self;
}
- (NSArray*) seenUserIdsList {
  if (result.mutableSeenUserIdsList == nil) {
    return [NSArray array];
  }
  return result.mutableSeenUserIdsList;
}
- (int32_t) seenUserIdsAtIndex:(int32_t) index {
  return [result seenUserIdsAtIndex:index];
}
- (QueueUpRequestProto_Builder*) replaceSeenUserIdsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableSeenUserIdsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (QueueUpRequestProto_Builder*) addSeenUserIds:(int32_t) value {
  if (result.mutableSeenUserIdsList == nil) {
    result.mutableSeenUserIdsList = [NSMutableArray array];
  }
  [result.mutableSeenUserIdsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (QueueUpRequestProto_Builder*) addAllSeenUserIds:(NSArray*) values {
  if (result.mutableSeenUserIdsList == nil) {
    result.mutableSeenUserIdsList = [NSMutableArray array];
  }
  [result.mutableSeenUserIdsList addObjectsFromArray:values];
  return self;
}
- (QueueUpRequestProto_Builder*) clearSeenUserIdsList {
  result.mutableSeenUserIdsList = nil;
  return self;
}
- (BOOL) hasClientTime {
  return result.hasClientTime;
}
- (int64_t) clientTime {
  return result.clientTime;
}
- (QueueUpRequestProto_Builder*) setClientTime:(int64_t) value {
  result.hasClientTime = YES;
  result.clientTime = value;
  return self;
}
- (QueueUpRequestProto_Builder*) clearClientTime {
  result.hasClientTime = NO;
  result.clientTime = 0L;
  return self;
}
@end

@interface QueueUpResponseProto ()
@property (retain) MinimumUserProto* attacker;
@property (retain) MinimumUserProto* defender;
@property QueueUpResponseProto_QueueUpStatus status;
@property int32_t possibleCoinReward;
@end

@implementation QueueUpResponseProto

- (BOOL) hasAttacker {
  return !!hasAttacker_;
}
- (void) setHasAttacker:(BOOL) value {
  hasAttacker_ = !!value;
}
@synthesize attacker;
- (BOOL) hasDefender {
  return !!hasDefender_;
}
- (void) setHasDefender:(BOOL) value {
  hasDefender_ = !!value;
}
@synthesize defender;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (BOOL) hasPossibleCoinReward {
  return !!hasPossibleCoinReward_;
}
- (void) setHasPossibleCoinReward:(BOOL) value {
  hasPossibleCoinReward_ = !!value;
}
@synthesize possibleCoinReward;
- (void) dealloc {
  self.attacker = nil;
  self.defender = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.attacker = [MinimumUserProto defaultInstance];
    self.defender = [MinimumUserProto defaultInstance];
    self.status = QueueUpResponseProto_QueueUpStatusSuccess;
    self.possibleCoinReward = 0;
  }
  return self;
}
static QueueUpResponseProto* defaultQueueUpResponseProtoInstance = nil;
+ (void) initialize {
  if (self == [QueueUpResponseProto class]) {
    defaultQueueUpResponseProtoInstance = [[QueueUpResponseProto alloc] init];
  }
}
+ (QueueUpResponseProto*) defaultInstance {
  return defaultQueueUpResponseProtoInstance;
}
- (QueueUpResponseProto*) defaultInstance {
  return defaultQueueUpResponseProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAttacker) {
    [output writeMessage:1 value:self.attacker];
  }
  if (self.hasDefender) {
    [output writeMessage:2 value:self.defender];
  }
  if (self.hasStatus) {
    [output writeEnum:3 value:self.status];
  }
  if (self.hasPossibleCoinReward) {
    [output writeInt32:4 value:self.possibleCoinReward];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasAttacker) {
    size += computeMessageSize(1, self.attacker);
  }
  if (self.hasDefender) {
    size += computeMessageSize(2, self.defender);
  }
  if (self.hasStatus) {
    size += computeEnumSize(3, self.status);
  }
  if (self.hasPossibleCoinReward) {
    size += computeInt32Size(4, self.possibleCoinReward);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (QueueUpResponseProto*) parseFromData:(NSData*) data {
  return (QueueUpResponseProto*)[[[QueueUpResponseProto builder] mergeFromData:data] build];
}
+ (QueueUpResponseProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QueueUpResponseProto*)[[[QueueUpResponseProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QueueUpResponseProto*) parseFromInputStream:(NSInputStream*) input {
  return (QueueUpResponseProto*)[[[QueueUpResponseProto builder] mergeFromInputStream:input] build];
}
+ (QueueUpResponseProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QueueUpResponseProto*)[[[QueueUpResponseProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QueueUpResponseProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QueueUpResponseProto*)[[[QueueUpResponseProto builder] mergeFromCodedInputStream:input] build];
}
+ (QueueUpResponseProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QueueUpResponseProto*)[[[QueueUpResponseProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QueueUpResponseProto_Builder*) builder {
  return [[[QueueUpResponseProto_Builder alloc] init] autorelease];
}
+ (QueueUpResponseProto_Builder*) builderWithPrototype:(QueueUpResponseProto*) prototype {
  return [[QueueUpResponseProto builder] mergeFrom:prototype];
}
- (QueueUpResponseProto_Builder*) builder {
  return [QueueUpResponseProto builder];
}
@end

BOOL QueueUpResponseProto_QueueUpStatusIsValidValue(QueueUpResponseProto_QueueUpStatus value) {
  switch (value) {
    case QueueUpResponseProto_QueueUpStatusSuccess:
    case QueueUpResponseProto_QueueUpStatusOtherFail:
    case QueueUpResponseProto_QueueUpStatusFailNotEnoughSilver:
    case QueueUpResponseProto_QueueUpStatusFailCantFindAnyone:
      return YES;
    default:
      return NO;
  }
}
@interface QueueUpResponseProto_Builder()
@property (retain) QueueUpResponseProto* result;
@end

@implementation QueueUpResponseProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[QueueUpResponseProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (QueueUpResponseProto_Builder*) clear {
  self.result = [[[QueueUpResponseProto alloc] init] autorelease];
  return self;
}
- (QueueUpResponseProto_Builder*) clone {
  return [QueueUpResponseProto builderWithPrototype:result];
}
- (QueueUpResponseProto*) defaultInstance {
  return [QueueUpResponseProto defaultInstance];
}
- (QueueUpResponseProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QueueUpResponseProto*) buildPartial {
  QueueUpResponseProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (QueueUpResponseProto_Builder*) mergeFrom:(QueueUpResponseProto*) other {
  if (other == [QueueUpResponseProto defaultInstance]) {
    return self;
  }
  if (other.hasAttacker) {
    [self mergeAttacker:other.attacker];
  }
  if (other.hasDefender) {
    [self mergeDefender:other.defender];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  if (other.hasPossibleCoinReward) {
    [self setPossibleCoinReward:other.possibleCoinReward];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QueueUpResponseProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QueueUpResponseProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasAttacker) {
          [subBuilder mergeFrom:self.attacker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttacker:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasDefender) {
          [subBuilder mergeFrom:self.defender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefender:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (QueueUpResponseProto_QueueUpStatusIsValidValue(value)) {
          [self setStatus:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setPossibleCoinReward:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasAttacker {
  return result.hasAttacker;
}
- (MinimumUserProto*) attacker {
  return result.attacker;
}
- (QueueUpResponseProto_Builder*) setAttacker:(MinimumUserProto*) value {
  result.hasAttacker = YES;
  result.attacker = value;
  return self;
}
- (QueueUpResponseProto_Builder*) setAttackerBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setAttacker:[builderForValue build]];
}
- (QueueUpResponseProto_Builder*) mergeAttacker:(MinimumUserProto*) value {
  if (result.hasAttacker &&
      result.attacker != [MinimumUserProto defaultInstance]) {
    result.attacker =
      [[[MinimumUserProto builderWithPrototype:result.attacker] mergeFrom:value] buildPartial];
  } else {
    result.attacker = value;
  }
  result.hasAttacker = YES;
  return self;
}
- (QueueUpResponseProto_Builder*) clearAttacker {
  result.hasAttacker = NO;
  result.attacker = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasDefender {
  return result.hasDefender;
}
- (MinimumUserProto*) defender {
  return result.defender;
}
- (QueueUpResponseProto_Builder*) setDefender:(MinimumUserProto*) value {
  result.hasDefender = YES;
  result.defender = value;
  return self;
}
- (QueueUpResponseProto_Builder*) setDefenderBuilder:(MinimumUserProto_Builder*) builderForValue {
  return [self setDefender:[builderForValue build]];
}
- (QueueUpResponseProto_Builder*) mergeDefender:(MinimumUserProto*) value {
  if (result.hasDefender &&
      result.defender != [MinimumUserProto defaultInstance]) {
    result.defender =
      [[[MinimumUserProto builderWithPrototype:result.defender] mergeFrom:value] buildPartial];
  } else {
    result.defender = value;
  }
  result.hasDefender = YES;
  return self;
}
- (QueueUpResponseProto_Builder*) clearDefender {
  result.hasDefender = NO;
  result.defender = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (QueueUpResponseProto_QueueUpStatus) status {
  return result.status;
}
- (QueueUpResponseProto_Builder*) setStatus:(QueueUpResponseProto_QueueUpStatus) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (QueueUpResponseProto_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = QueueUpResponseProto_QueueUpStatusSuccess;
  return self;
}
- (BOOL) hasPossibleCoinReward {
  return result.hasPossibleCoinReward;
}
- (int32_t) possibleCoinReward {
  return result.possibleCoinReward;
}
- (QueueUpResponseProto_Builder*) setPossibleCoinReward:(int32_t) value {
  result.hasPossibleCoinReward = YES;
  result.possibleCoinReward = value;
  return self;
}
- (QueueUpResponseProto_Builder*) clearPossibleCoinReward {
  result.hasPossibleCoinReward = NO;
  result.possibleCoinReward = 0;
  return self;
}
@end

