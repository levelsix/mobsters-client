// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Skill.pb.h"
// @@protoc_insertion_point(imports)

@implementation SkillRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SkillRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL SkillTypeIsValidValue(SkillType value) {
  switch (value) {
    case SkillTypeNoSkill:
    case SkillTypeCakeDrop:
    case SkillTypeJelly:
    case SkillTypeQuickAttack:
    case SkillTypeBombs:
    case SkillTypeShield:
    case SkillTypePoison:
    case SkillTypeRoidRage:
    case SkillTypeMomentum:
    case SkillTypeThickSkin:
    case SkillTypeCritAndEvade:
    case SkillTypeShuffle:
    case SkillTypeHeadshot:
    case SkillTypeMud:
    case SkillTypeLifeSteal:
    case SkillTypeCounterStrike:
    case SkillTypeFlameStrike:
    case SkillTypeConfusion:
    case SkillTypeStaticField:
    case SkillTypeBlindingLight:
    case SkillTypePoisonPowder:
    case SkillTypeSkewer:
    case SkillTypeKnockout:
    case SkillTypeShallowGrave:
    case SkillTypeHammerTime:
    case SkillTypeBloodRage:
    case SkillTypeTakeAim:
    case SkillTypeHellFire:
    case SkillTypeEnergize:
      return YES;
    default:
      return NO;
  }
}
BOOL SkillActivationTypeIsValidValue(SkillActivationType value) {
  switch (value) {
    case SkillActivationTypeUserActivated:
    case SkillActivationTypeAutoActivated:
    case SkillActivationTypePassive:
      return YES;
    default:
      return NO;
  }
}
@interface SkillProto ()
@property int32_t skillId;
@property (strong) NSString* name;
@property int32_t orbCost;
@property SkillType type;
@property SkillActivationType activationType;
@property int32_t predecId;
@property int32_t sucId;
@property (strong) NSMutableArray * mutablePropertiesList;
@property (strong) NSString* desc;
@property (strong) NSString* imgNamePrefix;
@end

@implementation SkillProto

- (BOOL) hasSkillId {
  return !!hasSkillId_;
}
- (void) setHasSkillId:(BOOL) value_ {
  hasSkillId_ = !!value_;
}
@synthesize skillId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasOrbCost {
  return !!hasOrbCost_;
}
- (void) setHasOrbCost:(BOOL) value_ {
  hasOrbCost_ = !!value_;
}
@synthesize orbCost;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasActivationType {
  return !!hasActivationType_;
}
- (void) setHasActivationType:(BOOL) value_ {
  hasActivationType_ = !!value_;
}
@synthesize activationType;
- (BOOL) hasPredecId {
  return !!hasPredecId_;
}
- (void) setHasPredecId:(BOOL) value_ {
  hasPredecId_ = !!value_;
}
@synthesize predecId;
- (BOOL) hasSucId {
  return !!hasSucId_;
}
- (void) setHasSucId:(BOOL) value_ {
  hasSucId_ = !!value_;
}
@synthesize sucId;
@synthesize mutablePropertiesList;
@dynamic propertiesList;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value_ {
  hasDesc_ = !!value_;
}
@synthesize desc;
- (BOOL) hasImgNamePrefix {
  return !!hasImgNamePrefix_;
}
- (void) setHasImgNamePrefix:(BOOL) value_ {
  hasImgNamePrefix_ = !!value_;
}
@synthesize imgNamePrefix;
- (id) init {
  if ((self = [super init])) {
    self.skillId = 0;
    self.name = @"";
    self.orbCost = 0;
    self.type = SkillTypeNoSkill;
    self.activationType = SkillActivationTypeUserActivated;
    self.predecId = 0;
    self.sucId = 0;
    self.desc = @"";
    self.imgNamePrefix = @"";
  }
  return self;
}
static SkillProto* defaultSkillProtoInstance = nil;
+ (void) initialize {
  if (self == [SkillProto class]) {
    defaultSkillProtoInstance = [[SkillProto alloc] init];
  }
}
+ (SkillProto*) defaultInstance {
  return defaultSkillProtoInstance;
}
- (SkillProto*) defaultInstance {
  return defaultSkillProtoInstance;
}
- (NSArray *)propertiesList {
  return mutablePropertiesList;
}
- (SkillPropertyProto*)propertiesAtIndex:(NSUInteger)index {
  return [mutablePropertiesList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillId) {
    [output writeInt32:1 value:self.skillId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasOrbCost) {
    [output writeInt32:3 value:self.orbCost];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasActivationType) {
    [output writeEnum:5 value:self.activationType];
  }
  if (self.hasPredecId) {
    [output writeInt32:6 value:self.predecId];
  }
  if (self.hasSucId) {
    [output writeInt32:7 value:self.sucId];
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasDesc) {
    [output writeString:9 value:self.desc];
  }
  if (self.hasImgNamePrefix) {
    [output writeString:12 value:self.imgNamePrefix];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillId) {
    size_ += computeInt32Size(1, self.skillId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasOrbCost) {
    size_ += computeInt32Size(3, self.orbCost);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  if (self.hasActivationType) {
    size_ += computeEnumSize(5, self.activationType);
  }
  if (self.hasPredecId) {
    size_ += computeInt32Size(6, self.predecId);
  }
  if (self.hasSucId) {
    size_ += computeInt32Size(7, self.sucId);
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasDesc) {
    size_ += computeStringSize(9, self.desc);
  }
  if (self.hasImgNamePrefix) {
    size_ += computeStringSize(12, self.imgNamePrefix);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SkillProto*) parseFromData:(NSData*) data {
  return (SkillProto*)[[[SkillProto builder] mergeFromData:data] build];
}
+ (SkillProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillProto*)[[[SkillProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SkillProto*) parseFromInputStream:(NSInputStream*) input {
  return (SkillProto*)[[[SkillProto builder] mergeFromInputStream:input] build];
}
+ (SkillProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillProto*)[[[SkillProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SkillProto*)[[[SkillProto builder] mergeFromCodedInputStream:input] build];
}
+ (SkillProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillProto*)[[[SkillProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillProto_Builder*) builder {
  return [[SkillProto_Builder alloc] init];
}
+ (SkillProto_Builder*) builderWithPrototype:(SkillProto*) prototype {
  return [[SkillProto builder] mergeFrom:prototype];
}
- (SkillProto_Builder*) builder {
  return [SkillProto builder];
}
- (SkillProto_Builder*) toBuilder {
  return [SkillProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillId", [NSNumber numberWithInteger:self.skillId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasOrbCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orbCost", [NSNumber numberWithInteger:self.orbCost]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasActivationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"activationType", [NSNumber numberWithInteger:self.activationType]];
  }
  if (self.hasPredecId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"predecId", [NSNumber numberWithInteger:self.predecId]];
  }
  if (self.hasSucId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sucId", [NSNumber numberWithInteger:self.sucId]];
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"properties"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasImgNamePrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgNamePrefix", self.imgNamePrefix];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SkillProto class]]) {
    return NO;
  }
  SkillProto *otherMessage = other;
  return
      self.hasSkillId == otherMessage.hasSkillId &&
      (!self.hasSkillId || self.skillId == otherMessage.skillId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasOrbCost == otherMessage.hasOrbCost &&
      (!self.hasOrbCost || self.orbCost == otherMessage.orbCost) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasActivationType == otherMessage.hasActivationType &&
      (!self.hasActivationType || self.activationType == otherMessage.activationType) &&
      self.hasPredecId == otherMessage.hasPredecId &&
      (!self.hasPredecId || self.predecId == otherMessage.predecId) &&
      self.hasSucId == otherMessage.hasSucId &&
      (!self.hasSucId || self.sucId == otherMessage.sucId) &&
      [self.propertiesList isEqualToArray:otherMessage.propertiesList] &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasImgNamePrefix == otherMessage.hasImgNamePrefix &&
      (!self.hasImgNamePrefix || [self.imgNamePrefix isEqual:otherMessage.imgNamePrefix]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasOrbCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.orbCost] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasActivationType) {
    hashCode = hashCode * 31 + self.activationType;
  }
  if (self.hasPredecId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.predecId] hash];
  }
  if (self.hasSucId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sucId] hash];
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasImgNamePrefix) {
    hashCode = hashCode * 31 + [self.imgNamePrefix hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SkillProto_Builder()
@property (strong) SkillProto* result;
@end

@implementation SkillProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SkillProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SkillProto_Builder*) clear {
  self.result = [[SkillProto alloc] init];
  return self;
}
- (SkillProto_Builder*) clone {
  return [SkillProto builderWithPrototype:result];
}
- (SkillProto*) defaultInstance {
  return [SkillProto defaultInstance];
}
- (SkillProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SkillProto*) buildPartial {
  SkillProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SkillProto_Builder*) mergeFrom:(SkillProto*) other {
  if (other == [SkillProto defaultInstance]) {
    return self;
  }
  if (other.hasSkillId) {
    [self setSkillId:other.skillId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasOrbCost) {
    [self setOrbCost:other.orbCost];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasActivationType) {
    [self setActivationType:other.activationType];
  }
  if (other.hasPredecId) {
    [self setPredecId:other.predecId];
  }
  if (other.hasSucId) {
    [self setSucId:other.sucId];
  }
  if (other.mutablePropertiesList.count > 0) {
    if (result.mutablePropertiesList == nil) {
      result.mutablePropertiesList = [[NSMutableArray alloc] initWithArray:other.mutablePropertiesList];
    } else {
      [result.mutablePropertiesList addObjectsFromArray:other.mutablePropertiesList];
    }
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasImgNamePrefix) {
    [self setImgNamePrefix:other.imgNamePrefix];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SkillProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SkillProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setOrbCost:[input readInt32]];
        break;
      }
      case 32: {
        SkillType value = (SkillType)[input readEnum];
        if (SkillTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        SkillActivationType value = (SkillActivationType)[input readEnum];
        if (SkillActivationTypeIsValidValue(value)) {
          [self setActivationType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setPredecId:[input readInt32]];
        break;
      }
      case 56: {
        [self setSucId:[input readInt32]];
        break;
      }
      case 66: {
        SkillPropertyProto_Builder* subBuilder = [SkillPropertyProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProperties:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        [self setDesc:[input readString]];
        break;
      }
      case 98: {
        [self setImgNamePrefix:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSkillId {
  return result.hasSkillId;
}
- (int32_t) skillId {
  return result.skillId;
}
- (SkillProto_Builder*) setSkillId:(int32_t) value {
  result.hasSkillId = YES;
  result.skillId = value;
  return self;
}
- (SkillProto_Builder*) clearSkillId {
  result.hasSkillId = NO;
  result.skillId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (SkillProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (SkillProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasOrbCost {
  return result.hasOrbCost;
}
- (int32_t) orbCost {
  return result.orbCost;
}
- (SkillProto_Builder*) setOrbCost:(int32_t) value {
  result.hasOrbCost = YES;
  result.orbCost = value;
  return self;
}
- (SkillProto_Builder*) clearOrbCost {
  result.hasOrbCost = NO;
  result.orbCost = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (SkillType) type {
  return result.type;
}
- (SkillProto_Builder*) setType:(SkillType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (SkillProto_Builder*) clearType {
  result.hasType = NO;
  result.type = SkillTypeNoSkill;
  return self;
}
- (BOOL) hasActivationType {
  return result.hasActivationType;
}
- (SkillActivationType) activationType {
  return result.activationType;
}
- (SkillProto_Builder*) setActivationType:(SkillActivationType) value {
  result.hasActivationType = YES;
  result.activationType = value;
  return self;
}
- (SkillProto_Builder*) clearActivationType {
  result.hasActivationType = NO;
  result.activationType = SkillActivationTypeUserActivated;
  return self;
}
- (BOOL) hasPredecId {
  return result.hasPredecId;
}
- (int32_t) predecId {
  return result.predecId;
}
- (SkillProto_Builder*) setPredecId:(int32_t) value {
  result.hasPredecId = YES;
  result.predecId = value;
  return self;
}
- (SkillProto_Builder*) clearPredecId {
  result.hasPredecId = NO;
  result.predecId = 0;
  return self;
}
- (BOOL) hasSucId {
  return result.hasSucId;
}
- (int32_t) sucId {
  return result.sucId;
}
- (SkillProto_Builder*) setSucId:(int32_t) value {
  result.hasSucId = YES;
  result.sucId = value;
  return self;
}
- (SkillProto_Builder*) clearSucId {
  result.hasSucId = NO;
  result.sucId = 0;
  return self;
}
- (NSMutableArray *)propertiesList {
  return result.mutablePropertiesList;
}
- (SkillPropertyProto*)propertiesAtIndex:(NSUInteger)index {
  return [result propertiesAtIndex:index];
}
- (SkillProto_Builder *)addProperties:(SkillPropertyProto*)value {
  if (result.mutablePropertiesList == nil) {
    result.mutablePropertiesList = [[NSMutableArray alloc]init];
  }
  [result.mutablePropertiesList addObject:value];
  return self;
}
- (SkillProto_Builder *)addAllProperties:(NSArray *)array {
  if (result.mutablePropertiesList == nil) {
    result.mutablePropertiesList = [NSMutableArray array];
  }
  [result.mutablePropertiesList addObjectsFromArray:array];
  return self;
}
- (SkillProto_Builder *)clearProperties {
  result.mutablePropertiesList = nil;
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (SkillProto_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (SkillProto_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasImgNamePrefix {
  return result.hasImgNamePrefix;
}
- (NSString*) imgNamePrefix {
  return result.imgNamePrefix;
}
- (SkillProto_Builder*) setImgNamePrefix:(NSString*) value {
  result.hasImgNamePrefix = YES;
  result.imgNamePrefix = value;
  return self;
}
- (SkillProto_Builder*) clearImgNamePrefix {
  result.hasImgNamePrefix = NO;
  result.imgNamePrefix = @"";
  return self;
}
@end

@interface SkillPropertyProto ()
@property int32_t skillPropertyId;
@property (strong) NSString* name;
@property Float32 skillValue;
@end

@implementation SkillPropertyProto

- (BOOL) hasSkillPropertyId {
  return !!hasSkillPropertyId_;
}
- (void) setHasSkillPropertyId:(BOOL) value_ {
  hasSkillPropertyId_ = !!value_;
}
@synthesize skillPropertyId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasSkillValue {
  return !!hasSkillValue_;
}
- (void) setHasSkillValue:(BOOL) value_ {
  hasSkillValue_ = !!value_;
}
@synthesize skillValue;
- (id) init {
  if ((self = [super init])) {
    self.skillPropertyId = 0;
    self.name = @"";
    self.skillValue = 0;
  }
  return self;
}
static SkillPropertyProto* defaultSkillPropertyProtoInstance = nil;
+ (void) initialize {
  if (self == [SkillPropertyProto class]) {
    defaultSkillPropertyProtoInstance = [[SkillPropertyProto alloc] init];
  }
}
+ (SkillPropertyProto*) defaultInstance {
  return defaultSkillPropertyProtoInstance;
}
- (SkillPropertyProto*) defaultInstance {
  return defaultSkillPropertyProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillPropertyId) {
    [output writeInt32:1 value:self.skillPropertyId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasSkillValue) {
    [output writeFloat:3 value:self.skillValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillPropertyId) {
    size_ += computeInt32Size(1, self.skillPropertyId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasSkillValue) {
    size_ += computeFloatSize(3, self.skillValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SkillPropertyProto*) parseFromData:(NSData*) data {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromData:data] build];
}
+ (SkillPropertyProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SkillPropertyProto*) parseFromInputStream:(NSInputStream*) input {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromInputStream:input] build];
}
+ (SkillPropertyProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillPropertyProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromCodedInputStream:input] build];
}
+ (SkillPropertyProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillPropertyProto_Builder*) builder {
  return [[SkillPropertyProto_Builder alloc] init];
}
+ (SkillPropertyProto_Builder*) builderWithPrototype:(SkillPropertyProto*) prototype {
  return [[SkillPropertyProto builder] mergeFrom:prototype];
}
- (SkillPropertyProto_Builder*) builder {
  return [SkillPropertyProto builder];
}
- (SkillPropertyProto_Builder*) toBuilder {
  return [SkillPropertyProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillPropertyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillPropertyId", [NSNumber numberWithInteger:self.skillPropertyId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSkillValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillValue", [NSNumber numberWithFloat:self.skillValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SkillPropertyProto class]]) {
    return NO;
  }
  SkillPropertyProto *otherMessage = other;
  return
      self.hasSkillPropertyId == otherMessage.hasSkillPropertyId &&
      (!self.hasSkillPropertyId || self.skillPropertyId == otherMessage.skillPropertyId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSkillValue == otherMessage.hasSkillValue &&
      (!self.hasSkillValue || self.skillValue == otherMessage.skillValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSkillPropertyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillPropertyId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSkillValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.skillValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SkillPropertyProto_Builder()
@property (strong) SkillPropertyProto* result;
@end

@implementation SkillPropertyProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SkillPropertyProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SkillPropertyProto_Builder*) clear {
  self.result = [[SkillPropertyProto alloc] init];
  return self;
}
- (SkillPropertyProto_Builder*) clone {
  return [SkillPropertyProto builderWithPrototype:result];
}
- (SkillPropertyProto*) defaultInstance {
  return [SkillPropertyProto defaultInstance];
}
- (SkillPropertyProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SkillPropertyProto*) buildPartial {
  SkillPropertyProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SkillPropertyProto_Builder*) mergeFrom:(SkillPropertyProto*) other {
  if (other == [SkillPropertyProto defaultInstance]) {
    return self;
  }
  if (other.hasSkillPropertyId) {
    [self setSkillPropertyId:other.skillPropertyId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSkillValue) {
    [self setSkillValue:other.skillValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SkillPropertyProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SkillPropertyProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillPropertyId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 29: {
        [self setSkillValue:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasSkillPropertyId {
  return result.hasSkillPropertyId;
}
- (int32_t) skillPropertyId {
  return result.skillPropertyId;
}
- (SkillPropertyProto_Builder*) setSkillPropertyId:(int32_t) value {
  result.hasSkillPropertyId = YES;
  result.skillPropertyId = value;
  return self;
}
- (SkillPropertyProto_Builder*) clearSkillPropertyId {
  result.hasSkillPropertyId = NO;
  result.skillPropertyId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (SkillPropertyProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (SkillPropertyProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasSkillValue {
  return result.hasSkillValue;
}
- (Float32) skillValue {
  return result.skillValue;
}
- (SkillPropertyProto_Builder*) setSkillValue:(Float32) value {
  result.hasSkillValue = YES;
  result.skillValue = value;
  return self;
}
- (SkillPropertyProto_Builder*) clearSkillValue {
  result.hasSkillValue = NO;
  result.skillValue = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
