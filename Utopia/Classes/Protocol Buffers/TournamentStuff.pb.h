// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "Chat.pb.h"

@class ColorProto;
@class ColorProto_Builder;
@class FullUserProto;
@class FullUserProto_Builder;
@class GroupChatMessageProto;
@class GroupChatMessageProto_Builder;
@class MinimumClanProto;
@class MinimumClanProto_Builder;
@class MinimumUserProto;
@class MinimumUserProtoWithLevel;
@class MinimumUserProtoWithLevelForLeaderboard;
@class MinimumUserProtoWithLevelForLeaderboard_Builder;
@class MinimumUserProtoWithLevel_Builder;
@class MinimumUserProto_Builder;
@class PrivateChatPostProto;
@class PrivateChatPostProto_Builder;
@class TournamentProto;
@class TournamentProto_Builder;
@class TournamentRewardProto;
@class TournamentRewardProto_Builder;

@interface TournamentStuffRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface TournamentProto : PBGeneratedMessage {
@private
  BOOL hasStartDate_:1;
  BOOL hasEndDate_:1;
  BOOL hasLastShowDate_:1;
  BOOL hasEventId_:1;
  BOOL hasEventName_:1;
  int64_t startDate;
  int64_t endDate;
  int64_t lastShowDate;
  int32_t eventId;
  NSString* eventName;
  NSMutableArray* mutableRewardsList;
}
- (BOOL) hasEventId;
- (BOOL) hasStartDate;
- (BOOL) hasEndDate;
- (BOOL) hasEventName;
- (BOOL) hasLastShowDate;
@property (readonly) int32_t eventId;
@property (readonly) int64_t startDate;
@property (readonly) int64_t endDate;
@property (readonly, retain) NSString* eventName;
@property (readonly) int64_t lastShowDate;
- (NSArray*) rewardsList;
- (TournamentRewardProto*) rewardsAtIndex:(int32_t) index;

+ (TournamentProto*) defaultInstance;
- (TournamentProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TournamentProto_Builder*) builder;
+ (TournamentProto_Builder*) builder;
+ (TournamentProto_Builder*) builderWithPrototype:(TournamentProto*) prototype;

+ (TournamentProto*) parseFromData:(NSData*) data;
+ (TournamentProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentProto*) parseFromInputStream:(NSInputStream*) input;
+ (TournamentProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TournamentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TournamentProto_Builder : PBGeneratedMessage_Builder {
@private
  TournamentProto* result;
}

- (TournamentProto*) defaultInstance;

- (TournamentProto_Builder*) clear;
- (TournamentProto_Builder*) clone;

- (TournamentProto*) build;
- (TournamentProto*) buildPartial;

- (TournamentProto_Builder*) mergeFrom:(TournamentProto*) other;
- (TournamentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TournamentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasEventId;
- (int32_t) eventId;
- (TournamentProto_Builder*) setEventId:(int32_t) value;
- (TournamentProto_Builder*) clearEventId;

- (BOOL) hasStartDate;
- (int64_t) startDate;
- (TournamentProto_Builder*) setStartDate:(int64_t) value;
- (TournamentProto_Builder*) clearStartDate;

- (BOOL) hasEndDate;
- (int64_t) endDate;
- (TournamentProto_Builder*) setEndDate:(int64_t) value;
- (TournamentProto_Builder*) clearEndDate;

- (BOOL) hasEventName;
- (NSString*) eventName;
- (TournamentProto_Builder*) setEventName:(NSString*) value;
- (TournamentProto_Builder*) clearEventName;

- (NSArray*) rewardsList;
- (TournamentRewardProto*) rewardsAtIndex:(int32_t) index;
- (TournamentProto_Builder*) replaceRewardsAtIndex:(int32_t) index with:(TournamentRewardProto*) value;
- (TournamentProto_Builder*) addRewards:(TournamentRewardProto*) value;
- (TournamentProto_Builder*) addAllRewards:(NSArray*) values;
- (TournamentProto_Builder*) clearRewardsList;

- (BOOL) hasLastShowDate;
- (int64_t) lastShowDate;
- (TournamentProto_Builder*) setLastShowDate:(int64_t) value;
- (TournamentProto_Builder*) clearLastShowDate;
@end

@interface TournamentRewardProto : PBGeneratedMessage {
@private
  BOOL hasLeaderboardEventId_:1;
  BOOL hasMinRank_:1;
  BOOL hasMaxRank_:1;
  BOOL hasGoldRewarded_:1;
  BOOL hasBackgroundImageName_:1;
  BOOL hasPrizeImageName_:1;
  BOOL hasTitleColor_:1;
  int32_t leaderboardEventId;
  int32_t minRank;
  int32_t maxRank;
  int32_t goldRewarded;
  NSString* backgroundImageName;
  NSString* prizeImageName;
  ColorProto* titleColor;
}
- (BOOL) hasLeaderboardEventId;
- (BOOL) hasMinRank;
- (BOOL) hasMaxRank;
- (BOOL) hasGoldRewarded;
- (BOOL) hasBackgroundImageName;
- (BOOL) hasPrizeImageName;
- (BOOL) hasTitleColor;
@property (readonly) int32_t leaderboardEventId;
@property (readonly) int32_t minRank;
@property (readonly) int32_t maxRank;
@property (readonly) int32_t goldRewarded;
@property (readonly, retain) NSString* backgroundImageName;
@property (readonly, retain) NSString* prizeImageName;
@property (readonly, retain) ColorProto* titleColor;

+ (TournamentRewardProto*) defaultInstance;
- (TournamentRewardProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TournamentRewardProto_Builder*) builder;
+ (TournamentRewardProto_Builder*) builder;
+ (TournamentRewardProto_Builder*) builderWithPrototype:(TournamentRewardProto*) prototype;

+ (TournamentRewardProto*) parseFromData:(NSData*) data;
+ (TournamentRewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentRewardProto*) parseFromInputStream:(NSInputStream*) input;
+ (TournamentRewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TournamentRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TournamentRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TournamentRewardProto_Builder : PBGeneratedMessage_Builder {
@private
  TournamentRewardProto* result;
}

- (TournamentRewardProto*) defaultInstance;

- (TournamentRewardProto_Builder*) clear;
- (TournamentRewardProto_Builder*) clone;

- (TournamentRewardProto*) build;
- (TournamentRewardProto*) buildPartial;

- (TournamentRewardProto_Builder*) mergeFrom:(TournamentRewardProto*) other;
- (TournamentRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TournamentRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasLeaderboardEventId;
- (int32_t) leaderboardEventId;
- (TournamentRewardProto_Builder*) setLeaderboardEventId:(int32_t) value;
- (TournamentRewardProto_Builder*) clearLeaderboardEventId;

- (BOOL) hasMinRank;
- (int32_t) minRank;
- (TournamentRewardProto_Builder*) setMinRank:(int32_t) value;
- (TournamentRewardProto_Builder*) clearMinRank;

- (BOOL) hasMaxRank;
- (int32_t) maxRank;
- (TournamentRewardProto_Builder*) setMaxRank:(int32_t) value;
- (TournamentRewardProto_Builder*) clearMaxRank;

- (BOOL) hasGoldRewarded;
- (int32_t) goldRewarded;
- (TournamentRewardProto_Builder*) setGoldRewarded:(int32_t) value;
- (TournamentRewardProto_Builder*) clearGoldRewarded;

- (BOOL) hasBackgroundImageName;
- (NSString*) backgroundImageName;
- (TournamentRewardProto_Builder*) setBackgroundImageName:(NSString*) value;
- (TournamentRewardProto_Builder*) clearBackgroundImageName;

- (BOOL) hasPrizeImageName;
- (NSString*) prizeImageName;
- (TournamentRewardProto_Builder*) setPrizeImageName:(NSString*) value;
- (TournamentRewardProto_Builder*) clearPrizeImageName;

- (BOOL) hasTitleColor;
- (ColorProto*) titleColor;
- (TournamentRewardProto_Builder*) setTitleColor:(ColorProto*) value;
- (TournamentRewardProto_Builder*) setTitleColorBuilder:(ColorProto_Builder*) builderForValue;
- (TournamentRewardProto_Builder*) mergeTitleColor:(ColorProto*) value;
- (TournamentRewardProto_Builder*) clearTitleColor;
@end

