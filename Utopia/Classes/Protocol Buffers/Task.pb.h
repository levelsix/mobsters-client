// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "MonsterStuff.pb.h"

@class FullTaskProto;
@class FullTaskProto_Builder;
@class FullUserMonsterProto;
@class FullUserMonsterProto_Builder;
@class MinimumUserMonsterSellProto;
@class MinimumUserMonsterSellProto_Builder;
@class MinimumUserTaskProto;
@class MinimumUserTaskProto_Builder;
@class MonsterProto;
@class MonsterProto_Builder;
@class TaskStageMonsterProto;
@class TaskStageMonsterProto_Builder;
@class TaskStageProto;
@class TaskStageProto_Builder;
@class UserCurrentMonsterTeamProto;
@class UserCurrentMonsterTeamProto_Builder;
@class UserEnhancementItemProto;
@class UserEnhancementItemProto_Builder;
@class UserEnhancementProto;
@class UserEnhancementProto_Builder;
@class UserMonsterCurrentExpProto;
@class UserMonsterCurrentExpProto_Builder;
@class UserMonsterCurrentHealthProto;
@class UserMonsterCurrentHealthProto_Builder;
@class UserMonsterHealingProto;
@class UserMonsterHealingProto_Builder;
typedef enum {
  TaskStageMonsterProto_MonsterTypeRegular = 1,
  TaskStageMonsterProto_MonsterTypeMiniBoss = 2,
  TaskStageMonsterProto_MonsterTypeBoss = 3,
} TaskStageMonsterProto_MonsterType;

BOOL TaskStageMonsterProto_MonsterTypeIsValidValue(TaskStageMonsterProto_MonsterType value);


@interface TaskRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface TaskStageProto : PBGeneratedMessage {
@private
  BOOL hasStageId_:1;
  int32_t stageId;
  NSMutableArray* mutableStageMonstersList;
}
- (BOOL) hasStageId;
@property (readonly) int32_t stageId;
- (NSArray*) stageMonstersList;
- (TaskStageMonsterProto*) stageMonstersAtIndex:(int32_t) index;

+ (TaskStageProto*) defaultInstance;
- (TaskStageProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TaskStageProto_Builder*) builder;
+ (TaskStageProto_Builder*) builder;
+ (TaskStageProto_Builder*) builderWithPrototype:(TaskStageProto*) prototype;

+ (TaskStageProto*) parseFromData:(NSData*) data;
+ (TaskStageProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TaskStageProto*) parseFromInputStream:(NSInputStream*) input;
+ (TaskStageProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TaskStageProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TaskStageProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TaskStageProto_Builder : PBGeneratedMessage_Builder {
@private
  TaskStageProto* result;
}

- (TaskStageProto*) defaultInstance;

- (TaskStageProto_Builder*) clear;
- (TaskStageProto_Builder*) clone;

- (TaskStageProto*) build;
- (TaskStageProto*) buildPartial;

- (TaskStageProto_Builder*) mergeFrom:(TaskStageProto*) other;
- (TaskStageProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TaskStageProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasStageId;
- (int32_t) stageId;
- (TaskStageProto_Builder*) setStageId:(int32_t) value;
- (TaskStageProto_Builder*) clearStageId;

- (NSArray*) stageMonstersList;
- (TaskStageMonsterProto*) stageMonstersAtIndex:(int32_t) index;
- (TaskStageProto_Builder*) replaceStageMonstersAtIndex:(int32_t) index with:(TaskStageMonsterProto*) value;
- (TaskStageProto_Builder*) addStageMonsters:(TaskStageMonsterProto*) value;
- (TaskStageProto_Builder*) addAllStageMonsters:(NSArray*) values;
- (TaskStageProto_Builder*) clearStageMonstersList;
@end

@interface FullTaskProto : PBGeneratedMessage {
@private
  BOOL hasTaskId_:1;
  BOOL hasCityId_:1;
  BOOL hasAssetNumWithinCity_:1;
  BOOL hasPrerequisiteTaskId_:1;
  BOOL hasPrerequisiteQuestId_:1;
  BOOL hasName_:1;
  BOOL hasDescription_:1;
  int32_t taskId;
  int32_t cityId;
  int32_t assetNumWithinCity;
  int32_t prerequisiteTaskId;
  int32_t prerequisiteQuestId;
  NSString* name;
  NSString* description;
}
- (BOOL) hasTaskId;
- (BOOL) hasName;
- (BOOL) hasDescription;
- (BOOL) hasCityId;
- (BOOL) hasAssetNumWithinCity;
- (BOOL) hasPrerequisiteTaskId;
- (BOOL) hasPrerequisiteQuestId;
@property (readonly) int32_t taskId;
@property (readonly, retain) NSString* name;
@property (readonly, retain) NSString* description;
@property (readonly) int32_t cityId;
@property (readonly) int32_t assetNumWithinCity;
@property (readonly) int32_t prerequisiteTaskId;
@property (readonly) int32_t prerequisiteQuestId;

+ (FullTaskProto*) defaultInstance;
- (FullTaskProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (FullTaskProto_Builder*) builder;
+ (FullTaskProto_Builder*) builder;
+ (FullTaskProto_Builder*) builderWithPrototype:(FullTaskProto*) prototype;

+ (FullTaskProto*) parseFromData:(NSData*) data;
+ (FullTaskProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (FullTaskProto*) parseFromInputStream:(NSInputStream*) input;
+ (FullTaskProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (FullTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (FullTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface FullTaskProto_Builder : PBGeneratedMessage_Builder {
@private
  FullTaskProto* result;
}

- (FullTaskProto*) defaultInstance;

- (FullTaskProto_Builder*) clear;
- (FullTaskProto_Builder*) clone;

- (FullTaskProto*) build;
- (FullTaskProto*) buildPartial;

- (FullTaskProto_Builder*) mergeFrom:(FullTaskProto*) other;
- (FullTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (FullTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasTaskId;
- (int32_t) taskId;
- (FullTaskProto_Builder*) setTaskId:(int32_t) value;
- (FullTaskProto_Builder*) clearTaskId;

- (BOOL) hasName;
- (NSString*) name;
- (FullTaskProto_Builder*) setName:(NSString*) value;
- (FullTaskProto_Builder*) clearName;

- (BOOL) hasDescription;
- (NSString*) description;
- (FullTaskProto_Builder*) setDescription:(NSString*) value;
- (FullTaskProto_Builder*) clearDescription;

- (BOOL) hasCityId;
- (int32_t) cityId;
- (FullTaskProto_Builder*) setCityId:(int32_t) value;
- (FullTaskProto_Builder*) clearCityId;

- (BOOL) hasAssetNumWithinCity;
- (int32_t) assetNumWithinCity;
- (FullTaskProto_Builder*) setAssetNumWithinCity:(int32_t) value;
- (FullTaskProto_Builder*) clearAssetNumWithinCity;

- (BOOL) hasPrerequisiteTaskId;
- (int32_t) prerequisiteTaskId;
- (FullTaskProto_Builder*) setPrerequisiteTaskId:(int32_t) value;
- (FullTaskProto_Builder*) clearPrerequisiteTaskId;

- (BOOL) hasPrerequisiteQuestId;
- (int32_t) prerequisiteQuestId;
- (FullTaskProto_Builder*) setPrerequisiteQuestId:(int32_t) value;
- (FullTaskProto_Builder*) clearPrerequisiteQuestId;
@end

@interface MinimumUserTaskProto : PBGeneratedMessage {
@private
  BOOL hasUserId_:1;
  BOOL hasTaskId_:1;
  BOOL hasNumTimesActed_:1;
  int32_t userId;
  int32_t taskId;
  int32_t numTimesActed;
}
- (BOOL) hasUserId;
- (BOOL) hasTaskId;
- (BOOL) hasNumTimesActed;
@property (readonly) int32_t userId;
@property (readonly) int32_t taskId;
@property (readonly) int32_t numTimesActed;

+ (MinimumUserTaskProto*) defaultInstance;
- (MinimumUserTaskProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (MinimumUserTaskProto_Builder*) builder;
+ (MinimumUserTaskProto_Builder*) builder;
+ (MinimumUserTaskProto_Builder*) builderWithPrototype:(MinimumUserTaskProto*) prototype;

+ (MinimumUserTaskProto*) parseFromData:(NSData*) data;
+ (MinimumUserTaskProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (MinimumUserTaskProto*) parseFromInputStream:(NSInputStream*) input;
+ (MinimumUserTaskProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (MinimumUserTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (MinimumUserTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface MinimumUserTaskProto_Builder : PBGeneratedMessage_Builder {
@private
  MinimumUserTaskProto* result;
}

- (MinimumUserTaskProto*) defaultInstance;

- (MinimumUserTaskProto_Builder*) clear;
- (MinimumUserTaskProto_Builder*) clone;

- (MinimumUserTaskProto*) build;
- (MinimumUserTaskProto*) buildPartial;

- (MinimumUserTaskProto_Builder*) mergeFrom:(MinimumUserTaskProto*) other;
- (MinimumUserTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (MinimumUserTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasUserId;
- (int32_t) userId;
- (MinimumUserTaskProto_Builder*) setUserId:(int32_t) value;
- (MinimumUserTaskProto_Builder*) clearUserId;

- (BOOL) hasTaskId;
- (int32_t) taskId;
- (MinimumUserTaskProto_Builder*) setTaskId:(int32_t) value;
- (MinimumUserTaskProto_Builder*) clearTaskId;

- (BOOL) hasNumTimesActed;
- (int32_t) numTimesActed;
- (MinimumUserTaskProto_Builder*) setNumTimesActed:(int32_t) value;
- (MinimumUserTaskProto_Builder*) clearNumTimesActed;
@end

@interface TaskStageMonsterProto : PBGeneratedMessage {
@private
  BOOL hasPuzzlePieceDropped_:1;
  BOOL hasMonsterId_:1;
  BOOL hasExpReward_:1;
  BOOL hasCashReward_:1;
  BOOL hasLevel_:1;
  BOOL hasMonsterType_:1;
  BOOL puzzlePieceDropped_:1;
  int32_t monsterId;
  int32_t expReward;
  int32_t cashReward;
  int32_t level;
  TaskStageMonsterProto_MonsterType monsterType;
}
- (BOOL) hasMonsterId;
- (BOOL) hasMonsterType;
- (BOOL) hasExpReward;
- (BOOL) hasCashReward;
- (BOOL) hasPuzzlePieceDropped;
- (BOOL) hasLevel;
@property (readonly) int32_t monsterId;
@property (readonly) TaskStageMonsterProto_MonsterType monsterType;
@property (readonly) int32_t expReward;
@property (readonly) int32_t cashReward;
- (BOOL) puzzlePieceDropped;
@property (readonly) int32_t level;

+ (TaskStageMonsterProto*) defaultInstance;
- (TaskStageMonsterProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (TaskStageMonsterProto_Builder*) builder;
+ (TaskStageMonsterProto_Builder*) builder;
+ (TaskStageMonsterProto_Builder*) builderWithPrototype:(TaskStageMonsterProto*) prototype;

+ (TaskStageMonsterProto*) parseFromData:(NSData*) data;
+ (TaskStageMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TaskStageMonsterProto*) parseFromInputStream:(NSInputStream*) input;
+ (TaskStageMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (TaskStageMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (TaskStageMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface TaskStageMonsterProto_Builder : PBGeneratedMessage_Builder {
@private
  TaskStageMonsterProto* result;
}

- (TaskStageMonsterProto*) defaultInstance;

- (TaskStageMonsterProto_Builder*) clear;
- (TaskStageMonsterProto_Builder*) clone;

- (TaskStageMonsterProto*) build;
- (TaskStageMonsterProto*) buildPartial;

- (TaskStageMonsterProto_Builder*) mergeFrom:(TaskStageMonsterProto*) other;
- (TaskStageMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (TaskStageMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasMonsterId;
- (int32_t) monsterId;
- (TaskStageMonsterProto_Builder*) setMonsterId:(int32_t) value;
- (TaskStageMonsterProto_Builder*) clearMonsterId;

- (BOOL) hasMonsterType;
- (TaskStageMonsterProto_MonsterType) monsterType;
- (TaskStageMonsterProto_Builder*) setMonsterType:(TaskStageMonsterProto_MonsterType) value;
- (TaskStageMonsterProto_Builder*) clearMonsterType;

- (BOOL) hasExpReward;
- (int32_t) expReward;
- (TaskStageMonsterProto_Builder*) setExpReward:(int32_t) value;
- (TaskStageMonsterProto_Builder*) clearExpReward;

- (BOOL) hasCashReward;
- (int32_t) cashReward;
- (TaskStageMonsterProto_Builder*) setCashReward:(int32_t) value;
- (TaskStageMonsterProto_Builder*) clearCashReward;

- (BOOL) hasPuzzlePieceDropped;
- (BOOL) puzzlePieceDropped;
- (TaskStageMonsterProto_Builder*) setPuzzlePieceDropped:(BOOL) value;
- (TaskStageMonsterProto_Builder*) clearPuzzlePieceDropped;

- (BOOL) hasLevel;
- (int32_t) level;
- (TaskStageMonsterProto_Builder*) setLevel:(int32_t) value;
- (TaskStageMonsterProto_Builder*) clearLevel;
@end

