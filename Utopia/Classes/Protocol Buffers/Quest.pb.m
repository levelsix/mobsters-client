// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Quest.pb.h"
// @@protoc_insertion_point(imports)

@implementation QuestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [QuestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ChatRoot registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [SharedEnumConfigRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FullQuestProto ()
@property int32_t questId;
@property (strong) NSString* name;
@property (strong) NSString* description;
@property (strong) NSString* doneResponse;
@property (strong) DialogueProto* acceptDialogue;
@property int32_t cashReward;
@property int32_t oilReward;
@property int32_t gemReward;
@property int32_t expReward;
@property int32_t monsterIdReward;
@property BOOL isCompleteMonster;
@property (strong) PBAppendableArray * mutableQuestsRequiredForThisList;
@property (strong) NSString* questGiverName;
@property (strong) NSString* questGiverImagePrefix;
@property int32_t priority;
@property (strong) NSString* carrotId;
@property (strong) CoordinateProto* questGiverImgOffset;
@property Element monsterElement;
@property (strong) NSMutableArray * mutableJobsList;
@end

@implementation FullQuestProto

- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value_ {
  hasQuestId_ = !!value_;
}
@synthesize questId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (BOOL) hasDoneResponse {
  return !!hasDoneResponse_;
}
- (void) setHasDoneResponse:(BOOL) value_ {
  hasDoneResponse_ = !!value_;
}
@synthesize doneResponse;
- (BOOL) hasAcceptDialogue {
  return !!hasAcceptDialogue_;
}
- (void) setHasAcceptDialogue:(BOOL) value_ {
  hasAcceptDialogue_ = !!value_;
}
@synthesize acceptDialogue;
- (BOOL) hasCashReward {
  return !!hasCashReward_;
}
- (void) setHasCashReward:(BOOL) value_ {
  hasCashReward_ = !!value_;
}
@synthesize cashReward;
- (BOOL) hasOilReward {
  return !!hasOilReward_;
}
- (void) setHasOilReward:(BOOL) value_ {
  hasOilReward_ = !!value_;
}
@synthesize oilReward;
- (BOOL) hasGemReward {
  return !!hasGemReward_;
}
- (void) setHasGemReward:(BOOL) value_ {
  hasGemReward_ = !!value_;
}
@synthesize gemReward;
- (BOOL) hasExpReward {
  return !!hasExpReward_;
}
- (void) setHasExpReward:(BOOL) value_ {
  hasExpReward_ = !!value_;
}
@synthesize expReward;
- (BOOL) hasMonsterIdReward {
  return !!hasMonsterIdReward_;
}
- (void) setHasMonsterIdReward:(BOOL) value_ {
  hasMonsterIdReward_ = !!value_;
}
@synthesize monsterIdReward;
- (BOOL) hasIsCompleteMonster {
  return !!hasIsCompleteMonster_;
}
- (void) setHasIsCompleteMonster:(BOOL) value_ {
  hasIsCompleteMonster_ = !!value_;
}
- (BOOL) isCompleteMonster {
  return !!isCompleteMonster_;
}
- (void) setIsCompleteMonster:(BOOL) value_ {
  isCompleteMonster_ = !!value_;
}
@synthesize mutableQuestsRequiredForThisList;
@dynamic questsRequiredForThisList;
- (BOOL) hasQuestGiverName {
  return !!hasQuestGiverName_;
}
- (void) setHasQuestGiverName:(BOOL) value_ {
  hasQuestGiverName_ = !!value_;
}
@synthesize questGiverName;
- (BOOL) hasQuestGiverImagePrefix {
  return !!hasQuestGiverImagePrefix_;
}
- (void) setHasQuestGiverImagePrefix:(BOOL) value_ {
  hasQuestGiverImagePrefix_ = !!value_;
}
@synthesize questGiverImagePrefix;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) value_ {
  hasPriority_ = !!value_;
}
@synthesize priority;
- (BOOL) hasCarrotId {
  return !!hasCarrotId_;
}
- (void) setHasCarrotId:(BOOL) value_ {
  hasCarrotId_ = !!value_;
}
@synthesize carrotId;
- (BOOL) hasQuestGiverImgOffset {
  return !!hasQuestGiverImgOffset_;
}
- (void) setHasQuestGiverImgOffset:(BOOL) value_ {
  hasQuestGiverImgOffset_ = !!value_;
}
@synthesize questGiverImgOffset;
- (BOOL) hasMonsterElement {
  return !!hasMonsterElement_;
}
- (void) setHasMonsterElement:(BOOL) value_ {
  hasMonsterElement_ = !!value_;
}
@synthesize monsterElement;
@synthesize mutableJobsList;
@dynamic jobsList;
- (id) init {
  if ((self = [super init])) {
    self.questId = 0;
    self.name = @"";
    self.description = @"";
    self.doneResponse = @"";
    self.acceptDialogue = [DialogueProto defaultInstance];
    self.cashReward = 0;
    self.oilReward = 0;
    self.gemReward = 0;
    self.expReward = 0;
    self.monsterIdReward = 0;
    self.isCompleteMonster = NO;
    self.questGiverName = @"";
    self.questGiverImagePrefix = @"";
    self.priority = 0;
    self.carrotId = @"";
    self.questGiverImgOffset = [CoordinateProto defaultInstance];
    self.monsterElement = ElementNoElement;
  }
  return self;
}
static FullQuestProto* defaultFullQuestProtoInstance = nil;
+ (void) initialize {
  if (self == [FullQuestProto class]) {
    defaultFullQuestProtoInstance = [[FullQuestProto alloc] init];
  }
}
+ (FullQuestProto*) defaultInstance {
  return defaultFullQuestProtoInstance;
}
- (FullQuestProto*) defaultInstance {
  return defaultFullQuestProtoInstance;
}
- (PBArray *)questsRequiredForThisList {
  return mutableQuestsRequiredForThisList;
}
- (int32_t)questsRequiredForThisAtIndex:(NSUInteger)index {
  return [mutableQuestsRequiredForThisList int32AtIndex:index];
}
- (NSArray *)jobsList {
  return mutableJobsList;
}
- (QuestJobProto*)jobsAtIndex:(NSUInteger)index {
  return [mutableJobsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestId) {
    [output writeInt32:1 value:self.questId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDescription) {
    [output writeString:3 value:self.description];
  }
  if (self.hasDoneResponse) {
    [output writeString:4 value:self.doneResponse];
  }
  if (self.hasAcceptDialogue) {
    [output writeMessage:5 value:self.acceptDialogue];
  }
  if (self.hasCashReward) {
    [output writeInt32:6 value:self.cashReward];
  }
  if (self.hasOilReward) {
    [output writeInt32:7 value:self.oilReward];
  }
  if (self.hasGemReward) {
    [output writeInt32:8 value:self.gemReward];
  }
  if (self.hasExpReward) {
    [output writeInt32:9 value:self.expReward];
  }
  if (self.hasMonsterIdReward) {
    [output writeInt32:10 value:self.monsterIdReward];
  }
  if (self.hasIsCompleteMonster) {
    [output writeBool:11 value:self.isCompleteMonster];
  }
  const NSUInteger questsRequiredForThisListCount = self.questsRequiredForThisList.count;
  if (questsRequiredForThisListCount > 0) {
    const int32_t *values = (const int32_t *)self.questsRequiredForThisList.data;
    for (NSUInteger i = 0; i < questsRequiredForThisListCount; ++i) {
      [output writeInt32:12 value:values[i]];
    }
  }
  if (self.hasQuestGiverName) {
    [output writeString:13 value:self.questGiverName];
  }
  if (self.hasQuestGiverImagePrefix) {
    [output writeString:14 value:self.questGiverImagePrefix];
  }
  if (self.hasPriority) {
    [output writeInt32:15 value:self.priority];
  }
  if (self.hasCarrotId) {
    [output writeString:16 value:self.carrotId];
  }
  if (self.hasQuestGiverImgOffset) {
    [output writeMessage:17 value:self.questGiverImgOffset];
  }
  if (self.hasMonsterElement) {
    [output writeEnum:19 value:self.monsterElement];
  }
  [self.jobsList enumerateObjectsUsingBlock:^(QuestJobProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:21 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuestId) {
    size_ += computeInt32Size(1, self.questId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(3, self.description);
  }
  if (self.hasDoneResponse) {
    size_ += computeStringSize(4, self.doneResponse);
  }
  if (self.hasAcceptDialogue) {
    size_ += computeMessageSize(5, self.acceptDialogue);
  }
  if (self.hasCashReward) {
    size_ += computeInt32Size(6, self.cashReward);
  }
  if (self.hasOilReward) {
    size_ += computeInt32Size(7, self.oilReward);
  }
  if (self.hasGemReward) {
    size_ += computeInt32Size(8, self.gemReward);
  }
  if (self.hasExpReward) {
    size_ += computeInt32Size(9, self.expReward);
  }
  if (self.hasMonsterIdReward) {
    size_ += computeInt32Size(10, self.monsterIdReward);
  }
  if (self.hasIsCompleteMonster) {
    size_ += computeBoolSize(11, self.isCompleteMonster);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.questsRequiredForThisList.count;
    const int32_t *values = (const int32_t *)self.questsRequiredForThisList.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasQuestGiverName) {
    size_ += computeStringSize(13, self.questGiverName);
  }
  if (self.hasQuestGiverImagePrefix) {
    size_ += computeStringSize(14, self.questGiverImagePrefix);
  }
  if (self.hasPriority) {
    size_ += computeInt32Size(15, self.priority);
  }
  if (self.hasCarrotId) {
    size_ += computeStringSize(16, self.carrotId);
  }
  if (self.hasQuestGiverImgOffset) {
    size_ += computeMessageSize(17, self.questGiverImgOffset);
  }
  if (self.hasMonsterElement) {
    size_ += computeEnumSize(19, self.monsterElement);
  }
  [self.jobsList enumerateObjectsUsingBlock:^(QuestJobProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(21, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FullQuestProto*) parseFromData:(NSData*) data {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromData:data] build];
}
+ (FullQuestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromInputStream:input] build];
}
+ (FullQuestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto_Builder*) builder {
  return [[FullQuestProto_Builder alloc] init];
}
+ (FullQuestProto_Builder*) builderWithPrototype:(FullQuestProto*) prototype {
  return [[FullQuestProto builder] mergeFrom:prototype];
}
- (FullQuestProto_Builder*) builder {
  return [FullQuestProto builder];
}
- (FullQuestProto_Builder*) toBuilder {
  return [FullQuestProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questId", [NSNumber numberWithInteger:self.questId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasDoneResponse) {
    [output appendFormat:@"%@%@: %@\n", indent, @"doneResponse", self.doneResponse];
  }
  if (self.hasAcceptDialogue) {
    [output appendFormat:@"%@%@ {\n", indent, @"acceptDialogue"];
    [self.acceptDialogue writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasCashReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashReward", [NSNumber numberWithInteger:self.cashReward]];
  }
  if (self.hasOilReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oilReward", [NSNumber numberWithInteger:self.oilReward]];
  }
  if (self.hasGemReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gemReward", [NSNumber numberWithInteger:self.gemReward]];
  }
  if (self.hasExpReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expReward", [NSNumber numberWithInteger:self.expReward]];
  }
  if (self.hasMonsterIdReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterIdReward", [NSNumber numberWithInteger:self.monsterIdReward]];
  }
  if (self.hasIsCompleteMonster) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isCompleteMonster", [NSNumber numberWithBool:self.isCompleteMonster]];
  }
  [self.questsRequiredForThisList enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questsRequiredForThis", obj];
  }];
  if (self.hasQuestGiverName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questGiverName", self.questGiverName];
  }
  if (self.hasQuestGiverImagePrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questGiverImagePrefix", self.questGiverImagePrefix];
  }
  if (self.hasPriority) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priority", [NSNumber numberWithInteger:self.priority]];
  }
  if (self.hasCarrotId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"carrotId", self.carrotId];
  }
  if (self.hasQuestGiverImgOffset) {
    [output appendFormat:@"%@%@ {\n", indent, @"questGiverImgOffset"];
    [self.questGiverImgOffset writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMonsterElement) {
    [output appendFormat:@"%@%@: %d\n", indent, @"monsterElement", self.monsterElement];
  }
  [self.jobsList enumerateObjectsUsingBlock:^(QuestJobProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"jobs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FullQuestProto class]]) {
    return NO;
  }
  FullQuestProto *otherMessage = other;
  return
      self.hasQuestId == otherMessage.hasQuestId &&
      (!self.hasQuestId || self.questId == otherMessage.questId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasDoneResponse == otherMessage.hasDoneResponse &&
      (!self.hasDoneResponse || [self.doneResponse isEqual:otherMessage.doneResponse]) &&
      self.hasAcceptDialogue == otherMessage.hasAcceptDialogue &&
      (!self.hasAcceptDialogue || [self.acceptDialogue isEqual:otherMessage.acceptDialogue]) &&
      self.hasCashReward == otherMessage.hasCashReward &&
      (!self.hasCashReward || self.cashReward == otherMessage.cashReward) &&
      self.hasOilReward == otherMessage.hasOilReward &&
      (!self.hasOilReward || self.oilReward == otherMessage.oilReward) &&
      self.hasGemReward == otherMessage.hasGemReward &&
      (!self.hasGemReward || self.gemReward == otherMessage.gemReward) &&
      self.hasExpReward == otherMessage.hasExpReward &&
      (!self.hasExpReward || self.expReward == otherMessage.expReward) &&
      self.hasMonsterIdReward == otherMessage.hasMonsterIdReward &&
      (!self.hasMonsterIdReward || self.monsterIdReward == otherMessage.monsterIdReward) &&
      self.hasIsCompleteMonster == otherMessage.hasIsCompleteMonster &&
      (!self.hasIsCompleteMonster || self.isCompleteMonster == otherMessage.isCompleteMonster) &&
      [self.questsRequiredForThisList isEqualToArray:otherMessage.questsRequiredForThisList] &&
      self.hasQuestGiverName == otherMessage.hasQuestGiverName &&
      (!self.hasQuestGiverName || [self.questGiverName isEqual:otherMessage.questGiverName]) &&
      self.hasQuestGiverImagePrefix == otherMessage.hasQuestGiverImagePrefix &&
      (!self.hasQuestGiverImagePrefix || [self.questGiverImagePrefix isEqual:otherMessage.questGiverImagePrefix]) &&
      self.hasPriority == otherMessage.hasPriority &&
      (!self.hasPriority || self.priority == otherMessage.priority) &&
      self.hasCarrotId == otherMessage.hasCarrotId &&
      (!self.hasCarrotId || [self.carrotId isEqual:otherMessage.carrotId]) &&
      self.hasQuestGiverImgOffset == otherMessage.hasQuestGiverImgOffset &&
      (!self.hasQuestGiverImgOffset || [self.questGiverImgOffset isEqual:otherMessage.questGiverImgOffset]) &&
      self.hasMonsterElement == otherMessage.hasMonsterElement &&
      (!self.hasMonsterElement || self.monsterElement == otherMessage.monsterElement) &&
      [self.jobsList isEqualToArray:otherMessage.jobsList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.questId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasDoneResponse) {
    hashCode = hashCode * 31 + [self.doneResponse hash];
  }
  if (self.hasAcceptDialogue) {
    hashCode = hashCode * 31 + [self.acceptDialogue hash];
  }
  if (self.hasCashReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashReward] hash];
  }
  if (self.hasOilReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oilReward] hash];
  }
  if (self.hasGemReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gemReward] hash];
  }
  if (self.hasExpReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expReward] hash];
  }
  if (self.hasMonsterIdReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterIdReward] hash];
  }
  if (self.hasIsCompleteMonster) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isCompleteMonster] hash];
  }
  [self.questsRequiredForThisList enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasQuestGiverName) {
    hashCode = hashCode * 31 + [self.questGiverName hash];
  }
  if (self.hasQuestGiverImagePrefix) {
    hashCode = hashCode * 31 + [self.questGiverImagePrefix hash];
  }
  if (self.hasPriority) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.priority] hash];
  }
  if (self.hasCarrotId) {
    hashCode = hashCode * 31 + [self.carrotId hash];
  }
  if (self.hasQuestGiverImgOffset) {
    hashCode = hashCode * 31 + [self.questGiverImgOffset hash];
  }
  if (self.hasMonsterElement) {
    hashCode = hashCode * 31 + self.monsterElement;
  }
  [self.jobsList enumerateObjectsUsingBlock:^(QuestJobProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FullQuestProto_Builder()
@property (strong) FullQuestProto* result;
@end

@implementation FullQuestProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FullQuestProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullQuestProto_Builder*) clear {
  self.result = [[FullQuestProto alloc] init];
  return self;
}
- (FullQuestProto_Builder*) clone {
  return [FullQuestProto builderWithPrototype:result];
}
- (FullQuestProto*) defaultInstance {
  return [FullQuestProto defaultInstance];
}
- (FullQuestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullQuestProto*) buildPartial {
  FullQuestProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FullQuestProto_Builder*) mergeFrom:(FullQuestProto*) other {
  if (other == [FullQuestProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasDoneResponse) {
    [self setDoneResponse:other.doneResponse];
  }
  if (other.hasAcceptDialogue) {
    [self mergeAcceptDialogue:other.acceptDialogue];
  }
  if (other.hasCashReward) {
    [self setCashReward:other.cashReward];
  }
  if (other.hasOilReward) {
    [self setOilReward:other.oilReward];
  }
  if (other.hasGemReward) {
    [self setGemReward:other.gemReward];
  }
  if (other.hasExpReward) {
    [self setExpReward:other.expReward];
  }
  if (other.hasMonsterIdReward) {
    [self setMonsterIdReward:other.monsterIdReward];
  }
  if (other.hasIsCompleteMonster) {
    [self setIsCompleteMonster:other.isCompleteMonster];
  }
  if (other.mutableQuestsRequiredForThisList.count > 0) {
    if (result.mutableQuestsRequiredForThisList == nil) {
      result.mutableQuestsRequiredForThisList = [other.mutableQuestsRequiredForThisList copy];
    } else {
      [result.mutableQuestsRequiredForThisList appendArray:other.mutableQuestsRequiredForThisList];
    }
  }
  if (other.hasQuestGiverName) {
    [self setQuestGiverName:other.questGiverName];
  }
  if (other.hasQuestGiverImagePrefix) {
    [self setQuestGiverImagePrefix:other.questGiverImagePrefix];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  if (other.hasCarrotId) {
    [self setCarrotId:other.carrotId];
  }
  if (other.hasQuestGiverImgOffset) {
    [self mergeQuestGiverImgOffset:other.questGiverImgOffset];
  }
  if (other.hasMonsterElement) {
    [self setMonsterElement:other.monsterElement];
  }
  if (other.mutableJobsList.count > 0) {
    if (result.mutableJobsList == nil) {
      result.mutableJobsList = [[NSMutableArray alloc] initWithArray:other.mutableJobsList];
    } else {
      [result.mutableJobsList addObjectsFromArray:other.mutableJobsList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDescription:[input readString]];
        break;
      }
      case 34: {
        [self setDoneResponse:[input readString]];
        break;
      }
      case 42: {
        DialogueProto_Builder* subBuilder = [DialogueProto builder];
        if (self.hasAcceptDialogue) {
          [subBuilder mergeFrom:self.acceptDialogue];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptDialogue:[subBuilder buildPartial]];
        break;
      }
      case 48: {
        [self setCashReward:[input readInt32]];
        break;
      }
      case 56: {
        [self setOilReward:[input readInt32]];
        break;
      }
      case 64: {
        [self setGemReward:[input readInt32]];
        break;
      }
      case 72: {
        [self setExpReward:[input readInt32]];
        break;
      }
      case 80: {
        [self setMonsterIdReward:[input readInt32]];
        break;
      }
      case 88: {
        [self setIsCompleteMonster:[input readBool]];
        break;
      }
      case 96: {
        [self addQuestsRequiredForThis:[input readInt32]];
        break;
      }
      case 106: {
        [self setQuestGiverName:[input readString]];
        break;
      }
      case 114: {
        [self setQuestGiverImagePrefix:[input readString]];
        break;
      }
      case 120: {
        [self setPriority:[input readInt32]];
        break;
      }
      case 130: {
        [self setCarrotId:[input readString]];
        break;
      }
      case 138: {
        CoordinateProto_Builder* subBuilder = [CoordinateProto builder];
        if (self.hasQuestGiverImgOffset) {
          [subBuilder mergeFrom:self.questGiverImgOffset];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setQuestGiverImgOffset:[subBuilder buildPartial]];
        break;
      }
      case 152: {
        Element value = (Element)[input readEnum];
        if (ElementIsValidValue(value)) {
          [self setMonsterElement:value];
        } else {
          [unknownFields mergeVarintField:19 value:value];
        }
        break;
      }
      case 170: {
        QuestJobProto_Builder* subBuilder = [QuestJobProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addJobs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (FullQuestProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FullQuestProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FullQuestProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (FullQuestProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (FullQuestProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasDoneResponse {
  return result.hasDoneResponse;
}
- (NSString*) doneResponse {
  return result.doneResponse;
}
- (FullQuestProto_Builder*) setDoneResponse:(NSString*) value {
  result.hasDoneResponse = YES;
  result.doneResponse = value;
  return self;
}
- (FullQuestProto_Builder*) clearDoneResponse {
  result.hasDoneResponse = NO;
  result.doneResponse = @"";
  return self;
}
- (BOOL) hasAcceptDialogue {
  return result.hasAcceptDialogue;
}
- (DialogueProto*) acceptDialogue {
  return result.acceptDialogue;
}
- (FullQuestProto_Builder*) setAcceptDialogue:(DialogueProto*) value {
  result.hasAcceptDialogue = YES;
  result.acceptDialogue = value;
  return self;
}
- (FullQuestProto_Builder*) setAcceptDialogue_Builder:(DialogueProto_Builder*) builderForValue {
  return [self setAcceptDialogue:[builderForValue build]];
}
- (FullQuestProto_Builder*) mergeAcceptDialogue:(DialogueProto*) value {
  if (result.hasAcceptDialogue &&
      result.acceptDialogue != [DialogueProto defaultInstance]) {
    result.acceptDialogue =
      [[[DialogueProto builderWithPrototype:result.acceptDialogue] mergeFrom:value] buildPartial];
  } else {
    result.acceptDialogue = value;
  }
  result.hasAcceptDialogue = YES;
  return self;
}
- (FullQuestProto_Builder*) clearAcceptDialogue {
  result.hasAcceptDialogue = NO;
  result.acceptDialogue = [DialogueProto defaultInstance];
  return self;
}
- (BOOL) hasCashReward {
  return result.hasCashReward;
}
- (int32_t) cashReward {
  return result.cashReward;
}
- (FullQuestProto_Builder*) setCashReward:(int32_t) value {
  result.hasCashReward = YES;
  result.cashReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearCashReward {
  result.hasCashReward = NO;
  result.cashReward = 0;
  return self;
}
- (BOOL) hasOilReward {
  return result.hasOilReward;
}
- (int32_t) oilReward {
  return result.oilReward;
}
- (FullQuestProto_Builder*) setOilReward:(int32_t) value {
  result.hasOilReward = YES;
  result.oilReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearOilReward {
  result.hasOilReward = NO;
  result.oilReward = 0;
  return self;
}
- (BOOL) hasGemReward {
  return result.hasGemReward;
}
- (int32_t) gemReward {
  return result.gemReward;
}
- (FullQuestProto_Builder*) setGemReward:(int32_t) value {
  result.hasGemReward = YES;
  result.gemReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearGemReward {
  result.hasGemReward = NO;
  result.gemReward = 0;
  return self;
}
- (BOOL) hasExpReward {
  return result.hasExpReward;
}
- (int32_t) expReward {
  return result.expReward;
}
- (FullQuestProto_Builder*) setExpReward:(int32_t) value {
  result.hasExpReward = YES;
  result.expReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearExpReward {
  result.hasExpReward = NO;
  result.expReward = 0;
  return self;
}
- (BOOL) hasMonsterIdReward {
  return result.hasMonsterIdReward;
}
- (int32_t) monsterIdReward {
  return result.monsterIdReward;
}
- (FullQuestProto_Builder*) setMonsterIdReward:(int32_t) value {
  result.hasMonsterIdReward = YES;
  result.monsterIdReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearMonsterIdReward {
  result.hasMonsterIdReward = NO;
  result.monsterIdReward = 0;
  return self;
}
- (BOOL) hasIsCompleteMonster {
  return result.hasIsCompleteMonster;
}
- (BOOL) isCompleteMonster {
  return result.isCompleteMonster;
}
- (FullQuestProto_Builder*) setIsCompleteMonster:(BOOL) value {
  result.hasIsCompleteMonster = YES;
  result.isCompleteMonster = value;
  return self;
}
- (FullQuestProto_Builder*) clearIsCompleteMonster {
  result.hasIsCompleteMonster = NO;
  result.isCompleteMonster = NO;
  return self;
}
- (PBAppendableArray *)questsRequiredForThisList {
  return result.mutableQuestsRequiredForThisList;
}
- (int32_t)questsRequiredForThisAtIndex:(NSUInteger)index {
  return [result questsRequiredForThisAtIndex:index];
}
- (FullQuestProto_Builder *)addQuestsRequiredForThis:(int32_t)value {
  if (result.mutableQuestsRequiredForThisList == nil) {
    result.mutableQuestsRequiredForThisList = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.mutableQuestsRequiredForThisList addInt32:value];
  return self;
}
- (FullQuestProto_Builder *)addAllQuestsRequiredForThis:(NSArray *)array {
  if (result.mutableQuestsRequiredForThisList == nil) {
    result.mutableQuestsRequiredForThisList = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.mutableQuestsRequiredForThisList appendArray:[PBArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
  return self;
}
- (FullQuestProto_Builder *)setQuestsRequiredForThisValues:(const int32_t *)values count:(NSUInteger)count {
  result.mutableQuestsRequiredForThisList = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (FullQuestProto_Builder *)clearQuestsRequiredForThis {
  result.mutableQuestsRequiredForThisList = nil;
  return self;
}
- (BOOL) hasQuestGiverName {
  return result.hasQuestGiverName;
}
- (NSString*) questGiverName {
  return result.questGiverName;
}
- (FullQuestProto_Builder*) setQuestGiverName:(NSString*) value {
  result.hasQuestGiverName = YES;
  result.questGiverName = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverName {
  result.hasQuestGiverName = NO;
  result.questGiverName = @"";
  return self;
}
- (BOOL) hasQuestGiverImagePrefix {
  return result.hasQuestGiverImagePrefix;
}
- (NSString*) questGiverImagePrefix {
  return result.questGiverImagePrefix;
}
- (FullQuestProto_Builder*) setQuestGiverImagePrefix:(NSString*) value {
  result.hasQuestGiverImagePrefix = YES;
  result.questGiverImagePrefix = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverImagePrefix {
  result.hasQuestGiverImagePrefix = NO;
  result.questGiverImagePrefix = @"";
  return self;
}
- (BOOL) hasPriority {
  return result.hasPriority;
}
- (int32_t) priority {
  return result.priority;
}
- (FullQuestProto_Builder*) setPriority:(int32_t) value {
  result.hasPriority = YES;
  result.priority = value;
  return self;
}
- (FullQuestProto_Builder*) clearPriority {
  result.hasPriority = NO;
  result.priority = 0;
  return self;
}
- (BOOL) hasCarrotId {
  return result.hasCarrotId;
}
- (NSString*) carrotId {
  return result.carrotId;
}
- (FullQuestProto_Builder*) setCarrotId:(NSString*) value {
  result.hasCarrotId = YES;
  result.carrotId = value;
  return self;
}
- (FullQuestProto_Builder*) clearCarrotId {
  result.hasCarrotId = NO;
  result.carrotId = @"";
  return self;
}
- (BOOL) hasQuestGiverImgOffset {
  return result.hasQuestGiverImgOffset;
}
- (CoordinateProto*) questGiverImgOffset {
  return result.questGiverImgOffset;
}
- (FullQuestProto_Builder*) setQuestGiverImgOffset:(CoordinateProto*) value {
  result.hasQuestGiverImgOffset = YES;
  result.questGiverImgOffset = value;
  return self;
}
- (FullQuestProto_Builder*) setQuestGiverImgOffset_Builder:(CoordinateProto_Builder*) builderForValue {
  return [self setQuestGiverImgOffset:[builderForValue build]];
}
- (FullQuestProto_Builder*) mergeQuestGiverImgOffset:(CoordinateProto*) value {
  if (result.hasQuestGiverImgOffset &&
      result.questGiverImgOffset != [CoordinateProto defaultInstance]) {
    result.questGiverImgOffset =
      [[[CoordinateProto builderWithPrototype:result.questGiverImgOffset] mergeFrom:value] buildPartial];
  } else {
    result.questGiverImgOffset = value;
  }
  result.hasQuestGiverImgOffset = YES;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverImgOffset {
  result.hasQuestGiverImgOffset = NO;
  result.questGiverImgOffset = [CoordinateProto defaultInstance];
  return self;
}
- (BOOL) hasMonsterElement {
  return result.hasMonsterElement;
}
- (Element) monsterElement {
  return result.monsterElement;
}
- (FullQuestProto_Builder*) setMonsterElement:(Element) value {
  result.hasMonsterElement = YES;
  result.monsterElement = value;
  return self;
}
- (FullQuestProto_Builder*) clearMonsterElement {
  result.hasMonsterElement = NO;
  result.monsterElement = ElementNoElement;
  return self;
}
- (NSMutableArray *)jobsList {
  return result.mutableJobsList;
}
- (QuestJobProto*)jobsAtIndex:(NSUInteger)index {
  return [result jobsAtIndex:index];
}
- (FullQuestProto_Builder *)addJobs:(QuestJobProto*)value {
  if (result.mutableJobsList == nil) {
    result.mutableJobsList = [[NSMutableArray alloc]init];
  }
  [result.mutableJobsList addObject:value];
  return self;
}
- (FullQuestProto_Builder *)addAllJobs:(NSArray *)array {
  if (result.mutableJobsList == nil) {
    result.mutableJobsList = [NSMutableArray array];
  }
  [result.mutableJobsList addObjectsFromArray:array];
  return self;
}
- (FullQuestProto_Builder *)clearJobs {
  result.mutableJobsList = nil;
  return self;
}
@end

@interface QuestJobProto ()
@property int32_t questJobId;
@property int32_t questId;
@property QuestJobProto_QuestJobType questJobType;
@property (strong) NSString* description;
@property int32_t staticDataId;
@property int32_t quantity;
@property int32_t priority;
@property int32_t cityId;
@property int32_t cityAssetNum;
@end

@implementation QuestJobProto

- (BOOL) hasQuestJobId {
  return !!hasQuestJobId_;
}
- (void) setHasQuestJobId:(BOOL) value_ {
  hasQuestJobId_ = !!value_;
}
@synthesize questJobId;
- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value_ {
  hasQuestId_ = !!value_;
}
@synthesize questId;
- (BOOL) hasQuestJobType {
  return !!hasQuestJobType_;
}
- (void) setHasQuestJobType:(BOOL) value_ {
  hasQuestJobType_ = !!value_;
}
@synthesize questJobType;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (BOOL) hasStaticDataId {
  return !!hasStaticDataId_;
}
- (void) setHasStaticDataId:(BOOL) value_ {
  hasStaticDataId_ = !!value_;
}
@synthesize staticDataId;
- (BOOL) hasQuantity {
  return !!hasQuantity_;
}
- (void) setHasQuantity:(BOOL) value_ {
  hasQuantity_ = !!value_;
}
@synthesize quantity;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) value_ {
  hasPriority_ = !!value_;
}
@synthesize priority;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value_ {
  hasCityId_ = !!value_;
}
@synthesize cityId;
- (BOOL) hasCityAssetNum {
  return !!hasCityAssetNum_;
}
- (void) setHasCityAssetNum:(BOOL) value_ {
  hasCityAssetNum_ = !!value_;
}
@synthesize cityAssetNum;
- (id) init {
  if ((self = [super init])) {
    self.questJobId = 0;
    self.questId = 0;
    self.questJobType = QuestJobProto_QuestJobTypeKillSpecificMonster;
    self.description = @"";
    self.staticDataId = 0;
    self.quantity = 0;
    self.priority = 0;
    self.cityId = 0;
    self.cityAssetNum = 0;
  }
  return self;
}
static QuestJobProto* defaultQuestJobProtoInstance = nil;
+ (void) initialize {
  if (self == [QuestJobProto class]) {
    defaultQuestJobProtoInstance = [[QuestJobProto alloc] init];
  }
}
+ (QuestJobProto*) defaultInstance {
  return defaultQuestJobProtoInstance;
}
- (QuestJobProto*) defaultInstance {
  return defaultQuestJobProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestJobId) {
    [output writeInt32:1 value:self.questJobId];
  }
  if (self.hasQuestId) {
    [output writeInt32:2 value:self.questId];
  }
  if (self.hasQuestJobType) {
    [output writeEnum:3 value:self.questJobType];
  }
  if (self.hasDescription) {
    [output writeString:4 value:self.description];
  }
  if (self.hasStaticDataId) {
    [output writeInt32:5 value:self.staticDataId];
  }
  if (self.hasQuantity) {
    [output writeInt32:6 value:self.quantity];
  }
  if (self.hasPriority) {
    [output writeInt32:7 value:self.priority];
  }
  if (self.hasCityId) {
    [output writeInt32:8 value:self.cityId];
  }
  if (self.hasCityAssetNum) {
    [output writeInt32:9 value:self.cityAssetNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuestJobId) {
    size_ += computeInt32Size(1, self.questJobId);
  }
  if (self.hasQuestId) {
    size_ += computeInt32Size(2, self.questId);
  }
  if (self.hasQuestJobType) {
    size_ += computeEnumSize(3, self.questJobType);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(4, self.description);
  }
  if (self.hasStaticDataId) {
    size_ += computeInt32Size(5, self.staticDataId);
  }
  if (self.hasQuantity) {
    size_ += computeInt32Size(6, self.quantity);
  }
  if (self.hasPriority) {
    size_ += computeInt32Size(7, self.priority);
  }
  if (self.hasCityId) {
    size_ += computeInt32Size(8, self.cityId);
  }
  if (self.hasCityAssetNum) {
    size_ += computeInt32Size(9, self.cityAssetNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QuestJobProto*) parseFromData:(NSData*) data {
  return (QuestJobProto*)[[[QuestJobProto builder] mergeFromData:data] build];
}
+ (QuestJobProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestJobProto*)[[[QuestJobProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (QuestJobProto*) parseFromInputStream:(NSInputStream*) input {
  return (QuestJobProto*)[[[QuestJobProto builder] mergeFromInputStream:input] build];
}
+ (QuestJobProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestJobProto*)[[[QuestJobProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QuestJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (QuestJobProto*)[[[QuestJobProto builder] mergeFromCodedInputStream:input] build];
}
+ (QuestJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (QuestJobProto*)[[[QuestJobProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (QuestJobProto_Builder*) builder {
  return [[QuestJobProto_Builder alloc] init];
}
+ (QuestJobProto_Builder*) builderWithPrototype:(QuestJobProto*) prototype {
  return [[QuestJobProto builder] mergeFrom:prototype];
}
- (QuestJobProto_Builder*) builder {
  return [QuestJobProto builder];
}
- (QuestJobProto_Builder*) toBuilder {
  return [QuestJobProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuestJobId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questJobId", [NSNumber numberWithInteger:self.questJobId]];
  }
  if (self.hasQuestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questId", [NSNumber numberWithInteger:self.questId]];
  }
  if (self.hasQuestJobType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"questJobType", self.questJobType];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasStaticDataId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"staticDataId", [NSNumber numberWithInteger:self.staticDataId]];
  }
  if (self.hasQuantity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quantity", [NSNumber numberWithInteger:self.quantity]];
  }
  if (self.hasPriority) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priority", [NSNumber numberWithInteger:self.priority]];
  }
  if (self.hasCityId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cityId", [NSNumber numberWithInteger:self.cityId]];
  }
  if (self.hasCityAssetNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cityAssetNum", [NSNumber numberWithInteger:self.cityAssetNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[QuestJobProto class]]) {
    return NO;
  }
  QuestJobProto *otherMessage = other;
  return
      self.hasQuestJobId == otherMessage.hasQuestJobId &&
      (!self.hasQuestJobId || self.questJobId == otherMessage.questJobId) &&
      self.hasQuestId == otherMessage.hasQuestId &&
      (!self.hasQuestId || self.questId == otherMessage.questId) &&
      self.hasQuestJobType == otherMessage.hasQuestJobType &&
      (!self.hasQuestJobType || self.questJobType == otherMessage.questJobType) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasStaticDataId == otherMessage.hasStaticDataId &&
      (!self.hasStaticDataId || self.staticDataId == otherMessage.staticDataId) &&
      self.hasQuantity == otherMessage.hasQuantity &&
      (!self.hasQuantity || self.quantity == otherMessage.quantity) &&
      self.hasPriority == otherMessage.hasPriority &&
      (!self.hasPriority || self.priority == otherMessage.priority) &&
      self.hasCityId == otherMessage.hasCityId &&
      (!self.hasCityId || self.cityId == otherMessage.cityId) &&
      self.hasCityAssetNum == otherMessage.hasCityAssetNum &&
      (!self.hasCityAssetNum || self.cityAssetNum == otherMessage.cityAssetNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuestJobId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.questJobId] hash];
  }
  if (self.hasQuestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.questId] hash];
  }
  if (self.hasQuestJobType) {
    hashCode = hashCode * 31 + self.questJobType;
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasStaticDataId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.staticDataId] hash];
  }
  if (self.hasQuantity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.quantity] hash];
  }
  if (self.hasPriority) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.priority] hash];
  }
  if (self.hasCityId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cityId] hash];
  }
  if (self.hasCityAssetNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cityAssetNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL QuestJobProto_QuestJobTypeIsValidValue(QuestJobProto_QuestJobType value) {
  switch (value) {
    case QuestJobProto_QuestJobTypeKillSpecificMonster:
    case QuestJobProto_QuestJobTypeKillMonsterInCity:
    case QuestJobProto_QuestJobTypeDonateMonster:
    case QuestJobProto_QuestJobTypeCompleteTask:
    case QuestJobProto_QuestJobTypeUpgradeStruct:
    case QuestJobProto_QuestJobTypeCollectSpecialItem:
      return YES;
    default:
      return NO;
  }
}
@interface QuestJobProto_Builder()
@property (strong) QuestJobProto* result;
@end

@implementation QuestJobProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[QuestJobProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (QuestJobProto_Builder*) clear {
  self.result = [[QuestJobProto alloc] init];
  return self;
}
- (QuestJobProto_Builder*) clone {
  return [QuestJobProto builderWithPrototype:result];
}
- (QuestJobProto*) defaultInstance {
  return [QuestJobProto defaultInstance];
}
- (QuestJobProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (QuestJobProto*) buildPartial {
  QuestJobProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (QuestJobProto_Builder*) mergeFrom:(QuestJobProto*) other {
  if (other == [QuestJobProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestJobId) {
    [self setQuestJobId:other.questJobId];
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasQuestJobType) {
    [self setQuestJobType:other.questJobType];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasStaticDataId) {
    [self setStaticDataId:other.staticDataId];
  }
  if (other.hasQuantity) {
    [self setQuantity:other.quantity];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasCityAssetNum) {
    [self setCityAssetNum:other.cityAssetNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (QuestJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (QuestJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setQuestJobId:[input readInt32]];
        break;
      }
      case 16: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 24: {
        QuestJobProto_QuestJobType value = (QuestJobProto_QuestJobType)[input readEnum];
        if (QuestJobProto_QuestJobTypeIsValidValue(value)) {
          [self setQuestJobType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setDescription:[input readString]];
        break;
      }
      case 40: {
        [self setStaticDataId:[input readInt32]];
        break;
      }
      case 48: {
        [self setQuantity:[input readInt32]];
        break;
      }
      case 56: {
        [self setPriority:[input readInt32]];
        break;
      }
      case 64: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 72: {
        [self setCityAssetNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestJobId {
  return result.hasQuestJobId;
}
- (int32_t) questJobId {
  return result.questJobId;
}
- (QuestJobProto_Builder*) setQuestJobId:(int32_t) value {
  result.hasQuestJobId = YES;
  result.questJobId = value;
  return self;
}
- (QuestJobProto_Builder*) clearQuestJobId {
  result.hasQuestJobId = NO;
  result.questJobId = 0;
  return self;
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (QuestJobProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (QuestJobProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasQuestJobType {
  return result.hasQuestJobType;
}
- (QuestJobProto_QuestJobType) questJobType {
  return result.questJobType;
}
- (QuestJobProto_Builder*) setQuestJobType:(QuestJobProto_QuestJobType) value {
  result.hasQuestJobType = YES;
  result.questJobType = value;
  return self;
}
- (QuestJobProto_Builder*) clearQuestJobType {
  result.hasQuestJobType = NO;
  result.questJobType = QuestJobProto_QuestJobTypeKillSpecificMonster;
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (QuestJobProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (QuestJobProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasStaticDataId {
  return result.hasStaticDataId;
}
- (int32_t) staticDataId {
  return result.staticDataId;
}
- (QuestJobProto_Builder*) setStaticDataId:(int32_t) value {
  result.hasStaticDataId = YES;
  result.staticDataId = value;
  return self;
}
- (QuestJobProto_Builder*) clearStaticDataId {
  result.hasStaticDataId = NO;
  result.staticDataId = 0;
  return self;
}
- (BOOL) hasQuantity {
  return result.hasQuantity;
}
- (int32_t) quantity {
  return result.quantity;
}
- (QuestJobProto_Builder*) setQuantity:(int32_t) value {
  result.hasQuantity = YES;
  result.quantity = value;
  return self;
}
- (QuestJobProto_Builder*) clearQuantity {
  result.hasQuantity = NO;
  result.quantity = 0;
  return self;
}
- (BOOL) hasPriority {
  return result.hasPriority;
}
- (int32_t) priority {
  return result.priority;
}
- (QuestJobProto_Builder*) setPriority:(int32_t) value {
  result.hasPriority = YES;
  result.priority = value;
  return self;
}
- (QuestJobProto_Builder*) clearPriority {
  result.hasPriority = NO;
  result.priority = 0;
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (QuestJobProto_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (QuestJobProto_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasCityAssetNum {
  return result.hasCityAssetNum;
}
- (int32_t) cityAssetNum {
  return result.cityAssetNum;
}
- (QuestJobProto_Builder*) setCityAssetNum:(int32_t) value {
  result.hasCityAssetNum = YES;
  result.cityAssetNum = value;
  return self;
}
- (QuestJobProto_Builder*) clearCityAssetNum {
  result.hasCityAssetNum = NO;
  result.cityAssetNum = 0;
  return self;
}
@end

@interface DialogueProto ()
@property (strong) NSMutableArray * mutableSpeechSegmentList;
@end

@implementation DialogueProto

@synthesize mutableSpeechSegmentList;
@dynamic speechSegmentList;
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static DialogueProto* defaultDialogueProtoInstance = nil;
+ (void) initialize {
  if (self == [DialogueProto class]) {
    defaultDialogueProtoInstance = [[DialogueProto alloc] init];
  }
}
+ (DialogueProto*) defaultInstance {
  return defaultDialogueProtoInstance;
}
- (DialogueProto*) defaultInstance {
  return defaultDialogueProtoInstance;
}
- (NSArray *)speechSegmentList {
  return mutableSpeechSegmentList;
}
- (DialogueProto_SpeechSegmentProto*)speechSegmentAtIndex:(NSUInteger)index {
  return [mutableSpeechSegmentList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.speechSegmentList enumerateObjectsUsingBlock:^(DialogueProto_SpeechSegmentProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.speechSegmentList enumerateObjectsUsingBlock:^(DialogueProto_SpeechSegmentProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DialogueProto*) parseFromData:(NSData*) data {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromData:data] build];
}
+ (DialogueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto*) parseFromInputStream:(NSInputStream*) input {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromInputStream:input] build];
}
+ (DialogueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromCodedInputStream:input] build];
}
+ (DialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_Builder*) builder {
  return [[DialogueProto_Builder alloc] init];
}
+ (DialogueProto_Builder*) builderWithPrototype:(DialogueProto*) prototype {
  return [[DialogueProto builder] mergeFrom:prototype];
}
- (DialogueProto_Builder*) builder {
  return [DialogueProto builder];
}
- (DialogueProto_Builder*) toBuilder {
  return [DialogueProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.speechSegmentList enumerateObjectsUsingBlock:^(DialogueProto_SpeechSegmentProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"speechSegment"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DialogueProto class]]) {
    return NO;
  }
  DialogueProto *otherMessage = other;
  return
      [self.speechSegmentList isEqualToArray:otherMessage.speechSegmentList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.speechSegmentList enumerateObjectsUsingBlock:^(DialogueProto_SpeechSegmentProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DialogueProto_SpeechSegmentProto ()
@property (strong) NSString* speaker;
@property (strong) NSString* speakerImage;
@property (strong) NSString* speakerText;
@property BOOL isLeftSide;
@end

@implementation DialogueProto_SpeechSegmentProto

- (BOOL) hasSpeaker {
  return !!hasSpeaker_;
}
- (void) setHasSpeaker:(BOOL) value_ {
  hasSpeaker_ = !!value_;
}
@synthesize speaker;
- (BOOL) hasSpeakerImage {
  return !!hasSpeakerImage_;
}
- (void) setHasSpeakerImage:(BOOL) value_ {
  hasSpeakerImage_ = !!value_;
}
@synthesize speakerImage;
- (BOOL) hasSpeakerText {
  return !!hasSpeakerText_;
}
- (void) setHasSpeakerText:(BOOL) value_ {
  hasSpeakerText_ = !!value_;
}
@synthesize speakerText;
- (BOOL) hasIsLeftSide {
  return !!hasIsLeftSide_;
}
- (void) setHasIsLeftSide:(BOOL) value_ {
  hasIsLeftSide_ = !!value_;
}
- (BOOL) isLeftSide {
  return !!isLeftSide_;
}
- (void) setIsLeftSide:(BOOL) value_ {
  isLeftSide_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.speaker = @"";
    self.speakerImage = @"";
    self.speakerText = @"";
    self.isLeftSide = NO;
  }
  return self;
}
static DialogueProto_SpeechSegmentProto* defaultDialogueProto_SpeechSegmentProtoInstance = nil;
+ (void) initialize {
  if (self == [DialogueProto_SpeechSegmentProto class]) {
    defaultDialogueProto_SpeechSegmentProtoInstance = [[DialogueProto_SpeechSegmentProto alloc] init];
  }
}
+ (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return defaultDialogueProto_SpeechSegmentProtoInstance;
}
- (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return defaultDialogueProto_SpeechSegmentProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpeaker) {
    [output writeString:1 value:self.speaker];
  }
  if (self.hasSpeakerImage) {
    [output writeString:2 value:self.speakerImage];
  }
  if (self.hasSpeakerText) {
    [output writeString:3 value:self.speakerText];
  }
  if (self.hasIsLeftSide) {
    [output writeBool:4 value:self.isLeftSide];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSpeaker) {
    size_ += computeStringSize(1, self.speaker);
  }
  if (self.hasSpeakerImage) {
    size_ += computeStringSize(2, self.speakerImage);
  }
  if (self.hasSpeakerText) {
    size_ += computeStringSize(3, self.speakerText);
  }
  if (self.hasIsLeftSide) {
    size_ += computeBoolSize(4, self.isLeftSide);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DialogueProto_SpeechSegmentProto*) parseFromData:(NSData*) data {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromData:data] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromInputStream:(NSInputStream*) input {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromInputStream:input] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromCodedInputStream:input] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto_Builder*) builder {
  return [[DialogueProto_SpeechSegmentProto_Builder alloc] init];
}
+ (DialogueProto_SpeechSegmentProto_Builder*) builderWithPrototype:(DialogueProto_SpeechSegmentProto*) prototype {
  return [[DialogueProto_SpeechSegmentProto builder] mergeFrom:prototype];
}
- (DialogueProto_SpeechSegmentProto_Builder*) builder {
  return [DialogueProto_SpeechSegmentProto builder];
}
- (DialogueProto_SpeechSegmentProto_Builder*) toBuilder {
  return [DialogueProto_SpeechSegmentProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSpeaker) {
    [output appendFormat:@"%@%@: %@\n", indent, @"speaker", self.speaker];
  }
  if (self.hasSpeakerImage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"speakerImage", self.speakerImage];
  }
  if (self.hasSpeakerText) {
    [output appendFormat:@"%@%@: %@\n", indent, @"speakerText", self.speakerText];
  }
  if (self.hasIsLeftSide) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isLeftSide", [NSNumber numberWithBool:self.isLeftSide]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DialogueProto_SpeechSegmentProto class]]) {
    return NO;
  }
  DialogueProto_SpeechSegmentProto *otherMessage = other;
  return
      self.hasSpeaker == otherMessage.hasSpeaker &&
      (!self.hasSpeaker || [self.speaker isEqual:otherMessage.speaker]) &&
      self.hasSpeakerImage == otherMessage.hasSpeakerImage &&
      (!self.hasSpeakerImage || [self.speakerImage isEqual:otherMessage.speakerImage]) &&
      self.hasSpeakerText == otherMessage.hasSpeakerText &&
      (!self.hasSpeakerText || [self.speakerText isEqual:otherMessage.speakerText]) &&
      self.hasIsLeftSide == otherMessage.hasIsLeftSide &&
      (!self.hasIsLeftSide || self.isLeftSide == otherMessage.isLeftSide) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSpeaker) {
    hashCode = hashCode * 31 + [self.speaker hash];
  }
  if (self.hasSpeakerImage) {
    hashCode = hashCode * 31 + [self.speakerImage hash];
  }
  if (self.hasSpeakerText) {
    hashCode = hashCode * 31 + [self.speakerText hash];
  }
  if (self.hasIsLeftSide) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isLeftSide] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DialogueProto_SpeechSegmentProto_Builder()
@property (strong) DialogueProto_SpeechSegmentProto* result;
@end

@implementation DialogueProto_SpeechSegmentProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[DialogueProto_SpeechSegmentProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clear {
  self.result = [[DialogueProto_SpeechSegmentProto alloc] init];
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clone {
  return [DialogueProto_SpeechSegmentProto builderWithPrototype:result];
}
- (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return [DialogueProto_SpeechSegmentProto defaultInstance];
}
- (DialogueProto_SpeechSegmentProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DialogueProto_SpeechSegmentProto*) buildPartial {
  DialogueProto_SpeechSegmentProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFrom:(DialogueProto_SpeechSegmentProto*) other {
  if (other == [DialogueProto_SpeechSegmentProto defaultInstance]) {
    return self;
  }
  if (other.hasSpeaker) {
    [self setSpeaker:other.speaker];
  }
  if (other.hasSpeakerImage) {
    [self setSpeakerImage:other.speakerImage];
  }
  if (other.hasSpeakerText) {
    [self setSpeakerText:other.speakerText];
  }
  if (other.hasIsLeftSide) {
    [self setIsLeftSide:other.isLeftSide];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSpeaker:[input readString]];
        break;
      }
      case 18: {
        [self setSpeakerImage:[input readString]];
        break;
      }
      case 26: {
        [self setSpeakerText:[input readString]];
        break;
      }
      case 32: {
        [self setIsLeftSide:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSpeaker {
  return result.hasSpeaker;
}
- (NSString*) speaker {
  return result.speaker;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeaker:(NSString*) value {
  result.hasSpeaker = YES;
  result.speaker = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeaker {
  result.hasSpeaker = NO;
  result.speaker = @"";
  return self;
}
- (BOOL) hasSpeakerImage {
  return result.hasSpeakerImage;
}
- (NSString*) speakerImage {
  return result.speakerImage;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeakerImage:(NSString*) value {
  result.hasSpeakerImage = YES;
  result.speakerImage = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeakerImage {
  result.hasSpeakerImage = NO;
  result.speakerImage = @"";
  return self;
}
- (BOOL) hasSpeakerText {
  return result.hasSpeakerText;
}
- (NSString*) speakerText {
  return result.speakerText;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeakerText:(NSString*) value {
  result.hasSpeakerText = YES;
  result.speakerText = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeakerText {
  result.hasSpeakerText = NO;
  result.speakerText = @"";
  return self;
}
- (BOOL) hasIsLeftSide {
  return result.hasIsLeftSide;
}
- (BOOL) isLeftSide {
  return result.isLeftSide;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setIsLeftSide:(BOOL) value {
  result.hasIsLeftSide = YES;
  result.isLeftSide = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearIsLeftSide {
  result.hasIsLeftSide = NO;
  result.isLeftSide = NO;
  return self;
}
@end

@interface DialogueProto_Builder()
@property (strong) DialogueProto* result;
@end

@implementation DialogueProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[DialogueProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DialogueProto_Builder*) clear {
  self.result = [[DialogueProto alloc] init];
  return self;
}
- (DialogueProto_Builder*) clone {
  return [DialogueProto builderWithPrototype:result];
}
- (DialogueProto*) defaultInstance {
  return [DialogueProto defaultInstance];
}
- (DialogueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DialogueProto*) buildPartial {
  DialogueProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (DialogueProto_Builder*) mergeFrom:(DialogueProto*) other {
  if (other == [DialogueProto defaultInstance]) {
    return self;
  }
  if (other.mutableSpeechSegmentList.count > 0) {
    if (result.mutableSpeechSegmentList == nil) {
      result.mutableSpeechSegmentList = [[NSMutableArray alloc] initWithArray:other.mutableSpeechSegmentList];
    } else {
      [result.mutableSpeechSegmentList addObjectsFromArray:other.mutableSpeechSegmentList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        DialogueProto_SpeechSegmentProto_Builder* subBuilder = [DialogueProto_SpeechSegmentProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSpeechSegment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)speechSegmentList {
  return result.mutableSpeechSegmentList;
}
- (DialogueProto_SpeechSegmentProto*)speechSegmentAtIndex:(NSUInteger)index {
  return [result speechSegmentAtIndex:index];
}
- (DialogueProto_Builder *)addSpeechSegment:(DialogueProto_SpeechSegmentProto*)value {
  if (result.mutableSpeechSegmentList == nil) {
    result.mutableSpeechSegmentList = [[NSMutableArray alloc]init];
  }
  [result.mutableSpeechSegmentList addObject:value];
  return self;
}
- (DialogueProto_Builder *)addAllSpeechSegment:(NSArray *)array {
  if (result.mutableSpeechSegmentList == nil) {
    result.mutableSpeechSegmentList = [NSMutableArray array];
  }
  [result.mutableSpeechSegmentList addObjectsFromArray:array];
  return self;
}
- (DialogueProto_Builder *)clearSpeechSegment {
  result.mutableSpeechSegmentList = nil;
  return self;
}
@end

@interface FullUserQuestProto ()
@property (strong) NSString* userUuid;
@property int32_t questId;
@property BOOL isRedeemed;
@property BOOL isComplete;
@property (strong) NSMutableArray * mutableUserQuestJobsList;
@end

@implementation FullUserQuestProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value_ {
  hasQuestId_ = !!value_;
}
@synthesize questId;
- (BOOL) hasIsRedeemed {
  return !!hasIsRedeemed_;
}
- (void) setHasIsRedeemed:(BOOL) value_ {
  hasIsRedeemed_ = !!value_;
}
- (BOOL) isRedeemed {
  return !!isRedeemed_;
}
- (void) setIsRedeemed:(BOOL) value_ {
  isRedeemed_ = !!value_;
}
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value_ {
  hasIsComplete_ = !!value_;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value_ {
  isComplete_ = !!value_;
}
@synthesize mutableUserQuestJobsList;
@dynamic userQuestJobsList;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.questId = 0;
    self.isRedeemed = NO;
    self.isComplete = NO;
  }
  return self;
}
static FullUserQuestProto* defaultFullUserQuestProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserQuestProto class]) {
    defaultFullUserQuestProtoInstance = [[FullUserQuestProto alloc] init];
  }
}
+ (FullUserQuestProto*) defaultInstance {
  return defaultFullUserQuestProtoInstance;
}
- (FullUserQuestProto*) defaultInstance {
  return defaultFullUserQuestProtoInstance;
}
- (NSArray *)userQuestJobsList {
  return mutableUserQuestJobsList;
}
- (UserQuestJobProto*)userQuestJobsAtIndex:(NSUInteger)index {
  return [mutableUserQuestJobsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasQuestId) {
    [output writeInt32:2 value:self.questId];
  }
  if (self.hasIsRedeemed) {
    [output writeBool:3 value:self.isRedeemed];
  }
  if (self.hasIsComplete) {
    [output writeBool:4 value:self.isComplete];
  }
  [self.userQuestJobsList enumerateObjectsUsingBlock:^(UserQuestJobProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasQuestId) {
    size_ += computeInt32Size(2, self.questId);
  }
  if (self.hasIsRedeemed) {
    size_ += computeBoolSize(3, self.isRedeemed);
  }
  if (self.hasIsComplete) {
    size_ += computeBoolSize(4, self.isComplete);
  }
  [self.userQuestJobsList enumerateObjectsUsingBlock:^(UserQuestJobProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FullUserQuestProto*) parseFromData:(NSData*) data {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromData:data] build];
}
+ (FullUserQuestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromInputStream:input] build];
}
+ (FullUserQuestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestProto_Builder*) builder {
  return [[FullUserQuestProto_Builder alloc] init];
}
+ (FullUserQuestProto_Builder*) builderWithPrototype:(FullUserQuestProto*) prototype {
  return [[FullUserQuestProto builder] mergeFrom:prototype];
}
- (FullUserQuestProto_Builder*) builder {
  return [FullUserQuestProto builder];
}
- (FullUserQuestProto_Builder*) toBuilder {
  return [FullUserQuestProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasQuestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questId", [NSNumber numberWithInteger:self.questId]];
  }
  if (self.hasIsRedeemed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRedeemed", [NSNumber numberWithBool:self.isRedeemed]];
  }
  if (self.hasIsComplete) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isComplete", [NSNumber numberWithBool:self.isComplete]];
  }
  [self.userQuestJobsList enumerateObjectsUsingBlock:^(UserQuestJobProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userQuestJobs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FullUserQuestProto class]]) {
    return NO;
  }
  FullUserQuestProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasQuestId == otherMessage.hasQuestId &&
      (!self.hasQuestId || self.questId == otherMessage.questId) &&
      self.hasIsRedeemed == otherMessage.hasIsRedeemed &&
      (!self.hasIsRedeemed || self.isRedeemed == otherMessage.isRedeemed) &&
      self.hasIsComplete == otherMessage.hasIsComplete &&
      (!self.hasIsComplete || self.isComplete == otherMessage.isComplete) &&
      [self.userQuestJobsList isEqualToArray:otherMessage.userQuestJobsList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasQuestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.questId] hash];
  }
  if (self.hasIsRedeemed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isRedeemed] hash];
  }
  if (self.hasIsComplete) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isComplete] hash];
  }
  [self.userQuestJobsList enumerateObjectsUsingBlock:^(UserQuestJobProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FullUserQuestProto_Builder()
@property (strong) FullUserQuestProto* result;
@end

@implementation FullUserQuestProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FullUserQuestProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserQuestProto_Builder*) clear {
  self.result = [[FullUserQuestProto alloc] init];
  return self;
}
- (FullUserQuestProto_Builder*) clone {
  return [FullUserQuestProto builderWithPrototype:result];
}
- (FullUserQuestProto*) defaultInstance {
  return [FullUserQuestProto defaultInstance];
}
- (FullUserQuestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserQuestProto*) buildPartial {
  FullUserQuestProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FullUserQuestProto_Builder*) mergeFrom:(FullUserQuestProto*) other {
  if (other == [FullUserQuestProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasIsRedeemed) {
    [self setIsRedeemed:other.isRedeemed];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.mutableUserQuestJobsList.count > 0) {
    if (result.mutableUserQuestJobsList == nil) {
      result.mutableUserQuestJobsList = [[NSMutableArray alloc] initWithArray:other.mutableUserQuestJobsList];
    } else {
      [result.mutableUserQuestJobsList addObjectsFromArray:other.mutableUserQuestJobsList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 16: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 24: {
        [self setIsRedeemed:[input readBool]];
        break;
      }
      case 32: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 42: {
        UserQuestJobProto_Builder* subBuilder = [UserQuestJobProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserQuestJobs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (FullUserQuestProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (FullUserQuestProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasIsRedeemed {
  return result.hasIsRedeemed;
}
- (BOOL) isRedeemed {
  return result.isRedeemed;
}
- (FullUserQuestProto_Builder*) setIsRedeemed:(BOOL) value {
  result.hasIsRedeemed = YES;
  result.isRedeemed = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearIsRedeemed {
  result.hasIsRedeemed = NO;
  result.isRedeemed = NO;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (FullUserQuestProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (NSMutableArray *)userQuestJobsList {
  return result.mutableUserQuestJobsList;
}
- (UserQuestJobProto*)userQuestJobsAtIndex:(NSUInteger)index {
  return [result userQuestJobsAtIndex:index];
}
- (FullUserQuestProto_Builder *)addUserQuestJobs:(UserQuestJobProto*)value {
  if (result.mutableUserQuestJobsList == nil) {
    result.mutableUserQuestJobsList = [[NSMutableArray alloc]init];
  }
  [result.mutableUserQuestJobsList addObject:value];
  return self;
}
- (FullUserQuestProto_Builder *)addAllUserQuestJobs:(NSArray *)array {
  if (result.mutableUserQuestJobsList == nil) {
    result.mutableUserQuestJobsList = [NSMutableArray array];
  }
  [result.mutableUserQuestJobsList addObjectsFromArray:array];
  return self;
}
- (FullUserQuestProto_Builder *)clearUserQuestJobs {
  result.mutableUserQuestJobsList = nil;
  return self;
}
@end

@interface UserQuestJobProto ()
@property int32_t questId;
@property int32_t questJobId;
@property BOOL isComplete;
@property int32_t progress;
@end

@implementation UserQuestJobProto

- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value_ {
  hasQuestId_ = !!value_;
}
@synthesize questId;
- (BOOL) hasQuestJobId {
  return !!hasQuestJobId_;
}
- (void) setHasQuestJobId:(BOOL) value_ {
  hasQuestJobId_ = !!value_;
}
@synthesize questJobId;
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value_ {
  hasIsComplete_ = !!value_;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value_ {
  isComplete_ = !!value_;
}
- (BOOL) hasProgress {
  return !!hasProgress_;
}
- (void) setHasProgress:(BOOL) value_ {
  hasProgress_ = !!value_;
}
@synthesize progress;
- (id) init {
  if ((self = [super init])) {
    self.questId = 0;
    self.questJobId = 0;
    self.isComplete = NO;
    self.progress = 0;
  }
  return self;
}
static UserQuestJobProto* defaultUserQuestJobProtoInstance = nil;
+ (void) initialize {
  if (self == [UserQuestJobProto class]) {
    defaultUserQuestJobProtoInstance = [[UserQuestJobProto alloc] init];
  }
}
+ (UserQuestJobProto*) defaultInstance {
  return defaultUserQuestJobProtoInstance;
}
- (UserQuestJobProto*) defaultInstance {
  return defaultUserQuestJobProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestId) {
    [output writeInt32:1 value:self.questId];
  }
  if (self.hasQuestJobId) {
    [output writeInt32:2 value:self.questJobId];
  }
  if (self.hasIsComplete) {
    [output writeBool:3 value:self.isComplete];
  }
  if (self.hasProgress) {
    [output writeInt32:4 value:self.progress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasQuestId) {
    size_ += computeInt32Size(1, self.questId);
  }
  if (self.hasQuestJobId) {
    size_ += computeInt32Size(2, self.questJobId);
  }
  if (self.hasIsComplete) {
    size_ += computeBoolSize(3, self.isComplete);
  }
  if (self.hasProgress) {
    size_ += computeInt32Size(4, self.progress);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserQuestJobProto*) parseFromData:(NSData*) data {
  return (UserQuestJobProto*)[[[UserQuestJobProto builder] mergeFromData:data] build];
}
+ (UserQuestJobProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserQuestJobProto*)[[[UserQuestJobProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserQuestJobProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserQuestJobProto*)[[[UserQuestJobProto builder] mergeFromInputStream:input] build];
}
+ (UserQuestJobProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserQuestJobProto*)[[[UserQuestJobProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserQuestJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserQuestJobProto*)[[[UserQuestJobProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserQuestJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserQuestJobProto*)[[[UserQuestJobProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserQuestJobProto_Builder*) builder {
  return [[UserQuestJobProto_Builder alloc] init];
}
+ (UserQuestJobProto_Builder*) builderWithPrototype:(UserQuestJobProto*) prototype {
  return [[UserQuestJobProto builder] mergeFrom:prototype];
}
- (UserQuestJobProto_Builder*) builder {
  return [UserQuestJobProto builder];
}
- (UserQuestJobProto_Builder*) toBuilder {
  return [UserQuestJobProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQuestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questId", [NSNumber numberWithInteger:self.questId]];
  }
  if (self.hasQuestJobId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"questJobId", [NSNumber numberWithInteger:self.questJobId]];
  }
  if (self.hasIsComplete) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isComplete", [NSNumber numberWithBool:self.isComplete]];
  }
  if (self.hasProgress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"progress", [NSNumber numberWithInteger:self.progress]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserQuestJobProto class]]) {
    return NO;
  }
  UserQuestJobProto *otherMessage = other;
  return
      self.hasQuestId == otherMessage.hasQuestId &&
      (!self.hasQuestId || self.questId == otherMessage.questId) &&
      self.hasQuestJobId == otherMessage.hasQuestJobId &&
      (!self.hasQuestJobId || self.questJobId == otherMessage.questJobId) &&
      self.hasIsComplete == otherMessage.hasIsComplete &&
      (!self.hasIsComplete || self.isComplete == otherMessage.isComplete) &&
      self.hasProgress == otherMessage.hasProgress &&
      (!self.hasProgress || self.progress == otherMessage.progress) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasQuestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.questId] hash];
  }
  if (self.hasQuestJobId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.questJobId] hash];
  }
  if (self.hasIsComplete) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isComplete] hash];
  }
  if (self.hasProgress) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.progress] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserQuestJobProto_Builder()
@property (strong) UserQuestJobProto* result;
@end

@implementation UserQuestJobProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserQuestJobProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserQuestJobProto_Builder*) clear {
  self.result = [[UserQuestJobProto alloc] init];
  return self;
}
- (UserQuestJobProto_Builder*) clone {
  return [UserQuestJobProto builderWithPrototype:result];
}
- (UserQuestJobProto*) defaultInstance {
  return [UserQuestJobProto defaultInstance];
}
- (UserQuestJobProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserQuestJobProto*) buildPartial {
  UserQuestJobProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserQuestJobProto_Builder*) mergeFrom:(UserQuestJobProto*) other {
  if (other == [UserQuestJobProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasQuestJobId) {
    [self setQuestJobId:other.questJobId];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.hasProgress) {
    [self setProgress:other.progress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserQuestJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserQuestJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 16: {
        [self setQuestJobId:[input readInt32]];
        break;
      }
      case 24: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 32: {
        [self setProgress:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (UserQuestJobProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (UserQuestJobProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasQuestJobId {
  return result.hasQuestJobId;
}
- (int32_t) questJobId {
  return result.questJobId;
}
- (UserQuestJobProto_Builder*) setQuestJobId:(int32_t) value {
  result.hasQuestJobId = YES;
  result.questJobId = value;
  return self;
}
- (UserQuestJobProto_Builder*) clearQuestJobId {
  result.hasQuestJobId = NO;
  result.questJobId = 0;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (UserQuestJobProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (UserQuestJobProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (BOOL) hasProgress {
  return result.hasProgress;
}
- (int32_t) progress {
  return result.progress;
}
- (UserQuestJobProto_Builder*) setProgress:(int32_t) value {
  result.hasProgress = YES;
  result.progress = value;
  return self;
}
- (UserQuestJobProto_Builder*) clearProgress {
  result.hasProgress = NO;
  result.progress = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
