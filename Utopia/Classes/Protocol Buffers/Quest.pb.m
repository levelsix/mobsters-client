// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Quest.pb.h"

@implementation QuestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [QuestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [JobRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL SpecialQuestActionIsValidValue(SpecialQuestAction value) {
  switch (value) {
    case SpecialQuestActionRequestJoinClan:
    case SpecialQuestActionSuccessfullyForgeAnItem:
      return YES;
    default:
      return NO;
  }
}
@interface FullQuestProto ()
@property int32_t questId;
@property int32_t cityId;
@property (retain) NSString* name;
@property (retain) NSString* description;
@property (retain) NSString* doneResponse;
@property int32_t assetNumWithinCity;
@property int32_t coinsGained;
@property int32_t diamondsGained;
@property int32_t expGained;
@property int32_t monsterId;
@property (retain) NSMutableArray* mutableQuestsRequiredForThisList;
@property (retain) NSMutableArray* mutableTaskReqsList;
@property (retain) NSMutableArray* mutableUpgradeStructJobsReqsList;
@property (retain) NSMutableArray* mutableBuildStructJobsReqsList;
@property (retain) NSMutableArray* mutableDefeatTypeReqsList;
@property (retain) NSMutableArray* mutablePossessEquipJobReqsList;
@property int32_t coinRetrievalReq;
@property SpecialQuestAction specialQuestActionReq;
@property int32_t numComponentsForGood;
@property (retain) DialogueProto* acceptDialogue;
@property (retain) NSString* questGiverName;
@property (retain) NSString* questGiverImageSuffix;
@property int32_t priority;
@end

@implementation FullQuestProto

- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value {
  hasQuestId_ = !!value;
}
@synthesize questId;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasDoneResponse {
  return !!hasDoneResponse_;
}
- (void) setHasDoneResponse:(BOOL) value {
  hasDoneResponse_ = !!value;
}
@synthesize doneResponse;
- (BOOL) hasAssetNumWithinCity {
  return !!hasAssetNumWithinCity_;
}
- (void) setHasAssetNumWithinCity:(BOOL) value {
  hasAssetNumWithinCity_ = !!value;
}
@synthesize assetNumWithinCity;
- (BOOL) hasCoinsGained {
  return !!hasCoinsGained_;
}
- (void) setHasCoinsGained:(BOOL) value {
  hasCoinsGained_ = !!value;
}
@synthesize coinsGained;
- (BOOL) hasDiamondsGained {
  return !!hasDiamondsGained_;
}
- (void) setHasDiamondsGained:(BOOL) value {
  hasDiamondsGained_ = !!value;
}
@synthesize diamondsGained;
- (BOOL) hasExpGained {
  return !!hasExpGained_;
}
- (void) setHasExpGained:(BOOL) value {
  hasExpGained_ = !!value;
}
@synthesize expGained;
- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value {
  hasMonsterId_ = !!value;
}
@synthesize monsterId;
@synthesize mutableQuestsRequiredForThisList;
@synthesize mutableTaskReqsList;
@synthesize mutableUpgradeStructJobsReqsList;
@synthesize mutableBuildStructJobsReqsList;
@synthesize mutableDefeatTypeReqsList;
@synthesize mutablePossessEquipJobReqsList;
- (BOOL) hasCoinRetrievalReq {
  return !!hasCoinRetrievalReq_;
}
- (void) setHasCoinRetrievalReq:(BOOL) value {
  hasCoinRetrievalReq_ = !!value;
}
@synthesize coinRetrievalReq;
- (BOOL) hasSpecialQuestActionReq {
  return !!hasSpecialQuestActionReq_;
}
- (void) setHasSpecialQuestActionReq:(BOOL) value {
  hasSpecialQuestActionReq_ = !!value;
}
@synthesize specialQuestActionReq;
- (BOOL) hasNumComponentsForGood {
  return !!hasNumComponentsForGood_;
}
- (void) setHasNumComponentsForGood:(BOOL) value {
  hasNumComponentsForGood_ = !!value;
}
@synthesize numComponentsForGood;
- (BOOL) hasAcceptDialogue {
  return !!hasAcceptDialogue_;
}
- (void) setHasAcceptDialogue:(BOOL) value {
  hasAcceptDialogue_ = !!value;
}
@synthesize acceptDialogue;
- (BOOL) hasQuestGiverName {
  return !!hasQuestGiverName_;
}
- (void) setHasQuestGiverName:(BOOL) value {
  hasQuestGiverName_ = !!value;
}
@synthesize questGiverName;
- (BOOL) hasQuestGiverImageSuffix {
  return !!hasQuestGiverImageSuffix_;
}
- (void) setHasQuestGiverImageSuffix:(BOOL) value {
  hasQuestGiverImageSuffix_ = !!value;
}
@synthesize questGiverImageSuffix;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) value {
  hasPriority_ = !!value;
}
@synthesize priority;
- (void) dealloc {
  self.name = nil;
  self.description = nil;
  self.doneResponse = nil;
  self.mutableQuestsRequiredForThisList = nil;
  self.mutableTaskReqsList = nil;
  self.mutableUpgradeStructJobsReqsList = nil;
  self.mutableBuildStructJobsReqsList = nil;
  self.mutableDefeatTypeReqsList = nil;
  self.mutablePossessEquipJobReqsList = nil;
  self.acceptDialogue = nil;
  self.questGiverName = nil;
  self.questGiverImageSuffix = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.questId = 0;
    self.cityId = 0;
    self.name = @"";
    self.description = @"";
    self.doneResponse = @"";
    self.assetNumWithinCity = 0;
    self.coinsGained = 0;
    self.diamondsGained = 0;
    self.expGained = 0;
    self.monsterId = 0;
    self.coinRetrievalReq = 0;
    self.specialQuestActionReq = SpecialQuestActionRequestJoinClan;
    self.numComponentsForGood = 0;
    self.acceptDialogue = [DialogueProto defaultInstance];
    self.questGiverName = @"";
    self.questGiverImageSuffix = @"";
    self.priority = 0;
  }
  return self;
}
static FullQuestProto* defaultFullQuestProtoInstance = nil;
+ (void) initialize {
  if (self == [FullQuestProto class]) {
    defaultFullQuestProtoInstance = [[FullQuestProto alloc] init];
  }
}
+ (FullQuestProto*) defaultInstance {
  return defaultFullQuestProtoInstance;
}
- (FullQuestProto*) defaultInstance {
  return defaultFullQuestProtoInstance;
}
- (NSArray*) questsRequiredForThisList {
  return mutableQuestsRequiredForThisList;
}
- (int32_t) questsRequiredForThisAtIndex:(int32_t) index {
  id value = [mutableQuestsRequiredForThisList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) taskReqsList {
  return mutableTaskReqsList;
}
- (int32_t) taskReqsAtIndex:(int32_t) index {
  id value = [mutableTaskReqsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) upgradeStructJobsReqsList {
  return mutableUpgradeStructJobsReqsList;
}
- (int32_t) upgradeStructJobsReqsAtIndex:(int32_t) index {
  id value = [mutableUpgradeStructJobsReqsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) buildStructJobsReqsList {
  return mutableBuildStructJobsReqsList;
}
- (int32_t) buildStructJobsReqsAtIndex:(int32_t) index {
  id value = [mutableBuildStructJobsReqsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) defeatTypeReqsList {
  return mutableDefeatTypeReqsList;
}
- (int32_t) defeatTypeReqsAtIndex:(int32_t) index {
  id value = [mutableDefeatTypeReqsList objectAtIndex:index];
  return [value intValue];
}
- (NSArray*) possessEquipJobReqsList {
  return mutablePossessEquipJobReqsList;
}
- (int32_t) possessEquipJobReqsAtIndex:(int32_t) index {
  id value = [mutablePossessEquipJobReqsList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestId) {
    [output writeInt32:1 value:self.questId];
  }
  if (self.hasCityId) {
    [output writeInt32:2 value:self.cityId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasDescription) {
    [output writeString:4 value:self.description];
  }
  if (self.hasDoneResponse) {
    [output writeString:5 value:self.doneResponse];
  }
  if (self.hasAssetNumWithinCity) {
    [output writeInt32:6 value:self.assetNumWithinCity];
  }
  if (self.hasCoinsGained) {
    [output writeInt32:7 value:self.coinsGained];
  }
  if (self.hasDiamondsGained) {
    [output writeInt32:8 value:self.diamondsGained];
  }
  if (self.hasExpGained) {
    [output writeInt32:9 value:self.expGained];
  }
  if (self.hasMonsterId) {
    [output writeInt32:10 value:self.monsterId];
  }
  for (NSNumber* value in self.mutableQuestsRequiredForThisList) {
    [output writeInt32:11 value:[value intValue]];
  }
  for (NSNumber* value in self.mutableTaskReqsList) {
    [output writeInt32:12 value:[value intValue]];
  }
  for (NSNumber* value in self.mutableUpgradeStructJobsReqsList) {
    [output writeInt32:13 value:[value intValue]];
  }
  for (NSNumber* value in self.mutableBuildStructJobsReqsList) {
    [output writeInt32:14 value:[value intValue]];
  }
  for (NSNumber* value in self.mutableDefeatTypeReqsList) {
    [output writeInt32:15 value:[value intValue]];
  }
  for (NSNumber* value in self.mutablePossessEquipJobReqsList) {
    [output writeInt32:16 value:[value intValue]];
  }
  if (self.hasCoinRetrievalReq) {
    [output writeInt32:17 value:self.coinRetrievalReq];
  }
  if (self.hasSpecialQuestActionReq) {
    [output writeEnum:18 value:self.specialQuestActionReq];
  }
  if (self.hasNumComponentsForGood) {
    [output writeInt32:19 value:self.numComponentsForGood];
  }
  if (self.hasAcceptDialogue) {
    [output writeMessage:20 value:self.acceptDialogue];
  }
  if (self.hasQuestGiverName) {
    [output writeString:21 value:self.questGiverName];
  }
  if (self.hasQuestGiverImageSuffix) {
    [output writeString:22 value:self.questGiverImageSuffix];
  }
  if (self.hasPriority) {
    [output writeInt32:23 value:self.priority];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasQuestId) {
    size += computeInt32Size(1, self.questId);
  }
  if (self.hasCityId) {
    size += computeInt32Size(2, self.cityId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasDescription) {
    size += computeStringSize(4, self.description);
  }
  if (self.hasDoneResponse) {
    size += computeStringSize(5, self.doneResponse);
  }
  if (self.hasAssetNumWithinCity) {
    size += computeInt32Size(6, self.assetNumWithinCity);
  }
  if (self.hasCoinsGained) {
    size += computeInt32Size(7, self.coinsGained);
  }
  if (self.hasDiamondsGained) {
    size += computeInt32Size(8, self.diamondsGained);
  }
  if (self.hasExpGained) {
    size += computeInt32Size(9, self.expGained);
  }
  if (self.hasMonsterId) {
    size += computeInt32Size(10, self.monsterId);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableQuestsRequiredForThisList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableQuestsRequiredForThisList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableTaskReqsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableTaskReqsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableUpgradeStructJobsReqsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableUpgradeStructJobsReqsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableBuildStructJobsReqsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableBuildStructJobsReqsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableDefeatTypeReqsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 1 * self.mutableDefeatTypeReqsList.count;
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutablePossessEquipJobReqsList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 2 * self.mutablePossessEquipJobReqsList.count;
  }
  if (self.hasCoinRetrievalReq) {
    size += computeInt32Size(17, self.coinRetrievalReq);
  }
  if (self.hasSpecialQuestActionReq) {
    size += computeEnumSize(18, self.specialQuestActionReq);
  }
  if (self.hasNumComponentsForGood) {
    size += computeInt32Size(19, self.numComponentsForGood);
  }
  if (self.hasAcceptDialogue) {
    size += computeMessageSize(20, self.acceptDialogue);
  }
  if (self.hasQuestGiverName) {
    size += computeStringSize(21, self.questGiverName);
  }
  if (self.hasQuestGiverImageSuffix) {
    size += computeStringSize(22, self.questGiverImageSuffix);
  }
  if (self.hasPriority) {
    size += computeInt32Size(23, self.priority);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullQuestProto*) parseFromData:(NSData*) data {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromData:data] build];
}
+ (FullQuestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromInputStream:input] build];
}
+ (FullQuestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto_Builder*) builder {
  return [[[FullQuestProto_Builder alloc] init] autorelease];
}
+ (FullQuestProto_Builder*) builderWithPrototype:(FullQuestProto*) prototype {
  return [[FullQuestProto builder] mergeFrom:prototype];
}
- (FullQuestProto_Builder*) builder {
  return [FullQuestProto builder];
}
@end

@interface FullQuestProto_Builder()
@property (retain) FullQuestProto* result;
@end

@implementation FullQuestProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullQuestProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullQuestProto_Builder*) clear {
  self.result = [[[FullQuestProto alloc] init] autorelease];
  return self;
}
- (FullQuestProto_Builder*) clone {
  return [FullQuestProto builderWithPrototype:result];
}
- (FullQuestProto*) defaultInstance {
  return [FullQuestProto defaultInstance];
}
- (FullQuestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullQuestProto*) buildPartial {
  FullQuestProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullQuestProto_Builder*) mergeFrom:(FullQuestProto*) other {
  if (other == [FullQuestProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasDoneResponse) {
    [self setDoneResponse:other.doneResponse];
  }
  if (other.hasAssetNumWithinCity) {
    [self setAssetNumWithinCity:other.assetNumWithinCity];
  }
  if (other.hasCoinsGained) {
    [self setCoinsGained:other.coinsGained];
  }
  if (other.hasDiamondsGained) {
    [self setDiamondsGained:other.diamondsGained];
  }
  if (other.hasExpGained) {
    [self setExpGained:other.expGained];
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.mutableQuestsRequiredForThisList.count > 0) {
    if (result.mutableQuestsRequiredForThisList == nil) {
      result.mutableQuestsRequiredForThisList = [NSMutableArray array];
    }
    [result.mutableQuestsRequiredForThisList addObjectsFromArray:other.mutableQuestsRequiredForThisList];
  }
  if (other.mutableTaskReqsList.count > 0) {
    if (result.mutableTaskReqsList == nil) {
      result.mutableTaskReqsList = [NSMutableArray array];
    }
    [result.mutableTaskReqsList addObjectsFromArray:other.mutableTaskReqsList];
  }
  if (other.mutableUpgradeStructJobsReqsList.count > 0) {
    if (result.mutableUpgradeStructJobsReqsList == nil) {
      result.mutableUpgradeStructJobsReqsList = [NSMutableArray array];
    }
    [result.mutableUpgradeStructJobsReqsList addObjectsFromArray:other.mutableUpgradeStructJobsReqsList];
  }
  if (other.mutableBuildStructJobsReqsList.count > 0) {
    if (result.mutableBuildStructJobsReqsList == nil) {
      result.mutableBuildStructJobsReqsList = [NSMutableArray array];
    }
    [result.mutableBuildStructJobsReqsList addObjectsFromArray:other.mutableBuildStructJobsReqsList];
  }
  if (other.mutableDefeatTypeReqsList.count > 0) {
    if (result.mutableDefeatTypeReqsList == nil) {
      result.mutableDefeatTypeReqsList = [NSMutableArray array];
    }
    [result.mutableDefeatTypeReqsList addObjectsFromArray:other.mutableDefeatTypeReqsList];
  }
  if (other.mutablePossessEquipJobReqsList.count > 0) {
    if (result.mutablePossessEquipJobReqsList == nil) {
      result.mutablePossessEquipJobReqsList = [NSMutableArray array];
    }
    [result.mutablePossessEquipJobReqsList addObjectsFromArray:other.mutablePossessEquipJobReqsList];
  }
  if (other.hasCoinRetrievalReq) {
    [self setCoinRetrievalReq:other.coinRetrievalReq];
  }
  if (other.hasSpecialQuestActionReq) {
    [self setSpecialQuestActionReq:other.specialQuestActionReq];
  }
  if (other.hasNumComponentsForGood) {
    [self setNumComponentsForGood:other.numComponentsForGood];
  }
  if (other.hasAcceptDialogue) {
    [self mergeAcceptDialogue:other.acceptDialogue];
  }
  if (other.hasQuestGiverName) {
    [self setQuestGiverName:other.questGiverName];
  }
  if (other.hasQuestGiverImageSuffix) {
    [self setQuestGiverImageSuffix:other.questGiverImageSuffix];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setDescription:[input readString]];
        break;
      }
      case 42: {
        [self setDoneResponse:[input readString]];
        break;
      }
      case 48: {
        [self setAssetNumWithinCity:[input readInt32]];
        break;
      }
      case 56: {
        [self setCoinsGained:[input readInt32]];
        break;
      }
      case 64: {
        [self setDiamondsGained:[input readInt32]];
        break;
      }
      case 72: {
        [self setExpGained:[input readInt32]];
        break;
      }
      case 80: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 88: {
        [self addQuestsRequiredForThis:[input readInt32]];
        break;
      }
      case 96: {
        [self addTaskReqs:[input readInt32]];
        break;
      }
      case 104: {
        [self addUpgradeStructJobsReqs:[input readInt32]];
        break;
      }
      case 112: {
        [self addBuildStructJobsReqs:[input readInt32]];
        break;
      }
      case 120: {
        [self addDefeatTypeReqs:[input readInt32]];
        break;
      }
      case 128: {
        [self addPossessEquipJobReqs:[input readInt32]];
        break;
      }
      case 136: {
        [self setCoinRetrievalReq:[input readInt32]];
        break;
      }
      case 144: {
        int32_t value = [input readEnum];
        if (SpecialQuestActionIsValidValue(value)) {
          [self setSpecialQuestActionReq:value];
        } else {
          [unknownFields mergeVarintField:18 value:value];
        }
        break;
      }
      case 152: {
        [self setNumComponentsForGood:[input readInt32]];
        break;
      }
      case 162: {
        DialogueProto_Builder* subBuilder = [DialogueProto builder];
        if (self.hasAcceptDialogue) {
          [subBuilder mergeFrom:self.acceptDialogue];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptDialogue:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        [self setQuestGiverName:[input readString]];
        break;
      }
      case 178: {
        [self setQuestGiverImageSuffix:[input readString]];
        break;
      }
      case 184: {
        [self setPriority:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (FullQuestProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (FullQuestProto_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (FullQuestProto_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FullQuestProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FullQuestProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (FullQuestProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (FullQuestProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasDoneResponse {
  return result.hasDoneResponse;
}
- (NSString*) doneResponse {
  return result.doneResponse;
}
- (FullQuestProto_Builder*) setDoneResponse:(NSString*) value {
  result.hasDoneResponse = YES;
  result.doneResponse = value;
  return self;
}
- (FullQuestProto_Builder*) clearDoneResponse {
  result.hasDoneResponse = NO;
  result.doneResponse = @"";
  return self;
}
- (BOOL) hasAssetNumWithinCity {
  return result.hasAssetNumWithinCity;
}
- (int32_t) assetNumWithinCity {
  return result.assetNumWithinCity;
}
- (FullQuestProto_Builder*) setAssetNumWithinCity:(int32_t) value {
  result.hasAssetNumWithinCity = YES;
  result.assetNumWithinCity = value;
  return self;
}
- (FullQuestProto_Builder*) clearAssetNumWithinCity {
  result.hasAssetNumWithinCity = NO;
  result.assetNumWithinCity = 0;
  return self;
}
- (BOOL) hasCoinsGained {
  return result.hasCoinsGained;
}
- (int32_t) coinsGained {
  return result.coinsGained;
}
- (FullQuestProto_Builder*) setCoinsGained:(int32_t) value {
  result.hasCoinsGained = YES;
  result.coinsGained = value;
  return self;
}
- (FullQuestProto_Builder*) clearCoinsGained {
  result.hasCoinsGained = NO;
  result.coinsGained = 0;
  return self;
}
- (BOOL) hasDiamondsGained {
  return result.hasDiamondsGained;
}
- (int32_t) diamondsGained {
  return result.diamondsGained;
}
- (FullQuestProto_Builder*) setDiamondsGained:(int32_t) value {
  result.hasDiamondsGained = YES;
  result.diamondsGained = value;
  return self;
}
- (FullQuestProto_Builder*) clearDiamondsGained {
  result.hasDiamondsGained = NO;
  result.diamondsGained = 0;
  return self;
}
- (BOOL) hasExpGained {
  return result.hasExpGained;
}
- (int32_t) expGained {
  return result.expGained;
}
- (FullQuestProto_Builder*) setExpGained:(int32_t) value {
  result.hasExpGained = YES;
  result.expGained = value;
  return self;
}
- (FullQuestProto_Builder*) clearExpGained {
  result.hasExpGained = NO;
  result.expGained = 0;
  return self;
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (FullQuestProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (FullQuestProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (NSArray*) questsRequiredForThisList {
  if (result.mutableQuestsRequiredForThisList == nil) {
    return [NSArray array];
  }
  return result.mutableQuestsRequiredForThisList;
}
- (int32_t) questsRequiredForThisAtIndex:(int32_t) index {
  return [result questsRequiredForThisAtIndex:index];
}
- (FullQuestProto_Builder*) replaceQuestsRequiredForThisAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableQuestsRequiredForThisList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addQuestsRequiredForThis:(int32_t) value {
  if (result.mutableQuestsRequiredForThisList == nil) {
    result.mutableQuestsRequiredForThisList = [NSMutableArray array];
  }
  [result.mutableQuestsRequiredForThisList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllQuestsRequiredForThis:(NSArray*) values {
  if (result.mutableQuestsRequiredForThisList == nil) {
    result.mutableQuestsRequiredForThisList = [NSMutableArray array];
  }
  [result.mutableQuestsRequiredForThisList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearQuestsRequiredForThisList {
  result.mutableQuestsRequiredForThisList = nil;
  return self;
}
- (NSArray*) taskReqsList {
  if (result.mutableTaskReqsList == nil) {
    return [NSArray array];
  }
  return result.mutableTaskReqsList;
}
- (int32_t) taskReqsAtIndex:(int32_t) index {
  return [result taskReqsAtIndex:index];
}
- (FullQuestProto_Builder*) replaceTaskReqsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableTaskReqsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addTaskReqs:(int32_t) value {
  if (result.mutableTaskReqsList == nil) {
    result.mutableTaskReqsList = [NSMutableArray array];
  }
  [result.mutableTaskReqsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllTaskReqs:(NSArray*) values {
  if (result.mutableTaskReqsList == nil) {
    result.mutableTaskReqsList = [NSMutableArray array];
  }
  [result.mutableTaskReqsList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearTaskReqsList {
  result.mutableTaskReqsList = nil;
  return self;
}
- (NSArray*) upgradeStructJobsReqsList {
  if (result.mutableUpgradeStructJobsReqsList == nil) {
    return [NSArray array];
  }
  return result.mutableUpgradeStructJobsReqsList;
}
- (int32_t) upgradeStructJobsReqsAtIndex:(int32_t) index {
  return [result upgradeStructJobsReqsAtIndex:index];
}
- (FullQuestProto_Builder*) replaceUpgradeStructJobsReqsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableUpgradeStructJobsReqsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addUpgradeStructJobsReqs:(int32_t) value {
  if (result.mutableUpgradeStructJobsReqsList == nil) {
    result.mutableUpgradeStructJobsReqsList = [NSMutableArray array];
  }
  [result.mutableUpgradeStructJobsReqsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllUpgradeStructJobsReqs:(NSArray*) values {
  if (result.mutableUpgradeStructJobsReqsList == nil) {
    result.mutableUpgradeStructJobsReqsList = [NSMutableArray array];
  }
  [result.mutableUpgradeStructJobsReqsList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearUpgradeStructJobsReqsList {
  result.mutableUpgradeStructJobsReqsList = nil;
  return self;
}
- (NSArray*) buildStructJobsReqsList {
  if (result.mutableBuildStructJobsReqsList == nil) {
    return [NSArray array];
  }
  return result.mutableBuildStructJobsReqsList;
}
- (int32_t) buildStructJobsReqsAtIndex:(int32_t) index {
  return [result buildStructJobsReqsAtIndex:index];
}
- (FullQuestProto_Builder*) replaceBuildStructJobsReqsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableBuildStructJobsReqsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addBuildStructJobsReqs:(int32_t) value {
  if (result.mutableBuildStructJobsReqsList == nil) {
    result.mutableBuildStructJobsReqsList = [NSMutableArray array];
  }
  [result.mutableBuildStructJobsReqsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllBuildStructJobsReqs:(NSArray*) values {
  if (result.mutableBuildStructJobsReqsList == nil) {
    result.mutableBuildStructJobsReqsList = [NSMutableArray array];
  }
  [result.mutableBuildStructJobsReqsList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearBuildStructJobsReqsList {
  result.mutableBuildStructJobsReqsList = nil;
  return self;
}
- (NSArray*) defeatTypeReqsList {
  if (result.mutableDefeatTypeReqsList == nil) {
    return [NSArray array];
  }
  return result.mutableDefeatTypeReqsList;
}
- (int32_t) defeatTypeReqsAtIndex:(int32_t) index {
  return [result defeatTypeReqsAtIndex:index];
}
- (FullQuestProto_Builder*) replaceDefeatTypeReqsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableDefeatTypeReqsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addDefeatTypeReqs:(int32_t) value {
  if (result.mutableDefeatTypeReqsList == nil) {
    result.mutableDefeatTypeReqsList = [NSMutableArray array];
  }
  [result.mutableDefeatTypeReqsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllDefeatTypeReqs:(NSArray*) values {
  if (result.mutableDefeatTypeReqsList == nil) {
    result.mutableDefeatTypeReqsList = [NSMutableArray array];
  }
  [result.mutableDefeatTypeReqsList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearDefeatTypeReqsList {
  result.mutableDefeatTypeReqsList = nil;
  return self;
}
- (NSArray*) possessEquipJobReqsList {
  if (result.mutablePossessEquipJobReqsList == nil) {
    return [NSArray array];
  }
  return result.mutablePossessEquipJobReqsList;
}
- (int32_t) possessEquipJobReqsAtIndex:(int32_t) index {
  return [result possessEquipJobReqsAtIndex:index];
}
- (FullQuestProto_Builder*) replacePossessEquipJobReqsAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutablePossessEquipJobReqsList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addPossessEquipJobReqs:(int32_t) value {
  if (result.mutablePossessEquipJobReqsList == nil) {
    result.mutablePossessEquipJobReqsList = [NSMutableArray array];
  }
  [result.mutablePossessEquipJobReqsList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllPossessEquipJobReqs:(NSArray*) values {
  if (result.mutablePossessEquipJobReqsList == nil) {
    result.mutablePossessEquipJobReqsList = [NSMutableArray array];
  }
  [result.mutablePossessEquipJobReqsList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearPossessEquipJobReqsList {
  result.mutablePossessEquipJobReqsList = nil;
  return self;
}
- (BOOL) hasCoinRetrievalReq {
  return result.hasCoinRetrievalReq;
}
- (int32_t) coinRetrievalReq {
  return result.coinRetrievalReq;
}
- (FullQuestProto_Builder*) setCoinRetrievalReq:(int32_t) value {
  result.hasCoinRetrievalReq = YES;
  result.coinRetrievalReq = value;
  return self;
}
- (FullQuestProto_Builder*) clearCoinRetrievalReq {
  result.hasCoinRetrievalReq = NO;
  result.coinRetrievalReq = 0;
  return self;
}
- (BOOL) hasSpecialQuestActionReq {
  return result.hasSpecialQuestActionReq;
}
- (SpecialQuestAction) specialQuestActionReq {
  return result.specialQuestActionReq;
}
- (FullQuestProto_Builder*) setSpecialQuestActionReq:(SpecialQuestAction) value {
  result.hasSpecialQuestActionReq = YES;
  result.specialQuestActionReq = value;
  return self;
}
- (FullQuestProto_Builder*) clearSpecialQuestActionReq {
  result.hasSpecialQuestActionReq = NO;
  result.specialQuestActionReq = SpecialQuestActionRequestJoinClan;
  return self;
}
- (BOOL) hasNumComponentsForGood {
  return result.hasNumComponentsForGood;
}
- (int32_t) numComponentsForGood {
  return result.numComponentsForGood;
}
- (FullQuestProto_Builder*) setNumComponentsForGood:(int32_t) value {
  result.hasNumComponentsForGood = YES;
  result.numComponentsForGood = value;
  return self;
}
- (FullQuestProto_Builder*) clearNumComponentsForGood {
  result.hasNumComponentsForGood = NO;
  result.numComponentsForGood = 0;
  return self;
}
- (BOOL) hasAcceptDialogue {
  return result.hasAcceptDialogue;
}
- (DialogueProto*) acceptDialogue {
  return result.acceptDialogue;
}
- (FullQuestProto_Builder*) setAcceptDialogue:(DialogueProto*) value {
  result.hasAcceptDialogue = YES;
  result.acceptDialogue = value;
  return self;
}
- (FullQuestProto_Builder*) setAcceptDialogueBuilder:(DialogueProto_Builder*) builderForValue {
  return [self setAcceptDialogue:[builderForValue build]];
}
- (FullQuestProto_Builder*) mergeAcceptDialogue:(DialogueProto*) value {
  if (result.hasAcceptDialogue &&
      result.acceptDialogue != [DialogueProto defaultInstance]) {
    result.acceptDialogue =
      [[[DialogueProto builderWithPrototype:result.acceptDialogue] mergeFrom:value] buildPartial];
  } else {
    result.acceptDialogue = value;
  }
  result.hasAcceptDialogue = YES;
  return self;
}
- (FullQuestProto_Builder*) clearAcceptDialogue {
  result.hasAcceptDialogue = NO;
  result.acceptDialogue = [DialogueProto defaultInstance];
  return self;
}
- (BOOL) hasQuestGiverName {
  return result.hasQuestGiverName;
}
- (NSString*) questGiverName {
  return result.questGiverName;
}
- (FullQuestProto_Builder*) setQuestGiverName:(NSString*) value {
  result.hasQuestGiverName = YES;
  result.questGiverName = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverName {
  result.hasQuestGiverName = NO;
  result.questGiverName = @"";
  return self;
}
- (BOOL) hasQuestGiverImageSuffix {
  return result.hasQuestGiverImageSuffix;
}
- (NSString*) questGiverImageSuffix {
  return result.questGiverImageSuffix;
}
- (FullQuestProto_Builder*) setQuestGiverImageSuffix:(NSString*) value {
  result.hasQuestGiverImageSuffix = YES;
  result.questGiverImageSuffix = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverImageSuffix {
  result.hasQuestGiverImageSuffix = NO;
  result.questGiverImageSuffix = @"";
  return self;
}
- (BOOL) hasPriority {
  return result.hasPriority;
}
- (int32_t) priority {
  return result.priority;
}
- (FullQuestProto_Builder*) setPriority:(int32_t) value {
  result.hasPriority = YES;
  result.priority = value;
  return self;
}
- (FullQuestProto_Builder*) clearPriority {
  result.hasPriority = NO;
  result.priority = 0;
  return self;
}
@end

@interface DialogueProto ()
@property (retain) NSMutableArray* mutableSpeechSegmentList;
@end

@implementation DialogueProto

@synthesize mutableSpeechSegmentList;
- (void) dealloc {
  self.mutableSpeechSegmentList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static DialogueProto* defaultDialogueProtoInstance = nil;
+ (void) initialize {
  if (self == [DialogueProto class]) {
    defaultDialogueProtoInstance = [[DialogueProto alloc] init];
  }
}
+ (DialogueProto*) defaultInstance {
  return defaultDialogueProtoInstance;
}
- (DialogueProto*) defaultInstance {
  return defaultDialogueProtoInstance;
}
- (NSArray*) speechSegmentList {
  return mutableSpeechSegmentList;
}
- (DialogueProto_SpeechSegmentProto*) speechSegmentAtIndex:(int32_t) index {
  id value = [mutableSpeechSegmentList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (DialogueProto_SpeechSegmentProto* element in self.speechSegmentList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (DialogueProto_SpeechSegmentProto* element in self.speechSegmentList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DialogueProto*) parseFromData:(NSData*) data {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromData:data] build];
}
+ (DialogueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto*) parseFromInputStream:(NSInputStream*) input {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromInputStream:input] build];
}
+ (DialogueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromCodedInputStream:input] build];
}
+ (DialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_Builder*) builder {
  return [[[DialogueProto_Builder alloc] init] autorelease];
}
+ (DialogueProto_Builder*) builderWithPrototype:(DialogueProto*) prototype {
  return [[DialogueProto builder] mergeFrom:prototype];
}
- (DialogueProto_Builder*) builder {
  return [DialogueProto builder];
}
@end

@interface DialogueProto_SpeechSegmentProto ()
@property DialogueProto_SpeechSegmentProto_DialogueSpeaker speaker;
@property (retain) NSString* speakerText;
@end

@implementation DialogueProto_SpeechSegmentProto

- (BOOL) hasSpeaker {
  return !!hasSpeaker_;
}
- (void) setHasSpeaker:(BOOL) value {
  hasSpeaker_ = !!value;
}
@synthesize speaker;
- (BOOL) hasSpeakerText {
  return !!hasSpeakerText_;
}
- (void) setHasSpeakerText:(BOOL) value {
  hasSpeakerText_ = !!value;
}
@synthesize speakerText;
- (void) dealloc {
  self.speakerText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.speaker = DialogueProto_SpeechSegmentProto_DialogueSpeakerPlayerType;
    self.speakerText = @"";
  }
  return self;
}
static DialogueProto_SpeechSegmentProto* defaultDialogueProto_SpeechSegmentProtoInstance = nil;
+ (void) initialize {
  if (self == [DialogueProto_SpeechSegmentProto class]) {
    defaultDialogueProto_SpeechSegmentProtoInstance = [[DialogueProto_SpeechSegmentProto alloc] init];
  }
}
+ (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return defaultDialogueProto_SpeechSegmentProtoInstance;
}
- (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return defaultDialogueProto_SpeechSegmentProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpeaker) {
    [output writeEnum:1 value:self.speaker];
  }
  if (self.hasSpeakerText) {
    [output writeString:2 value:self.speakerText];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSpeaker) {
    size += computeEnumSize(1, self.speaker);
  }
  if (self.hasSpeakerText) {
    size += computeStringSize(2, self.speakerText);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DialogueProto_SpeechSegmentProto*) parseFromData:(NSData*) data {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromData:data] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromInputStream:(NSInputStream*) input {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromInputStream:input] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromCodedInputStream:input] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto_Builder*) builder {
  return [[[DialogueProto_SpeechSegmentProto_Builder alloc] init] autorelease];
}
+ (DialogueProto_SpeechSegmentProto_Builder*) builderWithPrototype:(DialogueProto_SpeechSegmentProto*) prototype {
  return [[DialogueProto_SpeechSegmentProto builder] mergeFrom:prototype];
}
- (DialogueProto_SpeechSegmentProto_Builder*) builder {
  return [DialogueProto_SpeechSegmentProto builder];
}
@end

BOOL DialogueProto_SpeechSegmentProto_DialogueSpeakerIsValidValue(DialogueProto_SpeechSegmentProto_DialogueSpeaker value) {
  switch (value) {
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerPlayerType:
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerTutorialGirl:
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerQuestgiver1:
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerQuestgiver2:
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerQuestgiver3:
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerQuestgiver4:
    case DialogueProto_SpeechSegmentProto_DialogueSpeakerQuestgiver5:
      return YES;
    default:
      return NO;
  }
}
@interface DialogueProto_SpeechSegmentProto_Builder()
@property (retain) DialogueProto_SpeechSegmentProto* result;
@end

@implementation DialogueProto_SpeechSegmentProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DialogueProto_SpeechSegmentProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clear {
  self.result = [[[DialogueProto_SpeechSegmentProto alloc] init] autorelease];
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clone {
  return [DialogueProto_SpeechSegmentProto builderWithPrototype:result];
}
- (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return [DialogueProto_SpeechSegmentProto defaultInstance];
}
- (DialogueProto_SpeechSegmentProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DialogueProto_SpeechSegmentProto*) buildPartial {
  DialogueProto_SpeechSegmentProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFrom:(DialogueProto_SpeechSegmentProto*) other {
  if (other == [DialogueProto_SpeechSegmentProto defaultInstance]) {
    return self;
  }
  if (other.hasSpeaker) {
    [self setSpeaker:other.speaker];
  }
  if (other.hasSpeakerText) {
    [self setSpeakerText:other.speakerText];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        int32_t value = [input readEnum];
        if (DialogueProto_SpeechSegmentProto_DialogueSpeakerIsValidValue(value)) {
          [self setSpeaker:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 18: {
        [self setSpeakerText:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSpeaker {
  return result.hasSpeaker;
}
- (DialogueProto_SpeechSegmentProto_DialogueSpeaker) speaker {
  return result.speaker;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeaker:(DialogueProto_SpeechSegmentProto_DialogueSpeaker) value {
  result.hasSpeaker = YES;
  result.speaker = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeaker {
  result.hasSpeaker = NO;
  result.speaker = DialogueProto_SpeechSegmentProto_DialogueSpeakerPlayerType;
  return self;
}
- (BOOL) hasSpeakerText {
  return result.hasSpeakerText;
}
- (NSString*) speakerText {
  return result.speakerText;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeakerText:(NSString*) value {
  result.hasSpeakerText = YES;
  result.speakerText = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeakerText {
  result.hasSpeakerText = NO;
  result.speakerText = @"";
  return self;
}
@end

@interface DialogueProto_Builder()
@property (retain) DialogueProto* result;
@end

@implementation DialogueProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DialogueProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DialogueProto_Builder*) clear {
  self.result = [[[DialogueProto alloc] init] autorelease];
  return self;
}
- (DialogueProto_Builder*) clone {
  return [DialogueProto builderWithPrototype:result];
}
- (DialogueProto*) defaultInstance {
  return [DialogueProto defaultInstance];
}
- (DialogueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DialogueProto*) buildPartial {
  DialogueProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DialogueProto_Builder*) mergeFrom:(DialogueProto*) other {
  if (other == [DialogueProto defaultInstance]) {
    return self;
  }
  if (other.mutableSpeechSegmentList.count > 0) {
    if (result.mutableSpeechSegmentList == nil) {
      result.mutableSpeechSegmentList = [NSMutableArray array];
    }
    [result.mutableSpeechSegmentList addObjectsFromArray:other.mutableSpeechSegmentList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        DialogueProto_SpeechSegmentProto_Builder* subBuilder = [DialogueProto_SpeechSegmentProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSpeechSegment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) speechSegmentList {
  if (result.mutableSpeechSegmentList == nil) { return [NSArray array]; }
  return result.mutableSpeechSegmentList;
}
- (DialogueProto_SpeechSegmentProto*) speechSegmentAtIndex:(int32_t) index {
  return [result speechSegmentAtIndex:index];
}
- (DialogueProto_Builder*) replaceSpeechSegmentAtIndex:(int32_t) index with:(DialogueProto_SpeechSegmentProto*) value {
  [result.mutableSpeechSegmentList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DialogueProto_Builder*) addAllSpeechSegment:(NSArray*) values {
  if (result.mutableSpeechSegmentList == nil) {
    result.mutableSpeechSegmentList = [NSMutableArray array];
  }
  [result.mutableSpeechSegmentList addObjectsFromArray:values];
  return self;
}
- (DialogueProto_Builder*) clearSpeechSegmentList {
  result.mutableSpeechSegmentList = nil;
  return self;
}
- (DialogueProto_Builder*) addSpeechSegment:(DialogueProto_SpeechSegmentProto*) value {
  if (result.mutableSpeechSegmentList == nil) {
    result.mutableSpeechSegmentList = [NSMutableArray array];
  }
  [result.mutableSpeechSegmentList addObject:value];
  return self;
}
@end

@interface FullUserQuestDataLargeProto ()
@property int32_t userId;
@property int32_t questId;
@property BOOL isRedeemed;
@property BOOL isComplete;
@property (retain) NSMutableArray* mutableRequiredBuildStructJobProgressList;
@property (retain) NSMutableArray* mutableRequiredUpgradeStructJobProgressList;
@property (retain) NSMutableArray* mutableRequiredTasksProgressList;
@property int32_t coinsRetrievedForReq;
@property int32_t numComponentsComplete;
@end

@implementation FullUserQuestDataLargeProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value {
  hasQuestId_ = !!value;
}
@synthesize questId;
- (BOOL) hasIsRedeemed {
  return !!hasIsRedeemed_;
}
- (void) setHasIsRedeemed:(BOOL) value {
  hasIsRedeemed_ = !!value;
}
- (BOOL) isRedeemed {
  return !!isRedeemed_;
}
- (void) setIsRedeemed:(BOOL) value {
  isRedeemed_ = !!value;
}
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value {
  hasIsComplete_ = !!value;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value {
  isComplete_ = !!value;
}
@synthesize mutableRequiredBuildStructJobProgressList;
@synthesize mutableRequiredUpgradeStructJobProgressList;
@synthesize mutableRequiredTasksProgressList;
- (BOOL) hasCoinsRetrievedForReq {
  return !!hasCoinsRetrievedForReq_;
}
- (void) setHasCoinsRetrievedForReq:(BOOL) value {
  hasCoinsRetrievedForReq_ = !!value;
}
@synthesize coinsRetrievedForReq;
- (BOOL) hasNumComponentsComplete {
  return !!hasNumComponentsComplete_;
}
- (void) setHasNumComponentsComplete:(BOOL) value {
  hasNumComponentsComplete_ = !!value;
}
@synthesize numComponentsComplete;
- (void) dealloc {
  self.mutableRequiredBuildStructJobProgressList = nil;
  self.mutableRequiredUpgradeStructJobProgressList = nil;
  self.mutableRequiredTasksProgressList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.questId = 0;
    self.isRedeemed = NO;
    self.isComplete = NO;
    self.coinsRetrievedForReq = 0;
    self.numComponentsComplete = 0;
  }
  return self;
}
static FullUserQuestDataLargeProto* defaultFullUserQuestDataLargeProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserQuestDataLargeProto class]) {
    defaultFullUserQuestDataLargeProtoInstance = [[FullUserQuestDataLargeProto alloc] init];
  }
}
+ (FullUserQuestDataLargeProto*) defaultInstance {
  return defaultFullUserQuestDataLargeProtoInstance;
}
- (FullUserQuestDataLargeProto*) defaultInstance {
  return defaultFullUserQuestDataLargeProtoInstance;
}
- (NSArray*) requiredBuildStructJobProgressList {
  return mutableRequiredBuildStructJobProgressList;
}
- (MinimumUserBuildStructJobProto*) requiredBuildStructJobProgressAtIndex:(int32_t) index {
  id value = [mutableRequiredBuildStructJobProgressList objectAtIndex:index];
  return value;
}
- (NSArray*) requiredUpgradeStructJobProgressList {
  return mutableRequiredUpgradeStructJobProgressList;
}
- (MinimumUserUpgradeStructJobProto*) requiredUpgradeStructJobProgressAtIndex:(int32_t) index {
  id value = [mutableRequiredUpgradeStructJobProgressList objectAtIndex:index];
  return value;
}
- (NSArray*) requiredTasksProgressList {
  return mutableRequiredTasksProgressList;
}
- (MinimumUserQuestTaskProto*) requiredTasksProgressAtIndex:(int32_t) index {
  id value = [mutableRequiredTasksProgressList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasQuestId) {
    [output writeInt32:2 value:self.questId];
  }
  if (self.hasIsRedeemed) {
    [output writeBool:3 value:self.isRedeemed];
  }
  if (self.hasIsComplete) {
    [output writeBool:4 value:self.isComplete];
  }
  for (MinimumUserBuildStructJobProto* element in self.requiredBuildStructJobProgressList) {
    [output writeMessage:5 value:element];
  }
  for (MinimumUserUpgradeStructJobProto* element in self.requiredUpgradeStructJobProgressList) {
    [output writeMessage:6 value:element];
  }
  for (MinimumUserQuestTaskProto* element in self.requiredTasksProgressList) {
    [output writeMessage:7 value:element];
  }
  if (self.hasCoinsRetrievedForReq) {
    [output writeInt32:8 value:self.coinsRetrievedForReq];
  }
  if (self.hasNumComponentsComplete) {
    [output writeInt32:9 value:self.numComponentsComplete];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasQuestId) {
    size += computeInt32Size(2, self.questId);
  }
  if (self.hasIsRedeemed) {
    size += computeBoolSize(3, self.isRedeemed);
  }
  if (self.hasIsComplete) {
    size += computeBoolSize(4, self.isComplete);
  }
  for (MinimumUserBuildStructJobProto* element in self.requiredBuildStructJobProgressList) {
    size += computeMessageSize(5, element);
  }
  for (MinimumUserUpgradeStructJobProto* element in self.requiredUpgradeStructJobProgressList) {
    size += computeMessageSize(6, element);
  }
  for (MinimumUserQuestTaskProto* element in self.requiredTasksProgressList) {
    size += computeMessageSize(7, element);
  }
  if (self.hasCoinsRetrievedForReq) {
    size += computeInt32Size(8, self.coinsRetrievedForReq);
  }
  if (self.hasNumComponentsComplete) {
    size += computeInt32Size(9, self.numComponentsComplete);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullUserQuestDataLargeProto*) parseFromData:(NSData*) data {
  return (FullUserQuestDataLargeProto*)[[[FullUserQuestDataLargeProto builder] mergeFromData:data] build];
}
+ (FullUserQuestDataLargeProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestDataLargeProto*)[[[FullUserQuestDataLargeProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestDataLargeProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserQuestDataLargeProto*)[[[FullUserQuestDataLargeProto builder] mergeFromInputStream:input] build];
}
+ (FullUserQuestDataLargeProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestDataLargeProto*)[[[FullUserQuestDataLargeProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestDataLargeProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserQuestDataLargeProto*)[[[FullUserQuestDataLargeProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserQuestDataLargeProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestDataLargeProto*)[[[FullUserQuestDataLargeProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestDataLargeProto_Builder*) builder {
  return [[[FullUserQuestDataLargeProto_Builder alloc] init] autorelease];
}
+ (FullUserQuestDataLargeProto_Builder*) builderWithPrototype:(FullUserQuestDataLargeProto*) prototype {
  return [[FullUserQuestDataLargeProto builder] mergeFrom:prototype];
}
- (FullUserQuestDataLargeProto_Builder*) builder {
  return [FullUserQuestDataLargeProto builder];
}
@end

@interface FullUserQuestDataLargeProto_Builder()
@property (retain) FullUserQuestDataLargeProto* result;
@end

@implementation FullUserQuestDataLargeProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullUserQuestDataLargeProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserQuestDataLargeProto_Builder*) clear {
  self.result = [[[FullUserQuestDataLargeProto alloc] init] autorelease];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clone {
  return [FullUserQuestDataLargeProto builderWithPrototype:result];
}
- (FullUserQuestDataLargeProto*) defaultInstance {
  return [FullUserQuestDataLargeProto defaultInstance];
}
- (FullUserQuestDataLargeProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserQuestDataLargeProto*) buildPartial {
  FullUserQuestDataLargeProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullUserQuestDataLargeProto_Builder*) mergeFrom:(FullUserQuestDataLargeProto*) other {
  if (other == [FullUserQuestDataLargeProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasIsRedeemed) {
    [self setIsRedeemed:other.isRedeemed];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.mutableRequiredBuildStructJobProgressList.count > 0) {
    if (result.mutableRequiredBuildStructJobProgressList == nil) {
      result.mutableRequiredBuildStructJobProgressList = [NSMutableArray array];
    }
    [result.mutableRequiredBuildStructJobProgressList addObjectsFromArray:other.mutableRequiredBuildStructJobProgressList];
  }
  if (other.mutableRequiredUpgradeStructJobProgressList.count > 0) {
    if (result.mutableRequiredUpgradeStructJobProgressList == nil) {
      result.mutableRequiredUpgradeStructJobProgressList = [NSMutableArray array];
    }
    [result.mutableRequiredUpgradeStructJobProgressList addObjectsFromArray:other.mutableRequiredUpgradeStructJobProgressList];
  }
  if (other.mutableRequiredTasksProgressList.count > 0) {
    if (result.mutableRequiredTasksProgressList == nil) {
      result.mutableRequiredTasksProgressList = [NSMutableArray array];
    }
    [result.mutableRequiredTasksProgressList addObjectsFromArray:other.mutableRequiredTasksProgressList];
  }
  if (other.hasCoinsRetrievedForReq) {
    [self setCoinsRetrievedForReq:other.coinsRetrievedForReq];
  }
  if (other.hasNumComponentsComplete) {
    [self setNumComponentsComplete:other.numComponentsComplete];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserQuestDataLargeProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 24: {
        [self setIsRedeemed:[input readBool]];
        break;
      }
      case 32: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 42: {
        MinimumUserBuildStructJobProto_Builder* subBuilder = [MinimumUserBuildStructJobProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequiredBuildStructJobProgress:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MinimumUserUpgradeStructJobProto_Builder* subBuilder = [MinimumUserUpgradeStructJobProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequiredUpgradeStructJobProgress:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        MinimumUserQuestTaskProto_Builder* subBuilder = [MinimumUserQuestTaskProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRequiredTasksProgress:[subBuilder buildPartial]];
        break;
      }
      case 64: {
        [self setCoinsRetrievedForReq:[input readInt32]];
        break;
      }
      case 72: {
        [self setNumComponentsComplete:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (FullUserQuestDataLargeProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (FullUserQuestDataLargeProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasIsRedeemed {
  return result.hasIsRedeemed;
}
- (BOOL) isRedeemed {
  return result.isRedeemed;
}
- (FullUserQuestDataLargeProto_Builder*) setIsRedeemed:(BOOL) value {
  result.hasIsRedeemed = YES;
  result.isRedeemed = value;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearIsRedeemed {
  result.hasIsRedeemed = NO;
  result.isRedeemed = NO;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (FullUserQuestDataLargeProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (NSArray*) requiredBuildStructJobProgressList {
  if (result.mutableRequiredBuildStructJobProgressList == nil) { return [NSArray array]; }
  return result.mutableRequiredBuildStructJobProgressList;
}
- (MinimumUserBuildStructJobProto*) requiredBuildStructJobProgressAtIndex:(int32_t) index {
  return [result requiredBuildStructJobProgressAtIndex:index];
}
- (FullUserQuestDataLargeProto_Builder*) replaceRequiredBuildStructJobProgressAtIndex:(int32_t) index with:(MinimumUserBuildStructJobProto*) value {
  [result.mutableRequiredBuildStructJobProgressList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) addAllRequiredBuildStructJobProgress:(NSArray*) values {
  if (result.mutableRequiredBuildStructJobProgressList == nil) {
    result.mutableRequiredBuildStructJobProgressList = [NSMutableArray array];
  }
  [result.mutableRequiredBuildStructJobProgressList addObjectsFromArray:values];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearRequiredBuildStructJobProgressList {
  result.mutableRequiredBuildStructJobProgressList = nil;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) addRequiredBuildStructJobProgress:(MinimumUserBuildStructJobProto*) value {
  if (result.mutableRequiredBuildStructJobProgressList == nil) {
    result.mutableRequiredBuildStructJobProgressList = [NSMutableArray array];
  }
  [result.mutableRequiredBuildStructJobProgressList addObject:value];
  return self;
}
- (NSArray*) requiredUpgradeStructJobProgressList {
  if (result.mutableRequiredUpgradeStructJobProgressList == nil) { return [NSArray array]; }
  return result.mutableRequiredUpgradeStructJobProgressList;
}
- (MinimumUserUpgradeStructJobProto*) requiredUpgradeStructJobProgressAtIndex:(int32_t) index {
  return [result requiredUpgradeStructJobProgressAtIndex:index];
}
- (FullUserQuestDataLargeProto_Builder*) replaceRequiredUpgradeStructJobProgressAtIndex:(int32_t) index with:(MinimumUserUpgradeStructJobProto*) value {
  [result.mutableRequiredUpgradeStructJobProgressList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) addAllRequiredUpgradeStructJobProgress:(NSArray*) values {
  if (result.mutableRequiredUpgradeStructJobProgressList == nil) {
    result.mutableRequiredUpgradeStructJobProgressList = [NSMutableArray array];
  }
  [result.mutableRequiredUpgradeStructJobProgressList addObjectsFromArray:values];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearRequiredUpgradeStructJobProgressList {
  result.mutableRequiredUpgradeStructJobProgressList = nil;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) addRequiredUpgradeStructJobProgress:(MinimumUserUpgradeStructJobProto*) value {
  if (result.mutableRequiredUpgradeStructJobProgressList == nil) {
    result.mutableRequiredUpgradeStructJobProgressList = [NSMutableArray array];
  }
  [result.mutableRequiredUpgradeStructJobProgressList addObject:value];
  return self;
}
- (NSArray*) requiredTasksProgressList {
  if (result.mutableRequiredTasksProgressList == nil) { return [NSArray array]; }
  return result.mutableRequiredTasksProgressList;
}
- (MinimumUserQuestTaskProto*) requiredTasksProgressAtIndex:(int32_t) index {
  return [result requiredTasksProgressAtIndex:index];
}
- (FullUserQuestDataLargeProto_Builder*) replaceRequiredTasksProgressAtIndex:(int32_t) index with:(MinimumUserQuestTaskProto*) value {
  [result.mutableRequiredTasksProgressList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) addAllRequiredTasksProgress:(NSArray*) values {
  if (result.mutableRequiredTasksProgressList == nil) {
    result.mutableRequiredTasksProgressList = [NSMutableArray array];
  }
  [result.mutableRequiredTasksProgressList addObjectsFromArray:values];
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearRequiredTasksProgressList {
  result.mutableRequiredTasksProgressList = nil;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) addRequiredTasksProgress:(MinimumUserQuestTaskProto*) value {
  if (result.mutableRequiredTasksProgressList == nil) {
    result.mutableRequiredTasksProgressList = [NSMutableArray array];
  }
  [result.mutableRequiredTasksProgressList addObject:value];
  return self;
}
- (BOOL) hasCoinsRetrievedForReq {
  return result.hasCoinsRetrievedForReq;
}
- (int32_t) coinsRetrievedForReq {
  return result.coinsRetrievedForReq;
}
- (FullUserQuestDataLargeProto_Builder*) setCoinsRetrievedForReq:(int32_t) value {
  result.hasCoinsRetrievedForReq = YES;
  result.coinsRetrievedForReq = value;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearCoinsRetrievedForReq {
  result.hasCoinsRetrievedForReq = NO;
  result.coinsRetrievedForReq = 0;
  return self;
}
- (BOOL) hasNumComponentsComplete {
  return result.hasNumComponentsComplete;
}
- (int32_t) numComponentsComplete {
  return result.numComponentsComplete;
}
- (FullUserQuestDataLargeProto_Builder*) setNumComponentsComplete:(int32_t) value {
  result.hasNumComponentsComplete = YES;
  result.numComponentsComplete = value;
  return self;
}
- (FullUserQuestDataLargeProto_Builder*) clearNumComponentsComplete {
  result.hasNumComponentsComplete = NO;
  result.numComponentsComplete = 0;
  return self;
}
@end

@interface MinimumUserQuestTaskProto ()
@property int32_t userId;
@property int32_t questId;
@property int32_t taskId;
@property int32_t numTimesActed;
@end

@implementation MinimumUserQuestTaskProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value {
  hasQuestId_ = !!value;
}
@synthesize questId;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value {
  hasTaskId_ = !!value;
}
@synthesize taskId;
- (BOOL) hasNumTimesActed {
  return !!hasNumTimesActed_;
}
- (void) setHasNumTimesActed:(BOOL) value {
  hasNumTimesActed_ = !!value;
}
@synthesize numTimesActed;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.questId = 0;
    self.taskId = 0;
    self.numTimesActed = 0;
  }
  return self;
}
static MinimumUserQuestTaskProto* defaultMinimumUserQuestTaskProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserQuestTaskProto class]) {
    defaultMinimumUserQuestTaskProtoInstance = [[MinimumUserQuestTaskProto alloc] init];
  }
}
+ (MinimumUserQuestTaskProto*) defaultInstance {
  return defaultMinimumUserQuestTaskProtoInstance;
}
- (MinimumUserQuestTaskProto*) defaultInstance {
  return defaultMinimumUserQuestTaskProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasQuestId) {
    [output writeInt32:2 value:self.questId];
  }
  if (self.hasTaskId) {
    [output writeInt32:3 value:self.taskId];
  }
  if (self.hasNumTimesActed) {
    [output writeInt32:4 value:self.numTimesActed];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasQuestId) {
    size += computeInt32Size(2, self.questId);
  }
  if (self.hasTaskId) {
    size += computeInt32Size(3, self.taskId);
  }
  if (self.hasNumTimesActed) {
    size += computeInt32Size(4, self.numTimesActed);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MinimumUserQuestTaskProto*) parseFromData:(NSData*) data {
  return (MinimumUserQuestTaskProto*)[[[MinimumUserQuestTaskProto builder] mergeFromData:data] build];
}
+ (MinimumUserQuestTaskProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserQuestTaskProto*)[[[MinimumUserQuestTaskProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserQuestTaskProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserQuestTaskProto*)[[[MinimumUserQuestTaskProto builder] mergeFromInputStream:input] build];
}
+ (MinimumUserQuestTaskProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserQuestTaskProto*)[[[MinimumUserQuestTaskProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserQuestTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserQuestTaskProto*)[[[MinimumUserQuestTaskProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserQuestTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserQuestTaskProto*)[[[MinimumUserQuestTaskProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserQuestTaskProto_Builder*) builder {
  return [[[MinimumUserQuestTaskProto_Builder alloc] init] autorelease];
}
+ (MinimumUserQuestTaskProto_Builder*) builderWithPrototype:(MinimumUserQuestTaskProto*) prototype {
  return [[MinimumUserQuestTaskProto builder] mergeFrom:prototype];
}
- (MinimumUserQuestTaskProto_Builder*) builder {
  return [MinimumUserQuestTaskProto builder];
}
@end

@interface MinimumUserQuestTaskProto_Builder()
@property (retain) MinimumUserQuestTaskProto* result;
@end

@implementation MinimumUserQuestTaskProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MinimumUserQuestTaskProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserQuestTaskProto_Builder*) clear {
  self.result = [[[MinimumUserQuestTaskProto alloc] init] autorelease];
  return self;
}
- (MinimumUserQuestTaskProto_Builder*) clone {
  return [MinimumUserQuestTaskProto builderWithPrototype:result];
}
- (MinimumUserQuestTaskProto*) defaultInstance {
  return [MinimumUserQuestTaskProto defaultInstance];
}
- (MinimumUserQuestTaskProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserQuestTaskProto*) buildPartial {
  MinimumUserQuestTaskProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MinimumUserQuestTaskProto_Builder*) mergeFrom:(MinimumUserQuestTaskProto*) other {
  if (other == [MinimumUserQuestTaskProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasNumTimesActed) {
    [self setNumTimesActed:other.numTimesActed];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserQuestTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserQuestTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 24: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 32: {
        [self setNumTimesActed:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (MinimumUserQuestTaskProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (MinimumUserQuestTaskProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (MinimumUserQuestTaskProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (MinimumUserQuestTaskProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (MinimumUserQuestTaskProto_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (MinimumUserQuestTaskProto_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasNumTimesActed {
  return result.hasNumTimesActed;
}
- (int32_t) numTimesActed {
  return result.numTimesActed;
}
- (MinimumUserQuestTaskProto_Builder*) setNumTimesActed:(int32_t) value {
  result.hasNumTimesActed = YES;
  result.numTimesActed = value;
  return self;
}
- (MinimumUserQuestTaskProto_Builder*) clearNumTimesActed {
  result.hasNumTimesActed = NO;
  result.numTimesActed = 0;
  return self;
}
@end

