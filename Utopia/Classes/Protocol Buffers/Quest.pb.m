// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Quest.pb.h"

@implementation QuestRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [QuestRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ChatRoot registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FullQuestProto ()
@property int32_t questId;
@property int32_t cityId;
@property (retain) NSString* name;
@property (retain) NSString* description;
@property (retain) NSString* doneResponse;
@property (retain) DialogueProto* acceptDialogue;
@property FullQuestProto_QuestType questType;
@property (retain) NSString* jobDescription;
@property int32_t staticDataId;
@property int32_t quantity;
@property int32_t cashReward;
@property int32_t oilReward;
@property int32_t gemReward;
@property int32_t expReward;
@property int32_t monsterIdReward;
@property BOOL isCompleteMonster;
@property (retain) NSMutableArray* mutableQuestsRequiredForThisList;
@property (retain) NSString* questGiverName;
@property (retain) NSString* questGiverImagePrefix;
@property int32_t priority;
@property (retain) NSString* carrotId;
@property BOOL isAchievement;
@property (retain) CoordinateProto* questGiverImgOffset;
@property MonsterProto_MonsterElement monsterElement;
@end

@implementation FullQuestProto

- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value {
  hasQuestId_ = !!value;
}
@synthesize questId;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value {
  hasCityId_ = !!value;
}
@synthesize cityId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasDoneResponse {
  return !!hasDoneResponse_;
}
- (void) setHasDoneResponse:(BOOL) value {
  hasDoneResponse_ = !!value;
}
@synthesize doneResponse;
- (BOOL) hasAcceptDialogue {
  return !!hasAcceptDialogue_;
}
- (void) setHasAcceptDialogue:(BOOL) value {
  hasAcceptDialogue_ = !!value;
}
@synthesize acceptDialogue;
- (BOOL) hasQuestType {
  return !!hasQuestType_;
}
- (void) setHasQuestType:(BOOL) value {
  hasQuestType_ = !!value;
}
@synthesize questType;
- (BOOL) hasJobDescription {
  return !!hasJobDescription_;
}
- (void) setHasJobDescription:(BOOL) value {
  hasJobDescription_ = !!value;
}
@synthesize jobDescription;
- (BOOL) hasStaticDataId {
  return !!hasStaticDataId_;
}
- (void) setHasStaticDataId:(BOOL) value {
  hasStaticDataId_ = !!value;
}
@synthesize staticDataId;
- (BOOL) hasQuantity {
  return !!hasQuantity_;
}
- (void) setHasQuantity:(BOOL) value {
  hasQuantity_ = !!value;
}
@synthesize quantity;
- (BOOL) hasCashReward {
  return !!hasCashReward_;
}
- (void) setHasCashReward:(BOOL) value {
  hasCashReward_ = !!value;
}
@synthesize cashReward;
- (BOOL) hasOilReward {
  return !!hasOilReward_;
}
- (void) setHasOilReward:(BOOL) value {
  hasOilReward_ = !!value;
}
@synthesize oilReward;
- (BOOL) hasGemReward {
  return !!hasGemReward_;
}
- (void) setHasGemReward:(BOOL) value {
  hasGemReward_ = !!value;
}
@synthesize gemReward;
- (BOOL) hasExpReward {
  return !!hasExpReward_;
}
- (void) setHasExpReward:(BOOL) value {
  hasExpReward_ = !!value;
}
@synthesize expReward;
- (BOOL) hasMonsterIdReward {
  return !!hasMonsterIdReward_;
}
- (void) setHasMonsterIdReward:(BOOL) value {
  hasMonsterIdReward_ = !!value;
}
@synthesize monsterIdReward;
- (BOOL) hasIsCompleteMonster {
  return !!hasIsCompleteMonster_;
}
- (void) setHasIsCompleteMonster:(BOOL) value {
  hasIsCompleteMonster_ = !!value;
}
- (BOOL) isCompleteMonster {
  return !!isCompleteMonster_;
}
- (void) setIsCompleteMonster:(BOOL) value {
  isCompleteMonster_ = !!value;
}
@synthesize mutableQuestsRequiredForThisList;
- (BOOL) hasQuestGiverName {
  return !!hasQuestGiverName_;
}
- (void) setHasQuestGiverName:(BOOL) value {
  hasQuestGiverName_ = !!value;
}
@synthesize questGiverName;
- (BOOL) hasQuestGiverImagePrefix {
  return !!hasQuestGiverImagePrefix_;
}
- (void) setHasQuestGiverImagePrefix:(BOOL) value {
  hasQuestGiverImagePrefix_ = !!value;
}
@synthesize questGiverImagePrefix;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) value {
  hasPriority_ = !!value;
}
@synthesize priority;
- (BOOL) hasCarrotId {
  return !!hasCarrotId_;
}
- (void) setHasCarrotId:(BOOL) value {
  hasCarrotId_ = !!value;
}
@synthesize carrotId;
- (BOOL) hasIsAchievement {
  return !!hasIsAchievement_;
}
- (void) setHasIsAchievement:(BOOL) value {
  hasIsAchievement_ = !!value;
}
- (BOOL) isAchievement {
  return !!isAchievement_;
}
- (void) setIsAchievement:(BOOL) value {
  isAchievement_ = !!value;
}
- (BOOL) hasQuestGiverImgOffset {
  return !!hasQuestGiverImgOffset_;
}
- (void) setHasQuestGiverImgOffset:(BOOL) value {
  hasQuestGiverImgOffset_ = !!value;
}
@synthesize questGiverImgOffset;
- (BOOL) hasMonsterElement {
  return !!hasMonsterElement_;
}
- (void) setHasMonsterElement:(BOOL) value {
  hasMonsterElement_ = !!value;
}
@synthesize monsterElement;
- (void) dealloc {
  self.name = nil;
  self.description = nil;
  self.doneResponse = nil;
  self.acceptDialogue = nil;
  self.jobDescription = nil;
  self.mutableQuestsRequiredForThisList = nil;
  self.questGiverName = nil;
  self.questGiverImagePrefix = nil;
  self.carrotId = nil;
  self.questGiverImgOffset = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.questId = 0;
    self.cityId = 0;
    self.name = @"";
    self.description = @"";
    self.doneResponse = @"";
    self.acceptDialogue = [DialogueProto defaultInstance];
    self.questType = FullQuestProto_QuestTypeKillMonster;
    self.jobDescription = @"";
    self.staticDataId = 0;
    self.quantity = 0;
    self.cashReward = 0;
    self.oilReward = 0;
    self.gemReward = 0;
    self.expReward = 0;
    self.monsterIdReward = 0;
    self.isCompleteMonster = NO;
    self.questGiverName = @"";
    self.questGiverImagePrefix = @"";
    self.priority = 0;
    self.carrotId = @"";
    self.isAchievement = NO;
    self.questGiverImgOffset = [CoordinateProto defaultInstance];
    self.monsterElement = MonsterProto_MonsterElementFire;
  }
  return self;
}
static FullQuestProto* defaultFullQuestProtoInstance = nil;
+ (void) initialize {
  if (self == [FullQuestProto class]) {
    defaultFullQuestProtoInstance = [[FullQuestProto alloc] init];
  }
}
+ (FullQuestProto*) defaultInstance {
  return defaultFullQuestProtoInstance;
}
- (FullQuestProto*) defaultInstance {
  return defaultFullQuestProtoInstance;
}
- (NSArray*) questsRequiredForThisList {
  return mutableQuestsRequiredForThisList;
}
- (int32_t) questsRequiredForThisAtIndex:(int32_t) index {
  id value = [mutableQuestsRequiredForThisList objectAtIndex:index];
  return [value intValue];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQuestId) {
    [output writeInt32:1 value:self.questId];
  }
  if (self.hasCityId) {
    [output writeInt32:2 value:self.cityId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasDescription) {
    [output writeString:4 value:self.description];
  }
  if (self.hasDoneResponse) {
    [output writeString:5 value:self.doneResponse];
  }
  if (self.hasAcceptDialogue) {
    [output writeMessage:6 value:self.acceptDialogue];
  }
  if (self.hasQuestType) {
    [output writeEnum:7 value:self.questType];
  }
  if (self.hasJobDescription) {
    [output writeString:8 value:self.jobDescription];
  }
  if (self.hasStaticDataId) {
    [output writeInt32:9 value:self.staticDataId];
  }
  if (self.hasQuantity) {
    [output writeInt32:10 value:self.quantity];
  }
  if (self.hasCashReward) {
    [output writeInt32:11 value:self.cashReward];
  }
  if (self.hasGemReward) {
    [output writeInt32:12 value:self.gemReward];
  }
  if (self.hasExpReward) {
    [output writeInt32:13 value:self.expReward];
  }
  if (self.hasMonsterIdReward) {
    [output writeInt32:14 value:self.monsterIdReward];
  }
  if (self.hasIsCompleteMonster) {
    [output writeBool:15 value:self.isCompleteMonster];
  }
  for (NSNumber* value in self.mutableQuestsRequiredForThisList) {
    [output writeInt32:16 value:[value intValue]];
  }
  if (self.hasQuestGiverImagePrefix) {
    [output writeString:17 value:self.questGiverImagePrefix];
  }
  if (self.hasPriority) {
    [output writeInt32:18 value:self.priority];
  }
  if (self.hasCarrotId) {
    [output writeString:19 value:self.carrotId];
  }
  if (self.hasIsAchievement) {
    [output writeBool:20 value:self.isAchievement];
  }
  if (self.hasQuestGiverImgOffset) {
    [output writeMessage:21 value:self.questGiverImgOffset];
  }
  if (self.hasOilReward) {
    [output writeInt32:22 value:self.oilReward];
  }
  if (self.hasMonsterElement) {
    [output writeEnum:23 value:self.monsterElement];
  }
  if (self.hasQuestGiverName) {
    [output writeString:24 value:self.questGiverName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasQuestId) {
    size += computeInt32Size(1, self.questId);
  }
  if (self.hasCityId) {
    size += computeInt32Size(2, self.cityId);
  }
  if (self.hasName) {
    size += computeStringSize(3, self.name);
  }
  if (self.hasDescription) {
    size += computeStringSize(4, self.description);
  }
  if (self.hasDoneResponse) {
    size += computeStringSize(5, self.doneResponse);
  }
  if (self.hasAcceptDialogue) {
    size += computeMessageSize(6, self.acceptDialogue);
  }
  if (self.hasQuestType) {
    size += computeEnumSize(7, self.questType);
  }
  if (self.hasJobDescription) {
    size += computeStringSize(8, self.jobDescription);
  }
  if (self.hasStaticDataId) {
    size += computeInt32Size(9, self.staticDataId);
  }
  if (self.hasQuantity) {
    size += computeInt32Size(10, self.quantity);
  }
  if (self.hasCashReward) {
    size += computeInt32Size(11, self.cashReward);
  }
  if (self.hasGemReward) {
    size += computeInt32Size(12, self.gemReward);
  }
  if (self.hasExpReward) {
    size += computeInt32Size(13, self.expReward);
  }
  if (self.hasMonsterIdReward) {
    size += computeInt32Size(14, self.monsterIdReward);
  }
  if (self.hasIsCompleteMonster) {
    size += computeBoolSize(15, self.isCompleteMonster);
  }
  {
    int32_t dataSize = 0;
    for (NSNumber* value in self.mutableQuestsRequiredForThisList) {
      dataSize += computeInt32SizeNoTag([value intValue]);
    }
    size += dataSize;
    size += 2 * self.mutableQuestsRequiredForThisList.count;
  }
  if (self.hasQuestGiverImagePrefix) {
    size += computeStringSize(17, self.questGiverImagePrefix);
  }
  if (self.hasPriority) {
    size += computeInt32Size(18, self.priority);
  }
  if (self.hasCarrotId) {
    size += computeStringSize(19, self.carrotId);
  }
  if (self.hasIsAchievement) {
    size += computeBoolSize(20, self.isAchievement);
  }
  if (self.hasQuestGiverImgOffset) {
    size += computeMessageSize(21, self.questGiverImgOffset);
  }
  if (self.hasOilReward) {
    size += computeInt32Size(22, self.oilReward);
  }
  if (self.hasMonsterElement) {
    size += computeEnumSize(23, self.monsterElement);
  }
  if (self.hasQuestGiverName) {
    size += computeStringSize(24, self.questGiverName);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullQuestProto*) parseFromData:(NSData*) data {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromData:data] build];
}
+ (FullQuestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromInputStream:input] build];
}
+ (FullQuestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullQuestProto*)[[[FullQuestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullQuestProto_Builder*) builder {
  return [[[FullQuestProto_Builder alloc] init] autorelease];
}
+ (FullQuestProto_Builder*) builderWithPrototype:(FullQuestProto*) prototype {
  return [[FullQuestProto builder] mergeFrom:prototype];
}
- (FullQuestProto_Builder*) builder {
  return [FullQuestProto builder];
}
@end

BOOL FullQuestProto_QuestTypeIsValidValue(FullQuestProto_QuestType value) {
  switch (value) {
    case FullQuestProto_QuestTypeKillMonster:
    case FullQuestProto_QuestTypeDonateMonster:
    case FullQuestProto_QuestTypeCompleteTask:
    case FullQuestProto_QuestTypeCollectCoinsFromHome:
    case FullQuestProto_QuestTypeBuildStruct:
    case FullQuestProto_QuestTypeUpgradeStruct:
    case FullQuestProto_QuestTypeMonsterAppear:
    case FullQuestProto_QuestTypeCollectSpecialItem:
      return YES;
    default:
      return NO;
  }
}
@interface FullQuestProto_Builder()
@property (retain) FullQuestProto* result;
@end

@implementation FullQuestProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullQuestProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullQuestProto_Builder*) clear {
  self.result = [[[FullQuestProto alloc] init] autorelease];
  return self;
}
- (FullQuestProto_Builder*) clone {
  return [FullQuestProto builderWithPrototype:result];
}
- (FullQuestProto*) defaultInstance {
  return [FullQuestProto defaultInstance];
}
- (FullQuestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullQuestProto*) buildPartial {
  FullQuestProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullQuestProto_Builder*) mergeFrom:(FullQuestProto*) other {
  if (other == [FullQuestProto defaultInstance]) {
    return self;
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasDoneResponse) {
    [self setDoneResponse:other.doneResponse];
  }
  if (other.hasAcceptDialogue) {
    [self mergeAcceptDialogue:other.acceptDialogue];
  }
  if (other.hasQuestType) {
    [self setQuestType:other.questType];
  }
  if (other.hasJobDescription) {
    [self setJobDescription:other.jobDescription];
  }
  if (other.hasStaticDataId) {
    [self setStaticDataId:other.staticDataId];
  }
  if (other.hasQuantity) {
    [self setQuantity:other.quantity];
  }
  if (other.hasCashReward) {
    [self setCashReward:other.cashReward];
  }
  if (other.hasOilReward) {
    [self setOilReward:other.oilReward];
  }
  if (other.hasGemReward) {
    [self setGemReward:other.gemReward];
  }
  if (other.hasExpReward) {
    [self setExpReward:other.expReward];
  }
  if (other.hasMonsterIdReward) {
    [self setMonsterIdReward:other.monsterIdReward];
  }
  if (other.hasIsCompleteMonster) {
    [self setIsCompleteMonster:other.isCompleteMonster];
  }
  if (other.mutableQuestsRequiredForThisList.count > 0) {
    if (result.mutableQuestsRequiredForThisList == nil) {
      result.mutableQuestsRequiredForThisList = [NSMutableArray array];
    }
    [result.mutableQuestsRequiredForThisList addObjectsFromArray:other.mutableQuestsRequiredForThisList];
  }
  if (other.hasQuestGiverName) {
    [self setQuestGiverName:other.questGiverName];
  }
  if (other.hasQuestGiverImagePrefix) {
    [self setQuestGiverImagePrefix:other.questGiverImagePrefix];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  if (other.hasCarrotId) {
    [self setCarrotId:other.carrotId];
  }
  if (other.hasIsAchievement) {
    [self setIsAchievement:other.isAchievement];
  }
  if (other.hasQuestGiverImgOffset) {
    [self mergeQuestGiverImgOffset:other.questGiverImgOffset];
  }
  if (other.hasMonsterElement) {
    [self setMonsterElement:other.monsterElement];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 16: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        [self setDescription:[input readString]];
        break;
      }
      case 42: {
        [self setDoneResponse:[input readString]];
        break;
      }
      case 50: {
        DialogueProto_Builder* subBuilder = [DialogueProto builder];
        if (self.hasAcceptDialogue) {
          [subBuilder mergeFrom:self.acceptDialogue];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAcceptDialogue:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (FullQuestProto_QuestTypeIsValidValue(value)) {
          [self setQuestType:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 66: {
        [self setJobDescription:[input readString]];
        break;
      }
      case 72: {
        [self setStaticDataId:[input readInt32]];
        break;
      }
      case 80: {
        [self setQuantity:[input readInt32]];
        break;
      }
      case 88: {
        [self setCashReward:[input readInt32]];
        break;
      }
      case 96: {
        [self setGemReward:[input readInt32]];
        break;
      }
      case 104: {
        [self setExpReward:[input readInt32]];
        break;
      }
      case 112: {
        [self setMonsterIdReward:[input readInt32]];
        break;
      }
      case 120: {
        [self setIsCompleteMonster:[input readBool]];
        break;
      }
      case 128: {
        [self addQuestsRequiredForThis:[input readInt32]];
        break;
      }
      case 138: {
        [self setQuestGiverImagePrefix:[input readString]];
        break;
      }
      case 144: {
        [self setPriority:[input readInt32]];
        break;
      }
      case 154: {
        [self setCarrotId:[input readString]];
        break;
      }
      case 160: {
        [self setIsAchievement:[input readBool]];
        break;
      }
      case 170: {
        CoordinateProto_Builder* subBuilder = [CoordinateProto builder];
        if (self.hasQuestGiverImgOffset) {
          [subBuilder mergeFrom:self.questGiverImgOffset];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setQuestGiverImgOffset:[subBuilder buildPartial]];
        break;
      }
      case 176: {
        [self setOilReward:[input readInt32]];
        break;
      }
      case 184: {
        int32_t value = [input readEnum];
        if (MonsterProto_MonsterElementIsValidValue(value)) {
          [self setMonsterElement:value];
        } else {
          [unknownFields mergeVarintField:23 value:value];
        }
        break;
      }
      case 194: {
        [self setQuestGiverName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (FullQuestProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (FullQuestProto_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (FullQuestProto_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FullQuestProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FullQuestProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (FullQuestProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (FullQuestProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasDoneResponse {
  return result.hasDoneResponse;
}
- (NSString*) doneResponse {
  return result.doneResponse;
}
- (FullQuestProto_Builder*) setDoneResponse:(NSString*) value {
  result.hasDoneResponse = YES;
  result.doneResponse = value;
  return self;
}
- (FullQuestProto_Builder*) clearDoneResponse {
  result.hasDoneResponse = NO;
  result.doneResponse = @"";
  return self;
}
- (BOOL) hasAcceptDialogue {
  return result.hasAcceptDialogue;
}
- (DialogueProto*) acceptDialogue {
  return result.acceptDialogue;
}
- (FullQuestProto_Builder*) setAcceptDialogue:(DialogueProto*) value {
  result.hasAcceptDialogue = YES;
  result.acceptDialogue = value;
  return self;
}
- (FullQuestProto_Builder*) setAcceptDialogueBuilder:(DialogueProto_Builder*) builderForValue {
  return [self setAcceptDialogue:[builderForValue build]];
}
- (FullQuestProto_Builder*) mergeAcceptDialogue:(DialogueProto*) value {
  if (result.hasAcceptDialogue &&
      result.acceptDialogue != [DialogueProto defaultInstance]) {
    result.acceptDialogue =
      [[[DialogueProto builderWithPrototype:result.acceptDialogue] mergeFrom:value] buildPartial];
  } else {
    result.acceptDialogue = value;
  }
  result.hasAcceptDialogue = YES;
  return self;
}
- (FullQuestProto_Builder*) clearAcceptDialogue {
  result.hasAcceptDialogue = NO;
  result.acceptDialogue = [DialogueProto defaultInstance];
  return self;
}
- (BOOL) hasQuestType {
  return result.hasQuestType;
}
- (FullQuestProto_QuestType) questType {
  return result.questType;
}
- (FullQuestProto_Builder*) setQuestType:(FullQuestProto_QuestType) value {
  result.hasQuestType = YES;
  result.questType = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestType {
  result.hasQuestType = NO;
  result.questType = FullQuestProto_QuestTypeKillMonster;
  return self;
}
- (BOOL) hasJobDescription {
  return result.hasJobDescription;
}
- (NSString*) jobDescription {
  return result.jobDescription;
}
- (FullQuestProto_Builder*) setJobDescription:(NSString*) value {
  result.hasJobDescription = YES;
  result.jobDescription = value;
  return self;
}
- (FullQuestProto_Builder*) clearJobDescription {
  result.hasJobDescription = NO;
  result.jobDescription = @"";
  return self;
}
- (BOOL) hasStaticDataId {
  return result.hasStaticDataId;
}
- (int32_t) staticDataId {
  return result.staticDataId;
}
- (FullQuestProto_Builder*) setStaticDataId:(int32_t) value {
  result.hasStaticDataId = YES;
  result.staticDataId = value;
  return self;
}
- (FullQuestProto_Builder*) clearStaticDataId {
  result.hasStaticDataId = NO;
  result.staticDataId = 0;
  return self;
}
- (BOOL) hasQuantity {
  return result.hasQuantity;
}
- (int32_t) quantity {
  return result.quantity;
}
- (FullQuestProto_Builder*) setQuantity:(int32_t) value {
  result.hasQuantity = YES;
  result.quantity = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuantity {
  result.hasQuantity = NO;
  result.quantity = 0;
  return self;
}
- (BOOL) hasCashReward {
  return result.hasCashReward;
}
- (int32_t) cashReward {
  return result.cashReward;
}
- (FullQuestProto_Builder*) setCashReward:(int32_t) value {
  result.hasCashReward = YES;
  result.cashReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearCashReward {
  result.hasCashReward = NO;
  result.cashReward = 0;
  return self;
}
- (BOOL) hasOilReward {
  return result.hasOilReward;
}
- (int32_t) oilReward {
  return result.oilReward;
}
- (FullQuestProto_Builder*) setOilReward:(int32_t) value {
  result.hasOilReward = YES;
  result.oilReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearOilReward {
  result.hasOilReward = NO;
  result.oilReward = 0;
  return self;
}
- (BOOL) hasGemReward {
  return result.hasGemReward;
}
- (int32_t) gemReward {
  return result.gemReward;
}
- (FullQuestProto_Builder*) setGemReward:(int32_t) value {
  result.hasGemReward = YES;
  result.gemReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearGemReward {
  result.hasGemReward = NO;
  result.gemReward = 0;
  return self;
}
- (BOOL) hasExpReward {
  return result.hasExpReward;
}
- (int32_t) expReward {
  return result.expReward;
}
- (FullQuestProto_Builder*) setExpReward:(int32_t) value {
  result.hasExpReward = YES;
  result.expReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearExpReward {
  result.hasExpReward = NO;
  result.expReward = 0;
  return self;
}
- (BOOL) hasMonsterIdReward {
  return result.hasMonsterIdReward;
}
- (int32_t) monsterIdReward {
  return result.monsterIdReward;
}
- (FullQuestProto_Builder*) setMonsterIdReward:(int32_t) value {
  result.hasMonsterIdReward = YES;
  result.monsterIdReward = value;
  return self;
}
- (FullQuestProto_Builder*) clearMonsterIdReward {
  result.hasMonsterIdReward = NO;
  result.monsterIdReward = 0;
  return self;
}
- (BOOL) hasIsCompleteMonster {
  return result.hasIsCompleteMonster;
}
- (BOOL) isCompleteMonster {
  return result.isCompleteMonster;
}
- (FullQuestProto_Builder*) setIsCompleteMonster:(BOOL) value {
  result.hasIsCompleteMonster = YES;
  result.isCompleteMonster = value;
  return self;
}
- (FullQuestProto_Builder*) clearIsCompleteMonster {
  result.hasIsCompleteMonster = NO;
  result.isCompleteMonster = NO;
  return self;
}
- (NSArray*) questsRequiredForThisList {
  if (result.mutableQuestsRequiredForThisList == nil) {
    return [NSArray array];
  }
  return result.mutableQuestsRequiredForThisList;
}
- (int32_t) questsRequiredForThisAtIndex:(int32_t) index {
  return [result questsRequiredForThisAtIndex:index];
}
- (FullQuestProto_Builder*) replaceQuestsRequiredForThisAtIndex:(int32_t) index with:(int32_t) value {
  [result.mutableQuestsRequiredForThisList replaceObjectAtIndex:index withObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addQuestsRequiredForThis:(int32_t) value {
  if (result.mutableQuestsRequiredForThisList == nil) {
    result.mutableQuestsRequiredForThisList = [NSMutableArray array];
  }
  [result.mutableQuestsRequiredForThisList addObject:[NSNumber numberWithInt:value]];
  return self;
}
- (FullQuestProto_Builder*) addAllQuestsRequiredForThis:(NSArray*) values {
  if (result.mutableQuestsRequiredForThisList == nil) {
    result.mutableQuestsRequiredForThisList = [NSMutableArray array];
  }
  [result.mutableQuestsRequiredForThisList addObjectsFromArray:values];
  return self;
}
- (FullQuestProto_Builder*) clearQuestsRequiredForThisList {
  result.mutableQuestsRequiredForThisList = nil;
  return self;
}
- (BOOL) hasQuestGiverName {
  return result.hasQuestGiverName;
}
- (NSString*) questGiverName {
  return result.questGiverName;
}
- (FullQuestProto_Builder*) setQuestGiverName:(NSString*) value {
  result.hasQuestGiverName = YES;
  result.questGiverName = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverName {
  result.hasQuestGiverName = NO;
  result.questGiverName = @"";
  return self;
}
- (BOOL) hasQuestGiverImagePrefix {
  return result.hasQuestGiverImagePrefix;
}
- (NSString*) questGiverImagePrefix {
  return result.questGiverImagePrefix;
}
- (FullQuestProto_Builder*) setQuestGiverImagePrefix:(NSString*) value {
  result.hasQuestGiverImagePrefix = YES;
  result.questGiverImagePrefix = value;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverImagePrefix {
  result.hasQuestGiverImagePrefix = NO;
  result.questGiverImagePrefix = @"";
  return self;
}
- (BOOL) hasPriority {
  return result.hasPriority;
}
- (int32_t) priority {
  return result.priority;
}
- (FullQuestProto_Builder*) setPriority:(int32_t) value {
  result.hasPriority = YES;
  result.priority = value;
  return self;
}
- (FullQuestProto_Builder*) clearPriority {
  result.hasPriority = NO;
  result.priority = 0;
  return self;
}
- (BOOL) hasCarrotId {
  return result.hasCarrotId;
}
- (NSString*) carrotId {
  return result.carrotId;
}
- (FullQuestProto_Builder*) setCarrotId:(NSString*) value {
  result.hasCarrotId = YES;
  result.carrotId = value;
  return self;
}
- (FullQuestProto_Builder*) clearCarrotId {
  result.hasCarrotId = NO;
  result.carrotId = @"";
  return self;
}
- (BOOL) hasIsAchievement {
  return result.hasIsAchievement;
}
- (BOOL) isAchievement {
  return result.isAchievement;
}
- (FullQuestProto_Builder*) setIsAchievement:(BOOL) value {
  result.hasIsAchievement = YES;
  result.isAchievement = value;
  return self;
}
- (FullQuestProto_Builder*) clearIsAchievement {
  result.hasIsAchievement = NO;
  result.isAchievement = NO;
  return self;
}
- (BOOL) hasQuestGiverImgOffset {
  return result.hasQuestGiverImgOffset;
}
- (CoordinateProto*) questGiverImgOffset {
  return result.questGiverImgOffset;
}
- (FullQuestProto_Builder*) setQuestGiverImgOffset:(CoordinateProto*) value {
  result.hasQuestGiverImgOffset = YES;
  result.questGiverImgOffset = value;
  return self;
}
- (FullQuestProto_Builder*) setQuestGiverImgOffsetBuilder:(CoordinateProto_Builder*) builderForValue {
  return [self setQuestGiverImgOffset:[builderForValue build]];
}
- (FullQuestProto_Builder*) mergeQuestGiverImgOffset:(CoordinateProto*) value {
  if (result.hasQuestGiverImgOffset &&
      result.questGiverImgOffset != [CoordinateProto defaultInstance]) {
    result.questGiverImgOffset =
      [[[CoordinateProto builderWithPrototype:result.questGiverImgOffset] mergeFrom:value] buildPartial];
  } else {
    result.questGiverImgOffset = value;
  }
  result.hasQuestGiverImgOffset = YES;
  return self;
}
- (FullQuestProto_Builder*) clearQuestGiverImgOffset {
  result.hasQuestGiverImgOffset = NO;
  result.questGiverImgOffset = [CoordinateProto defaultInstance];
  return self;
}
- (BOOL) hasMonsterElement {
  return result.hasMonsterElement;
}
- (MonsterProto_MonsterElement) monsterElement {
  return result.monsterElement;
}
- (FullQuestProto_Builder*) setMonsterElement:(MonsterProto_MonsterElement) value {
  result.hasMonsterElement = YES;
  result.monsterElement = value;
  return self;
}
- (FullQuestProto_Builder*) clearMonsterElement {
  result.hasMonsterElement = NO;
  result.monsterElement = MonsterProto_MonsterElementFire;
  return self;
}
@end

@interface DialogueProto ()
@property (retain) NSMutableArray* mutableSpeechSegmentList;
@end

@implementation DialogueProto

@synthesize mutableSpeechSegmentList;
- (void) dealloc {
  self.mutableSpeechSegmentList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static DialogueProto* defaultDialogueProtoInstance = nil;
+ (void) initialize {
  if (self == [DialogueProto class]) {
    defaultDialogueProtoInstance = [[DialogueProto alloc] init];
  }
}
+ (DialogueProto*) defaultInstance {
  return defaultDialogueProtoInstance;
}
- (DialogueProto*) defaultInstance {
  return defaultDialogueProtoInstance;
}
- (NSArray*) speechSegmentList {
  return mutableSpeechSegmentList;
}
- (DialogueProto_SpeechSegmentProto*) speechSegmentAtIndex:(int32_t) index {
  id value = [mutableSpeechSegmentList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (DialogueProto_SpeechSegmentProto* element in self.speechSegmentList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (DialogueProto_SpeechSegmentProto* element in self.speechSegmentList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DialogueProto*) parseFromData:(NSData*) data {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromData:data] build];
}
+ (DialogueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto*) parseFromInputStream:(NSInputStream*) input {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromInputStream:input] build];
}
+ (DialogueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromCodedInputStream:input] build];
}
+ (DialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto*)[[[DialogueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_Builder*) builder {
  return [[[DialogueProto_Builder alloc] init] autorelease];
}
+ (DialogueProto_Builder*) builderWithPrototype:(DialogueProto*) prototype {
  return [[DialogueProto builder] mergeFrom:prototype];
}
- (DialogueProto_Builder*) builder {
  return [DialogueProto builder];
}
@end

@interface DialogueProto_SpeechSegmentProto ()
@property (retain) NSString* speaker;
@property (retain) NSString* speakerImage;
@property (retain) NSString* speakerText;
@property BOOL isLeftSide;
@end

@implementation DialogueProto_SpeechSegmentProto

- (BOOL) hasSpeaker {
  return !!hasSpeaker_;
}
- (void) setHasSpeaker:(BOOL) value {
  hasSpeaker_ = !!value;
}
@synthesize speaker;
- (BOOL) hasSpeakerImage {
  return !!hasSpeakerImage_;
}
- (void) setHasSpeakerImage:(BOOL) value {
  hasSpeakerImage_ = !!value;
}
@synthesize speakerImage;
- (BOOL) hasSpeakerText {
  return !!hasSpeakerText_;
}
- (void) setHasSpeakerText:(BOOL) value {
  hasSpeakerText_ = !!value;
}
@synthesize speakerText;
- (BOOL) hasIsLeftSide {
  return !!hasIsLeftSide_;
}
- (void) setHasIsLeftSide:(BOOL) value {
  hasIsLeftSide_ = !!value;
}
- (BOOL) isLeftSide {
  return !!isLeftSide_;
}
- (void) setIsLeftSide:(BOOL) value {
  isLeftSide_ = !!value;
}
- (void) dealloc {
  self.speaker = nil;
  self.speakerImage = nil;
  self.speakerText = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.speaker = @"";
    self.speakerImage = @"";
    self.speakerText = @"";
    self.isLeftSide = NO;
  }
  return self;
}
static DialogueProto_SpeechSegmentProto* defaultDialogueProto_SpeechSegmentProtoInstance = nil;
+ (void) initialize {
  if (self == [DialogueProto_SpeechSegmentProto class]) {
    defaultDialogueProto_SpeechSegmentProtoInstance = [[DialogueProto_SpeechSegmentProto alloc] init];
  }
}
+ (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return defaultDialogueProto_SpeechSegmentProtoInstance;
}
- (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return defaultDialogueProto_SpeechSegmentProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpeaker) {
    [output writeString:1 value:self.speaker];
  }
  if (self.hasSpeakerImage) {
    [output writeString:2 value:self.speakerImage];
  }
  if (self.hasSpeakerText) {
    [output writeString:3 value:self.speakerText];
  }
  if (self.hasIsLeftSide) {
    [output writeBool:4 value:self.isLeftSide];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSpeaker) {
    size += computeStringSize(1, self.speaker);
  }
  if (self.hasSpeakerImage) {
    size += computeStringSize(2, self.speakerImage);
  }
  if (self.hasSpeakerText) {
    size += computeStringSize(3, self.speakerText);
  }
  if (self.hasIsLeftSide) {
    size += computeBoolSize(4, self.isLeftSide);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (DialogueProto_SpeechSegmentProto*) parseFromData:(NSData*) data {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromData:data] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromInputStream:(NSInputStream*) input {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromInputStream:input] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromCodedInputStream:input] build];
}
+ (DialogueProto_SpeechSegmentProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DialogueProto_SpeechSegmentProto*)[[[DialogueProto_SpeechSegmentProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DialogueProto_SpeechSegmentProto_Builder*) builder {
  return [[[DialogueProto_SpeechSegmentProto_Builder alloc] init] autorelease];
}
+ (DialogueProto_SpeechSegmentProto_Builder*) builderWithPrototype:(DialogueProto_SpeechSegmentProto*) prototype {
  return [[DialogueProto_SpeechSegmentProto builder] mergeFrom:prototype];
}
- (DialogueProto_SpeechSegmentProto_Builder*) builder {
  return [DialogueProto_SpeechSegmentProto builder];
}
@end

@interface DialogueProto_SpeechSegmentProto_Builder()
@property (retain) DialogueProto_SpeechSegmentProto* result;
@end

@implementation DialogueProto_SpeechSegmentProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DialogueProto_SpeechSegmentProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clear {
  self.result = [[[DialogueProto_SpeechSegmentProto alloc] init] autorelease];
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clone {
  return [DialogueProto_SpeechSegmentProto builderWithPrototype:result];
}
- (DialogueProto_SpeechSegmentProto*) defaultInstance {
  return [DialogueProto_SpeechSegmentProto defaultInstance];
}
- (DialogueProto_SpeechSegmentProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DialogueProto_SpeechSegmentProto*) buildPartial {
  DialogueProto_SpeechSegmentProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFrom:(DialogueProto_SpeechSegmentProto*) other {
  if (other == [DialogueProto_SpeechSegmentProto defaultInstance]) {
    return self;
  }
  if (other.hasSpeaker) {
    [self setSpeaker:other.speaker];
  }
  if (other.hasSpeakerImage) {
    [self setSpeakerImage:other.speakerImage];
  }
  if (other.hasSpeakerText) {
    [self setSpeakerText:other.speakerText];
  }
  if (other.hasIsLeftSide) {
    [self setIsLeftSide:other.isLeftSide];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DialogueProto_SpeechSegmentProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSpeaker:[input readString]];
        break;
      }
      case 18: {
        [self setSpeakerImage:[input readString]];
        break;
      }
      case 26: {
        [self setSpeakerText:[input readString]];
        break;
      }
      case 32: {
        [self setIsLeftSide:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasSpeaker {
  return result.hasSpeaker;
}
- (NSString*) speaker {
  return result.speaker;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeaker:(NSString*) value {
  result.hasSpeaker = YES;
  result.speaker = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeaker {
  result.hasSpeaker = NO;
  result.speaker = @"";
  return self;
}
- (BOOL) hasSpeakerImage {
  return result.hasSpeakerImage;
}
- (NSString*) speakerImage {
  return result.speakerImage;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeakerImage:(NSString*) value {
  result.hasSpeakerImage = YES;
  result.speakerImage = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeakerImage {
  result.hasSpeakerImage = NO;
  result.speakerImage = @"";
  return self;
}
- (BOOL) hasSpeakerText {
  return result.hasSpeakerText;
}
- (NSString*) speakerText {
  return result.speakerText;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setSpeakerText:(NSString*) value {
  result.hasSpeakerText = YES;
  result.speakerText = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearSpeakerText {
  result.hasSpeakerText = NO;
  result.speakerText = @"";
  return self;
}
- (BOOL) hasIsLeftSide {
  return result.hasIsLeftSide;
}
- (BOOL) isLeftSide {
  return result.isLeftSide;
}
- (DialogueProto_SpeechSegmentProto_Builder*) setIsLeftSide:(BOOL) value {
  result.hasIsLeftSide = YES;
  result.isLeftSide = value;
  return self;
}
- (DialogueProto_SpeechSegmentProto_Builder*) clearIsLeftSide {
  result.hasIsLeftSide = NO;
  result.isLeftSide = NO;
  return self;
}
@end

@interface DialogueProto_Builder()
@property (retain) DialogueProto* result;
@end

@implementation DialogueProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[DialogueProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (DialogueProto_Builder*) clear {
  self.result = [[[DialogueProto alloc] init] autorelease];
  return self;
}
- (DialogueProto_Builder*) clone {
  return [DialogueProto builderWithPrototype:result];
}
- (DialogueProto*) defaultInstance {
  return [DialogueProto defaultInstance];
}
- (DialogueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DialogueProto*) buildPartial {
  DialogueProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (DialogueProto_Builder*) mergeFrom:(DialogueProto*) other {
  if (other == [DialogueProto defaultInstance]) {
    return self;
  }
  if (other.mutableSpeechSegmentList.count > 0) {
    if (result.mutableSpeechSegmentList == nil) {
      result.mutableSpeechSegmentList = [NSMutableArray array];
    }
    [result.mutableSpeechSegmentList addObjectsFromArray:other.mutableSpeechSegmentList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        DialogueProto_SpeechSegmentProto_Builder* subBuilder = [DialogueProto_SpeechSegmentProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSpeechSegment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) speechSegmentList {
  if (result.mutableSpeechSegmentList == nil) { return [NSArray array]; }
  return result.mutableSpeechSegmentList;
}
- (DialogueProto_SpeechSegmentProto*) speechSegmentAtIndex:(int32_t) index {
  return [result speechSegmentAtIndex:index];
}
- (DialogueProto_Builder*) replaceSpeechSegmentAtIndex:(int32_t) index with:(DialogueProto_SpeechSegmentProto*) value {
  [result.mutableSpeechSegmentList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (DialogueProto_Builder*) addAllSpeechSegment:(NSArray*) values {
  if (result.mutableSpeechSegmentList == nil) {
    result.mutableSpeechSegmentList = [NSMutableArray array];
  }
  [result.mutableSpeechSegmentList addObjectsFromArray:values];
  return self;
}
- (DialogueProto_Builder*) clearSpeechSegmentList {
  result.mutableSpeechSegmentList = nil;
  return self;
}
- (DialogueProto_Builder*) addSpeechSegment:(DialogueProto_SpeechSegmentProto*) value {
  if (result.mutableSpeechSegmentList == nil) {
    result.mutableSpeechSegmentList = [NSMutableArray array];
  }
  [result.mutableSpeechSegmentList addObject:value];
  return self;
}
@end

@interface FullUserQuestProto ()
@property int32_t userId;
@property int32_t questId;
@property BOOL isRedeemed;
@property BOOL isComplete;
@property int32_t progress;
@end

@implementation FullUserQuestProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasQuestId {
  return !!hasQuestId_;
}
- (void) setHasQuestId:(BOOL) value {
  hasQuestId_ = !!value;
}
@synthesize questId;
- (BOOL) hasIsRedeemed {
  return !!hasIsRedeemed_;
}
- (void) setHasIsRedeemed:(BOOL) value {
  hasIsRedeemed_ = !!value;
}
- (BOOL) isRedeemed {
  return !!isRedeemed_;
}
- (void) setIsRedeemed:(BOOL) value {
  isRedeemed_ = !!value;
}
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value {
  hasIsComplete_ = !!value;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value {
  isComplete_ = !!value;
}
- (BOOL) hasProgress {
  return !!hasProgress_;
}
- (void) setHasProgress:(BOOL) value {
  hasProgress_ = !!value;
}
@synthesize progress;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.questId = 0;
    self.isRedeemed = NO;
    self.isComplete = NO;
    self.progress = 0;
  }
  return self;
}
static FullUserQuestProto* defaultFullUserQuestProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserQuestProto class]) {
    defaultFullUserQuestProtoInstance = [[FullUserQuestProto alloc] init];
  }
}
+ (FullUserQuestProto*) defaultInstance {
  return defaultFullUserQuestProtoInstance;
}
- (FullUserQuestProto*) defaultInstance {
  return defaultFullUserQuestProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasQuestId) {
    [output writeInt32:2 value:self.questId];
  }
  if (self.hasIsRedeemed) {
    [output writeBool:3 value:self.isRedeemed];
  }
  if (self.hasIsComplete) {
    [output writeBool:4 value:self.isComplete];
  }
  if (self.hasProgress) {
    [output writeInt32:5 value:self.progress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasQuestId) {
    size += computeInt32Size(2, self.questId);
  }
  if (self.hasIsRedeemed) {
    size += computeBoolSize(3, self.isRedeemed);
  }
  if (self.hasIsComplete) {
    size += computeBoolSize(4, self.isComplete);
  }
  if (self.hasProgress) {
    size += computeInt32Size(5, self.progress);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullUserQuestProto*) parseFromData:(NSData*) data {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromData:data] build];
}
+ (FullUserQuestProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromInputStream:input] build];
}
+ (FullUserQuestProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserQuestProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserQuestProto*)[[[FullUserQuestProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserQuestProto_Builder*) builder {
  return [[[FullUserQuestProto_Builder alloc] init] autorelease];
}
+ (FullUserQuestProto_Builder*) builderWithPrototype:(FullUserQuestProto*) prototype {
  return [[FullUserQuestProto builder] mergeFrom:prototype];
}
- (FullUserQuestProto_Builder*) builder {
  return [FullUserQuestProto builder];
}
@end

@interface FullUserQuestProto_Builder()
@property (retain) FullUserQuestProto* result;
@end

@implementation FullUserQuestProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullUserQuestProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserQuestProto_Builder*) clear {
  self.result = [[[FullUserQuestProto alloc] init] autorelease];
  return self;
}
- (FullUserQuestProto_Builder*) clone {
  return [FullUserQuestProto builderWithPrototype:result];
}
- (FullUserQuestProto*) defaultInstance {
  return [FullUserQuestProto defaultInstance];
}
- (FullUserQuestProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserQuestProto*) buildPartial {
  FullUserQuestProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullUserQuestProto_Builder*) mergeFrom:(FullUserQuestProto*) other {
  if (other == [FullUserQuestProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasQuestId) {
    [self setQuestId:other.questId];
  }
  if (other.hasIsRedeemed) {
    [self setIsRedeemed:other.isRedeemed];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.hasProgress) {
    [self setProgress:other.progress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserQuestProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setQuestId:[input readInt32]];
        break;
      }
      case 24: {
        [self setIsRedeemed:[input readBool]];
        break;
      }
      case 32: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 40: {
        [self setProgress:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (FullUserQuestProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasQuestId {
  return result.hasQuestId;
}
- (int32_t) questId {
  return result.questId;
}
- (FullUserQuestProto_Builder*) setQuestId:(int32_t) value {
  result.hasQuestId = YES;
  result.questId = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearQuestId {
  result.hasQuestId = NO;
  result.questId = 0;
  return self;
}
- (BOOL) hasIsRedeemed {
  return result.hasIsRedeemed;
}
- (BOOL) isRedeemed {
  return result.isRedeemed;
}
- (FullUserQuestProto_Builder*) setIsRedeemed:(BOOL) value {
  result.hasIsRedeemed = YES;
  result.isRedeemed = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearIsRedeemed {
  result.hasIsRedeemed = NO;
  result.isRedeemed = NO;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (FullUserQuestProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (BOOL) hasProgress {
  return result.hasProgress;
}
- (int32_t) progress {
  return result.progress;
}
- (FullUserQuestProto_Builder*) setProgress:(int32_t) value {
  result.hasProgress = YES;
  result.progress = value;
  return self;
}
- (FullUserQuestProto_Builder*) clearProgress {
  result.hasProgress = NO;
  result.progress = 0;
  return self;
}
@end

@interface ItemProto ()
@property int32_t itemId;
@property (retain) NSString* name;
@property (retain) NSString* imgName;
@property (retain) NSString* borderImgName;
@property (retain) ColorProto* color;
@end

@implementation ItemProto

- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value {
  hasItemId_ = !!value;
}
@synthesize itemId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasImgName {
  return !!hasImgName_;
}
- (void) setHasImgName:(BOOL) value {
  hasImgName_ = !!value;
}
@synthesize imgName;
- (BOOL) hasBorderImgName {
  return !!hasBorderImgName_;
}
- (void) setHasBorderImgName:(BOOL) value {
  hasBorderImgName_ = !!value;
}
@synthesize borderImgName;
- (BOOL) hasColor {
  return !!hasColor_;
}
- (void) setHasColor:(BOOL) value {
  hasColor_ = !!value;
}
@synthesize color;
- (void) dealloc {
  self.name = nil;
  self.imgName = nil;
  self.borderImgName = nil;
  self.color = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.itemId = 0;
    self.name = @"";
    self.imgName = @"";
    self.borderImgName = @"";
    self.color = [ColorProto defaultInstance];
  }
  return self;
}
static ItemProto* defaultItemProtoInstance = nil;
+ (void) initialize {
  if (self == [ItemProto class]) {
    defaultItemProtoInstance = [[ItemProto alloc] init];
  }
}
+ (ItemProto*) defaultInstance {
  return defaultItemProtoInstance;
}
- (ItemProto*) defaultInstance {
  return defaultItemProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasItemId) {
    [output writeInt32:1 value:self.itemId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasImgName) {
    [output writeString:3 value:self.imgName];
  }
  if (self.hasBorderImgName) {
    [output writeString:4 value:self.borderImgName];
  }
  if (self.hasColor) {
    [output writeMessage:5 value:self.color];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasItemId) {
    size += computeInt32Size(1, self.itemId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasImgName) {
    size += computeStringSize(3, self.imgName);
  }
  if (self.hasBorderImgName) {
    size += computeStringSize(4, self.borderImgName);
  }
  if (self.hasColor) {
    size += computeMessageSize(5, self.color);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (ItemProto*) parseFromData:(NSData*) data {
  return (ItemProto*)[[[ItemProto builder] mergeFromData:data] build];
}
+ (ItemProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ItemProto*)[[[ItemProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ItemProto*) parseFromInputStream:(NSInputStream*) input {
  return (ItemProto*)[[[ItemProto builder] mergeFromInputStream:input] build];
}
+ (ItemProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ItemProto*)[[[ItemProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ItemProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ItemProto*)[[[ItemProto builder] mergeFromCodedInputStream:input] build];
}
+ (ItemProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ItemProto*)[[[ItemProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ItemProto_Builder*) builder {
  return [[[ItemProto_Builder alloc] init] autorelease];
}
+ (ItemProto_Builder*) builderWithPrototype:(ItemProto*) prototype {
  return [[ItemProto builder] mergeFrom:prototype];
}
- (ItemProto_Builder*) builder {
  return [ItemProto builder];
}
@end

@interface ItemProto_Builder()
@property (retain) ItemProto* result;
@end

@implementation ItemProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[ItemProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ItemProto_Builder*) clear {
  self.result = [[[ItemProto alloc] init] autorelease];
  return self;
}
- (ItemProto_Builder*) clone {
  return [ItemProto builderWithPrototype:result];
}
- (ItemProto*) defaultInstance {
  return [ItemProto defaultInstance];
}
- (ItemProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ItemProto*) buildPartial {
  ItemProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (ItemProto_Builder*) mergeFrom:(ItemProto*) other {
  if (other == [ItemProto defaultInstance]) {
    return self;
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasImgName) {
    [self setImgName:other.imgName];
  }
  if (other.hasBorderImgName) {
    [self setBorderImgName:other.borderImgName];
  }
  if (other.hasColor) {
    [self mergeColor:other.color];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ItemProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ItemProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setImgName:[input readString]];
        break;
      }
      case 34: {
        [self setBorderImgName:[input readString]];
        break;
      }
      case 42: {
        ColorProto_Builder* subBuilder = [ColorProto builder];
        if (self.hasColor) {
          [subBuilder mergeFrom:self.color];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setColor:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (ItemProto_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (ItemProto_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (ItemProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (ItemProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasImgName {
  return result.hasImgName;
}
- (NSString*) imgName {
  return result.imgName;
}
- (ItemProto_Builder*) setImgName:(NSString*) value {
  result.hasImgName = YES;
  result.imgName = value;
  return self;
}
- (ItemProto_Builder*) clearImgName {
  result.hasImgName = NO;
  result.imgName = @"";
  return self;
}
- (BOOL) hasBorderImgName {
  return result.hasBorderImgName;
}
- (NSString*) borderImgName {
  return result.borderImgName;
}
- (ItemProto_Builder*) setBorderImgName:(NSString*) value {
  result.hasBorderImgName = YES;
  result.borderImgName = value;
  return self;
}
- (ItemProto_Builder*) clearBorderImgName {
  result.hasBorderImgName = NO;
  result.borderImgName = @"";
  return self;
}
- (BOOL) hasColor {
  return result.hasColor;
}
- (ColorProto*) color {
  return result.color;
}
- (ItemProto_Builder*) setColor:(ColorProto*) value {
  result.hasColor = YES;
  result.color = value;
  return self;
}
- (ItemProto_Builder*) setColorBuilder:(ColorProto_Builder*) builderForValue {
  return [self setColor:[builderForValue build]];
}
- (ItemProto_Builder*) mergeColor:(ColorProto*) value {
  if (result.hasColor &&
      result.color != [ColorProto defaultInstance]) {
    result.color =
      [[[ColorProto builderWithPrototype:result.color] mergeFrom:value] buildPartial];
  } else {
    result.color = value;
  }
  result.hasColor = YES;
  return self;
}
- (ItemProto_Builder*) clearColor {
  result.hasColor = NO;
  result.color = [ColorProto defaultInstance];
  return self;
}
@end

