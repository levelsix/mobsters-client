// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Task.pb.h"
// @@protoc_insertion_point(imports)

@implementation TaskRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TaskRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [SharedEnumConfigRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TaskStageProto ()
@property int32_t stageId;
@property (strong) NSMutableArray * mutableStageMonstersList;
@end

@implementation TaskStageProto

- (BOOL) hasStageId {
  return !!hasStageId_;
}
- (void) setHasStageId:(BOOL) value_ {
  hasStageId_ = !!value_;
}
@synthesize stageId;
@synthesize mutableStageMonstersList;
@dynamic stageMonstersList;
- (id) init {
  if ((self = [super init])) {
    self.stageId = 0;
  }
  return self;
}
static TaskStageProto* defaultTaskStageProtoInstance = nil;
+ (void) initialize {
  if (self == [TaskStageProto class]) {
    defaultTaskStageProtoInstance = [[TaskStageProto alloc] init];
  }
}
+ (TaskStageProto*) defaultInstance {
  return defaultTaskStageProtoInstance;
}
- (TaskStageProto*) defaultInstance {
  return defaultTaskStageProtoInstance;
}
- (NSArray *)stageMonstersList {
  return mutableStageMonstersList;
}
- (TaskStageMonsterProto*)stageMonstersAtIndex:(NSUInteger)index {
  return [mutableStageMonstersList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStageId) {
    [output writeInt32:1 value:self.stageId];
  }
  [self.stageMonstersList enumerateObjectsUsingBlock:^(TaskStageMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStageId) {
    size_ += computeInt32Size(1, self.stageId);
  }
  [self.stageMonstersList enumerateObjectsUsingBlock:^(TaskStageMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskStageProto*) parseFromData:(NSData*) data {
  return (TaskStageProto*)[[[TaskStageProto builder] mergeFromData:data] build];
}
+ (TaskStageProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskStageProto*)[[[TaskStageProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskStageProto*) parseFromInputStream:(NSInputStream*) input {
  return (TaskStageProto*)[[[TaskStageProto builder] mergeFromInputStream:input] build];
}
+ (TaskStageProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskStageProto*)[[[TaskStageProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskStageProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskStageProto*)[[[TaskStageProto builder] mergeFromCodedInputStream:input] build];
}
+ (TaskStageProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskStageProto*)[[[TaskStageProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskStageProto_Builder*) builder {
  return [[TaskStageProto_Builder alloc] init];
}
+ (TaskStageProto_Builder*) builderWithPrototype:(TaskStageProto*) prototype {
  return [[TaskStageProto builder] mergeFrom:prototype];
}
- (TaskStageProto_Builder*) builder {
  return [TaskStageProto builder];
}
- (TaskStageProto_Builder*) toBuilder {
  return [TaskStageProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stageId", [NSNumber numberWithInteger:self.stageId]];
  }
  [self.stageMonstersList enumerateObjectsUsingBlock:^(TaskStageMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"stageMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskStageProto class]]) {
    return NO;
  }
  TaskStageProto *otherMessage = other;
  return
      self.hasStageId == otherMessage.hasStageId &&
      (!self.hasStageId || self.stageId == otherMessage.stageId) &&
      [self.stageMonstersList isEqualToArray:otherMessage.stageMonstersList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStageId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stageId] hash];
  }
  [self.stageMonstersList enumerateObjectsUsingBlock:^(TaskStageMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskStageProto_Builder()
@property (strong) TaskStageProto* result;
@end

@implementation TaskStageProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TaskStageProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskStageProto_Builder*) clear {
  self.result = [[TaskStageProto alloc] init];
  return self;
}
- (TaskStageProto_Builder*) clone {
  return [TaskStageProto builderWithPrototype:result];
}
- (TaskStageProto*) defaultInstance {
  return [TaskStageProto defaultInstance];
}
- (TaskStageProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskStageProto*) buildPartial {
  TaskStageProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TaskStageProto_Builder*) mergeFrom:(TaskStageProto*) other {
  if (other == [TaskStageProto defaultInstance]) {
    return self;
  }
  if (other.hasStageId) {
    [self setStageId:other.stageId];
  }
  if (other.mutableStageMonstersList.count > 0) {
    if (result.mutableStageMonstersList == nil) {
      result.mutableStageMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableStageMonstersList];
    } else {
      [result.mutableStageMonstersList addObjectsFromArray:other.mutableStageMonstersList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskStageProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskStageProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStageId:[input readInt32]];
        break;
      }
      case 18: {
        TaskStageMonsterProto_Builder* subBuilder = [TaskStageMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addStageMonsters:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasStageId {
  return result.hasStageId;
}
- (int32_t) stageId {
  return result.stageId;
}
- (TaskStageProto_Builder*) setStageId:(int32_t) value {
  result.hasStageId = YES;
  result.stageId = value;
  return self;
}
- (TaskStageProto_Builder*) clearStageId {
  result.hasStageId = NO;
  result.stageId = 0;
  return self;
}
- (NSMutableArray *)stageMonstersList {
  return result.mutableStageMonstersList;
}
- (TaskStageMonsterProto*)stageMonstersAtIndex:(NSUInteger)index {
  return [result stageMonstersAtIndex:index];
}
- (TaskStageProto_Builder *)addStageMonsters:(TaskStageMonsterProto*)value {
  if (result.mutableStageMonstersList == nil) {
    result.mutableStageMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableStageMonstersList addObject:value];
  return self;
}
- (TaskStageProto_Builder *)addAllStageMonsters:(NSArray *)array {
  if (result.mutableStageMonstersList == nil) {
    result.mutableStageMonstersList = [NSMutableArray array];
  }
  [result.mutableStageMonstersList addObjectsFromArray:array];
  return self;
}
- (TaskStageProto_Builder *)clearStageMonsters {
  result.mutableStageMonstersList = nil;
  return self;
}
@end

@interface FullTaskProto ()
@property int32_t taskId;
@property (strong) NSString* name;
@property (strong) NSString* description;
@property int32_t cityId;
@property int32_t assetNumWithinCity;
@property int32_t prerequisiteTaskId;
@property int32_t prerequisiteQuestId;
@property int32_t boardWidth;
@property int32_t boardHeight;
@property (strong) NSString* groundImgPrefix;
@end

@implementation FullTaskProto

- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (BOOL) hasCityId {
  return !!hasCityId_;
}
- (void) setHasCityId:(BOOL) value_ {
  hasCityId_ = !!value_;
}
@synthesize cityId;
- (BOOL) hasAssetNumWithinCity {
  return !!hasAssetNumWithinCity_;
}
- (void) setHasAssetNumWithinCity:(BOOL) value_ {
  hasAssetNumWithinCity_ = !!value_;
}
@synthesize assetNumWithinCity;
- (BOOL) hasPrerequisiteTaskId {
  return !!hasPrerequisiteTaskId_;
}
- (void) setHasPrerequisiteTaskId:(BOOL) value_ {
  hasPrerequisiteTaskId_ = !!value_;
}
@synthesize prerequisiteTaskId;
- (BOOL) hasPrerequisiteQuestId {
  return !!hasPrerequisiteQuestId_;
}
- (void) setHasPrerequisiteQuestId:(BOOL) value_ {
  hasPrerequisiteQuestId_ = !!value_;
}
@synthesize prerequisiteQuestId;
- (BOOL) hasBoardWidth {
  return !!hasBoardWidth_;
}
- (void) setHasBoardWidth:(BOOL) value_ {
  hasBoardWidth_ = !!value_;
}
@synthesize boardWidth;
- (BOOL) hasBoardHeight {
  return !!hasBoardHeight_;
}
- (void) setHasBoardHeight:(BOOL) value_ {
  hasBoardHeight_ = !!value_;
}
@synthesize boardHeight;
- (BOOL) hasGroundImgPrefix {
  return !!hasGroundImgPrefix_;
}
- (void) setHasGroundImgPrefix:(BOOL) value_ {
  hasGroundImgPrefix_ = !!value_;
}
@synthesize groundImgPrefix;
- (id) init {
  if ((self = [super init])) {
    self.taskId = 0;
    self.name = @"";
    self.description = @"";
    self.cityId = 0;
    self.assetNumWithinCity = 0;
    self.prerequisiteTaskId = 0;
    self.prerequisiteQuestId = 0;
    self.boardWidth = 0;
    self.boardHeight = 0;
    self.groundImgPrefix = @"";
  }
  return self;
}
static FullTaskProto* defaultFullTaskProtoInstance = nil;
+ (void) initialize {
  if (self == [FullTaskProto class]) {
    defaultFullTaskProtoInstance = [[FullTaskProto alloc] init];
  }
}
+ (FullTaskProto*) defaultInstance {
  return defaultFullTaskProtoInstance;
}
- (FullTaskProto*) defaultInstance {
  return defaultFullTaskProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTaskId) {
    [output writeInt32:1 value:self.taskId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDescription) {
    [output writeString:3 value:self.description];
  }
  if (self.hasCityId) {
    [output writeInt32:4 value:self.cityId];
  }
  if (self.hasAssetNumWithinCity) {
    [output writeInt32:5 value:self.assetNumWithinCity];
  }
  if (self.hasPrerequisiteTaskId) {
    [output writeInt32:6 value:self.prerequisiteTaskId];
  }
  if (self.hasPrerequisiteQuestId) {
    [output writeInt32:7 value:self.prerequisiteQuestId];
  }
  if (self.hasBoardWidth) {
    [output writeInt32:8 value:self.boardWidth];
  }
  if (self.hasBoardHeight) {
    [output writeInt32:9 value:self.boardHeight];
  }
  if (self.hasGroundImgPrefix) {
    [output writeString:10 value:self.groundImgPrefix];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTaskId) {
    size_ += computeInt32Size(1, self.taskId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(3, self.description);
  }
  if (self.hasCityId) {
    size_ += computeInt32Size(4, self.cityId);
  }
  if (self.hasAssetNumWithinCity) {
    size_ += computeInt32Size(5, self.assetNumWithinCity);
  }
  if (self.hasPrerequisiteTaskId) {
    size_ += computeInt32Size(6, self.prerequisiteTaskId);
  }
  if (self.hasPrerequisiteQuestId) {
    size_ += computeInt32Size(7, self.prerequisiteQuestId);
  }
  if (self.hasBoardWidth) {
    size_ += computeInt32Size(8, self.boardWidth);
  }
  if (self.hasBoardHeight) {
    size_ += computeInt32Size(9, self.boardHeight);
  }
  if (self.hasGroundImgPrefix) {
    size_ += computeStringSize(10, self.groundImgPrefix);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FullTaskProto*) parseFromData:(NSData*) data {
  return (FullTaskProto*)[[[FullTaskProto builder] mergeFromData:data] build];
}
+ (FullTaskProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullTaskProto*)[[[FullTaskProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullTaskProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullTaskProto*)[[[FullTaskProto builder] mergeFromInputStream:input] build];
}
+ (FullTaskProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullTaskProto*)[[[FullTaskProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullTaskProto*)[[[FullTaskProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullTaskProto*)[[[FullTaskProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullTaskProto_Builder*) builder {
  return [[FullTaskProto_Builder alloc] init];
}
+ (FullTaskProto_Builder*) builderWithPrototype:(FullTaskProto*) prototype {
  return [[FullTaskProto builder] mergeFrom:prototype];
}
- (FullTaskProto_Builder*) builder {
  return [FullTaskProto builder];
}
- (FullTaskProto_Builder*) toBuilder {
  return [FullTaskProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInteger:self.taskId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  if (self.hasCityId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cityId", [NSNumber numberWithInteger:self.cityId]];
  }
  if (self.hasAssetNumWithinCity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"assetNumWithinCity", [NSNumber numberWithInteger:self.assetNumWithinCity]];
  }
  if (self.hasPrerequisiteTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prerequisiteTaskId", [NSNumber numberWithInteger:self.prerequisiteTaskId]];
  }
  if (self.hasPrerequisiteQuestId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prerequisiteQuestId", [NSNumber numberWithInteger:self.prerequisiteQuestId]];
  }
  if (self.hasBoardWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardWidth", [NSNumber numberWithInteger:self.boardWidth]];
  }
  if (self.hasBoardHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardHeight", [NSNumber numberWithInteger:self.boardHeight]];
  }
  if (self.hasGroundImgPrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groundImgPrefix", self.groundImgPrefix];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FullTaskProto class]]) {
    return NO;
  }
  FullTaskProto *otherMessage = other;
  return
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      self.hasCityId == otherMessage.hasCityId &&
      (!self.hasCityId || self.cityId == otherMessage.cityId) &&
      self.hasAssetNumWithinCity == otherMessage.hasAssetNumWithinCity &&
      (!self.hasAssetNumWithinCity || self.assetNumWithinCity == otherMessage.assetNumWithinCity) &&
      self.hasPrerequisiteTaskId == otherMessage.hasPrerequisiteTaskId &&
      (!self.hasPrerequisiteTaskId || self.prerequisiteTaskId == otherMessage.prerequisiteTaskId) &&
      self.hasPrerequisiteQuestId == otherMessage.hasPrerequisiteQuestId &&
      (!self.hasPrerequisiteQuestId || self.prerequisiteQuestId == otherMessage.prerequisiteQuestId) &&
      self.hasBoardWidth == otherMessage.hasBoardWidth &&
      (!self.hasBoardWidth || self.boardWidth == otherMessage.boardWidth) &&
      self.hasBoardHeight == otherMessage.hasBoardHeight &&
      (!self.hasBoardHeight || self.boardHeight == otherMessage.boardHeight) &&
      self.hasGroundImgPrefix == otherMessage.hasGroundImgPrefix &&
      (!self.hasGroundImgPrefix || [self.groundImgPrefix isEqual:otherMessage.groundImgPrefix]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.taskId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  if (self.hasCityId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cityId] hash];
  }
  if (self.hasAssetNumWithinCity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.assetNumWithinCity] hash];
  }
  if (self.hasPrerequisiteTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prerequisiteTaskId] hash];
  }
  if (self.hasPrerequisiteQuestId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prerequisiteQuestId] hash];
  }
  if (self.hasBoardWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.boardWidth] hash];
  }
  if (self.hasBoardHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.boardHeight] hash];
  }
  if (self.hasGroundImgPrefix) {
    hashCode = hashCode * 31 + [self.groundImgPrefix hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FullTaskProto_Builder()
@property (strong) FullTaskProto* result;
@end

@implementation FullTaskProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FullTaskProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullTaskProto_Builder*) clear {
  self.result = [[FullTaskProto alloc] init];
  return self;
}
- (FullTaskProto_Builder*) clone {
  return [FullTaskProto builderWithPrototype:result];
}
- (FullTaskProto*) defaultInstance {
  return [FullTaskProto defaultInstance];
}
- (FullTaskProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullTaskProto*) buildPartial {
  FullTaskProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FullTaskProto_Builder*) mergeFrom:(FullTaskProto*) other {
  if (other == [FullTaskProto defaultInstance]) {
    return self;
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasCityId) {
    [self setCityId:other.cityId];
  }
  if (other.hasAssetNumWithinCity) {
    [self setAssetNumWithinCity:other.assetNumWithinCity];
  }
  if (other.hasPrerequisiteTaskId) {
    [self setPrerequisiteTaskId:other.prerequisiteTaskId];
  }
  if (other.hasPrerequisiteQuestId) {
    [self setPrerequisiteQuestId:other.prerequisiteQuestId];
  }
  if (other.hasBoardWidth) {
    [self setBoardWidth:other.boardWidth];
  }
  if (other.hasBoardHeight) {
    [self setBoardHeight:other.boardHeight];
  }
  if (other.hasGroundImgPrefix) {
    [self setGroundImgPrefix:other.groundImgPrefix];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDescription:[input readString]];
        break;
      }
      case 32: {
        [self setCityId:[input readInt32]];
        break;
      }
      case 40: {
        [self setAssetNumWithinCity:[input readInt32]];
        break;
      }
      case 48: {
        [self setPrerequisiteTaskId:[input readInt32]];
        break;
      }
      case 56: {
        [self setPrerequisiteQuestId:[input readInt32]];
        break;
      }
      case 64: {
        [self setBoardWidth:[input readInt32]];
        break;
      }
      case 72: {
        [self setBoardHeight:[input readInt32]];
        break;
      }
      case 82: {
        [self setGroundImgPrefix:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (FullTaskProto_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (FullTaskProto_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (FullTaskProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (FullTaskProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (FullTaskProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (FullTaskProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasCityId {
  return result.hasCityId;
}
- (int32_t) cityId {
  return result.cityId;
}
- (FullTaskProto_Builder*) setCityId:(int32_t) value {
  result.hasCityId = YES;
  result.cityId = value;
  return self;
}
- (FullTaskProto_Builder*) clearCityId {
  result.hasCityId = NO;
  result.cityId = 0;
  return self;
}
- (BOOL) hasAssetNumWithinCity {
  return result.hasAssetNumWithinCity;
}
- (int32_t) assetNumWithinCity {
  return result.assetNumWithinCity;
}
- (FullTaskProto_Builder*) setAssetNumWithinCity:(int32_t) value {
  result.hasAssetNumWithinCity = YES;
  result.assetNumWithinCity = value;
  return self;
}
- (FullTaskProto_Builder*) clearAssetNumWithinCity {
  result.hasAssetNumWithinCity = NO;
  result.assetNumWithinCity = 0;
  return self;
}
- (BOOL) hasPrerequisiteTaskId {
  return result.hasPrerequisiteTaskId;
}
- (int32_t) prerequisiteTaskId {
  return result.prerequisiteTaskId;
}
- (FullTaskProto_Builder*) setPrerequisiteTaskId:(int32_t) value {
  result.hasPrerequisiteTaskId = YES;
  result.prerequisiteTaskId = value;
  return self;
}
- (FullTaskProto_Builder*) clearPrerequisiteTaskId {
  result.hasPrerequisiteTaskId = NO;
  result.prerequisiteTaskId = 0;
  return self;
}
- (BOOL) hasPrerequisiteQuestId {
  return result.hasPrerequisiteQuestId;
}
- (int32_t) prerequisiteQuestId {
  return result.prerequisiteQuestId;
}
- (FullTaskProto_Builder*) setPrerequisiteQuestId:(int32_t) value {
  result.hasPrerequisiteQuestId = YES;
  result.prerequisiteQuestId = value;
  return self;
}
- (FullTaskProto_Builder*) clearPrerequisiteQuestId {
  result.hasPrerequisiteQuestId = NO;
  result.prerequisiteQuestId = 0;
  return self;
}
- (BOOL) hasBoardWidth {
  return result.hasBoardWidth;
}
- (int32_t) boardWidth {
  return result.boardWidth;
}
- (FullTaskProto_Builder*) setBoardWidth:(int32_t) value {
  result.hasBoardWidth = YES;
  result.boardWidth = value;
  return self;
}
- (FullTaskProto_Builder*) clearBoardWidth {
  result.hasBoardWidth = NO;
  result.boardWidth = 0;
  return self;
}
- (BOOL) hasBoardHeight {
  return result.hasBoardHeight;
}
- (int32_t) boardHeight {
  return result.boardHeight;
}
- (FullTaskProto_Builder*) setBoardHeight:(int32_t) value {
  result.hasBoardHeight = YES;
  result.boardHeight = value;
  return self;
}
- (FullTaskProto_Builder*) clearBoardHeight {
  result.hasBoardHeight = NO;
  result.boardHeight = 0;
  return self;
}
- (BOOL) hasGroundImgPrefix {
  return result.hasGroundImgPrefix;
}
- (NSString*) groundImgPrefix {
  return result.groundImgPrefix;
}
- (FullTaskProto_Builder*) setGroundImgPrefix:(NSString*) value {
  result.hasGroundImgPrefix = YES;
  result.groundImgPrefix = value;
  return self;
}
- (FullTaskProto_Builder*) clearGroundImgPrefix {
  result.hasGroundImgPrefix = NO;
  result.groundImgPrefix = @"";
  return self;
}
@end

@interface MinimumUserTaskProto ()
@property int32_t userId;
@property int32_t taskId;
@property int32_t curTaskStageId;
@property int64_t userTaskId;
@end

@implementation MinimumUserTaskProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasCurTaskStageId {
  return !!hasCurTaskStageId_;
}
- (void) setHasCurTaskStageId:(BOOL) value_ {
  hasCurTaskStageId_ = !!value_;
}
@synthesize curTaskStageId;
- (BOOL) hasUserTaskId {
  return !!hasUserTaskId_;
}
- (void) setHasUserTaskId:(BOOL) value_ {
  hasUserTaskId_ = !!value_;
}
@synthesize userTaskId;
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.taskId = 0;
    self.curTaskStageId = 0;
    self.userTaskId = 0L;
  }
  return self;
}
static MinimumUserTaskProto* defaultMinimumUserTaskProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserTaskProto class]) {
    defaultMinimumUserTaskProtoInstance = [[MinimumUserTaskProto alloc] init];
  }
}
+ (MinimumUserTaskProto*) defaultInstance {
  return defaultMinimumUserTaskProtoInstance;
}
- (MinimumUserTaskProto*) defaultInstance {
  return defaultMinimumUserTaskProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasTaskId) {
    [output writeInt32:2 value:self.taskId];
  }
  if (self.hasCurTaskStageId) {
    [output writeInt32:3 value:self.curTaskStageId];
  }
  if (self.hasUserTaskId) {
    [output writeInt64:4 value:self.userTaskId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeInt32Size(1, self.userId);
  }
  if (self.hasTaskId) {
    size_ += computeInt32Size(2, self.taskId);
  }
  if (self.hasCurTaskStageId) {
    size_ += computeInt32Size(3, self.curTaskStageId);
  }
  if (self.hasUserTaskId) {
    size_ += computeInt64Size(4, self.userTaskId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserTaskProto*) parseFromData:(NSData*) data {
  return (MinimumUserTaskProto*)[[[MinimumUserTaskProto builder] mergeFromData:data] build];
}
+ (MinimumUserTaskProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserTaskProto*)[[[MinimumUserTaskProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserTaskProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserTaskProto*)[[[MinimumUserTaskProto builder] mergeFromInputStream:input] build];
}
+ (MinimumUserTaskProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserTaskProto*)[[[MinimumUserTaskProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserTaskProto*)[[[MinimumUserTaskProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserTaskProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserTaskProto*)[[[MinimumUserTaskProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserTaskProto_Builder*) builder {
  return [[MinimumUserTaskProto_Builder alloc] init];
}
+ (MinimumUserTaskProto_Builder*) builderWithPrototype:(MinimumUserTaskProto*) prototype {
  return [[MinimumUserTaskProto builder] mergeFrom:prototype];
}
- (MinimumUserTaskProto_Builder*) builder {
  return [MinimumUserTaskProto builder];
}
- (MinimumUserTaskProto_Builder*) toBuilder {
  return [MinimumUserTaskProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInteger:self.taskId]];
  }
  if (self.hasCurTaskStageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curTaskStageId", [NSNumber numberWithInteger:self.curTaskStageId]];
  }
  if (self.hasUserTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userTaskId", [NSNumber numberWithLongLong:self.userTaskId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserTaskProto class]]) {
    return NO;
  }
  MinimumUserTaskProto *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasCurTaskStageId == otherMessage.hasCurTaskStageId &&
      (!self.hasCurTaskStageId || self.curTaskStageId == otherMessage.curTaskStageId) &&
      self.hasUserTaskId == otherMessage.hasUserTaskId &&
      (!self.hasUserTaskId || self.userTaskId == otherMessage.userTaskId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.taskId] hash];
  }
  if (self.hasCurTaskStageId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curTaskStageId] hash];
  }
  if (self.hasUserTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.userTaskId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserTaskProto_Builder()
@property (strong) MinimumUserTaskProto* result;
@end

@implementation MinimumUserTaskProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserTaskProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserTaskProto_Builder*) clear {
  self.result = [[MinimumUserTaskProto alloc] init];
  return self;
}
- (MinimumUserTaskProto_Builder*) clone {
  return [MinimumUserTaskProto builderWithPrototype:result];
}
- (MinimumUserTaskProto*) defaultInstance {
  return [MinimumUserTaskProto defaultInstance];
}
- (MinimumUserTaskProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserTaskProto*) buildPartial {
  MinimumUserTaskProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserTaskProto_Builder*) mergeFrom:(MinimumUserTaskProto*) other {
  if (other == [MinimumUserTaskProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasCurTaskStageId) {
    [self setCurTaskStageId:other.curTaskStageId];
  }
  if (other.hasUserTaskId) {
    [self setUserTaskId:other.userTaskId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserTaskProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 24: {
        [self setCurTaskStageId:[input readInt32]];
        break;
      }
      case 32: {
        [self setUserTaskId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (MinimumUserTaskProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (MinimumUserTaskProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (MinimumUserTaskProto_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (MinimumUserTaskProto_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasCurTaskStageId {
  return result.hasCurTaskStageId;
}
- (int32_t) curTaskStageId {
  return result.curTaskStageId;
}
- (MinimumUserTaskProto_Builder*) setCurTaskStageId:(int32_t) value {
  result.hasCurTaskStageId = YES;
  result.curTaskStageId = value;
  return self;
}
- (MinimumUserTaskProto_Builder*) clearCurTaskStageId {
  result.hasCurTaskStageId = NO;
  result.curTaskStageId = 0;
  return self;
}
- (BOOL) hasUserTaskId {
  return result.hasUserTaskId;
}
- (int64_t) userTaskId {
  return result.userTaskId;
}
- (MinimumUserTaskProto_Builder*) setUserTaskId:(int64_t) value {
  result.hasUserTaskId = YES;
  result.userTaskId = value;
  return self;
}
- (MinimumUserTaskProto_Builder*) clearUserTaskId {
  result.hasUserTaskId = NO;
  result.userTaskId = 0L;
  return self;
}
@end

@interface TaskStageMonsterProto ()
@property int64_t tsfuId;
@property int32_t tsmId;
@property int32_t monsterId;
@property TaskStageMonsterProto_MonsterType monsterType;
@property int32_t level;
@property int32_t expReward;
@property int32_t cashReward;
@property int32_t oilReward;
@property BOOL puzzlePieceDropped;
@property int32_t puzzlePieceMonsterId;
@property int32_t itemId;
@property Float32 dmgMultiplier;
@property int32_t defensiveSkillId;
@property int32_t offensiveSkillId;
@property int32_t puzzlePieceMonsterDropLvl;
@end

@implementation TaskStageMonsterProto

- (BOOL) hasTsfuId {
  return !!hasTsfuId_;
}
- (void) setHasTsfuId:(BOOL) value_ {
  hasTsfuId_ = !!value_;
}
@synthesize tsfuId;
- (BOOL) hasTsmId {
  return !!hasTsmId_;
}
- (void) setHasTsmId:(BOOL) value_ {
  hasTsmId_ = !!value_;
}
@synthesize tsmId;
- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasMonsterType {
  return !!hasMonsterType_;
}
- (void) setHasMonsterType:(BOOL) value_ {
  hasMonsterType_ = !!value_;
}
@synthesize monsterType;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasExpReward {
  return !!hasExpReward_;
}
- (void) setHasExpReward:(BOOL) value_ {
  hasExpReward_ = !!value_;
}
@synthesize expReward;
- (BOOL) hasCashReward {
  return !!hasCashReward_;
}
- (void) setHasCashReward:(BOOL) value_ {
  hasCashReward_ = !!value_;
}
@synthesize cashReward;
- (BOOL) hasOilReward {
  return !!hasOilReward_;
}
- (void) setHasOilReward:(BOOL) value_ {
  hasOilReward_ = !!value_;
}
@synthesize oilReward;
- (BOOL) hasPuzzlePieceDropped {
  return !!hasPuzzlePieceDropped_;
}
- (void) setHasPuzzlePieceDropped:(BOOL) value_ {
  hasPuzzlePieceDropped_ = !!value_;
}
- (BOOL) puzzlePieceDropped {
  return !!puzzlePieceDropped_;
}
- (void) setPuzzlePieceDropped:(BOOL) value_ {
  puzzlePieceDropped_ = !!value_;
}
- (BOOL) hasPuzzlePieceMonsterId {
  return !!hasPuzzlePieceMonsterId_;
}
- (void) setHasPuzzlePieceMonsterId:(BOOL) value_ {
  hasPuzzlePieceMonsterId_ = !!value_;
}
@synthesize puzzlePieceMonsterId;
- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value_ {
  hasItemId_ = !!value_;
}
@synthesize itemId;
- (BOOL) hasDmgMultiplier {
  return !!hasDmgMultiplier_;
}
- (void) setHasDmgMultiplier:(BOOL) value_ {
  hasDmgMultiplier_ = !!value_;
}
@synthesize dmgMultiplier;
- (BOOL) hasDefensiveSkillId {
  return !!hasDefensiveSkillId_;
}
- (void) setHasDefensiveSkillId:(BOOL) value_ {
  hasDefensiveSkillId_ = !!value_;
}
@synthesize defensiveSkillId;
- (BOOL) hasOffensiveSkillId {
  return !!hasOffensiveSkillId_;
}
- (void) setHasOffensiveSkillId:(BOOL) value_ {
  hasOffensiveSkillId_ = !!value_;
}
@synthesize offensiveSkillId;
- (BOOL) hasPuzzlePieceMonsterDropLvl {
  return !!hasPuzzlePieceMonsterDropLvl_;
}
- (void) setHasPuzzlePieceMonsterDropLvl:(BOOL) value_ {
  hasPuzzlePieceMonsterDropLvl_ = !!value_;
}
@synthesize puzzlePieceMonsterDropLvl;
- (id) init {
  if ((self = [super init])) {
    self.tsfuId = 0L;
    self.tsmId = 0;
    self.monsterId = 0;
    self.monsterType = TaskStageMonsterProto_MonsterTypeRegular;
    self.level = 0;
    self.expReward = 0;
    self.cashReward = 0;
    self.oilReward = 0;
    self.puzzlePieceDropped = NO;
    self.puzzlePieceMonsterId = 0;
    self.itemId = 0;
    self.dmgMultiplier = 0;
    self.defensiveSkillId = 0;
    self.offensiveSkillId = 0;
    self.puzzlePieceMonsterDropLvl = 0;
  }
  return self;
}
static TaskStageMonsterProto* defaultTaskStageMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [TaskStageMonsterProto class]) {
    defaultTaskStageMonsterProtoInstance = [[TaskStageMonsterProto alloc] init];
  }
}
+ (TaskStageMonsterProto*) defaultInstance {
  return defaultTaskStageMonsterProtoInstance;
}
- (TaskStageMonsterProto*) defaultInstance {
  return defaultTaskStageMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasMonsterType) {
    [output writeEnum:2 value:self.monsterType];
  }
  if (self.hasExpReward) {
    [output writeInt32:3 value:self.expReward];
  }
  if (self.hasCashReward) {
    [output writeInt32:4 value:self.cashReward];
  }
  if (self.hasPuzzlePieceDropped) {
    [output writeBool:5 value:self.puzzlePieceDropped];
  }
  if (self.hasLevel) {
    [output writeInt32:6 value:self.level];
  }
  if (self.hasItemId) {
    [output writeInt32:7 value:self.itemId];
  }
  if (self.hasOilReward) {
    [output writeInt32:8 value:self.oilReward];
  }
  if (self.hasDmgMultiplier) {
    [output writeFloat:9 value:self.dmgMultiplier];
  }
  if (self.hasPuzzlePieceMonsterId) {
    [output writeInt32:10 value:self.puzzlePieceMonsterId];
  }
  if (self.hasTsmId) {
    [output writeInt32:11 value:self.tsmId];
  }
  if (self.hasDefensiveSkillId) {
    [output writeInt32:12 value:self.defensiveSkillId];
  }
  if (self.hasPuzzlePieceMonsterDropLvl) {
    [output writeInt32:13 value:self.puzzlePieceMonsterDropLvl];
  }
  if (self.hasOffensiveSkillId) {
    [output writeInt32:14 value:self.offensiveSkillId];
  }
  if (self.hasTsfuId) {
    [output writeInt64:15 value:self.tsfuId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMonsterId) {
    size_ += computeInt32Size(1, self.monsterId);
  }
  if (self.hasMonsterType) {
    size_ += computeEnumSize(2, self.monsterType);
  }
  if (self.hasExpReward) {
    size_ += computeInt32Size(3, self.expReward);
  }
  if (self.hasCashReward) {
    size_ += computeInt32Size(4, self.cashReward);
  }
  if (self.hasPuzzlePieceDropped) {
    size_ += computeBoolSize(5, self.puzzlePieceDropped);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(6, self.level);
  }
  if (self.hasItemId) {
    size_ += computeInt32Size(7, self.itemId);
  }
  if (self.hasOilReward) {
    size_ += computeInt32Size(8, self.oilReward);
  }
  if (self.hasDmgMultiplier) {
    size_ += computeFloatSize(9, self.dmgMultiplier);
  }
  if (self.hasPuzzlePieceMonsterId) {
    size_ += computeInt32Size(10, self.puzzlePieceMonsterId);
  }
  if (self.hasTsmId) {
    size_ += computeInt32Size(11, self.tsmId);
  }
  if (self.hasDefensiveSkillId) {
    size_ += computeInt32Size(12, self.defensiveSkillId);
  }
  if (self.hasPuzzlePieceMonsterDropLvl) {
    size_ += computeInt32Size(13, self.puzzlePieceMonsterDropLvl);
  }
  if (self.hasOffensiveSkillId) {
    size_ += computeInt32Size(14, self.offensiveSkillId);
  }
  if (self.hasTsfuId) {
    size_ += computeInt64Size(15, self.tsfuId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskStageMonsterProto*) parseFromData:(NSData*) data {
  return (TaskStageMonsterProto*)[[[TaskStageMonsterProto builder] mergeFromData:data] build];
}
+ (TaskStageMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskStageMonsterProto*)[[[TaskStageMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskStageMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (TaskStageMonsterProto*)[[[TaskStageMonsterProto builder] mergeFromInputStream:input] build];
}
+ (TaskStageMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskStageMonsterProto*)[[[TaskStageMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskStageMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskStageMonsterProto*)[[[TaskStageMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (TaskStageMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskStageMonsterProto*)[[[TaskStageMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskStageMonsterProto_Builder*) builder {
  return [[TaskStageMonsterProto_Builder alloc] init];
}
+ (TaskStageMonsterProto_Builder*) builderWithPrototype:(TaskStageMonsterProto*) prototype {
  return [[TaskStageMonsterProto builder] mergeFrom:prototype];
}
- (TaskStageMonsterProto_Builder*) builder {
  return [TaskStageMonsterProto builder];
}
- (TaskStageMonsterProto_Builder*) toBuilder {
  return [TaskStageMonsterProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasMonsterType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"monsterType", self.monsterType];
  }
  if (self.hasExpReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expReward", [NSNumber numberWithInteger:self.expReward]];
  }
  if (self.hasCashReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashReward", [NSNumber numberWithInteger:self.cashReward]];
  }
  if (self.hasPuzzlePieceDropped) {
    [output appendFormat:@"%@%@: %@\n", indent, @"puzzlePieceDropped", [NSNumber numberWithBool:self.puzzlePieceDropped]];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInteger:self.itemId]];
  }
  if (self.hasOilReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oilReward", [NSNumber numberWithInteger:self.oilReward]];
  }
  if (self.hasDmgMultiplier) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dmgMultiplier", [NSNumber numberWithFloat:self.dmgMultiplier]];
  }
  if (self.hasPuzzlePieceMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"puzzlePieceMonsterId", [NSNumber numberWithInteger:self.puzzlePieceMonsterId]];
  }
  if (self.hasTsmId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tsmId", [NSNumber numberWithInteger:self.tsmId]];
  }
  if (self.hasDefensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defensiveSkillId", [NSNumber numberWithInteger:self.defensiveSkillId]];
  }
  if (self.hasPuzzlePieceMonsterDropLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"puzzlePieceMonsterDropLvl", [NSNumber numberWithInteger:self.puzzlePieceMonsterDropLvl]];
  }
  if (self.hasOffensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offensiveSkillId", [NSNumber numberWithInteger:self.offensiveSkillId]];
  }
  if (self.hasTsfuId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tsfuId", [NSNumber numberWithLongLong:self.tsfuId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskStageMonsterProto class]]) {
    return NO;
  }
  TaskStageMonsterProto *otherMessage = other;
  return
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasMonsterType == otherMessage.hasMonsterType &&
      (!self.hasMonsterType || self.monsterType == otherMessage.monsterType) &&
      self.hasExpReward == otherMessage.hasExpReward &&
      (!self.hasExpReward || self.expReward == otherMessage.expReward) &&
      self.hasCashReward == otherMessage.hasCashReward &&
      (!self.hasCashReward || self.cashReward == otherMessage.cashReward) &&
      self.hasPuzzlePieceDropped == otherMessage.hasPuzzlePieceDropped &&
      (!self.hasPuzzlePieceDropped || self.puzzlePieceDropped == otherMessage.puzzlePieceDropped) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasOilReward == otherMessage.hasOilReward &&
      (!self.hasOilReward || self.oilReward == otherMessage.oilReward) &&
      self.hasDmgMultiplier == otherMessage.hasDmgMultiplier &&
      (!self.hasDmgMultiplier || self.dmgMultiplier == otherMessage.dmgMultiplier) &&
      self.hasPuzzlePieceMonsterId == otherMessage.hasPuzzlePieceMonsterId &&
      (!self.hasPuzzlePieceMonsterId || self.puzzlePieceMonsterId == otherMessage.puzzlePieceMonsterId) &&
      self.hasTsmId == otherMessage.hasTsmId &&
      (!self.hasTsmId || self.tsmId == otherMessage.tsmId) &&
      self.hasDefensiveSkillId == otherMessage.hasDefensiveSkillId &&
      (!self.hasDefensiveSkillId || self.defensiveSkillId == otherMessage.defensiveSkillId) &&
      self.hasPuzzlePieceMonsterDropLvl == otherMessage.hasPuzzlePieceMonsterDropLvl &&
      (!self.hasPuzzlePieceMonsterDropLvl || self.puzzlePieceMonsterDropLvl == otherMessage.puzzlePieceMonsterDropLvl) &&
      self.hasOffensiveSkillId == otherMessage.hasOffensiveSkillId &&
      (!self.hasOffensiveSkillId || self.offensiveSkillId == otherMessage.offensiveSkillId) &&
      self.hasTsfuId == otherMessage.hasTsfuId &&
      (!self.hasTsfuId || self.tsfuId == otherMessage.tsfuId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasMonsterType) {
    hashCode = hashCode * 31 + self.monsterType;
  }
  if (self.hasExpReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expReward] hash];
  }
  if (self.hasCashReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashReward] hash];
  }
  if (self.hasPuzzlePieceDropped) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.puzzlePieceDropped] hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemId] hash];
  }
  if (self.hasOilReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oilReward] hash];
  }
  if (self.hasDmgMultiplier) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.dmgMultiplier] hash];
  }
  if (self.hasPuzzlePieceMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.puzzlePieceMonsterId] hash];
  }
  if (self.hasTsmId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tsmId] hash];
  }
  if (self.hasDefensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defensiveSkillId] hash];
  }
  if (self.hasPuzzlePieceMonsterDropLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.puzzlePieceMonsterDropLvl] hash];
  }
  if (self.hasOffensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offensiveSkillId] hash];
  }
  if (self.hasTsfuId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tsfuId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL TaskStageMonsterProto_MonsterTypeIsValidValue(TaskStageMonsterProto_MonsterType value) {
  switch (value) {
    case TaskStageMonsterProto_MonsterTypeRegular:
    case TaskStageMonsterProto_MonsterTypeMiniBoss:
    case TaskStageMonsterProto_MonsterTypeBoss:
      return YES;
    default:
      return NO;
  }
}
@interface TaskStageMonsterProto_Builder()
@property (strong) TaskStageMonsterProto* result;
@end

@implementation TaskStageMonsterProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TaskStageMonsterProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskStageMonsterProto_Builder*) clear {
  self.result = [[TaskStageMonsterProto alloc] init];
  return self;
}
- (TaskStageMonsterProto_Builder*) clone {
  return [TaskStageMonsterProto builderWithPrototype:result];
}
- (TaskStageMonsterProto*) defaultInstance {
  return [TaskStageMonsterProto defaultInstance];
}
- (TaskStageMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskStageMonsterProto*) buildPartial {
  TaskStageMonsterProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TaskStageMonsterProto_Builder*) mergeFrom:(TaskStageMonsterProto*) other {
  if (other == [TaskStageMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasTsfuId) {
    [self setTsfuId:other.tsfuId];
  }
  if (other.hasTsmId) {
    [self setTsmId:other.tsmId];
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasMonsterType) {
    [self setMonsterType:other.monsterType];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasExpReward) {
    [self setExpReward:other.expReward];
  }
  if (other.hasCashReward) {
    [self setCashReward:other.cashReward];
  }
  if (other.hasOilReward) {
    [self setOilReward:other.oilReward];
  }
  if (other.hasPuzzlePieceDropped) {
    [self setPuzzlePieceDropped:other.puzzlePieceDropped];
  }
  if (other.hasPuzzlePieceMonsterId) {
    [self setPuzzlePieceMonsterId:other.puzzlePieceMonsterId];
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasDmgMultiplier) {
    [self setDmgMultiplier:other.dmgMultiplier];
  }
  if (other.hasDefensiveSkillId) {
    [self setDefensiveSkillId:other.defensiveSkillId];
  }
  if (other.hasOffensiveSkillId) {
    [self setOffensiveSkillId:other.offensiveSkillId];
  }
  if (other.hasPuzzlePieceMonsterDropLvl) {
    [self setPuzzlePieceMonsterDropLvl:other.puzzlePieceMonsterDropLvl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskStageMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskStageMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 16: {
        TaskStageMonsterProto_MonsterType value = (TaskStageMonsterProto_MonsterType)[input readEnum];
        if (TaskStageMonsterProto_MonsterTypeIsValidValue(value)) {
          [self setMonsterType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setExpReward:[input readInt32]];
        break;
      }
      case 32: {
        [self setCashReward:[input readInt32]];
        break;
      }
      case 40: {
        [self setPuzzlePieceDropped:[input readBool]];
        break;
      }
      case 48: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 56: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 64: {
        [self setOilReward:[input readInt32]];
        break;
      }
      case 77: {
        [self setDmgMultiplier:[input readFloat]];
        break;
      }
      case 80: {
        [self setPuzzlePieceMonsterId:[input readInt32]];
        break;
      }
      case 88: {
        [self setTsmId:[input readInt32]];
        break;
      }
      case 96: {
        [self setDefensiveSkillId:[input readInt32]];
        break;
      }
      case 104: {
        [self setPuzzlePieceMonsterDropLvl:[input readInt32]];
        break;
      }
      case 112: {
        [self setOffensiveSkillId:[input readInt32]];
        break;
      }
      case 120: {
        [self setTsfuId:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasTsfuId {
  return result.hasTsfuId;
}
- (int64_t) tsfuId {
  return result.tsfuId;
}
- (TaskStageMonsterProto_Builder*) setTsfuId:(int64_t) value {
  result.hasTsfuId = YES;
  result.tsfuId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearTsfuId {
  result.hasTsfuId = NO;
  result.tsfuId = 0L;
  return self;
}
- (BOOL) hasTsmId {
  return result.hasTsmId;
}
- (int32_t) tsmId {
  return result.tsmId;
}
- (TaskStageMonsterProto_Builder*) setTsmId:(int32_t) value {
  result.hasTsmId = YES;
  result.tsmId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearTsmId {
  result.hasTsmId = NO;
  result.tsmId = 0;
  return self;
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (TaskStageMonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasMonsterType {
  return result.hasMonsterType;
}
- (TaskStageMonsterProto_MonsterType) monsterType {
  return result.monsterType;
}
- (TaskStageMonsterProto_Builder*) setMonsterType:(TaskStageMonsterProto_MonsterType) value {
  result.hasMonsterType = YES;
  result.monsterType = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearMonsterType {
  result.hasMonsterType = NO;
  result.monsterType = TaskStageMonsterProto_MonsterTypeRegular;
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (TaskStageMonsterProto_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasExpReward {
  return result.hasExpReward;
}
- (int32_t) expReward {
  return result.expReward;
}
- (TaskStageMonsterProto_Builder*) setExpReward:(int32_t) value {
  result.hasExpReward = YES;
  result.expReward = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearExpReward {
  result.hasExpReward = NO;
  result.expReward = 0;
  return self;
}
- (BOOL) hasCashReward {
  return result.hasCashReward;
}
- (int32_t) cashReward {
  return result.cashReward;
}
- (TaskStageMonsterProto_Builder*) setCashReward:(int32_t) value {
  result.hasCashReward = YES;
  result.cashReward = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearCashReward {
  result.hasCashReward = NO;
  result.cashReward = 0;
  return self;
}
- (BOOL) hasOilReward {
  return result.hasOilReward;
}
- (int32_t) oilReward {
  return result.oilReward;
}
- (TaskStageMonsterProto_Builder*) setOilReward:(int32_t) value {
  result.hasOilReward = YES;
  result.oilReward = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearOilReward {
  result.hasOilReward = NO;
  result.oilReward = 0;
  return self;
}
- (BOOL) hasPuzzlePieceDropped {
  return result.hasPuzzlePieceDropped;
}
- (BOOL) puzzlePieceDropped {
  return result.puzzlePieceDropped;
}
- (TaskStageMonsterProto_Builder*) setPuzzlePieceDropped:(BOOL) value {
  result.hasPuzzlePieceDropped = YES;
  result.puzzlePieceDropped = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearPuzzlePieceDropped {
  result.hasPuzzlePieceDropped = NO;
  result.puzzlePieceDropped = NO;
  return self;
}
- (BOOL) hasPuzzlePieceMonsterId {
  return result.hasPuzzlePieceMonsterId;
}
- (int32_t) puzzlePieceMonsterId {
  return result.puzzlePieceMonsterId;
}
- (TaskStageMonsterProto_Builder*) setPuzzlePieceMonsterId:(int32_t) value {
  result.hasPuzzlePieceMonsterId = YES;
  result.puzzlePieceMonsterId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearPuzzlePieceMonsterId {
  result.hasPuzzlePieceMonsterId = NO;
  result.puzzlePieceMonsterId = 0;
  return self;
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (TaskStageMonsterProto_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasDmgMultiplier {
  return result.hasDmgMultiplier;
}
- (Float32) dmgMultiplier {
  return result.dmgMultiplier;
}
- (TaskStageMonsterProto_Builder*) setDmgMultiplier:(Float32) value {
  result.hasDmgMultiplier = YES;
  result.dmgMultiplier = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearDmgMultiplier {
  result.hasDmgMultiplier = NO;
  result.dmgMultiplier = 0;
  return self;
}
- (BOOL) hasDefensiveSkillId {
  return result.hasDefensiveSkillId;
}
- (int32_t) defensiveSkillId {
  return result.defensiveSkillId;
}
- (TaskStageMonsterProto_Builder*) setDefensiveSkillId:(int32_t) value {
  result.hasDefensiveSkillId = YES;
  result.defensiveSkillId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearDefensiveSkillId {
  result.hasDefensiveSkillId = NO;
  result.defensiveSkillId = 0;
  return self;
}
- (BOOL) hasOffensiveSkillId {
  return result.hasOffensiveSkillId;
}
- (int32_t) offensiveSkillId {
  return result.offensiveSkillId;
}
- (TaskStageMonsterProto_Builder*) setOffensiveSkillId:(int32_t) value {
  result.hasOffensiveSkillId = YES;
  result.offensiveSkillId = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearOffensiveSkillId {
  result.hasOffensiveSkillId = NO;
  result.offensiveSkillId = 0;
  return self;
}
- (BOOL) hasPuzzlePieceMonsterDropLvl {
  return result.hasPuzzlePieceMonsterDropLvl;
}
- (int32_t) puzzlePieceMonsterDropLvl {
  return result.puzzlePieceMonsterDropLvl;
}
- (TaskStageMonsterProto_Builder*) setPuzzlePieceMonsterDropLvl:(int32_t) value {
  result.hasPuzzlePieceMonsterDropLvl = YES;
  result.puzzlePieceMonsterDropLvl = value;
  return self;
}
- (TaskStageMonsterProto_Builder*) clearPuzzlePieceMonsterDropLvl {
  result.hasPuzzlePieceMonsterDropLvl = NO;
  result.puzzlePieceMonsterDropLvl = 0;
  return self;
}
@end

@interface PersistentEventProto ()
@property int32_t eventId;
@property DayOfWeek dayOfWeek;
@property int32_t startHour;
@property int32_t eventDurationMinutes;
@property int32_t taskId;
@property int32_t cooldownMinutes;
@property PersistentEventProto_EventType type;
@property Element monsterElement;
@end

@implementation PersistentEventProto

- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value_ {
  hasEventId_ = !!value_;
}
@synthesize eventId;
- (BOOL) hasDayOfWeek {
  return !!hasDayOfWeek_;
}
- (void) setHasDayOfWeek:(BOOL) value_ {
  hasDayOfWeek_ = !!value_;
}
@synthesize dayOfWeek;
- (BOOL) hasStartHour {
  return !!hasStartHour_;
}
- (void) setHasStartHour:(BOOL) value_ {
  hasStartHour_ = !!value_;
}
@synthesize startHour;
- (BOOL) hasEventDurationMinutes {
  return !!hasEventDurationMinutes_;
}
- (void) setHasEventDurationMinutes:(BOOL) value_ {
  hasEventDurationMinutes_ = !!value_;
}
@synthesize eventDurationMinutes;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasCooldownMinutes {
  return !!hasCooldownMinutes_;
}
- (void) setHasCooldownMinutes:(BOOL) value_ {
  hasCooldownMinutes_ = !!value_;
}
@synthesize cooldownMinutes;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasMonsterElement {
  return !!hasMonsterElement_;
}
- (void) setHasMonsterElement:(BOOL) value_ {
  hasMonsterElement_ = !!value_;
}
@synthesize monsterElement;
- (id) init {
  if ((self = [super init])) {
    self.eventId = 0;
    self.dayOfWeek = DayOfWeekMonday;
    self.startHour = 0;
    self.eventDurationMinutes = 0;
    self.taskId = 0;
    self.cooldownMinutes = 0;
    self.type = PersistentEventProto_EventTypeEnhance;
    self.monsterElement = ElementNoElement;
  }
  return self;
}
static PersistentEventProto* defaultPersistentEventProtoInstance = nil;
+ (void) initialize {
  if (self == [PersistentEventProto class]) {
    defaultPersistentEventProtoInstance = [[PersistentEventProto alloc] init];
  }
}
+ (PersistentEventProto*) defaultInstance {
  return defaultPersistentEventProtoInstance;
}
- (PersistentEventProto*) defaultInstance {
  return defaultPersistentEventProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEventId) {
    [output writeInt32:1 value:self.eventId];
  }
  if (self.hasDayOfWeek) {
    [output writeEnum:2 value:self.dayOfWeek];
  }
  if (self.hasStartHour) {
    [output writeInt32:3 value:self.startHour];
  }
  if (self.hasEventDurationMinutes) {
    [output writeInt32:4 value:self.eventDurationMinutes];
  }
  if (self.hasTaskId) {
    [output writeInt32:5 value:self.taskId];
  }
  if (self.hasCooldownMinutes) {
    [output writeInt32:6 value:self.cooldownMinutes];
  }
  if (self.hasType) {
    [output writeEnum:7 value:self.type];
  }
  if (self.hasMonsterElement) {
    [output writeEnum:8 value:self.monsterElement];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasEventId) {
    size_ += computeInt32Size(1, self.eventId);
  }
  if (self.hasDayOfWeek) {
    size_ += computeEnumSize(2, self.dayOfWeek);
  }
  if (self.hasStartHour) {
    size_ += computeInt32Size(3, self.startHour);
  }
  if (self.hasEventDurationMinutes) {
    size_ += computeInt32Size(4, self.eventDurationMinutes);
  }
  if (self.hasTaskId) {
    size_ += computeInt32Size(5, self.taskId);
  }
  if (self.hasCooldownMinutes) {
    size_ += computeInt32Size(6, self.cooldownMinutes);
  }
  if (self.hasType) {
    size_ += computeEnumSize(7, self.type);
  }
  if (self.hasMonsterElement) {
    size_ += computeEnumSize(8, self.monsterElement);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PersistentEventProto*) parseFromData:(NSData*) data {
  return (PersistentEventProto*)[[[PersistentEventProto builder] mergeFromData:data] build];
}
+ (PersistentEventProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PersistentEventProto*)[[[PersistentEventProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PersistentEventProto*) parseFromInputStream:(NSInputStream*) input {
  return (PersistentEventProto*)[[[PersistentEventProto builder] mergeFromInputStream:input] build];
}
+ (PersistentEventProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PersistentEventProto*)[[[PersistentEventProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PersistentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PersistentEventProto*)[[[PersistentEventProto builder] mergeFromCodedInputStream:input] build];
}
+ (PersistentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PersistentEventProto*)[[[PersistentEventProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PersistentEventProto_Builder*) builder {
  return [[PersistentEventProto_Builder alloc] init];
}
+ (PersistentEventProto_Builder*) builderWithPrototype:(PersistentEventProto*) prototype {
  return [[PersistentEventProto builder] mergeFrom:prototype];
}
- (PersistentEventProto_Builder*) builder {
  return [PersistentEventProto builder];
}
- (PersistentEventProto_Builder*) toBuilder {
  return [PersistentEventProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventId", [NSNumber numberWithInteger:self.eventId]];
  }
  if (self.hasDayOfWeek) {
    [output appendFormat:@"%@%@: %d\n", indent, @"dayOfWeek", self.dayOfWeek];
  }
  if (self.hasStartHour) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startHour", [NSNumber numberWithInteger:self.startHour]];
  }
  if (self.hasEventDurationMinutes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventDurationMinutes", [NSNumber numberWithInteger:self.eventDurationMinutes]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInteger:self.taskId]];
  }
  if (self.hasCooldownMinutes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cooldownMinutes", [NSNumber numberWithInteger:self.cooldownMinutes]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"type", self.type];
  }
  if (self.hasMonsterElement) {
    [output appendFormat:@"%@%@: %d\n", indent, @"monsterElement", self.monsterElement];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PersistentEventProto class]]) {
    return NO;
  }
  PersistentEventProto *otherMessage = other;
  return
      self.hasEventId == otherMessage.hasEventId &&
      (!self.hasEventId || self.eventId == otherMessage.eventId) &&
      self.hasDayOfWeek == otherMessage.hasDayOfWeek &&
      (!self.hasDayOfWeek || self.dayOfWeek == otherMessage.dayOfWeek) &&
      self.hasStartHour == otherMessage.hasStartHour &&
      (!self.hasStartHour || self.startHour == otherMessage.startHour) &&
      self.hasEventDurationMinutes == otherMessage.hasEventDurationMinutes &&
      (!self.hasEventDurationMinutes || self.eventDurationMinutes == otherMessage.eventDurationMinutes) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasCooldownMinutes == otherMessage.hasCooldownMinutes &&
      (!self.hasCooldownMinutes || self.cooldownMinutes == otherMessage.cooldownMinutes) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasMonsterElement == otherMessage.hasMonsterElement &&
      (!self.hasMonsterElement || self.monsterElement == otherMessage.monsterElement) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eventId] hash];
  }
  if (self.hasDayOfWeek) {
    hashCode = hashCode * 31 + self.dayOfWeek;
  }
  if (self.hasStartHour) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startHour] hash];
  }
  if (self.hasEventDurationMinutes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eventDurationMinutes] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.taskId] hash];
  }
  if (self.hasCooldownMinutes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cooldownMinutes] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasMonsterElement) {
    hashCode = hashCode * 31 + self.monsterElement;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL PersistentEventProto_EventTypeIsValidValue(PersistentEventProto_EventType value) {
  switch (value) {
    case PersistentEventProto_EventTypeEnhance:
    case PersistentEventProto_EventTypeEvolution:
      return YES;
    default:
      return NO;
  }
}
@interface PersistentEventProto_Builder()
@property (strong) PersistentEventProto* result;
@end

@implementation PersistentEventProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PersistentEventProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PersistentEventProto_Builder*) clear {
  self.result = [[PersistentEventProto alloc] init];
  return self;
}
- (PersistentEventProto_Builder*) clone {
  return [PersistentEventProto builderWithPrototype:result];
}
- (PersistentEventProto*) defaultInstance {
  return [PersistentEventProto defaultInstance];
}
- (PersistentEventProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PersistentEventProto*) buildPartial {
  PersistentEventProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PersistentEventProto_Builder*) mergeFrom:(PersistentEventProto*) other {
  if (other == [PersistentEventProto defaultInstance]) {
    return self;
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasDayOfWeek) {
    [self setDayOfWeek:other.dayOfWeek];
  }
  if (other.hasStartHour) {
    [self setStartHour:other.startHour];
  }
  if (other.hasEventDurationMinutes) {
    [self setEventDurationMinutes:other.eventDurationMinutes];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasCooldownMinutes) {
    [self setCooldownMinutes:other.cooldownMinutes];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasMonsterElement) {
    [self setMonsterElement:other.monsterElement];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PersistentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PersistentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEventId:[input readInt32]];
        break;
      }
      case 16: {
        DayOfWeek value = (DayOfWeek)[input readEnum];
        if (DayOfWeekIsValidValue(value)) {
          [self setDayOfWeek:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setStartHour:[input readInt32]];
        break;
      }
      case 32: {
        [self setEventDurationMinutes:[input readInt32]];
        break;
      }
      case 40: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 48: {
        [self setCooldownMinutes:[input readInt32]];
        break;
      }
      case 56: {
        PersistentEventProto_EventType value = (PersistentEventProto_EventType)[input readEnum];
        if (PersistentEventProto_EventTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        Element value = (Element)[input readEnum];
        if (ElementIsValidValue(value)) {
          [self setMonsterElement:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasEventId {
  return result.hasEventId;
}
- (int32_t) eventId {
  return result.eventId;
}
- (PersistentEventProto_Builder*) setEventId:(int32_t) value {
  result.hasEventId = YES;
  result.eventId = value;
  return self;
}
- (PersistentEventProto_Builder*) clearEventId {
  result.hasEventId = NO;
  result.eventId = 0;
  return self;
}
- (BOOL) hasDayOfWeek {
  return result.hasDayOfWeek;
}
- (DayOfWeek) dayOfWeek {
  return result.dayOfWeek;
}
- (PersistentEventProto_Builder*) setDayOfWeek:(DayOfWeek) value {
  result.hasDayOfWeek = YES;
  result.dayOfWeek = value;
  return self;
}
- (PersistentEventProto_Builder*) clearDayOfWeek {
  result.hasDayOfWeek = NO;
  result.dayOfWeek = DayOfWeekMonday;
  return self;
}
- (BOOL) hasStartHour {
  return result.hasStartHour;
}
- (int32_t) startHour {
  return result.startHour;
}
- (PersistentEventProto_Builder*) setStartHour:(int32_t) value {
  result.hasStartHour = YES;
  result.startHour = value;
  return self;
}
- (PersistentEventProto_Builder*) clearStartHour {
  result.hasStartHour = NO;
  result.startHour = 0;
  return self;
}
- (BOOL) hasEventDurationMinutes {
  return result.hasEventDurationMinutes;
}
- (int32_t) eventDurationMinutes {
  return result.eventDurationMinutes;
}
- (PersistentEventProto_Builder*) setEventDurationMinutes:(int32_t) value {
  result.hasEventDurationMinutes = YES;
  result.eventDurationMinutes = value;
  return self;
}
- (PersistentEventProto_Builder*) clearEventDurationMinutes {
  result.hasEventDurationMinutes = NO;
  result.eventDurationMinutes = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (PersistentEventProto_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (PersistentEventProto_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasCooldownMinutes {
  return result.hasCooldownMinutes;
}
- (int32_t) cooldownMinutes {
  return result.cooldownMinutes;
}
- (PersistentEventProto_Builder*) setCooldownMinutes:(int32_t) value {
  result.hasCooldownMinutes = YES;
  result.cooldownMinutes = value;
  return self;
}
- (PersistentEventProto_Builder*) clearCooldownMinutes {
  result.hasCooldownMinutes = NO;
  result.cooldownMinutes = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (PersistentEventProto_EventType) type {
  return result.type;
}
- (PersistentEventProto_Builder*) setType:(PersistentEventProto_EventType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (PersistentEventProto_Builder*) clearType {
  result.hasType = NO;
  result.type = PersistentEventProto_EventTypeEnhance;
  return self;
}
- (BOOL) hasMonsterElement {
  return result.hasMonsterElement;
}
- (Element) monsterElement {
  return result.monsterElement;
}
- (PersistentEventProto_Builder*) setMonsterElement:(Element) value {
  result.hasMonsterElement = YES;
  result.monsterElement = value;
  return self;
}
- (PersistentEventProto_Builder*) clearMonsterElement {
  result.hasMonsterElement = NO;
  result.monsterElement = ElementNoElement;
  return self;
}
@end

@interface UserPersistentEventProto ()
@property int32_t userId;
@property int32_t eventId;
@property int64_t coolDownStartTime;
@end

@implementation UserPersistentEventProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value_ {
  hasUserId_ = !!value_;
}
@synthesize userId;
- (BOOL) hasEventId {
  return !!hasEventId_;
}
- (void) setHasEventId:(BOOL) value_ {
  hasEventId_ = !!value_;
}
@synthesize eventId;
- (BOOL) hasCoolDownStartTime {
  return !!hasCoolDownStartTime_;
}
- (void) setHasCoolDownStartTime:(BOOL) value_ {
  hasCoolDownStartTime_ = !!value_;
}
@synthesize coolDownStartTime;
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.eventId = 0;
    self.coolDownStartTime = 0L;
  }
  return self;
}
static UserPersistentEventProto* defaultUserPersistentEventProtoInstance = nil;
+ (void) initialize {
  if (self == [UserPersistentEventProto class]) {
    defaultUserPersistentEventProtoInstance = [[UserPersistentEventProto alloc] init];
  }
}
+ (UserPersistentEventProto*) defaultInstance {
  return defaultUserPersistentEventProtoInstance;
}
- (UserPersistentEventProto*) defaultInstance {
  return defaultUserPersistentEventProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasEventId) {
    [output writeInt32:2 value:self.eventId];
  }
  if (self.hasCoolDownStartTime) {
    [output writeInt64:3 value:self.coolDownStartTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeInt32Size(1, self.userId);
  }
  if (self.hasEventId) {
    size_ += computeInt32Size(2, self.eventId);
  }
  if (self.hasCoolDownStartTime) {
    size_ += computeInt64Size(3, self.coolDownStartTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserPersistentEventProto*) parseFromData:(NSData*) data {
  return (UserPersistentEventProto*)[[[UserPersistentEventProto builder] mergeFromData:data] build];
}
+ (UserPersistentEventProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPersistentEventProto*)[[[UserPersistentEventProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserPersistentEventProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserPersistentEventProto*)[[[UserPersistentEventProto builder] mergeFromInputStream:input] build];
}
+ (UserPersistentEventProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPersistentEventProto*)[[[UserPersistentEventProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserPersistentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserPersistentEventProto*)[[[UserPersistentEventProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserPersistentEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserPersistentEventProto*)[[[UserPersistentEventProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserPersistentEventProto_Builder*) builder {
  return [[UserPersistentEventProto_Builder alloc] init];
}
+ (UserPersistentEventProto_Builder*) builderWithPrototype:(UserPersistentEventProto*) prototype {
  return [[UserPersistentEventProto builder] mergeFrom:prototype];
}
- (UserPersistentEventProto_Builder*) builder {
  return [UserPersistentEventProto builder];
}
- (UserPersistentEventProto_Builder*) toBuilder {
  return [UserPersistentEventProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", [NSNumber numberWithInteger:self.userId]];
  }
  if (self.hasEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"eventId", [NSNumber numberWithInteger:self.eventId]];
  }
  if (self.hasCoolDownStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"coolDownStartTime", [NSNumber numberWithLongLong:self.coolDownStartTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserPersistentEventProto class]]) {
    return NO;
  }
  UserPersistentEventProto *otherMessage = other;
  return
      self.hasUserId == otherMessage.hasUserId &&
      (!self.hasUserId || self.userId == otherMessage.userId) &&
      self.hasEventId == otherMessage.hasEventId &&
      (!self.hasEventId || self.eventId == otherMessage.eventId) &&
      self.hasCoolDownStartTime == otherMessage.hasCoolDownStartTime &&
      (!self.hasCoolDownStartTime || self.coolDownStartTime == otherMessage.coolDownStartTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userId] hash];
  }
  if (self.hasEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.eventId] hash];
  }
  if (self.hasCoolDownStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.coolDownStartTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserPersistentEventProto_Builder()
@property (strong) UserPersistentEventProto* result;
@end

@implementation UserPersistentEventProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserPersistentEventProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserPersistentEventProto_Builder*) clear {
  self.result = [[UserPersistentEventProto alloc] init];
  return self;
}
- (UserPersistentEventProto_Builder*) clone {
  return [UserPersistentEventProto builderWithPrototype:result];
}
- (UserPersistentEventProto*) defaultInstance {
  return [UserPersistentEventProto defaultInstance];
}
- (UserPersistentEventProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserPersistentEventProto*) buildPartial {
  UserPersistentEventProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserPersistentEventProto_Builder*) mergeFrom:(UserPersistentEventProto*) other {
  if (other == [UserPersistentEventProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasEventId) {
    [self setEventId:other.eventId];
  }
  if (other.hasCoolDownStartTime) {
    [self setCoolDownStartTime:other.coolDownStartTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserPersistentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserPersistentEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setEventId:[input readInt32]];
        break;
      }
      case 24: {
        [self setCoolDownStartTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserPersistentEventProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserPersistentEventProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasEventId {
  return result.hasEventId;
}
- (int32_t) eventId {
  return result.eventId;
}
- (UserPersistentEventProto_Builder*) setEventId:(int32_t) value {
  result.hasEventId = YES;
  result.eventId = value;
  return self;
}
- (UserPersistentEventProto_Builder*) clearEventId {
  result.hasEventId = NO;
  result.eventId = 0;
  return self;
}
- (BOOL) hasCoolDownStartTime {
  return result.hasCoolDownStartTime;
}
- (int64_t) coolDownStartTime {
  return result.coolDownStartTime;
}
- (UserPersistentEventProto_Builder*) setCoolDownStartTime:(int64_t) value {
  result.hasCoolDownStartTime = YES;
  result.coolDownStartTime = value;
  return self;
}
- (UserPersistentEventProto_Builder*) clearCoolDownStartTime {
  result.hasCoolDownStartTime = NO;
  result.coolDownStartTime = 0L;
  return self;
}
@end

@interface TaskMapElementProto ()
@property int32_t mapElementId;
@property int32_t taskId;
@property int32_t xPos;
@property int32_t yPos;
@property Element element;
@property BOOL boss;
@property (strong) NSString* bossImgName;
@property int32_t itemDropId;
@property (strong) NSString* sectionName;
@property int32_t cashReward;
@property int32_t oilReward;
@property (strong) NSString* characterImgName;
@end

@implementation TaskMapElementProto

- (BOOL) hasMapElementId {
  return !!hasMapElementId_;
}
- (void) setHasMapElementId:(BOOL) value_ {
  hasMapElementId_ = !!value_;
}
@synthesize mapElementId;
- (BOOL) hasTaskId {
  return !!hasTaskId_;
}
- (void) setHasTaskId:(BOOL) value_ {
  hasTaskId_ = !!value_;
}
@synthesize taskId;
- (BOOL) hasXPos {
  return !!hasXPos_;
}
- (void) setHasXPos:(BOOL) value_ {
  hasXPos_ = !!value_;
}
@synthesize xPos;
- (BOOL) hasYPos {
  return !!hasYPos_;
}
- (void) setHasYPos:(BOOL) value_ {
  hasYPos_ = !!value_;
}
@synthesize yPos;
- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) value_ {
  hasElement_ = !!value_;
}
@synthesize element;
- (BOOL) hasBoss {
  return !!hasBoss_;
}
- (void) setHasBoss:(BOOL) value_ {
  hasBoss_ = !!value_;
}
- (BOOL) boss {
  return !!boss_;
}
- (void) setBoss:(BOOL) value_ {
  boss_ = !!value_;
}
- (BOOL) hasBossImgName {
  return !!hasBossImgName_;
}
- (void) setHasBossImgName:(BOOL) value_ {
  hasBossImgName_ = !!value_;
}
@synthesize bossImgName;
- (BOOL) hasItemDropId {
  return !!hasItemDropId_;
}
- (void) setHasItemDropId:(BOOL) value_ {
  hasItemDropId_ = !!value_;
}
@synthesize itemDropId;
- (BOOL) hasSectionName {
  return !!hasSectionName_;
}
- (void) setHasSectionName:(BOOL) value_ {
  hasSectionName_ = !!value_;
}
@synthesize sectionName;
- (BOOL) hasCashReward {
  return !!hasCashReward_;
}
- (void) setHasCashReward:(BOOL) value_ {
  hasCashReward_ = !!value_;
}
@synthesize cashReward;
- (BOOL) hasOilReward {
  return !!hasOilReward_;
}
- (void) setHasOilReward:(BOOL) value_ {
  hasOilReward_ = !!value_;
}
@synthesize oilReward;
- (BOOL) hasCharacterImgName {
  return !!hasCharacterImgName_;
}
- (void) setHasCharacterImgName:(BOOL) value_ {
  hasCharacterImgName_ = !!value_;
}
@synthesize characterImgName;
- (id) init {
  if ((self = [super init])) {
    self.mapElementId = 0;
    self.taskId = 0;
    self.xPos = 0;
    self.yPos = 0;
    self.element = ElementFire;
    self.boss = NO;
    self.bossImgName = @"";
    self.itemDropId = 0;
    self.sectionName = @"";
    self.cashReward = 0;
    self.oilReward = 0;
    self.characterImgName = @"";
  }
  return self;
}
static TaskMapElementProto* defaultTaskMapElementProtoInstance = nil;
+ (void) initialize {
  if (self == [TaskMapElementProto class]) {
    defaultTaskMapElementProtoInstance = [[TaskMapElementProto alloc] init];
  }
}
+ (TaskMapElementProto*) defaultInstance {
  return defaultTaskMapElementProtoInstance;
}
- (TaskMapElementProto*) defaultInstance {
  return defaultTaskMapElementProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMapElementId) {
    [output writeInt32:1 value:self.mapElementId];
  }
  if (self.hasTaskId) {
    [output writeInt32:2 value:self.taskId];
  }
  if (self.hasXPos) {
    [output writeInt32:3 value:self.xPos];
  }
  if (self.hasYPos) {
    [output writeInt32:4 value:self.yPos];
  }
  if (self.hasElement) {
    [output writeEnum:5 value:self.element];
  }
  if (self.hasBoss) {
    [output writeBool:6 value:self.boss];
  }
  if (self.hasBossImgName) {
    [output writeString:7 value:self.bossImgName];
  }
  if (self.hasItemDropId) {
    [output writeInt32:8 value:self.itemDropId];
  }
  if (self.hasSectionName) {
    [output writeString:9 value:self.sectionName];
  }
  if (self.hasCashReward) {
    [output writeInt32:10 value:self.cashReward];
  }
  if (self.hasOilReward) {
    [output writeInt32:11 value:self.oilReward];
  }
  if (self.hasCharacterImgName) {
    [output writeString:12 value:self.characterImgName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMapElementId) {
    size_ += computeInt32Size(1, self.mapElementId);
  }
  if (self.hasTaskId) {
    size_ += computeInt32Size(2, self.taskId);
  }
  if (self.hasXPos) {
    size_ += computeInt32Size(3, self.xPos);
  }
  if (self.hasYPos) {
    size_ += computeInt32Size(4, self.yPos);
  }
  if (self.hasElement) {
    size_ += computeEnumSize(5, self.element);
  }
  if (self.hasBoss) {
    size_ += computeBoolSize(6, self.boss);
  }
  if (self.hasBossImgName) {
    size_ += computeStringSize(7, self.bossImgName);
  }
  if (self.hasItemDropId) {
    size_ += computeInt32Size(8, self.itemDropId);
  }
  if (self.hasSectionName) {
    size_ += computeStringSize(9, self.sectionName);
  }
  if (self.hasCashReward) {
    size_ += computeInt32Size(10, self.cashReward);
  }
  if (self.hasOilReward) {
    size_ += computeInt32Size(11, self.oilReward);
  }
  if (self.hasCharacterImgName) {
    size_ += computeStringSize(12, self.characterImgName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TaskMapElementProto*) parseFromData:(NSData*) data {
  return (TaskMapElementProto*)[[[TaskMapElementProto builder] mergeFromData:data] build];
}
+ (TaskMapElementProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskMapElementProto*)[[[TaskMapElementProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TaskMapElementProto*) parseFromInputStream:(NSInputStream*) input {
  return (TaskMapElementProto*)[[[TaskMapElementProto builder] mergeFromInputStream:input] build];
}
+ (TaskMapElementProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskMapElementProto*)[[[TaskMapElementProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskMapElementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TaskMapElementProto*)[[[TaskMapElementProto builder] mergeFromCodedInputStream:input] build];
}
+ (TaskMapElementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TaskMapElementProto*)[[[TaskMapElementProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TaskMapElementProto_Builder*) builder {
  return [[TaskMapElementProto_Builder alloc] init];
}
+ (TaskMapElementProto_Builder*) builderWithPrototype:(TaskMapElementProto*) prototype {
  return [[TaskMapElementProto builder] mergeFrom:prototype];
}
- (TaskMapElementProto_Builder*) builder {
  return [TaskMapElementProto builder];
}
- (TaskMapElementProto_Builder*) toBuilder {
  return [TaskMapElementProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMapElementId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mapElementId", [NSNumber numberWithInteger:self.mapElementId]];
  }
  if (self.hasTaskId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"taskId", [NSNumber numberWithInteger:self.taskId]];
  }
  if (self.hasXPos) {
    [output appendFormat:@"%@%@: %@\n", indent, @"xPos", [NSNumber numberWithInteger:self.xPos]];
  }
  if (self.hasYPos) {
    [output appendFormat:@"%@%@: %@\n", indent, @"yPos", [NSNumber numberWithInteger:self.yPos]];
  }
  if (self.hasElement) {
    [output appendFormat:@"%@%@: %d\n", indent, @"element", self.element];
  }
  if (self.hasBoss) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boss", [NSNumber numberWithBool:self.boss]];
  }
  if (self.hasBossImgName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bossImgName", self.bossImgName];
  }
  if (self.hasItemDropId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemDropId", [NSNumber numberWithInteger:self.itemDropId]];
  }
  if (self.hasSectionName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sectionName", self.sectionName];
  }
  if (self.hasCashReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashReward", [NSNumber numberWithInteger:self.cashReward]];
  }
  if (self.hasOilReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oilReward", [NSNumber numberWithInteger:self.oilReward]];
  }
  if (self.hasCharacterImgName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"characterImgName", self.characterImgName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TaskMapElementProto class]]) {
    return NO;
  }
  TaskMapElementProto *otherMessage = other;
  return
      self.hasMapElementId == otherMessage.hasMapElementId &&
      (!self.hasMapElementId || self.mapElementId == otherMessage.mapElementId) &&
      self.hasTaskId == otherMessage.hasTaskId &&
      (!self.hasTaskId || self.taskId == otherMessage.taskId) &&
      self.hasXPos == otherMessage.hasXPos &&
      (!self.hasXPos || self.xPos == otherMessage.xPos) &&
      self.hasYPos == otherMessage.hasYPos &&
      (!self.hasYPos || self.yPos == otherMessage.yPos) &&
      self.hasElement == otherMessage.hasElement &&
      (!self.hasElement || self.element == otherMessage.element) &&
      self.hasBoss == otherMessage.hasBoss &&
      (!self.hasBoss || self.boss == otherMessage.boss) &&
      self.hasBossImgName == otherMessage.hasBossImgName &&
      (!self.hasBossImgName || [self.bossImgName isEqual:otherMessage.bossImgName]) &&
      self.hasItemDropId == otherMessage.hasItemDropId &&
      (!self.hasItemDropId || self.itemDropId == otherMessage.itemDropId) &&
      self.hasSectionName == otherMessage.hasSectionName &&
      (!self.hasSectionName || [self.sectionName isEqual:otherMessage.sectionName]) &&
      self.hasCashReward == otherMessage.hasCashReward &&
      (!self.hasCashReward || self.cashReward == otherMessage.cashReward) &&
      self.hasOilReward == otherMessage.hasOilReward &&
      (!self.hasOilReward || self.oilReward == otherMessage.oilReward) &&
      self.hasCharacterImgName == otherMessage.hasCharacterImgName &&
      (!self.hasCharacterImgName || [self.characterImgName isEqual:otherMessage.characterImgName]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMapElementId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mapElementId] hash];
  }
  if (self.hasTaskId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.taskId] hash];
  }
  if (self.hasXPos) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.xPos] hash];
  }
  if (self.hasYPos) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.yPos] hash];
  }
  if (self.hasElement) {
    hashCode = hashCode * 31 + self.element;
  }
  if (self.hasBoss) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.boss] hash];
  }
  if (self.hasBossImgName) {
    hashCode = hashCode * 31 + [self.bossImgName hash];
  }
  if (self.hasItemDropId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemDropId] hash];
  }
  if (self.hasSectionName) {
    hashCode = hashCode * 31 + [self.sectionName hash];
  }
  if (self.hasCashReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashReward] hash];
  }
  if (self.hasOilReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oilReward] hash];
  }
  if (self.hasCharacterImgName) {
    hashCode = hashCode * 31 + [self.characterImgName hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TaskMapElementProto_Builder()
@property (strong) TaskMapElementProto* result;
@end

@implementation TaskMapElementProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[TaskMapElementProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TaskMapElementProto_Builder*) clear {
  self.result = [[TaskMapElementProto alloc] init];
  return self;
}
- (TaskMapElementProto_Builder*) clone {
  return [TaskMapElementProto builderWithPrototype:result];
}
- (TaskMapElementProto*) defaultInstance {
  return [TaskMapElementProto defaultInstance];
}
- (TaskMapElementProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TaskMapElementProto*) buildPartial {
  TaskMapElementProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TaskMapElementProto_Builder*) mergeFrom:(TaskMapElementProto*) other {
  if (other == [TaskMapElementProto defaultInstance]) {
    return self;
  }
  if (other.hasMapElementId) {
    [self setMapElementId:other.mapElementId];
  }
  if (other.hasTaskId) {
    [self setTaskId:other.taskId];
  }
  if (other.hasXPos) {
    [self setXPos:other.xPos];
  }
  if (other.hasYPos) {
    [self setYPos:other.yPos];
  }
  if (other.hasElement) {
    [self setElement:other.element];
  }
  if (other.hasBoss) {
    [self setBoss:other.boss];
  }
  if (other.hasBossImgName) {
    [self setBossImgName:other.bossImgName];
  }
  if (other.hasItemDropId) {
    [self setItemDropId:other.itemDropId];
  }
  if (other.hasSectionName) {
    [self setSectionName:other.sectionName];
  }
  if (other.hasCashReward) {
    [self setCashReward:other.cashReward];
  }
  if (other.hasOilReward) {
    [self setOilReward:other.oilReward];
  }
  if (other.hasCharacterImgName) {
    [self setCharacterImgName:other.characterImgName];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TaskMapElementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TaskMapElementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMapElementId:[input readInt32]];
        break;
      }
      case 16: {
        [self setTaskId:[input readInt32]];
        break;
      }
      case 24: {
        [self setXPos:[input readInt32]];
        break;
      }
      case 32: {
        [self setYPos:[input readInt32]];
        break;
      }
      case 40: {
        Element value = (Element)[input readEnum];
        if (ElementIsValidValue(value)) {
          [self setElement:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setBoss:[input readBool]];
        break;
      }
      case 58: {
        [self setBossImgName:[input readString]];
        break;
      }
      case 64: {
        [self setItemDropId:[input readInt32]];
        break;
      }
      case 74: {
        [self setSectionName:[input readString]];
        break;
      }
      case 80: {
        [self setCashReward:[input readInt32]];
        break;
      }
      case 88: {
        [self setOilReward:[input readInt32]];
        break;
      }
      case 98: {
        [self setCharacterImgName:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMapElementId {
  return result.hasMapElementId;
}
- (int32_t) mapElementId {
  return result.mapElementId;
}
- (TaskMapElementProto_Builder*) setMapElementId:(int32_t) value {
  result.hasMapElementId = YES;
  result.mapElementId = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearMapElementId {
  result.hasMapElementId = NO;
  result.mapElementId = 0;
  return self;
}
- (BOOL) hasTaskId {
  return result.hasTaskId;
}
- (int32_t) taskId {
  return result.taskId;
}
- (TaskMapElementProto_Builder*) setTaskId:(int32_t) value {
  result.hasTaskId = YES;
  result.taskId = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearTaskId {
  result.hasTaskId = NO;
  result.taskId = 0;
  return self;
}
- (BOOL) hasXPos {
  return result.hasXPos;
}
- (int32_t) xPos {
  return result.xPos;
}
- (TaskMapElementProto_Builder*) setXPos:(int32_t) value {
  result.hasXPos = YES;
  result.xPos = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearXPos {
  result.hasXPos = NO;
  result.xPos = 0;
  return self;
}
- (BOOL) hasYPos {
  return result.hasYPos;
}
- (int32_t) yPos {
  return result.yPos;
}
- (TaskMapElementProto_Builder*) setYPos:(int32_t) value {
  result.hasYPos = YES;
  result.yPos = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearYPos {
  result.hasYPos = NO;
  result.yPos = 0;
  return self;
}
- (BOOL) hasElement {
  return result.hasElement;
}
- (Element) element {
  return result.element;
}
- (TaskMapElementProto_Builder*) setElement:(Element) value {
  result.hasElement = YES;
  result.element = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearElement {
  result.hasElement = NO;
  result.element = ElementFire;
  return self;
}
- (BOOL) hasBoss {
  return result.hasBoss;
}
- (BOOL) boss {
  return result.boss;
}
- (TaskMapElementProto_Builder*) setBoss:(BOOL) value {
  result.hasBoss = YES;
  result.boss = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearBoss {
  result.hasBoss = NO;
  result.boss = NO;
  return self;
}
- (BOOL) hasBossImgName {
  return result.hasBossImgName;
}
- (NSString*) bossImgName {
  return result.bossImgName;
}
- (TaskMapElementProto_Builder*) setBossImgName:(NSString*) value {
  result.hasBossImgName = YES;
  result.bossImgName = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearBossImgName {
  result.hasBossImgName = NO;
  result.bossImgName = @"";
  return self;
}
- (BOOL) hasItemDropId {
  return result.hasItemDropId;
}
- (int32_t) itemDropId {
  return result.itemDropId;
}
- (TaskMapElementProto_Builder*) setItemDropId:(int32_t) value {
  result.hasItemDropId = YES;
  result.itemDropId = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearItemDropId {
  result.hasItemDropId = NO;
  result.itemDropId = 0;
  return self;
}
- (BOOL) hasSectionName {
  return result.hasSectionName;
}
- (NSString*) sectionName {
  return result.sectionName;
}
- (TaskMapElementProto_Builder*) setSectionName:(NSString*) value {
  result.hasSectionName = YES;
  result.sectionName = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearSectionName {
  result.hasSectionName = NO;
  result.sectionName = @"";
  return self;
}
- (BOOL) hasCashReward {
  return result.hasCashReward;
}
- (int32_t) cashReward {
  return result.cashReward;
}
- (TaskMapElementProto_Builder*) setCashReward:(int32_t) value {
  result.hasCashReward = YES;
  result.cashReward = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearCashReward {
  result.hasCashReward = NO;
  result.cashReward = 0;
  return self;
}
- (BOOL) hasOilReward {
  return result.hasOilReward;
}
- (int32_t) oilReward {
  return result.oilReward;
}
- (TaskMapElementProto_Builder*) setOilReward:(int32_t) value {
  result.hasOilReward = YES;
  result.oilReward = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearOilReward {
  result.hasOilReward = NO;
  result.oilReward = 0;
  return self;
}
- (BOOL) hasCharacterImgName {
  return result.hasCharacterImgName;
}
- (NSString*) characterImgName {
  return result.characterImgName;
}
- (TaskMapElementProto_Builder*) setCharacterImgName:(NSString*) value {
  result.hasCharacterImgName = YES;
  result.characterImgName = value;
  return self;
}
- (TaskMapElementProto_Builder*) clearCharacterImgName {
  result.hasCharacterImgName = NO;
  result.characterImgName = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
