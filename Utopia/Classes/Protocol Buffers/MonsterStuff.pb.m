// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MonsterStuff.pb.h"

@implementation MonsterStuffRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MonsterStuffRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MonsterProto ()
@property int32_t monsterId;
@property (retain) NSString* name;
@property (retain) NSString* monsterGroup;
@property MonsterProto_MonsterQuality quality;
@property int32_t evolutionLevel;
@property (retain) NSString* displayName;
@property MonsterProto_MonsterElement element;
@property int32_t baseHp;
@property (retain) NSString* imagePrefix;
@property int32_t numPuzzlePieces;
@property int32_t minutesToCombinePieces;
@property int32_t elementOneDmg;
@property int32_t elementTwoDmg;
@property int32_t elementThreeDmg;
@property int32_t elementFourDmg;
@property int32_t elementFiveDmg;
@property Float32 hpLevelMultiplier;
@property Float32 attackLevelMultiplier;
@property int32_t maxLevel;
@property int32_t evolutionMonsterId;
@property (retain) NSString* carrotRecruited;
@property (retain) NSString* carrotDefeated;
@property (retain) NSString* carrotEvolved;
@property (retain) NSString* description;
@end

@implementation MonsterProto

- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value {
  hasMonsterId_ = !!value;
}
@synthesize monsterId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasMonsterGroup {
  return !!hasMonsterGroup_;
}
- (void) setHasMonsterGroup:(BOOL) value {
  hasMonsterGroup_ = !!value;
}
@synthesize monsterGroup;
- (BOOL) hasQuality {
  return !!hasQuality_;
}
- (void) setHasQuality:(BOOL) value {
  hasQuality_ = !!value;
}
@synthesize quality;
- (BOOL) hasEvolutionLevel {
  return !!hasEvolutionLevel_;
}
- (void) setHasEvolutionLevel:(BOOL) value {
  hasEvolutionLevel_ = !!value;
}
@synthesize evolutionLevel;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) value {
  hasDisplayName_ = !!value;
}
@synthesize displayName;
- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) value {
  hasElement_ = !!value;
}
@synthesize element;
- (BOOL) hasBaseHp {
  return !!hasBaseHp_;
}
- (void) setHasBaseHp:(BOOL) value {
  hasBaseHp_ = !!value;
}
@synthesize baseHp;
- (BOOL) hasImagePrefix {
  return !!hasImagePrefix_;
}
- (void) setHasImagePrefix:(BOOL) value {
  hasImagePrefix_ = !!value;
}
@synthesize imagePrefix;
- (BOOL) hasNumPuzzlePieces {
  return !!hasNumPuzzlePieces_;
}
- (void) setHasNumPuzzlePieces:(BOOL) value {
  hasNumPuzzlePieces_ = !!value;
}
@synthesize numPuzzlePieces;
- (BOOL) hasMinutesToCombinePieces {
  return !!hasMinutesToCombinePieces_;
}
- (void) setHasMinutesToCombinePieces:(BOOL) value {
  hasMinutesToCombinePieces_ = !!value;
}
@synthesize minutesToCombinePieces;
- (BOOL) hasElementOneDmg {
  return !!hasElementOneDmg_;
}
- (void) setHasElementOneDmg:(BOOL) value {
  hasElementOneDmg_ = !!value;
}
@synthesize elementOneDmg;
- (BOOL) hasElementTwoDmg {
  return !!hasElementTwoDmg_;
}
- (void) setHasElementTwoDmg:(BOOL) value {
  hasElementTwoDmg_ = !!value;
}
@synthesize elementTwoDmg;
- (BOOL) hasElementThreeDmg {
  return !!hasElementThreeDmg_;
}
- (void) setHasElementThreeDmg:(BOOL) value {
  hasElementThreeDmg_ = !!value;
}
@synthesize elementThreeDmg;
- (BOOL) hasElementFourDmg {
  return !!hasElementFourDmg_;
}
- (void) setHasElementFourDmg:(BOOL) value {
  hasElementFourDmg_ = !!value;
}
@synthesize elementFourDmg;
- (BOOL) hasElementFiveDmg {
  return !!hasElementFiveDmg_;
}
- (void) setHasElementFiveDmg:(BOOL) value {
  hasElementFiveDmg_ = !!value;
}
@synthesize elementFiveDmg;
- (BOOL) hasHpLevelMultiplier {
  return !!hasHpLevelMultiplier_;
}
- (void) setHasHpLevelMultiplier:(BOOL) value {
  hasHpLevelMultiplier_ = !!value;
}
@synthesize hpLevelMultiplier;
- (BOOL) hasAttackLevelMultiplier {
  return !!hasAttackLevelMultiplier_;
}
- (void) setHasAttackLevelMultiplier:(BOOL) value {
  hasAttackLevelMultiplier_ = !!value;
}
@synthesize attackLevelMultiplier;
- (BOOL) hasMaxLevel {
  return !!hasMaxLevel_;
}
- (void) setHasMaxLevel:(BOOL) value {
  hasMaxLevel_ = !!value;
}
@synthesize maxLevel;
- (BOOL) hasEvolutionMonsterId {
  return !!hasEvolutionMonsterId_;
}
- (void) setHasEvolutionMonsterId:(BOOL) value {
  hasEvolutionMonsterId_ = !!value;
}
@synthesize evolutionMonsterId;
- (BOOL) hasCarrotRecruited {
  return !!hasCarrotRecruited_;
}
- (void) setHasCarrotRecruited:(BOOL) value {
  hasCarrotRecruited_ = !!value;
}
@synthesize carrotRecruited;
- (BOOL) hasCarrotDefeated {
  return !!hasCarrotDefeated_;
}
- (void) setHasCarrotDefeated:(BOOL) value {
  hasCarrotDefeated_ = !!value;
}
@synthesize carrotDefeated;
- (BOOL) hasCarrotEvolved {
  return !!hasCarrotEvolved_;
}
- (void) setHasCarrotEvolved:(BOOL) value {
  hasCarrotEvolved_ = !!value;
}
@synthesize carrotEvolved;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (void) dealloc {
  self.name = nil;
  self.monsterGroup = nil;
  self.displayName = nil;
  self.imagePrefix = nil;
  self.carrotRecruited = nil;
  self.carrotDefeated = nil;
  self.carrotEvolved = nil;
  self.description = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.monsterId = 0;
    self.name = @"";
    self.monsterGroup = @"";
    self.quality = MonsterProto_MonsterQualityCommon;
    self.evolutionLevel = 0;
    self.displayName = @"";
    self.element = MonsterProto_MonsterElementFire;
    self.baseHp = 0;
    self.imagePrefix = @"";
    self.numPuzzlePieces = 0;
    self.minutesToCombinePieces = 0;
    self.elementOneDmg = 0;
    self.elementTwoDmg = 0;
    self.elementThreeDmg = 0;
    self.elementFourDmg = 0;
    self.elementFiveDmg = 0;
    self.hpLevelMultiplier = 0;
    self.attackLevelMultiplier = 0;
    self.maxLevel = 0;
    self.evolutionMonsterId = 0;
    self.carrotRecruited = @"";
    self.carrotDefeated = @"";
    self.carrotEvolved = @"";
    self.description = @"";
  }
  return self;
}
static MonsterProto* defaultMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [MonsterProto class]) {
    defaultMonsterProtoInstance = [[MonsterProto alloc] init];
  }
}
+ (MonsterProto*) defaultInstance {
  return defaultMonsterProtoInstance;
}
- (MonsterProto*) defaultInstance {
  return defaultMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasMonsterGroup) {
    [output writeString:3 value:self.monsterGroup];
  }
  if (self.hasQuality) {
    [output writeEnum:4 value:self.quality];
  }
  if (self.hasEvolutionLevel) {
    [output writeInt32:5 value:self.evolutionLevel];
  }
  if (self.hasDisplayName) {
    [output writeString:6 value:self.displayName];
  }
  if (self.hasElement) {
    [output writeEnum:7 value:self.element];
  }
  if (self.hasBaseHp) {
    [output writeInt32:8 value:self.baseHp];
  }
  if (self.hasImagePrefix) {
    [output writeString:9 value:self.imagePrefix];
  }
  if (self.hasNumPuzzlePieces) {
    [output writeInt32:10 value:self.numPuzzlePieces];
  }
  if (self.hasMinutesToCombinePieces) {
    [output writeInt32:11 value:self.minutesToCombinePieces];
  }
  if (self.hasElementOneDmg) {
    [output writeInt32:12 value:self.elementOneDmg];
  }
  if (self.hasElementTwoDmg) {
    [output writeInt32:13 value:self.elementTwoDmg];
  }
  if (self.hasElementThreeDmg) {
    [output writeInt32:14 value:self.elementThreeDmg];
  }
  if (self.hasElementFourDmg) {
    [output writeInt32:15 value:self.elementFourDmg];
  }
  if (self.hasElementFiveDmg) {
    [output writeInt32:16 value:self.elementFiveDmg];
  }
  if (self.hasHpLevelMultiplier) {
    [output writeFloat:17 value:self.hpLevelMultiplier];
  }
  if (self.hasAttackLevelMultiplier) {
    [output writeFloat:18 value:self.attackLevelMultiplier];
  }
  if (self.hasMaxLevel) {
    [output writeInt32:19 value:self.maxLevel];
  }
  if (self.hasEvolutionMonsterId) {
    [output writeInt32:20 value:self.evolutionMonsterId];
  }
  if (self.hasCarrotRecruited) {
    [output writeString:21 value:self.carrotRecruited];
  }
  if (self.hasCarrotDefeated) {
    [output writeString:22 value:self.carrotDefeated];
  }
  if (self.hasCarrotEvolved) {
    [output writeString:23 value:self.carrotEvolved];
  }
  if (self.hasDescription) {
    [output writeString:24 value:self.description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMonsterId) {
    size += computeInt32Size(1, self.monsterId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasMonsterGroup) {
    size += computeStringSize(3, self.monsterGroup);
  }
  if (self.hasQuality) {
    size += computeEnumSize(4, self.quality);
  }
  if (self.hasEvolutionLevel) {
    size += computeInt32Size(5, self.evolutionLevel);
  }
  if (self.hasDisplayName) {
    size += computeStringSize(6, self.displayName);
  }
  if (self.hasElement) {
    size += computeEnumSize(7, self.element);
  }
  if (self.hasBaseHp) {
    size += computeInt32Size(8, self.baseHp);
  }
  if (self.hasImagePrefix) {
    size += computeStringSize(9, self.imagePrefix);
  }
  if (self.hasNumPuzzlePieces) {
    size += computeInt32Size(10, self.numPuzzlePieces);
  }
  if (self.hasMinutesToCombinePieces) {
    size += computeInt32Size(11, self.minutesToCombinePieces);
  }
  if (self.hasElementOneDmg) {
    size += computeInt32Size(12, self.elementOneDmg);
  }
  if (self.hasElementTwoDmg) {
    size += computeInt32Size(13, self.elementTwoDmg);
  }
  if (self.hasElementThreeDmg) {
    size += computeInt32Size(14, self.elementThreeDmg);
  }
  if (self.hasElementFourDmg) {
    size += computeInt32Size(15, self.elementFourDmg);
  }
  if (self.hasElementFiveDmg) {
    size += computeInt32Size(16, self.elementFiveDmg);
  }
  if (self.hasHpLevelMultiplier) {
    size += computeFloatSize(17, self.hpLevelMultiplier);
  }
  if (self.hasAttackLevelMultiplier) {
    size += computeFloatSize(18, self.attackLevelMultiplier);
  }
  if (self.hasMaxLevel) {
    size += computeInt32Size(19, self.maxLevel);
  }
  if (self.hasEvolutionMonsterId) {
    size += computeInt32Size(20, self.evolutionMonsterId);
  }
  if (self.hasCarrotRecruited) {
    size += computeStringSize(21, self.carrotRecruited);
  }
  if (self.hasCarrotDefeated) {
    size += computeStringSize(22, self.carrotDefeated);
  }
  if (self.hasCarrotEvolved) {
    size += computeStringSize(23, self.carrotEvolved);
  }
  if (self.hasDescription) {
    size += computeStringSize(24, self.description);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MonsterProto*) parseFromData:(NSData*) data {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromData:data] build];
}
+ (MonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromInputStream:input] build];
}
+ (MonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (MonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto_Builder*) builder {
  return [[[MonsterProto_Builder alloc] init] autorelease];
}
+ (MonsterProto_Builder*) builderWithPrototype:(MonsterProto*) prototype {
  return [[MonsterProto builder] mergeFrom:prototype];
}
- (MonsterProto_Builder*) builder {
  return [MonsterProto builder];
}
@end

BOOL MonsterProto_MonsterQualityIsValidValue(MonsterProto_MonsterQuality value) {
  switch (value) {
    case MonsterProto_MonsterQualityCommon:
    case MonsterProto_MonsterQualityRare:
    case MonsterProto_MonsterQualityUltra:
    case MonsterProto_MonsterQualityEpic:
    case MonsterProto_MonsterQualityLegendary:
      return YES;
    default:
      return NO;
  }
}
BOOL MonsterProto_MonsterElementIsValidValue(MonsterProto_MonsterElement value) {
  switch (value) {
    case MonsterProto_MonsterElementFire:
    case MonsterProto_MonsterElementGrass:
    case MonsterProto_MonsterElementWater:
    case MonsterProto_MonsterElementLightning:
    case MonsterProto_MonsterElementDarkness:
      return YES;
    default:
      return NO;
  }
}
@interface MonsterProto_Builder()
@property (retain) MonsterProto* result;
@end

@implementation MonsterProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MonsterProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MonsterProto_Builder*) clear {
  self.result = [[[MonsterProto alloc] init] autorelease];
  return self;
}
- (MonsterProto_Builder*) clone {
  return [MonsterProto builderWithPrototype:result];
}
- (MonsterProto*) defaultInstance {
  return [MonsterProto defaultInstance];
}
- (MonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MonsterProto*) buildPartial {
  MonsterProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MonsterProto_Builder*) mergeFrom:(MonsterProto*) other {
  if (other == [MonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasMonsterGroup) {
    [self setMonsterGroup:other.monsterGroup];
  }
  if (other.hasQuality) {
    [self setQuality:other.quality];
  }
  if (other.hasEvolutionLevel) {
    [self setEvolutionLevel:other.evolutionLevel];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasElement) {
    [self setElement:other.element];
  }
  if (other.hasBaseHp) {
    [self setBaseHp:other.baseHp];
  }
  if (other.hasImagePrefix) {
    [self setImagePrefix:other.imagePrefix];
  }
  if (other.hasNumPuzzlePieces) {
    [self setNumPuzzlePieces:other.numPuzzlePieces];
  }
  if (other.hasMinutesToCombinePieces) {
    [self setMinutesToCombinePieces:other.minutesToCombinePieces];
  }
  if (other.hasElementOneDmg) {
    [self setElementOneDmg:other.elementOneDmg];
  }
  if (other.hasElementTwoDmg) {
    [self setElementTwoDmg:other.elementTwoDmg];
  }
  if (other.hasElementThreeDmg) {
    [self setElementThreeDmg:other.elementThreeDmg];
  }
  if (other.hasElementFourDmg) {
    [self setElementFourDmg:other.elementFourDmg];
  }
  if (other.hasElementFiveDmg) {
    [self setElementFiveDmg:other.elementFiveDmg];
  }
  if (other.hasHpLevelMultiplier) {
    [self setHpLevelMultiplier:other.hpLevelMultiplier];
  }
  if (other.hasAttackLevelMultiplier) {
    [self setAttackLevelMultiplier:other.attackLevelMultiplier];
  }
  if (other.hasMaxLevel) {
    [self setMaxLevel:other.maxLevel];
  }
  if (other.hasEvolutionMonsterId) {
    [self setEvolutionMonsterId:other.evolutionMonsterId];
  }
  if (other.hasCarrotRecruited) {
    [self setCarrotRecruited:other.carrotRecruited];
  }
  if (other.hasCarrotDefeated) {
    [self setCarrotDefeated:other.carrotDefeated];
  }
  if (other.hasCarrotEvolved) {
    [self setCarrotEvolved:other.carrotEvolved];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setMonsterGroup:[input readString]];
        break;
      }
      case 32: {
        int32_t value = [input readEnum];
        if (MonsterProto_MonsterQualityIsValidValue(value)) {
          [self setQuality:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setEvolutionLevel:[input readInt32]];
        break;
      }
      case 50: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 56: {
        int32_t value = [input readEnum];
        if (MonsterProto_MonsterElementIsValidValue(value)) {
          [self setElement:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 64: {
        [self setBaseHp:[input readInt32]];
        break;
      }
      case 74: {
        [self setImagePrefix:[input readString]];
        break;
      }
      case 80: {
        [self setNumPuzzlePieces:[input readInt32]];
        break;
      }
      case 88: {
        [self setMinutesToCombinePieces:[input readInt32]];
        break;
      }
      case 96: {
        [self setElementOneDmg:[input readInt32]];
        break;
      }
      case 104: {
        [self setElementTwoDmg:[input readInt32]];
        break;
      }
      case 112: {
        [self setElementThreeDmg:[input readInt32]];
        break;
      }
      case 120: {
        [self setElementFourDmg:[input readInt32]];
        break;
      }
      case 128: {
        [self setElementFiveDmg:[input readInt32]];
        break;
      }
      case 141: {
        [self setHpLevelMultiplier:[input readFloat]];
        break;
      }
      case 149: {
        [self setAttackLevelMultiplier:[input readFloat]];
        break;
      }
      case 152: {
        [self setMaxLevel:[input readInt32]];
        break;
      }
      case 160: {
        [self setEvolutionMonsterId:[input readInt32]];
        break;
      }
      case 170: {
        [self setCarrotRecruited:[input readString]];
        break;
      }
      case 178: {
        [self setCarrotDefeated:[input readString]];
        break;
      }
      case 186: {
        [self setCarrotEvolved:[input readString]];
        break;
      }
      case 194: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (MonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MonsterProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MonsterProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasMonsterGroup {
  return result.hasMonsterGroup;
}
- (NSString*) monsterGroup {
  return result.monsterGroup;
}
- (MonsterProto_Builder*) setMonsterGroup:(NSString*) value {
  result.hasMonsterGroup = YES;
  result.monsterGroup = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterGroup {
  result.hasMonsterGroup = NO;
  result.monsterGroup = @"";
  return self;
}
- (BOOL) hasQuality {
  return result.hasQuality;
}
- (MonsterProto_MonsterQuality) quality {
  return result.quality;
}
- (MonsterProto_Builder*) setQuality:(MonsterProto_MonsterQuality) value {
  result.hasQuality = YES;
  result.quality = value;
  return self;
}
- (MonsterProto_Builder*) clearQuality {
  result.hasQuality = NO;
  result.quality = MonsterProto_MonsterQualityCommon;
  return self;
}
- (BOOL) hasEvolutionLevel {
  return result.hasEvolutionLevel;
}
- (int32_t) evolutionLevel {
  return result.evolutionLevel;
}
- (MonsterProto_Builder*) setEvolutionLevel:(int32_t) value {
  result.hasEvolutionLevel = YES;
  result.evolutionLevel = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionLevel {
  result.hasEvolutionLevel = NO;
  result.evolutionLevel = 0;
  return self;
}
- (BOOL) hasDisplayName {
  return result.hasDisplayName;
}
- (NSString*) displayName {
  return result.displayName;
}
- (MonsterProto_Builder*) setDisplayName:(NSString*) value {
  result.hasDisplayName = YES;
  result.displayName = value;
  return self;
}
- (MonsterProto_Builder*) clearDisplayName {
  result.hasDisplayName = NO;
  result.displayName = @"";
  return self;
}
- (BOOL) hasElement {
  return result.hasElement;
}
- (MonsterProto_MonsterElement) element {
  return result.element;
}
- (MonsterProto_Builder*) setElement:(MonsterProto_MonsterElement) value {
  result.hasElement = YES;
  result.element = value;
  return self;
}
- (MonsterProto_Builder*) clearElement {
  result.hasElement = NO;
  result.element = MonsterProto_MonsterElementFire;
  return self;
}
- (BOOL) hasBaseHp {
  return result.hasBaseHp;
}
- (int32_t) baseHp {
  return result.baseHp;
}
- (MonsterProto_Builder*) setBaseHp:(int32_t) value {
  result.hasBaseHp = YES;
  result.baseHp = value;
  return self;
}
- (MonsterProto_Builder*) clearBaseHp {
  result.hasBaseHp = NO;
  result.baseHp = 0;
  return self;
}
- (BOOL) hasImagePrefix {
  return result.hasImagePrefix;
}
- (NSString*) imagePrefix {
  return result.imagePrefix;
}
- (MonsterProto_Builder*) setImagePrefix:(NSString*) value {
  result.hasImagePrefix = YES;
  result.imagePrefix = value;
  return self;
}
- (MonsterProto_Builder*) clearImagePrefix {
  result.hasImagePrefix = NO;
  result.imagePrefix = @"";
  return self;
}
- (BOOL) hasNumPuzzlePieces {
  return result.hasNumPuzzlePieces;
}
- (int32_t) numPuzzlePieces {
  return result.numPuzzlePieces;
}
- (MonsterProto_Builder*) setNumPuzzlePieces:(int32_t) value {
  result.hasNumPuzzlePieces = YES;
  result.numPuzzlePieces = value;
  return self;
}
- (MonsterProto_Builder*) clearNumPuzzlePieces {
  result.hasNumPuzzlePieces = NO;
  result.numPuzzlePieces = 0;
  return self;
}
- (BOOL) hasMinutesToCombinePieces {
  return result.hasMinutesToCombinePieces;
}
- (int32_t) minutesToCombinePieces {
  return result.minutesToCombinePieces;
}
- (MonsterProto_Builder*) setMinutesToCombinePieces:(int32_t) value {
  result.hasMinutesToCombinePieces = YES;
  result.minutesToCombinePieces = value;
  return self;
}
- (MonsterProto_Builder*) clearMinutesToCombinePieces {
  result.hasMinutesToCombinePieces = NO;
  result.minutesToCombinePieces = 0;
  return self;
}
- (BOOL) hasElementOneDmg {
  return result.hasElementOneDmg;
}
- (int32_t) elementOneDmg {
  return result.elementOneDmg;
}
- (MonsterProto_Builder*) setElementOneDmg:(int32_t) value {
  result.hasElementOneDmg = YES;
  result.elementOneDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementOneDmg {
  result.hasElementOneDmg = NO;
  result.elementOneDmg = 0;
  return self;
}
- (BOOL) hasElementTwoDmg {
  return result.hasElementTwoDmg;
}
- (int32_t) elementTwoDmg {
  return result.elementTwoDmg;
}
- (MonsterProto_Builder*) setElementTwoDmg:(int32_t) value {
  result.hasElementTwoDmg = YES;
  result.elementTwoDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementTwoDmg {
  result.hasElementTwoDmg = NO;
  result.elementTwoDmg = 0;
  return self;
}
- (BOOL) hasElementThreeDmg {
  return result.hasElementThreeDmg;
}
- (int32_t) elementThreeDmg {
  return result.elementThreeDmg;
}
- (MonsterProto_Builder*) setElementThreeDmg:(int32_t) value {
  result.hasElementThreeDmg = YES;
  result.elementThreeDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementThreeDmg {
  result.hasElementThreeDmg = NO;
  result.elementThreeDmg = 0;
  return self;
}
- (BOOL) hasElementFourDmg {
  return result.hasElementFourDmg;
}
- (int32_t) elementFourDmg {
  return result.elementFourDmg;
}
- (MonsterProto_Builder*) setElementFourDmg:(int32_t) value {
  result.hasElementFourDmg = YES;
  result.elementFourDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementFourDmg {
  result.hasElementFourDmg = NO;
  result.elementFourDmg = 0;
  return self;
}
- (BOOL) hasElementFiveDmg {
  return result.hasElementFiveDmg;
}
- (int32_t) elementFiveDmg {
  return result.elementFiveDmg;
}
- (MonsterProto_Builder*) setElementFiveDmg:(int32_t) value {
  result.hasElementFiveDmg = YES;
  result.elementFiveDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementFiveDmg {
  result.hasElementFiveDmg = NO;
  result.elementFiveDmg = 0;
  return self;
}
- (BOOL) hasHpLevelMultiplier {
  return result.hasHpLevelMultiplier;
}
- (Float32) hpLevelMultiplier {
  return result.hpLevelMultiplier;
}
- (MonsterProto_Builder*) setHpLevelMultiplier:(Float32) value {
  result.hasHpLevelMultiplier = YES;
  result.hpLevelMultiplier = value;
  return self;
}
- (MonsterProto_Builder*) clearHpLevelMultiplier {
  result.hasHpLevelMultiplier = NO;
  result.hpLevelMultiplier = 0;
  return self;
}
- (BOOL) hasAttackLevelMultiplier {
  return result.hasAttackLevelMultiplier;
}
- (Float32) attackLevelMultiplier {
  return result.attackLevelMultiplier;
}
- (MonsterProto_Builder*) setAttackLevelMultiplier:(Float32) value {
  result.hasAttackLevelMultiplier = YES;
  result.attackLevelMultiplier = value;
  return self;
}
- (MonsterProto_Builder*) clearAttackLevelMultiplier {
  result.hasAttackLevelMultiplier = NO;
  result.attackLevelMultiplier = 0;
  return self;
}
- (BOOL) hasMaxLevel {
  return result.hasMaxLevel;
}
- (int32_t) maxLevel {
  return result.maxLevel;
}
- (MonsterProto_Builder*) setMaxLevel:(int32_t) value {
  result.hasMaxLevel = YES;
  result.maxLevel = value;
  return self;
}
- (MonsterProto_Builder*) clearMaxLevel {
  result.hasMaxLevel = NO;
  result.maxLevel = 0;
  return self;
}
- (BOOL) hasEvolutionMonsterId {
  return result.hasEvolutionMonsterId;
}
- (int32_t) evolutionMonsterId {
  return result.evolutionMonsterId;
}
- (MonsterProto_Builder*) setEvolutionMonsterId:(int32_t) value {
  result.hasEvolutionMonsterId = YES;
  result.evolutionMonsterId = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionMonsterId {
  result.hasEvolutionMonsterId = NO;
  result.evolutionMonsterId = 0;
  return self;
}
- (BOOL) hasCarrotRecruited {
  return result.hasCarrotRecruited;
}
- (NSString*) carrotRecruited {
  return result.carrotRecruited;
}
- (MonsterProto_Builder*) setCarrotRecruited:(NSString*) value {
  result.hasCarrotRecruited = YES;
  result.carrotRecruited = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotRecruited {
  result.hasCarrotRecruited = NO;
  result.carrotRecruited = @"";
  return self;
}
- (BOOL) hasCarrotDefeated {
  return result.hasCarrotDefeated;
}
- (NSString*) carrotDefeated {
  return result.carrotDefeated;
}
- (MonsterProto_Builder*) setCarrotDefeated:(NSString*) value {
  result.hasCarrotDefeated = YES;
  result.carrotDefeated = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotDefeated {
  result.hasCarrotDefeated = NO;
  result.carrotDefeated = @"";
  return self;
}
- (BOOL) hasCarrotEvolved {
  return result.hasCarrotEvolved;
}
- (NSString*) carrotEvolved {
  return result.carrotEvolved;
}
- (MonsterProto_Builder*) setCarrotEvolved:(NSString*) value {
  result.hasCarrotEvolved = YES;
  result.carrotEvolved = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotEvolved {
  result.hasCarrotEvolved = NO;
  result.carrotEvolved = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (MonsterProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (MonsterProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
@end

@interface FullUserMonsterProto ()
@property int64_t userMonsterId;
@property int32_t userId;
@property int32_t monsterId;
@property int32_t currentExp;
@property int32_t currentLvl;
@property int32_t currentHealth;
@property int32_t numPieces;
@property BOOL isComplete;
@property int64_t combineStartTime;
@property int32_t teamSlotNum;
@end

@implementation FullUserMonsterProto

- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value {
  hasMonsterId_ = !!value;
}
@synthesize monsterId;
- (BOOL) hasCurrentExp {
  return !!hasCurrentExp_;
}
- (void) setHasCurrentExp:(BOOL) value {
  hasCurrentExp_ = !!value;
}
@synthesize currentExp;
- (BOOL) hasCurrentLvl {
  return !!hasCurrentLvl_;
}
- (void) setHasCurrentLvl:(BOOL) value {
  hasCurrentLvl_ = !!value;
}
@synthesize currentLvl;
- (BOOL) hasCurrentHealth {
  return !!hasCurrentHealth_;
}
- (void) setHasCurrentHealth:(BOOL) value {
  hasCurrentHealth_ = !!value;
}
@synthesize currentHealth;
- (BOOL) hasNumPieces {
  return !!hasNumPieces_;
}
- (void) setHasNumPieces:(BOOL) value {
  hasNumPieces_ = !!value;
}
@synthesize numPieces;
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value {
  hasIsComplete_ = !!value;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value {
  isComplete_ = !!value;
}
- (BOOL) hasCombineStartTime {
  return !!hasCombineStartTime_;
}
- (void) setHasCombineStartTime:(BOOL) value {
  hasCombineStartTime_ = !!value;
}
@synthesize combineStartTime;
- (BOOL) hasTeamSlotNum {
  return !!hasTeamSlotNum_;
}
- (void) setHasTeamSlotNum:(BOOL) value {
  hasTeamSlotNum_ = !!value;
}
@synthesize teamSlotNum;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterId = 0L;
    self.userId = 0;
    self.monsterId = 0;
    self.currentExp = 0;
    self.currentLvl = 0;
    self.currentHealth = 0;
    self.numPieces = 0;
    self.isComplete = NO;
    self.combineStartTime = 0L;
    self.teamSlotNum = 0;
  }
  return self;
}
static FullUserMonsterProto* defaultFullUserMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserMonsterProto class]) {
    defaultFullUserMonsterProtoInstance = [[FullUserMonsterProto alloc] init];
  }
}
+ (FullUserMonsterProto*) defaultInstance {
  return defaultFullUserMonsterProtoInstance;
}
- (FullUserMonsterProto*) defaultInstance {
  return defaultFullUserMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterId) {
    [output writeInt64:1 value:self.userMonsterId];
  }
  if (self.hasUserId) {
    [output writeInt32:2 value:self.userId];
  }
  if (self.hasMonsterId) {
    [output writeInt32:3 value:self.monsterId];
  }
  if (self.hasCurrentExp) {
    [output writeInt32:4 value:self.currentExp];
  }
  if (self.hasCurrentLvl) {
    [output writeInt32:5 value:self.currentLvl];
  }
  if (self.hasCurrentHealth) {
    [output writeInt32:6 value:self.currentHealth];
  }
  if (self.hasNumPieces) {
    [output writeInt32:7 value:self.numPieces];
  }
  if (self.hasIsComplete) {
    [output writeBool:8 value:self.isComplete];
  }
  if (self.hasCombineStartTime) {
    [output writeInt64:9 value:self.combineStartTime];
  }
  if (self.hasTeamSlotNum) {
    [output writeInt32:10 value:self.teamSlotNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMonsterId) {
    size += computeInt64Size(1, self.userMonsterId);
  }
  if (self.hasUserId) {
    size += computeInt32Size(2, self.userId);
  }
  if (self.hasMonsterId) {
    size += computeInt32Size(3, self.monsterId);
  }
  if (self.hasCurrentExp) {
    size += computeInt32Size(4, self.currentExp);
  }
  if (self.hasCurrentLvl) {
    size += computeInt32Size(5, self.currentLvl);
  }
  if (self.hasCurrentHealth) {
    size += computeInt32Size(6, self.currentHealth);
  }
  if (self.hasNumPieces) {
    size += computeInt32Size(7, self.numPieces);
  }
  if (self.hasIsComplete) {
    size += computeBoolSize(8, self.isComplete);
  }
  if (self.hasCombineStartTime) {
    size += computeInt64Size(9, self.combineStartTime);
  }
  if (self.hasTeamSlotNum) {
    size += computeInt32Size(10, self.teamSlotNum);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullUserMonsterProto*) parseFromData:(NSData*) data {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromData:data] build];
}
+ (FullUserMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromInputStream:input] build];
}
+ (FullUserMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto_Builder*) builder {
  return [[[FullUserMonsterProto_Builder alloc] init] autorelease];
}
+ (FullUserMonsterProto_Builder*) builderWithPrototype:(FullUserMonsterProto*) prototype {
  return [[FullUserMonsterProto builder] mergeFrom:prototype];
}
- (FullUserMonsterProto_Builder*) builder {
  return [FullUserMonsterProto builder];
}
@end

@interface FullUserMonsterProto_Builder()
@property (retain) FullUserMonsterProto* result;
@end

@implementation FullUserMonsterProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullUserMonsterProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserMonsterProto_Builder*) clear {
  self.result = [[[FullUserMonsterProto alloc] init] autorelease];
  return self;
}
- (FullUserMonsterProto_Builder*) clone {
  return [FullUserMonsterProto builderWithPrototype:result];
}
- (FullUserMonsterProto*) defaultInstance {
  return [FullUserMonsterProto defaultInstance];
}
- (FullUserMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserMonsterProto*) buildPartial {
  FullUserMonsterProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullUserMonsterProto_Builder*) mergeFrom:(FullUserMonsterProto*) other {
  if (other == [FullUserMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasCurrentExp) {
    [self setCurrentExp:other.currentExp];
  }
  if (other.hasCurrentLvl) {
    [self setCurrentLvl:other.currentLvl];
  }
  if (other.hasCurrentHealth) {
    [self setCurrentHealth:other.currentHealth];
  }
  if (other.hasNumPieces) {
    [self setNumPieces:other.numPieces];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.hasCombineStartTime) {
    [self setCombineStartTime:other.combineStartTime];
  }
  if (other.hasTeamSlotNum) {
    [self setTeamSlotNum:other.teamSlotNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 24: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 32: {
        [self setCurrentExp:[input readInt32]];
        break;
      }
      case 40: {
        [self setCurrentLvl:[input readInt32]];
        break;
      }
      case 48: {
        [self setCurrentHealth:[input readInt32]];
        break;
      }
      case 56: {
        [self setNumPieces:[input readInt32]];
        break;
      }
      case 64: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 72: {
        [self setCombineStartTime:[input readInt64]];
        break;
      }
      case 80: {
        [self setTeamSlotNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (FullUserMonsterProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (FullUserMonsterProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (FullUserMonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasCurrentExp {
  return result.hasCurrentExp;
}
- (int32_t) currentExp {
  return result.currentExp;
}
- (FullUserMonsterProto_Builder*) setCurrentExp:(int32_t) value {
  result.hasCurrentExp = YES;
  result.currentExp = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentExp {
  result.hasCurrentExp = NO;
  result.currentExp = 0;
  return self;
}
- (BOOL) hasCurrentLvl {
  return result.hasCurrentLvl;
}
- (int32_t) currentLvl {
  return result.currentLvl;
}
- (FullUserMonsterProto_Builder*) setCurrentLvl:(int32_t) value {
  result.hasCurrentLvl = YES;
  result.currentLvl = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentLvl {
  result.hasCurrentLvl = NO;
  result.currentLvl = 0;
  return self;
}
- (BOOL) hasCurrentHealth {
  return result.hasCurrentHealth;
}
- (int32_t) currentHealth {
  return result.currentHealth;
}
- (FullUserMonsterProto_Builder*) setCurrentHealth:(int32_t) value {
  result.hasCurrentHealth = YES;
  result.currentHealth = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentHealth {
  result.hasCurrentHealth = NO;
  result.currentHealth = 0;
  return self;
}
- (BOOL) hasNumPieces {
  return result.hasNumPieces;
}
- (int32_t) numPieces {
  return result.numPieces;
}
- (FullUserMonsterProto_Builder*) setNumPieces:(int32_t) value {
  result.hasNumPieces = YES;
  result.numPieces = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearNumPieces {
  result.hasNumPieces = NO;
  result.numPieces = 0;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (FullUserMonsterProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (BOOL) hasCombineStartTime {
  return result.hasCombineStartTime;
}
- (int64_t) combineStartTime {
  return result.combineStartTime;
}
- (FullUserMonsterProto_Builder*) setCombineStartTime:(int64_t) value {
  result.hasCombineStartTime = YES;
  result.combineStartTime = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCombineStartTime {
  result.hasCombineStartTime = NO;
  result.combineStartTime = 0L;
  return self;
}
- (BOOL) hasTeamSlotNum {
  return result.hasTeamSlotNum;
}
- (int32_t) teamSlotNum {
  return result.teamSlotNum;
}
- (FullUserMonsterProto_Builder*) setTeamSlotNum:(int32_t) value {
  result.hasTeamSlotNum = YES;
  result.teamSlotNum = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearTeamSlotNum {
  result.hasTeamSlotNum = NO;
  result.teamSlotNum = 0;
  return self;
}
@end

@interface UserMonsterHealingProto ()
@property int32_t userId;
@property int64_t userMonsterId;
@property int64_t expectedStartTimeMillis;
@end

@implementation UserMonsterHealingProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasExpectedStartTimeMillis {
  return !!hasExpectedStartTimeMillis_;
}
- (void) setHasExpectedStartTimeMillis:(BOOL) value {
  hasExpectedStartTimeMillis_ = !!value;
}
@synthesize expectedStartTimeMillis;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userMonsterId = 0L;
    self.expectedStartTimeMillis = 0L;
  }
  return self;
}
static UserMonsterHealingProto* defaultUserMonsterHealingProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterHealingProto class]) {
    defaultUserMonsterHealingProtoInstance = [[UserMonsterHealingProto alloc] init];
  }
}
+ (UserMonsterHealingProto*) defaultInstance {
  return defaultUserMonsterHealingProtoInstance;
}
- (UserMonsterHealingProto*) defaultInstance {
  return defaultUserMonsterHealingProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserMonsterId) {
    [output writeInt64:2 value:self.userMonsterId];
  }
  if (self.hasExpectedStartTimeMillis) {
    [output writeInt64:3 value:self.expectedStartTimeMillis];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserMonsterId) {
    size += computeInt64Size(2, self.userMonsterId);
  }
  if (self.hasExpectedStartTimeMillis) {
    size += computeInt64Size(3, self.expectedStartTimeMillis);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserMonsterHealingProto*) parseFromData:(NSData*) data {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromData:data] build];
}
+ (UserMonsterHealingProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterHealingProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterHealingProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto_Builder*) builder {
  return [[[UserMonsterHealingProto_Builder alloc] init] autorelease];
}
+ (UserMonsterHealingProto_Builder*) builderWithPrototype:(UserMonsterHealingProto*) prototype {
  return [[UserMonsterHealingProto builder] mergeFrom:prototype];
}
- (UserMonsterHealingProto_Builder*) builder {
  return [UserMonsterHealingProto builder];
}
@end

@interface UserMonsterHealingProto_Builder()
@property (retain) UserMonsterHealingProto* result;
@end

@implementation UserMonsterHealingProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserMonsterHealingProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterHealingProto_Builder*) clear {
  self.result = [[[UserMonsterHealingProto alloc] init] autorelease];
  return self;
}
- (UserMonsterHealingProto_Builder*) clone {
  return [UserMonsterHealingProto builderWithPrototype:result];
}
- (UserMonsterHealingProto*) defaultInstance {
  return [UserMonsterHealingProto defaultInstance];
}
- (UserMonsterHealingProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterHealingProto*) buildPartial {
  UserMonsterHealingProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserMonsterHealingProto_Builder*) mergeFrom:(UserMonsterHealingProto*) other {
  if (other == [UserMonsterHealingProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasExpectedStartTimeMillis) {
    [self setExpectedStartTimeMillis:other.expectedStartTimeMillis];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterHealingProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterHealingProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 24: {
        [self setExpectedStartTimeMillis:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserMonsterHealingProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (UserMonsterHealingProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasExpectedStartTimeMillis {
  return result.hasExpectedStartTimeMillis;
}
- (int64_t) expectedStartTimeMillis {
  return result.expectedStartTimeMillis;
}
- (UserMonsterHealingProto_Builder*) setExpectedStartTimeMillis:(int64_t) value {
  result.hasExpectedStartTimeMillis = YES;
  result.expectedStartTimeMillis = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearExpectedStartTimeMillis {
  result.hasExpectedStartTimeMillis = NO;
  result.expectedStartTimeMillis = 0L;
  return self;
}
@end

@interface UserMonsterCurrentHealthProto ()
@property int64_t userMonsterId;
@property int32_t currentHealth;
@end

@implementation UserMonsterCurrentHealthProto

- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasCurrentHealth {
  return !!hasCurrentHealth_;
}
- (void) setHasCurrentHealth:(BOOL) value {
  hasCurrentHealth_ = !!value;
}
@synthesize currentHealth;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterId = 0L;
    self.currentHealth = 0;
  }
  return self;
}
static UserMonsterCurrentHealthProto* defaultUserMonsterCurrentHealthProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterCurrentHealthProto class]) {
    defaultUserMonsterCurrentHealthProtoInstance = [[UserMonsterCurrentHealthProto alloc] init];
  }
}
+ (UserMonsterCurrentHealthProto*) defaultInstance {
  return defaultUserMonsterCurrentHealthProtoInstance;
}
- (UserMonsterCurrentHealthProto*) defaultInstance {
  return defaultUserMonsterCurrentHealthProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterId) {
    [output writeInt64:1 value:self.userMonsterId];
  }
  if (self.hasCurrentHealth) {
    [output writeInt32:2 value:self.currentHealth];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMonsterId) {
    size += computeInt64Size(1, self.userMonsterId);
  }
  if (self.hasCurrentHealth) {
    size += computeInt32Size(2, self.currentHealth);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserMonsterCurrentHealthProto*) parseFromData:(NSData*) data {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromData:data] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentHealthProto_Builder*) builder {
  return [[[UserMonsterCurrentHealthProto_Builder alloc] init] autorelease];
}
+ (UserMonsterCurrentHealthProto_Builder*) builderWithPrototype:(UserMonsterCurrentHealthProto*) prototype {
  return [[UserMonsterCurrentHealthProto builder] mergeFrom:prototype];
}
- (UserMonsterCurrentHealthProto_Builder*) builder {
  return [UserMonsterCurrentHealthProto builder];
}
@end

@interface UserMonsterCurrentHealthProto_Builder()
@property (retain) UserMonsterCurrentHealthProto* result;
@end

@implementation UserMonsterCurrentHealthProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserMonsterCurrentHealthProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterCurrentHealthProto_Builder*) clear {
  self.result = [[[UserMonsterCurrentHealthProto alloc] init] autorelease];
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) clone {
  return [UserMonsterCurrentHealthProto builderWithPrototype:result];
}
- (UserMonsterCurrentHealthProto*) defaultInstance {
  return [UserMonsterCurrentHealthProto defaultInstance];
}
- (UserMonsterCurrentHealthProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterCurrentHealthProto*) buildPartial {
  UserMonsterCurrentHealthProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserMonsterCurrentHealthProto_Builder*) mergeFrom:(UserMonsterCurrentHealthProto*) other {
  if (other == [UserMonsterCurrentHealthProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasCurrentHealth) {
    [self setCurrentHealth:other.currentHealth];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterCurrentHealthProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 16: {
        [self setCurrentHealth:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (UserMonsterCurrentHealthProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasCurrentHealth {
  return result.hasCurrentHealth;
}
- (int32_t) currentHealth {
  return result.currentHealth;
}
- (UserMonsterCurrentHealthProto_Builder*) setCurrentHealth:(int32_t) value {
  result.hasCurrentHealth = YES;
  result.currentHealth = value;
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) clearCurrentHealth {
  result.hasCurrentHealth = NO;
  result.currentHealth = 0;
  return self;
}
@end

@interface UserEnhancementProto ()
@property int32_t userId;
@property (retain) UserEnhancementItemProto* baseMonster;
@property (retain) NSMutableArray* mutableFeedersList;
@end

@implementation UserEnhancementProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasBaseMonster {
  return !!hasBaseMonster_;
}
- (void) setHasBaseMonster:(BOOL) value {
  hasBaseMonster_ = !!value;
}
@synthesize baseMonster;
@synthesize mutableFeedersList;
- (void) dealloc {
  self.baseMonster = nil;
  self.mutableFeedersList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.baseMonster = [UserEnhancementItemProto defaultInstance];
  }
  return self;
}
static UserEnhancementProto* defaultUserEnhancementProtoInstance = nil;
+ (void) initialize {
  if (self == [UserEnhancementProto class]) {
    defaultUserEnhancementProtoInstance = [[UserEnhancementProto alloc] init];
  }
}
+ (UserEnhancementProto*) defaultInstance {
  return defaultUserEnhancementProtoInstance;
}
- (UserEnhancementProto*) defaultInstance {
  return defaultUserEnhancementProtoInstance;
}
- (NSArray*) feedersList {
  return mutableFeedersList;
}
- (UserEnhancementItemProto*) feedersAtIndex:(int32_t) index {
  id value = [mutableFeedersList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasBaseMonster) {
    [output writeMessage:2 value:self.baseMonster];
  }
  for (UserEnhancementItemProto* element in self.feedersList) {
    [output writeMessage:3 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasBaseMonster) {
    size += computeMessageSize(2, self.baseMonster);
  }
  for (UserEnhancementItemProto* element in self.feedersList) {
    size += computeMessageSize(3, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserEnhancementProto*) parseFromData:(NSData*) data {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromData:data] build];
}
+ (UserEnhancementProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromInputStream:input] build];
}
+ (UserEnhancementProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserEnhancementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementProto_Builder*) builder {
  return [[[UserEnhancementProto_Builder alloc] init] autorelease];
}
+ (UserEnhancementProto_Builder*) builderWithPrototype:(UserEnhancementProto*) prototype {
  return [[UserEnhancementProto builder] mergeFrom:prototype];
}
- (UserEnhancementProto_Builder*) builder {
  return [UserEnhancementProto builder];
}
@end

@interface UserEnhancementProto_Builder()
@property (retain) UserEnhancementProto* result;
@end

@implementation UserEnhancementProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserEnhancementProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserEnhancementProto_Builder*) clear {
  self.result = [[[UserEnhancementProto alloc] init] autorelease];
  return self;
}
- (UserEnhancementProto_Builder*) clone {
  return [UserEnhancementProto builderWithPrototype:result];
}
- (UserEnhancementProto*) defaultInstance {
  return [UserEnhancementProto defaultInstance];
}
- (UserEnhancementProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserEnhancementProto*) buildPartial {
  UserEnhancementProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserEnhancementProto_Builder*) mergeFrom:(UserEnhancementProto*) other {
  if (other == [UserEnhancementProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasBaseMonster) {
    [self mergeBaseMonster:other.baseMonster];
  }
  if (other.mutableFeedersList.count > 0) {
    if (result.mutableFeedersList == nil) {
      result.mutableFeedersList = [NSMutableArray array];
    }
    [result.mutableFeedersList addObjectsFromArray:other.mutableFeedersList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserEnhancementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserEnhancementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        UserEnhancementItemProto_Builder* subBuilder = [UserEnhancementItemProto builder];
        if (self.hasBaseMonster) {
          [subBuilder mergeFrom:self.baseMonster];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseMonster:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserEnhancementItemProto_Builder* subBuilder = [UserEnhancementItemProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeeders:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserEnhancementProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserEnhancementProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasBaseMonster {
  return result.hasBaseMonster;
}
- (UserEnhancementItemProto*) baseMonster {
  return result.baseMonster;
}
- (UserEnhancementProto_Builder*) setBaseMonster:(UserEnhancementItemProto*) value {
  result.hasBaseMonster = YES;
  result.baseMonster = value;
  return self;
}
- (UserEnhancementProto_Builder*) setBaseMonsterBuilder:(UserEnhancementItemProto_Builder*) builderForValue {
  return [self setBaseMonster:[builderForValue build]];
}
- (UserEnhancementProto_Builder*) mergeBaseMonster:(UserEnhancementItemProto*) value {
  if (result.hasBaseMonster &&
      result.baseMonster != [UserEnhancementItemProto defaultInstance]) {
    result.baseMonster =
      [[[UserEnhancementItemProto builderWithPrototype:result.baseMonster] mergeFrom:value] buildPartial];
  } else {
    result.baseMonster = value;
  }
  result.hasBaseMonster = YES;
  return self;
}
- (UserEnhancementProto_Builder*) clearBaseMonster {
  result.hasBaseMonster = NO;
  result.baseMonster = [UserEnhancementItemProto defaultInstance];
  return self;
}
- (NSArray*) feedersList {
  if (result.mutableFeedersList == nil) { return [NSArray array]; }
  return result.mutableFeedersList;
}
- (UserEnhancementItemProto*) feedersAtIndex:(int32_t) index {
  return [result feedersAtIndex:index];
}
- (UserEnhancementProto_Builder*) replaceFeedersAtIndex:(int32_t) index with:(UserEnhancementItemProto*) value {
  [result.mutableFeedersList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UserEnhancementProto_Builder*) addAllFeeders:(NSArray*) values {
  if (result.mutableFeedersList == nil) {
    result.mutableFeedersList = [NSMutableArray array];
  }
  [result.mutableFeedersList addObjectsFromArray:values];
  return self;
}
- (UserEnhancementProto_Builder*) clearFeedersList {
  result.mutableFeedersList = nil;
  return self;
}
- (UserEnhancementProto_Builder*) addFeeders:(UserEnhancementItemProto*) value {
  if (result.mutableFeedersList == nil) {
    result.mutableFeedersList = [NSMutableArray array];
  }
  [result.mutableFeedersList addObject:value];
  return self;
}
@end

@interface UserEnhancementItemProto ()
@property int64_t userMonsterId;
@property int64_t expectedStartTimeMillis;
@end

@implementation UserEnhancementItemProto

- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasExpectedStartTimeMillis {
  return !!hasExpectedStartTimeMillis_;
}
- (void) setHasExpectedStartTimeMillis:(BOOL) value {
  hasExpectedStartTimeMillis_ = !!value;
}
@synthesize expectedStartTimeMillis;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterId = 0L;
    self.expectedStartTimeMillis = 0L;
  }
  return self;
}
static UserEnhancementItemProto* defaultUserEnhancementItemProtoInstance = nil;
+ (void) initialize {
  if (self == [UserEnhancementItemProto class]) {
    defaultUserEnhancementItemProtoInstance = [[UserEnhancementItemProto alloc] init];
  }
}
+ (UserEnhancementItemProto*) defaultInstance {
  return defaultUserEnhancementItemProtoInstance;
}
- (UserEnhancementItemProto*) defaultInstance {
  return defaultUserEnhancementItemProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterId) {
    [output writeInt64:1 value:self.userMonsterId];
  }
  if (self.hasExpectedStartTimeMillis) {
    [output writeInt64:2 value:self.expectedStartTimeMillis];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMonsterId) {
    size += computeInt64Size(1, self.userMonsterId);
  }
  if (self.hasExpectedStartTimeMillis) {
    size += computeInt64Size(2, self.expectedStartTimeMillis);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserEnhancementItemProto*) parseFromData:(NSData*) data {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromData:data] build];
}
+ (UserEnhancementItemProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementItemProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromInputStream:input] build];
}
+ (UserEnhancementItemProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementItemProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserEnhancementItemProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementItemProto_Builder*) builder {
  return [[[UserEnhancementItemProto_Builder alloc] init] autorelease];
}
+ (UserEnhancementItemProto_Builder*) builderWithPrototype:(UserEnhancementItemProto*) prototype {
  return [[UserEnhancementItemProto builder] mergeFrom:prototype];
}
- (UserEnhancementItemProto_Builder*) builder {
  return [UserEnhancementItemProto builder];
}
@end

@interface UserEnhancementItemProto_Builder()
@property (retain) UserEnhancementItemProto* result;
@end

@implementation UserEnhancementItemProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserEnhancementItemProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserEnhancementItemProto_Builder*) clear {
  self.result = [[[UserEnhancementItemProto alloc] init] autorelease];
  return self;
}
- (UserEnhancementItemProto_Builder*) clone {
  return [UserEnhancementItemProto builderWithPrototype:result];
}
- (UserEnhancementItemProto*) defaultInstance {
  return [UserEnhancementItemProto defaultInstance];
}
- (UserEnhancementItemProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserEnhancementItemProto*) buildPartial {
  UserEnhancementItemProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserEnhancementItemProto_Builder*) mergeFrom:(UserEnhancementItemProto*) other {
  if (other == [UserEnhancementItemProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasExpectedStartTimeMillis) {
    [self setExpectedStartTimeMillis:other.expectedStartTimeMillis];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserEnhancementItemProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserEnhancementItemProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 16: {
        [self setExpectedStartTimeMillis:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (UserEnhancementItemProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (UserEnhancementItemProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasExpectedStartTimeMillis {
  return result.hasExpectedStartTimeMillis;
}
- (int64_t) expectedStartTimeMillis {
  return result.expectedStartTimeMillis;
}
- (UserEnhancementItemProto_Builder*) setExpectedStartTimeMillis:(int64_t) value {
  result.hasExpectedStartTimeMillis = YES;
  result.expectedStartTimeMillis = value;
  return self;
}
- (UserEnhancementItemProto_Builder*) clearExpectedStartTimeMillis {
  result.hasExpectedStartTimeMillis = NO;
  result.expectedStartTimeMillis = 0L;
  return self;
}
@end

@interface UserMonsterCurrentExpProto ()
@property int64_t userMonsterId;
@property int32_t expectedExperience;
@property int32_t expectedLevel;
@end

@implementation UserMonsterCurrentExpProto

- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasExpectedExperience {
  return !!hasExpectedExperience_;
}
- (void) setHasExpectedExperience:(BOOL) value {
  hasExpectedExperience_ = !!value;
}
@synthesize expectedExperience;
- (BOOL) hasExpectedLevel {
  return !!hasExpectedLevel_;
}
- (void) setHasExpectedLevel:(BOOL) value {
  hasExpectedLevel_ = !!value;
}
@synthesize expectedLevel;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterId = 0L;
    self.expectedExperience = 0;
    self.expectedLevel = 0;
  }
  return self;
}
static UserMonsterCurrentExpProto* defaultUserMonsterCurrentExpProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterCurrentExpProto class]) {
    defaultUserMonsterCurrentExpProtoInstance = [[UserMonsterCurrentExpProto alloc] init];
  }
}
+ (UserMonsterCurrentExpProto*) defaultInstance {
  return defaultUserMonsterCurrentExpProtoInstance;
}
- (UserMonsterCurrentExpProto*) defaultInstance {
  return defaultUserMonsterCurrentExpProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterId) {
    [output writeInt64:1 value:self.userMonsterId];
  }
  if (self.hasExpectedExperience) {
    [output writeInt32:2 value:self.expectedExperience];
  }
  if (self.hasExpectedLevel) {
    [output writeInt32:3 value:self.expectedLevel];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMonsterId) {
    size += computeInt64Size(1, self.userMonsterId);
  }
  if (self.hasExpectedExperience) {
    size += computeInt32Size(2, self.expectedExperience);
  }
  if (self.hasExpectedLevel) {
    size += computeInt32Size(3, self.expectedLevel);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserMonsterCurrentExpProto*) parseFromData:(NSData*) data {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromData:data] build];
}
+ (UserMonsterCurrentExpProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentExpProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterCurrentExpProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentExpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterCurrentExpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentExpProto_Builder*) builder {
  return [[[UserMonsterCurrentExpProto_Builder alloc] init] autorelease];
}
+ (UserMonsterCurrentExpProto_Builder*) builderWithPrototype:(UserMonsterCurrentExpProto*) prototype {
  return [[UserMonsterCurrentExpProto builder] mergeFrom:prototype];
}
- (UserMonsterCurrentExpProto_Builder*) builder {
  return [UserMonsterCurrentExpProto builder];
}
@end

@interface UserMonsterCurrentExpProto_Builder()
@property (retain) UserMonsterCurrentExpProto* result;
@end

@implementation UserMonsterCurrentExpProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserMonsterCurrentExpProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterCurrentExpProto_Builder*) clear {
  self.result = [[[UserMonsterCurrentExpProto alloc] init] autorelease];
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clone {
  return [UserMonsterCurrentExpProto builderWithPrototype:result];
}
- (UserMonsterCurrentExpProto*) defaultInstance {
  return [UserMonsterCurrentExpProto defaultInstance];
}
- (UserMonsterCurrentExpProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterCurrentExpProto*) buildPartial {
  UserMonsterCurrentExpProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserMonsterCurrentExpProto_Builder*) mergeFrom:(UserMonsterCurrentExpProto*) other {
  if (other == [UserMonsterCurrentExpProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasExpectedExperience) {
    [self setExpectedExperience:other.expectedExperience];
  }
  if (other.hasExpectedLevel) {
    [self setExpectedLevel:other.expectedLevel];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterCurrentExpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 16: {
        [self setExpectedExperience:[input readInt32]];
        break;
      }
      case 24: {
        [self setExpectedLevel:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (UserMonsterCurrentExpProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasExpectedExperience {
  return result.hasExpectedExperience;
}
- (int32_t) expectedExperience {
  return result.expectedExperience;
}
- (UserMonsterCurrentExpProto_Builder*) setExpectedExperience:(int32_t) value {
  result.hasExpectedExperience = YES;
  result.expectedExperience = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearExpectedExperience {
  result.hasExpectedExperience = NO;
  result.expectedExperience = 0;
  return self;
}
- (BOOL) hasExpectedLevel {
  return result.hasExpectedLevel;
}
- (int32_t) expectedLevel {
  return result.expectedLevel;
}
- (UserMonsterCurrentExpProto_Builder*) setExpectedLevel:(int32_t) value {
  result.hasExpectedLevel = YES;
  result.expectedLevel = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearExpectedLevel {
  result.hasExpectedLevel = NO;
  result.expectedLevel = 0;
  return self;
}
@end

@interface MinimumUserMonsterSellProto ()
@property int64_t userMonsterId;
@property int32_t cashAmount;
@end

@implementation MinimumUserMonsterSellProto

- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasCashAmount {
  return !!hasCashAmount_;
}
- (void) setHasCashAmount:(BOOL) value {
  hasCashAmount_ = !!value;
}
@synthesize cashAmount;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterId = 0L;
    self.cashAmount = 0;
  }
  return self;
}
static MinimumUserMonsterSellProto* defaultMinimumUserMonsterSellProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserMonsterSellProto class]) {
    defaultMinimumUserMonsterSellProtoInstance = [[MinimumUserMonsterSellProto alloc] init];
  }
}
+ (MinimumUserMonsterSellProto*) defaultInstance {
  return defaultMinimumUserMonsterSellProtoInstance;
}
- (MinimumUserMonsterSellProto*) defaultInstance {
  return defaultMinimumUserMonsterSellProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterId) {
    [output writeInt64:1 value:self.userMonsterId];
  }
  if (self.hasCashAmount) {
    [output writeInt32:2 value:self.cashAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMonsterId) {
    size += computeInt64Size(1, self.userMonsterId);
  }
  if (self.hasCashAmount) {
    size += computeInt32Size(2, self.cashAmount);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MinimumUserMonsterSellProto*) parseFromData:(NSData*) data {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromData:data] build];
}
+ (MinimumUserMonsterSellProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterSellProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromInputStream:input] build];
}
+ (MinimumUserMonsterSellProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterSellProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserMonsterSellProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterSellProto_Builder*) builder {
  return [[[MinimumUserMonsterSellProto_Builder alloc] init] autorelease];
}
+ (MinimumUserMonsterSellProto_Builder*) builderWithPrototype:(MinimumUserMonsterSellProto*) prototype {
  return [[MinimumUserMonsterSellProto builder] mergeFrom:prototype];
}
- (MinimumUserMonsterSellProto_Builder*) builder {
  return [MinimumUserMonsterSellProto builder];
}
@end

@interface MinimumUserMonsterSellProto_Builder()
@property (retain) MinimumUserMonsterSellProto* result;
@end

@implementation MinimumUserMonsterSellProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MinimumUserMonsterSellProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserMonsterSellProto_Builder*) clear {
  self.result = [[[MinimumUserMonsterSellProto alloc] init] autorelease];
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) clone {
  return [MinimumUserMonsterSellProto builderWithPrototype:result];
}
- (MinimumUserMonsterSellProto*) defaultInstance {
  return [MinimumUserMonsterSellProto defaultInstance];
}
- (MinimumUserMonsterSellProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserMonsterSellProto*) buildPartial {
  MinimumUserMonsterSellProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MinimumUserMonsterSellProto_Builder*) mergeFrom:(MinimumUserMonsterSellProto*) other {
  if (other == [MinimumUserMonsterSellProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasCashAmount) {
    [self setCashAmount:other.cashAmount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserMonsterSellProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 16: {
        [self setCashAmount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (MinimumUserMonsterSellProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasCashAmount {
  return result.hasCashAmount;
}
- (int32_t) cashAmount {
  return result.cashAmount;
}
- (MinimumUserMonsterSellProto_Builder*) setCashAmount:(int32_t) value {
  result.hasCashAmount = YES;
  result.cashAmount = value;
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) clearCashAmount {
  result.hasCashAmount = NO;
  result.cashAmount = 0;
  return self;
}
@end

@interface UserCurrentMonsterTeamProto ()
@property int32_t userId;
@property (retain) NSMutableArray* mutableCurrentTeamList;
@end

@implementation UserCurrentMonsterTeamProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
@synthesize mutableCurrentTeamList;
- (void) dealloc {
  self.mutableCurrentTeamList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
  }
  return self;
}
static UserCurrentMonsterTeamProto* defaultUserCurrentMonsterTeamProtoInstance = nil;
+ (void) initialize {
  if (self == [UserCurrentMonsterTeamProto class]) {
    defaultUserCurrentMonsterTeamProtoInstance = [[UserCurrentMonsterTeamProto alloc] init];
  }
}
+ (UserCurrentMonsterTeamProto*) defaultInstance {
  return defaultUserCurrentMonsterTeamProtoInstance;
}
- (UserCurrentMonsterTeamProto*) defaultInstance {
  return defaultUserCurrentMonsterTeamProtoInstance;
}
- (NSArray*) currentTeamList {
  return mutableCurrentTeamList;
}
- (FullUserMonsterProto*) currentTeamAtIndex:(int32_t) index {
  id value = [mutableCurrentTeamList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  for (FullUserMonsterProto* element in self.currentTeamList) {
    [output writeMessage:2 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  for (FullUserMonsterProto* element in self.currentTeamList) {
    size += computeMessageSize(2, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserCurrentMonsterTeamProto*) parseFromData:(NSData*) data {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromData:data] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromInputStream:input] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserCurrentMonsterTeamProto_Builder*) builder {
  return [[[UserCurrentMonsterTeamProto_Builder alloc] init] autorelease];
}
+ (UserCurrentMonsterTeamProto_Builder*) builderWithPrototype:(UserCurrentMonsterTeamProto*) prototype {
  return [[UserCurrentMonsterTeamProto builder] mergeFrom:prototype];
}
- (UserCurrentMonsterTeamProto_Builder*) builder {
  return [UserCurrentMonsterTeamProto builder];
}
@end

@interface UserCurrentMonsterTeamProto_Builder()
@property (retain) UserCurrentMonsterTeamProto* result;
@end

@implementation UserCurrentMonsterTeamProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserCurrentMonsterTeamProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserCurrentMonsterTeamProto_Builder*) clear {
  self.result = [[[UserCurrentMonsterTeamProto alloc] init] autorelease];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) clone {
  return [UserCurrentMonsterTeamProto builderWithPrototype:result];
}
- (UserCurrentMonsterTeamProto*) defaultInstance {
  return [UserCurrentMonsterTeamProto defaultInstance];
}
- (UserCurrentMonsterTeamProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserCurrentMonsterTeamProto*) buildPartial {
  UserCurrentMonsterTeamProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserCurrentMonsterTeamProto_Builder*) mergeFrom:(UserCurrentMonsterTeamProto*) other {
  if (other == [UserCurrentMonsterTeamProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.mutableCurrentTeamList.count > 0) {
    if (result.mutableCurrentTeamList == nil) {
      result.mutableCurrentTeamList = [NSMutableArray array];
    }
    [result.mutableCurrentTeamList addObjectsFromArray:other.mutableCurrentTeamList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserCurrentMonsterTeamProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 18: {
        FullUserMonsterProto_Builder* subBuilder = [FullUserMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCurrentTeam:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserCurrentMonsterTeamProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (NSArray*) currentTeamList {
  if (result.mutableCurrentTeamList == nil) { return [NSArray array]; }
  return result.mutableCurrentTeamList;
}
- (FullUserMonsterProto*) currentTeamAtIndex:(int32_t) index {
  return [result currentTeamAtIndex:index];
}
- (UserCurrentMonsterTeamProto_Builder*) replaceCurrentTeamAtIndex:(int32_t) index with:(FullUserMonsterProto*) value {
  [result.mutableCurrentTeamList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) addAllCurrentTeam:(NSArray*) values {
  if (result.mutableCurrentTeamList == nil) {
    result.mutableCurrentTeamList = [NSMutableArray array];
  }
  [result.mutableCurrentTeamList addObjectsFromArray:values];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) clearCurrentTeamList {
  result.mutableCurrentTeamList = nil;
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) addCurrentTeam:(FullUserMonsterProto*) value {
  if (result.mutableCurrentTeamList == nil) {
    result.mutableCurrentTeamList = [NSMutableArray array];
  }
  [result.mutableCurrentTeamList addObject:value];
  return self;
}
@end

