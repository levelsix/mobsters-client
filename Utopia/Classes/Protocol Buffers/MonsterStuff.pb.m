// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MonsterStuff.pb.h"

@implementation MonsterStuffRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MonsterStuffRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MonsterProto ()
@property int32_t monsterId;
@property (retain) NSString* name;
@property MonsterProto_MonsterQuality quality;
@property int32_t evolutionLevel;
@property (retain) NSString* displayName;
@property MonsterProto_MonsterElement element;
@property int32_t maxHp;
@property (retain) NSString* imageName;
@property MonsterProto_MonsterType monsterType;
@property int32_t expReward;
@property int32_t silverReward;
@property int32_t monsterIdSuccessor;
@property BOOL puzzlePieceDropped;
@property (retain) NSString* carrotDefeated;
@property (retain) NSString* carrotRecruited;
@property (retain) NSString* carrotEvolved;
@property int32_t elementOneDmg;
@property int32_t elementTwoDmg;
@property int32_t elementThreeDmg;
@property int32_t elementFourDmg;
@property int32_t elementFiveDmg;
@end

@implementation MonsterProto

- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value {
  hasMonsterId_ = !!value;
}
@synthesize monsterId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasQuality {
  return !!hasQuality_;
}
- (void) setHasQuality:(BOOL) value {
  hasQuality_ = !!value;
}
@synthesize quality;
- (BOOL) hasEvolutionLevel {
  return !!hasEvolutionLevel_;
}
- (void) setHasEvolutionLevel:(BOOL) value {
  hasEvolutionLevel_ = !!value;
}
@synthesize evolutionLevel;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) value {
  hasDisplayName_ = !!value;
}
@synthesize displayName;
- (BOOL) hasElement {
  return !!hasElement_;
}
- (void) setHasElement:(BOOL) value {
  hasElement_ = !!value;
}
@synthesize element;
- (BOOL) hasMaxHp {
  return !!hasMaxHp_;
}
- (void) setHasMaxHp:(BOOL) value {
  hasMaxHp_ = !!value;
}
@synthesize maxHp;
- (BOOL) hasImageName {
  return !!hasImageName_;
}
- (void) setHasImageName:(BOOL) value {
  hasImageName_ = !!value;
}
@synthesize imageName;
- (BOOL) hasMonsterType {
  return !!hasMonsterType_;
}
- (void) setHasMonsterType:(BOOL) value {
  hasMonsterType_ = !!value;
}
@synthesize monsterType;
- (BOOL) hasExpReward {
  return !!hasExpReward_;
}
- (void) setHasExpReward:(BOOL) value {
  hasExpReward_ = !!value;
}
@synthesize expReward;
- (BOOL) hasSilverReward {
  return !!hasSilverReward_;
}
- (void) setHasSilverReward:(BOOL) value {
  hasSilverReward_ = !!value;
}
@synthesize silverReward;
- (BOOL) hasMonsterIdSuccessor {
  return !!hasMonsterIdSuccessor_;
}
- (void) setHasMonsterIdSuccessor:(BOOL) value {
  hasMonsterIdSuccessor_ = !!value;
}
@synthesize monsterIdSuccessor;
- (BOOL) hasPuzzlePieceDropped {
  return !!hasPuzzlePieceDropped_;
}
- (void) setHasPuzzlePieceDropped:(BOOL) value {
  hasPuzzlePieceDropped_ = !!value;
}
- (BOOL) puzzlePieceDropped {
  return !!puzzlePieceDropped_;
}
- (void) setPuzzlePieceDropped:(BOOL) value {
  puzzlePieceDropped_ = !!value;
}
- (BOOL) hasCarrotDefeated {
  return !!hasCarrotDefeated_;
}
- (void) setHasCarrotDefeated:(BOOL) value {
  hasCarrotDefeated_ = !!value;
}
@synthesize carrotDefeated;
- (BOOL) hasCarrotRecruited {
  return !!hasCarrotRecruited_;
}
- (void) setHasCarrotRecruited:(BOOL) value {
  hasCarrotRecruited_ = !!value;
}
@synthesize carrotRecruited;
- (BOOL) hasCarrotEvolved {
  return !!hasCarrotEvolved_;
}
- (void) setHasCarrotEvolved:(BOOL) value {
  hasCarrotEvolved_ = !!value;
}
@synthesize carrotEvolved;
- (BOOL) hasElementOneDmg {
  return !!hasElementOneDmg_;
}
- (void) setHasElementOneDmg:(BOOL) value {
  hasElementOneDmg_ = !!value;
}
@synthesize elementOneDmg;
- (BOOL) hasElementTwoDmg {
  return !!hasElementTwoDmg_;
}
- (void) setHasElementTwoDmg:(BOOL) value {
  hasElementTwoDmg_ = !!value;
}
@synthesize elementTwoDmg;
- (BOOL) hasElementThreeDmg {
  return !!hasElementThreeDmg_;
}
- (void) setHasElementThreeDmg:(BOOL) value {
  hasElementThreeDmg_ = !!value;
}
@synthesize elementThreeDmg;
- (BOOL) hasElementFourDmg {
  return !!hasElementFourDmg_;
}
- (void) setHasElementFourDmg:(BOOL) value {
  hasElementFourDmg_ = !!value;
}
@synthesize elementFourDmg;
- (BOOL) hasElementFiveDmg {
  return !!hasElementFiveDmg_;
}
- (void) setHasElementFiveDmg:(BOOL) value {
  hasElementFiveDmg_ = !!value;
}
@synthesize elementFiveDmg;
- (void) dealloc {
  self.name = nil;
  self.displayName = nil;
  self.imageName = nil;
  self.carrotDefeated = nil;
  self.carrotRecruited = nil;
  self.carrotEvolved = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.monsterId = 0;
    self.name = @"";
    self.quality = MonsterProto_MonsterQualityCommon;
    self.evolutionLevel = 0;
    self.displayName = @"";
    self.element = MonsterProto_MonsterElementFire;
    self.maxHp = 0;
    self.imageName = @"";
    self.monsterType = MonsterProto_MonsterTypeRegular;
    self.expReward = 0;
    self.silverReward = 0;
    self.monsterIdSuccessor = 0;
    self.puzzlePieceDropped = NO;
    self.carrotDefeated = @"";
    self.carrotRecruited = @"";
    self.carrotEvolved = @"";
    self.elementOneDmg = 0;
    self.elementTwoDmg = 0;
    self.elementThreeDmg = 0;
    self.elementFourDmg = 0;
    self.elementFiveDmg = 0;
  }
  return self;
}
static MonsterProto* defaultMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [MonsterProto class]) {
    defaultMonsterProtoInstance = [[MonsterProto alloc] init];
  }
}
+ (MonsterProto*) defaultInstance {
  return defaultMonsterProtoInstance;
}
- (MonsterProto*) defaultInstance {
  return defaultMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasQuality) {
    [output writeEnum:3 value:self.quality];
  }
  if (self.hasEvolutionLevel) {
    [output writeInt32:4 value:self.evolutionLevel];
  }
  if (self.hasDisplayName) {
    [output writeString:5 value:self.displayName];
  }
  if (self.hasElement) {
    [output writeEnum:6 value:self.element];
  }
  if (self.hasMaxHp) {
    [output writeInt32:7 value:self.maxHp];
  }
  if (self.hasImageName) {
    [output writeString:8 value:self.imageName];
  }
  if (self.hasMonsterType) {
    [output writeEnum:9 value:self.monsterType];
  }
  if (self.hasExpReward) {
    [output writeInt32:10 value:self.expReward];
  }
  if (self.hasSilverReward) {
    [output writeInt32:11 value:self.silverReward];
  }
  if (self.hasMonsterIdSuccessor) {
    [output writeInt32:12 value:self.monsterIdSuccessor];
  }
  if (self.hasPuzzlePieceDropped) {
    [output writeBool:13 value:self.puzzlePieceDropped];
  }
  if (self.hasCarrotDefeated) {
    [output writeString:14 value:self.carrotDefeated];
  }
  if (self.hasCarrotRecruited) {
    [output writeString:15 value:self.carrotRecruited];
  }
  if (self.hasCarrotEvolved) {
    [output writeString:16 value:self.carrotEvolved];
  }
  if (self.hasElementOneDmg) {
    [output writeInt32:18 value:self.elementOneDmg];
  }
  if (self.hasElementTwoDmg) {
    [output writeInt32:19 value:self.elementTwoDmg];
  }
  if (self.hasElementThreeDmg) {
    [output writeInt32:20 value:self.elementThreeDmg];
  }
  if (self.hasElementFourDmg) {
    [output writeInt32:21 value:self.elementFourDmg];
  }
  if (self.hasElementFiveDmg) {
    [output writeInt32:22 value:self.elementFiveDmg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasMonsterId) {
    size += computeInt32Size(1, self.monsterId);
  }
  if (self.hasName) {
    size += computeStringSize(2, self.name);
  }
  if (self.hasQuality) {
    size += computeEnumSize(3, self.quality);
  }
  if (self.hasEvolutionLevel) {
    size += computeInt32Size(4, self.evolutionLevel);
  }
  if (self.hasDisplayName) {
    size += computeStringSize(5, self.displayName);
  }
  if (self.hasElement) {
    size += computeEnumSize(6, self.element);
  }
  if (self.hasMaxHp) {
    size += computeInt32Size(7, self.maxHp);
  }
  if (self.hasImageName) {
    size += computeStringSize(8, self.imageName);
  }
  if (self.hasMonsterType) {
    size += computeEnumSize(9, self.monsterType);
  }
  if (self.hasExpReward) {
    size += computeInt32Size(10, self.expReward);
  }
  if (self.hasSilverReward) {
    size += computeInt32Size(11, self.silverReward);
  }
  if (self.hasMonsterIdSuccessor) {
    size += computeInt32Size(12, self.monsterIdSuccessor);
  }
  if (self.hasPuzzlePieceDropped) {
    size += computeBoolSize(13, self.puzzlePieceDropped);
  }
  if (self.hasCarrotDefeated) {
    size += computeStringSize(14, self.carrotDefeated);
  }
  if (self.hasCarrotRecruited) {
    size += computeStringSize(15, self.carrotRecruited);
  }
  if (self.hasCarrotEvolved) {
    size += computeStringSize(16, self.carrotEvolved);
  }
  if (self.hasElementOneDmg) {
    size += computeInt32Size(18, self.elementOneDmg);
  }
  if (self.hasElementTwoDmg) {
    size += computeInt32Size(19, self.elementTwoDmg);
  }
  if (self.hasElementThreeDmg) {
    size += computeInt32Size(20, self.elementThreeDmg);
  }
  if (self.hasElementFourDmg) {
    size += computeInt32Size(21, self.elementFourDmg);
  }
  if (self.hasElementFiveDmg) {
    size += computeInt32Size(22, self.elementFiveDmg);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (MonsterProto*) parseFromData:(NSData*) data {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromData:data] build];
}
+ (MonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromInputStream:input] build];
}
+ (MonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (MonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto_Builder*) builder {
  return [[[MonsterProto_Builder alloc] init] autorelease];
}
+ (MonsterProto_Builder*) builderWithPrototype:(MonsterProto*) prototype {
  return [[MonsterProto builder] mergeFrom:prototype];
}
- (MonsterProto_Builder*) builder {
  return [MonsterProto builder];
}
@end

BOOL MonsterProto_MonsterTypeIsValidValue(MonsterProto_MonsterType value) {
  switch (value) {
    case MonsterProto_MonsterTypeRegular:
    case MonsterProto_MonsterTypeMiniBoss:
    case MonsterProto_MonsterTypeBoss:
      return YES;
    default:
      return NO;
  }
}
BOOL MonsterProto_MonsterQualityIsValidValue(MonsterProto_MonsterQuality value) {
  switch (value) {
    case MonsterProto_MonsterQualityCommon:
    case MonsterProto_MonsterQualityRare:
    case MonsterProto_MonsterQualityUltra:
    case MonsterProto_MonsterQualityEpic:
    case MonsterProto_MonsterQualityLegendary:
      return YES;
    default:
      return NO;
  }
}
BOOL MonsterProto_MonsterElementIsValidValue(MonsterProto_MonsterElement value) {
  switch (value) {
    case MonsterProto_MonsterElementFire:
    case MonsterProto_MonsterElementGrass:
    case MonsterProto_MonsterElementWater:
    case MonsterProto_MonsterElementLightning:
    case MonsterProto_MonsterElementDarkness:
      return YES;
    default:
      return NO;
  }
}
@interface MonsterProto_Builder()
@property (retain) MonsterProto* result;
@end

@implementation MonsterProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[MonsterProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MonsterProto_Builder*) clear {
  self.result = [[[MonsterProto alloc] init] autorelease];
  return self;
}
- (MonsterProto_Builder*) clone {
  return [MonsterProto builderWithPrototype:result];
}
- (MonsterProto*) defaultInstance {
  return [MonsterProto defaultInstance];
}
- (MonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MonsterProto*) buildPartial {
  MonsterProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (MonsterProto_Builder*) mergeFrom:(MonsterProto*) other {
  if (other == [MonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasQuality) {
    [self setQuality:other.quality];
  }
  if (other.hasEvolutionLevel) {
    [self setEvolutionLevel:other.evolutionLevel];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasElement) {
    [self setElement:other.element];
  }
  if (other.hasMaxHp) {
    [self setMaxHp:other.maxHp];
  }
  if (other.hasImageName) {
    [self setImageName:other.imageName];
  }
  if (other.hasMonsterType) {
    [self setMonsterType:other.monsterType];
  }
  if (other.hasExpReward) {
    [self setExpReward:other.expReward];
  }
  if (other.hasSilverReward) {
    [self setSilverReward:other.silverReward];
  }
  if (other.hasMonsterIdSuccessor) {
    [self setMonsterIdSuccessor:other.monsterIdSuccessor];
  }
  if (other.hasPuzzlePieceDropped) {
    [self setPuzzlePieceDropped:other.puzzlePieceDropped];
  }
  if (other.hasCarrotDefeated) {
    [self setCarrotDefeated:other.carrotDefeated];
  }
  if (other.hasCarrotRecruited) {
    [self setCarrotRecruited:other.carrotRecruited];
  }
  if (other.hasCarrotEvolved) {
    [self setCarrotEvolved:other.carrotEvolved];
  }
  if (other.hasElementOneDmg) {
    [self setElementOneDmg:other.elementOneDmg];
  }
  if (other.hasElementTwoDmg) {
    [self setElementTwoDmg:other.elementTwoDmg];
  }
  if (other.hasElementThreeDmg) {
    [self setElementThreeDmg:other.elementThreeDmg];
  }
  if (other.hasElementFourDmg) {
    [self setElementFourDmg:other.elementFourDmg];
  }
  if (other.hasElementFiveDmg) {
    [self setElementFiveDmg:other.elementFiveDmg];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        int32_t value = [input readEnum];
        if (MonsterProto_MonsterQualityIsValidValue(value)) {
          [self setQuality:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setEvolutionLevel:[input readInt32]];
        break;
      }
      case 42: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 48: {
        int32_t value = [input readEnum];
        if (MonsterProto_MonsterElementIsValidValue(value)) {
          [self setElement:value];
        } else {
          [unknownFields mergeVarintField:6 value:value];
        }
        break;
      }
      case 56: {
        [self setMaxHp:[input readInt32]];
        break;
      }
      case 66: {
        [self setImageName:[input readString]];
        break;
      }
      case 72: {
        int32_t value = [input readEnum];
        if (MonsterProto_MonsterTypeIsValidValue(value)) {
          [self setMonsterType:value];
        } else {
          [unknownFields mergeVarintField:9 value:value];
        }
        break;
      }
      case 80: {
        [self setExpReward:[input readInt32]];
        break;
      }
      case 88: {
        [self setSilverReward:[input readInt32]];
        break;
      }
      case 96: {
        [self setMonsterIdSuccessor:[input readInt32]];
        break;
      }
      case 104: {
        [self setPuzzlePieceDropped:[input readBool]];
        break;
      }
      case 114: {
        [self setCarrotDefeated:[input readString]];
        break;
      }
      case 122: {
        [self setCarrotRecruited:[input readString]];
        break;
      }
      case 130: {
        [self setCarrotEvolved:[input readString]];
        break;
      }
      case 144: {
        [self setElementOneDmg:[input readInt32]];
        break;
      }
      case 152: {
        [self setElementTwoDmg:[input readInt32]];
        break;
      }
      case 160: {
        [self setElementThreeDmg:[input readInt32]];
        break;
      }
      case 168: {
        [self setElementFourDmg:[input readInt32]];
        break;
      }
      case 176: {
        [self setElementFiveDmg:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (MonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MonsterProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MonsterProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasQuality {
  return result.hasQuality;
}
- (MonsterProto_MonsterQuality) quality {
  return result.quality;
}
- (MonsterProto_Builder*) setQuality:(MonsterProto_MonsterQuality) value {
  result.hasQuality = YES;
  result.quality = value;
  return self;
}
- (MonsterProto_Builder*) clearQuality {
  result.hasQuality = NO;
  result.quality = MonsterProto_MonsterQualityCommon;
  return self;
}
- (BOOL) hasEvolutionLevel {
  return result.hasEvolutionLevel;
}
- (int32_t) evolutionLevel {
  return result.evolutionLevel;
}
- (MonsterProto_Builder*) setEvolutionLevel:(int32_t) value {
  result.hasEvolutionLevel = YES;
  result.evolutionLevel = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionLevel {
  result.hasEvolutionLevel = NO;
  result.evolutionLevel = 0;
  return self;
}
- (BOOL) hasDisplayName {
  return result.hasDisplayName;
}
- (NSString*) displayName {
  return result.displayName;
}
- (MonsterProto_Builder*) setDisplayName:(NSString*) value {
  result.hasDisplayName = YES;
  result.displayName = value;
  return self;
}
- (MonsterProto_Builder*) clearDisplayName {
  result.hasDisplayName = NO;
  result.displayName = @"";
  return self;
}
- (BOOL) hasElement {
  return result.hasElement;
}
- (MonsterProto_MonsterElement) element {
  return result.element;
}
- (MonsterProto_Builder*) setElement:(MonsterProto_MonsterElement) value {
  result.hasElement = YES;
  result.element = value;
  return self;
}
- (MonsterProto_Builder*) clearElement {
  result.hasElement = NO;
  result.element = MonsterProto_MonsterElementFire;
  return self;
}
- (BOOL) hasMaxHp {
  return result.hasMaxHp;
}
- (int32_t) maxHp {
  return result.maxHp;
}
- (MonsterProto_Builder*) setMaxHp:(int32_t) value {
  result.hasMaxHp = YES;
  result.maxHp = value;
  return self;
}
- (MonsterProto_Builder*) clearMaxHp {
  result.hasMaxHp = NO;
  result.maxHp = 0;
  return self;
}
- (BOOL) hasImageName {
  return result.hasImageName;
}
- (NSString*) imageName {
  return result.imageName;
}
- (MonsterProto_Builder*) setImageName:(NSString*) value {
  result.hasImageName = YES;
  result.imageName = value;
  return self;
}
- (MonsterProto_Builder*) clearImageName {
  result.hasImageName = NO;
  result.imageName = @"";
  return self;
}
- (BOOL) hasMonsterType {
  return result.hasMonsterType;
}
- (MonsterProto_MonsterType) monsterType {
  return result.monsterType;
}
- (MonsterProto_Builder*) setMonsterType:(MonsterProto_MonsterType) value {
  result.hasMonsterType = YES;
  result.monsterType = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterType {
  result.hasMonsterType = NO;
  result.monsterType = MonsterProto_MonsterTypeRegular;
  return self;
}
- (BOOL) hasExpReward {
  return result.hasExpReward;
}
- (int32_t) expReward {
  return result.expReward;
}
- (MonsterProto_Builder*) setExpReward:(int32_t) value {
  result.hasExpReward = YES;
  result.expReward = value;
  return self;
}
- (MonsterProto_Builder*) clearExpReward {
  result.hasExpReward = NO;
  result.expReward = 0;
  return self;
}
- (BOOL) hasSilverReward {
  return result.hasSilverReward;
}
- (int32_t) silverReward {
  return result.silverReward;
}
- (MonsterProto_Builder*) setSilverReward:(int32_t) value {
  result.hasSilverReward = YES;
  result.silverReward = value;
  return self;
}
- (MonsterProto_Builder*) clearSilverReward {
  result.hasSilverReward = NO;
  result.silverReward = 0;
  return self;
}
- (BOOL) hasMonsterIdSuccessor {
  return result.hasMonsterIdSuccessor;
}
- (int32_t) monsterIdSuccessor {
  return result.monsterIdSuccessor;
}
- (MonsterProto_Builder*) setMonsterIdSuccessor:(int32_t) value {
  result.hasMonsterIdSuccessor = YES;
  result.monsterIdSuccessor = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterIdSuccessor {
  result.hasMonsterIdSuccessor = NO;
  result.monsterIdSuccessor = 0;
  return self;
}
- (BOOL) hasPuzzlePieceDropped {
  return result.hasPuzzlePieceDropped;
}
- (BOOL) puzzlePieceDropped {
  return result.puzzlePieceDropped;
}
- (MonsterProto_Builder*) setPuzzlePieceDropped:(BOOL) value {
  result.hasPuzzlePieceDropped = YES;
  result.puzzlePieceDropped = value;
  return self;
}
- (MonsterProto_Builder*) clearPuzzlePieceDropped {
  result.hasPuzzlePieceDropped = NO;
  result.puzzlePieceDropped = NO;
  return self;
}
- (BOOL) hasCarrotDefeated {
  return result.hasCarrotDefeated;
}
- (NSString*) carrotDefeated {
  return result.carrotDefeated;
}
- (MonsterProto_Builder*) setCarrotDefeated:(NSString*) value {
  result.hasCarrotDefeated = YES;
  result.carrotDefeated = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotDefeated {
  result.hasCarrotDefeated = NO;
  result.carrotDefeated = @"";
  return self;
}
- (BOOL) hasCarrotRecruited {
  return result.hasCarrotRecruited;
}
- (NSString*) carrotRecruited {
  return result.carrotRecruited;
}
- (MonsterProto_Builder*) setCarrotRecruited:(NSString*) value {
  result.hasCarrotRecruited = YES;
  result.carrotRecruited = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotRecruited {
  result.hasCarrotRecruited = NO;
  result.carrotRecruited = @"";
  return self;
}
- (BOOL) hasCarrotEvolved {
  return result.hasCarrotEvolved;
}
- (NSString*) carrotEvolved {
  return result.carrotEvolved;
}
- (MonsterProto_Builder*) setCarrotEvolved:(NSString*) value {
  result.hasCarrotEvolved = YES;
  result.carrotEvolved = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotEvolved {
  result.hasCarrotEvolved = NO;
  result.carrotEvolved = @"";
  return self;
}
- (BOOL) hasElementOneDmg {
  return result.hasElementOneDmg;
}
- (int32_t) elementOneDmg {
  return result.elementOneDmg;
}
- (MonsterProto_Builder*) setElementOneDmg:(int32_t) value {
  result.hasElementOneDmg = YES;
  result.elementOneDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementOneDmg {
  result.hasElementOneDmg = NO;
  result.elementOneDmg = 0;
  return self;
}
- (BOOL) hasElementTwoDmg {
  return result.hasElementTwoDmg;
}
- (int32_t) elementTwoDmg {
  return result.elementTwoDmg;
}
- (MonsterProto_Builder*) setElementTwoDmg:(int32_t) value {
  result.hasElementTwoDmg = YES;
  result.elementTwoDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementTwoDmg {
  result.hasElementTwoDmg = NO;
  result.elementTwoDmg = 0;
  return self;
}
- (BOOL) hasElementThreeDmg {
  return result.hasElementThreeDmg;
}
- (int32_t) elementThreeDmg {
  return result.elementThreeDmg;
}
- (MonsterProto_Builder*) setElementThreeDmg:(int32_t) value {
  result.hasElementThreeDmg = YES;
  result.elementThreeDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementThreeDmg {
  result.hasElementThreeDmg = NO;
  result.elementThreeDmg = 0;
  return self;
}
- (BOOL) hasElementFourDmg {
  return result.hasElementFourDmg;
}
- (int32_t) elementFourDmg {
  return result.elementFourDmg;
}
- (MonsterProto_Builder*) setElementFourDmg:(int32_t) value {
  result.hasElementFourDmg = YES;
  result.elementFourDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementFourDmg {
  result.hasElementFourDmg = NO;
  result.elementFourDmg = 0;
  return self;
}
- (BOOL) hasElementFiveDmg {
  return result.hasElementFiveDmg;
}
- (int32_t) elementFiveDmg {
  return result.elementFiveDmg;
}
- (MonsterProto_Builder*) setElementFiveDmg:(int32_t) value {
  result.hasElementFiveDmg = YES;
  result.elementFiveDmg = value;
  return self;
}
- (MonsterProto_Builder*) clearElementFiveDmg {
  result.hasElementFiveDmg = NO;
  result.elementFiveDmg = 0;
  return self;
}
@end

@interface FullUserMonsterProto ()
@property int64_t userMonsterId;
@property int32_t userId;
@property int32_t monsterId;
@property int32_t enhancementPercentage;
@property int32_t currentHealth;
@property int32_t numPieces;
@property BOOL isComplete;
@property int32_t teamSlotNum;
@end

@implementation FullUserMonsterProto

- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value {
  hasMonsterId_ = !!value;
}
@synthesize monsterId;
- (BOOL) hasEnhancementPercentage {
  return !!hasEnhancementPercentage_;
}
- (void) setHasEnhancementPercentage:(BOOL) value {
  hasEnhancementPercentage_ = !!value;
}
@synthesize enhancementPercentage;
- (BOOL) hasCurrentHealth {
  return !!hasCurrentHealth_;
}
- (void) setHasCurrentHealth:(BOOL) value {
  hasCurrentHealth_ = !!value;
}
@synthesize currentHealth;
- (BOOL) hasNumPieces {
  return !!hasNumPieces_;
}
- (void) setHasNumPieces:(BOOL) value {
  hasNumPieces_ = !!value;
}
@synthesize numPieces;
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value {
  hasIsComplete_ = !!value;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value {
  isComplete_ = !!value;
}
- (BOOL) hasTeamSlotNum {
  return !!hasTeamSlotNum_;
}
- (void) setHasTeamSlotNum:(BOOL) value {
  hasTeamSlotNum_ = !!value;
}
@synthesize teamSlotNum;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterId = 0L;
    self.userId = 0;
    self.monsterId = 0;
    self.enhancementPercentage = 0;
    self.currentHealth = 0;
    self.numPieces = 0;
    self.isComplete = NO;
    self.teamSlotNum = 0;
  }
  return self;
}
static FullUserMonsterProto* defaultFullUserMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserMonsterProto class]) {
    defaultFullUserMonsterProtoInstance = [[FullUserMonsterProto alloc] init];
  }
}
+ (FullUserMonsterProto*) defaultInstance {
  return defaultFullUserMonsterProtoInstance;
}
- (FullUserMonsterProto*) defaultInstance {
  return defaultFullUserMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterId) {
    [output writeInt64:1 value:self.userMonsterId];
  }
  if (self.hasUserId) {
    [output writeInt32:2 value:self.userId];
  }
  if (self.hasMonsterId) {
    [output writeInt32:3 value:self.monsterId];
  }
  if (self.hasEnhancementPercentage) {
    [output writeInt32:4 value:self.enhancementPercentage];
  }
  if (self.hasCurrentHealth) {
    [output writeInt32:5 value:self.currentHealth];
  }
  if (self.hasNumPieces) {
    [output writeInt32:6 value:self.numPieces];
  }
  if (self.hasIsComplete) {
    [output writeBool:7 value:self.isComplete];
  }
  if (self.hasTeamSlotNum) {
    [output writeInt32:8 value:self.teamSlotNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserMonsterId) {
    size += computeInt64Size(1, self.userMonsterId);
  }
  if (self.hasUserId) {
    size += computeInt32Size(2, self.userId);
  }
  if (self.hasMonsterId) {
    size += computeInt32Size(3, self.monsterId);
  }
  if (self.hasEnhancementPercentage) {
    size += computeInt32Size(4, self.enhancementPercentage);
  }
  if (self.hasCurrentHealth) {
    size += computeInt32Size(5, self.currentHealth);
  }
  if (self.hasNumPieces) {
    size += computeInt32Size(6, self.numPieces);
  }
  if (self.hasIsComplete) {
    size += computeBoolSize(7, self.isComplete);
  }
  if (self.hasTeamSlotNum) {
    size += computeInt32Size(8, self.teamSlotNum);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (FullUserMonsterProto*) parseFromData:(NSData*) data {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromData:data] build];
}
+ (FullUserMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromInputStream:input] build];
}
+ (FullUserMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto_Builder*) builder {
  return [[[FullUserMonsterProto_Builder alloc] init] autorelease];
}
+ (FullUserMonsterProto_Builder*) builderWithPrototype:(FullUserMonsterProto*) prototype {
  return [[FullUserMonsterProto builder] mergeFrom:prototype];
}
- (FullUserMonsterProto_Builder*) builder {
  return [FullUserMonsterProto builder];
}
@end

@interface FullUserMonsterProto_Builder()
@property (retain) FullUserMonsterProto* result;
@end

@implementation FullUserMonsterProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[FullUserMonsterProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserMonsterProto_Builder*) clear {
  self.result = [[[FullUserMonsterProto alloc] init] autorelease];
  return self;
}
- (FullUserMonsterProto_Builder*) clone {
  return [FullUserMonsterProto builderWithPrototype:result];
}
- (FullUserMonsterProto*) defaultInstance {
  return [FullUserMonsterProto defaultInstance];
}
- (FullUserMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserMonsterProto*) buildPartial {
  FullUserMonsterProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (FullUserMonsterProto_Builder*) mergeFrom:(FullUserMonsterProto*) other {
  if (other == [FullUserMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasEnhancementPercentage) {
    [self setEnhancementPercentage:other.enhancementPercentage];
  }
  if (other.hasCurrentHealth) {
    [self setCurrentHealth:other.currentHealth];
  }
  if (other.hasNumPieces) {
    [self setNumPieces:other.numPieces];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.hasTeamSlotNum) {
    [self setTeamSlotNum:other.teamSlotNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 16: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 24: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 32: {
        [self setEnhancementPercentage:[input readInt32]];
        break;
      }
      case 40: {
        [self setCurrentHealth:[input readInt32]];
        break;
      }
      case 48: {
        [self setNumPieces:[input readInt32]];
        break;
      }
      case 56: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 64: {
        [self setTeamSlotNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (FullUserMonsterProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (FullUserMonsterProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (FullUserMonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasEnhancementPercentage {
  return result.hasEnhancementPercentage;
}
- (int32_t) enhancementPercentage {
  return result.enhancementPercentage;
}
- (FullUserMonsterProto_Builder*) setEnhancementPercentage:(int32_t) value {
  result.hasEnhancementPercentage = YES;
  result.enhancementPercentage = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearEnhancementPercentage {
  result.hasEnhancementPercentage = NO;
  result.enhancementPercentage = 0;
  return self;
}
- (BOOL) hasCurrentHealth {
  return result.hasCurrentHealth;
}
- (int32_t) currentHealth {
  return result.currentHealth;
}
- (FullUserMonsterProto_Builder*) setCurrentHealth:(int32_t) value {
  result.hasCurrentHealth = YES;
  result.currentHealth = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentHealth {
  result.hasCurrentHealth = NO;
  result.currentHealth = 0;
  return self;
}
- (BOOL) hasNumPieces {
  return result.hasNumPieces;
}
- (int32_t) numPieces {
  return result.numPieces;
}
- (FullUserMonsterProto_Builder*) setNumPieces:(int32_t) value {
  result.hasNumPieces = YES;
  result.numPieces = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearNumPieces {
  result.hasNumPieces = NO;
  result.numPieces = 0;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (FullUserMonsterProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (BOOL) hasTeamSlotNum {
  return result.hasTeamSlotNum;
}
- (int32_t) teamSlotNum {
  return result.teamSlotNum;
}
- (FullUserMonsterProto_Builder*) setTeamSlotNum:(int32_t) value {
  result.hasTeamSlotNum = YES;
  result.teamSlotNum = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearTeamSlotNum {
  result.hasTeamSlotNum = NO;
  result.teamSlotNum = 0;
  return self;
}
@end

@interface UserMonsterHealingProto ()
@property int32_t userId;
@property int64_t userMonsterId;
@property int64_t expectedStartTimeMillis;
@end

@implementation UserMonsterHealingProto

- (BOOL) hasUserId {
  return !!hasUserId_;
}
- (void) setHasUserId:(BOOL) value {
  hasUserId_ = !!value;
}
@synthesize userId;
- (BOOL) hasUserMonsterId {
  return !!hasUserMonsterId_;
}
- (void) setHasUserMonsterId:(BOOL) value {
  hasUserMonsterId_ = !!value;
}
@synthesize userMonsterId;
- (BOOL) hasExpectedStartTimeMillis {
  return !!hasExpectedStartTimeMillis_;
}
- (void) setHasExpectedStartTimeMillis:(BOOL) value {
  hasExpectedStartTimeMillis_ = !!value;
}
@synthesize expectedStartTimeMillis;
- (void) dealloc {
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.userId = 0;
    self.userMonsterId = 0L;
    self.expectedStartTimeMillis = 0L;
  }
  return self;
}
static UserMonsterHealingProto* defaultUserMonsterHealingProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterHealingProto class]) {
    defaultUserMonsterHealingProtoInstance = [[UserMonsterHealingProto alloc] init];
  }
}
+ (UserMonsterHealingProto*) defaultInstance {
  return defaultUserMonsterHealingProtoInstance;
}
- (UserMonsterHealingProto*) defaultInstance {
  return defaultUserMonsterHealingProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeInt32:1 value:self.userId];
  }
  if (self.hasUserMonsterId) {
    [output writeInt64:2 value:self.userMonsterId];
  }
  if (self.hasExpectedStartTimeMillis) {
    [output writeInt64:3 value:self.expectedStartTimeMillis];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUserId) {
    size += computeInt32Size(1, self.userId);
  }
  if (self.hasUserMonsterId) {
    size += computeInt64Size(2, self.userMonsterId);
  }
  if (self.hasExpectedStartTimeMillis) {
    size += computeInt64Size(3, self.expectedStartTimeMillis);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (UserMonsterHealingProto*) parseFromData:(NSData*) data {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromData:data] build];
}
+ (UserMonsterHealingProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterHealingProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterHealingProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto_Builder*) builder {
  return [[[UserMonsterHealingProto_Builder alloc] init] autorelease];
}
+ (UserMonsterHealingProto_Builder*) builderWithPrototype:(UserMonsterHealingProto*) prototype {
  return [[UserMonsterHealingProto builder] mergeFrom:prototype];
}
- (UserMonsterHealingProto_Builder*) builder {
  return [UserMonsterHealingProto builder];
}
@end

@interface UserMonsterHealingProto_Builder()
@property (retain) UserMonsterHealingProto* result;
@end

@implementation UserMonsterHealingProto_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[UserMonsterHealingProto alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterHealingProto_Builder*) clear {
  self.result = [[[UserMonsterHealingProto alloc] init] autorelease];
  return self;
}
- (UserMonsterHealingProto_Builder*) clone {
  return [UserMonsterHealingProto builderWithPrototype:result];
}
- (UserMonsterHealingProto*) defaultInstance {
  return [UserMonsterHealingProto defaultInstance];
}
- (UserMonsterHealingProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterHealingProto*) buildPartial {
  UserMonsterHealingProto* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (UserMonsterHealingProto_Builder*) mergeFrom:(UserMonsterHealingProto*) other {
  if (other == [UserMonsterHealingProto defaultInstance]) {
    return self;
  }
  if (other.hasUserId) {
    [self setUserId:other.userId];
  }
  if (other.hasUserMonsterId) {
    [self setUserMonsterId:other.userMonsterId];
  }
  if (other.hasExpectedStartTimeMillis) {
    [self setExpectedStartTimeMillis:other.expectedStartTimeMillis];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterHealingProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterHealingProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setUserId:[input readInt32]];
        break;
      }
      case 16: {
        [self setUserMonsterId:[input readInt64]];
        break;
      }
      case 24: {
        [self setExpectedStartTimeMillis:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserId {
  return result.hasUserId;
}
- (int32_t) userId {
  return result.userId;
}
- (UserMonsterHealingProto_Builder*) setUserId:(int32_t) value {
  result.hasUserId = YES;
  result.userId = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserId {
  result.hasUserId = NO;
  result.userId = 0;
  return self;
}
- (BOOL) hasUserMonsterId {
  return result.hasUserMonsterId;
}
- (int64_t) userMonsterId {
  return result.userMonsterId;
}
- (UserMonsterHealingProto_Builder*) setUserMonsterId:(int64_t) value {
  result.hasUserMonsterId = YES;
  result.userMonsterId = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserMonsterId {
  result.hasUserMonsterId = NO;
  result.userMonsterId = 0L;
  return self;
}
- (BOOL) hasExpectedStartTimeMillis {
  return result.hasExpectedStartTimeMillis;
}
- (int64_t) expectedStartTimeMillis {
  return result.expectedStartTimeMillis;
}
- (UserMonsterHealingProto_Builder*) setExpectedStartTimeMillis:(int64_t) value {
  result.hasExpectedStartTimeMillis = YES;
  result.expectedStartTimeMillis = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearExpectedStartTimeMillis {
  result.hasExpectedStartTimeMillis = NO;
  result.expectedStartTimeMillis = 0L;
  return self;
}
@end

