// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Battle.pb.h"
// @@protoc_insertion_point(imports)

@implementation BattleRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BattleRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [ResearchRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL BattleResultIsValidValue(BattleResult value) {
  switch (value) {
    case BattleResultAttackerWin:
    case BattleResultDefenderWin:
    case BattleResultAttackerFlee:
      return YES;
    default:
      return NO;
  }
}
@interface PvpProto ()
@property (strong) FullUserProto* defender;
@property (strong) NSMutableArray * mutableDefenderMonstersList;
@property int32_t prospectiveCashStolenFromStorage;
@property int32_t prospectiveOilStolenFromStorage;
@property (strong) UserPvpLeagueProto* pvpLeagueStats;
@property (strong) NSString* defenderMsg;
@property (strong) ClanMemberTeamDonationProto* cmtd;
@property int32_t monsterIdDropped;
@property (strong) NSMutableArray * mutableUserBoardObstaclesList;
@property (strong) NSMutableArray * mutableUserResearchList;
@property (strong) NSMutableArray * mutableUserStructureList;
@property Float32 percentageToStealFromGenerator;
@end

@implementation PvpProto

- (BOOL) hasDefender {
  return !!hasDefender_;
}
- (void) setHasDefender:(BOOL) value_ {
  hasDefender_ = !!value_;
}
@synthesize defender;
@synthesize mutableDefenderMonstersList;
@dynamic defenderMonstersList;
- (BOOL) hasProspectiveCashStolenFromStorage {
  return !!hasProspectiveCashStolenFromStorage_;
}
- (void) setHasProspectiveCashStolenFromStorage:(BOOL) value_ {
  hasProspectiveCashStolenFromStorage_ = !!value_;
}
@synthesize prospectiveCashStolenFromStorage;
- (BOOL) hasProspectiveOilStolenFromStorage {
  return !!hasProspectiveOilStolenFromStorage_;
}
- (void) setHasProspectiveOilStolenFromStorage:(BOOL) value_ {
  hasProspectiveOilStolenFromStorage_ = !!value_;
}
@synthesize prospectiveOilStolenFromStorage;
- (BOOL) hasPvpLeagueStats {
  return !!hasPvpLeagueStats_;
}
- (void) setHasPvpLeagueStats:(BOOL) value_ {
  hasPvpLeagueStats_ = !!value_;
}
@synthesize pvpLeagueStats;
- (BOOL) hasDefenderMsg {
  return !!hasDefenderMsg_;
}
- (void) setHasDefenderMsg:(BOOL) value_ {
  hasDefenderMsg_ = !!value_;
}
@synthesize defenderMsg;
- (BOOL) hasCmtd {
  return !!hasCmtd_;
}
- (void) setHasCmtd:(BOOL) value_ {
  hasCmtd_ = !!value_;
}
@synthesize cmtd;
- (BOOL) hasMonsterIdDropped {
  return !!hasMonsterIdDropped_;
}
- (void) setHasMonsterIdDropped:(BOOL) value_ {
  hasMonsterIdDropped_ = !!value_;
}
@synthesize monsterIdDropped;
@synthesize mutableUserBoardObstaclesList;
@dynamic userBoardObstaclesList;
@synthesize mutableUserResearchList;
@dynamic userResearchList;
@synthesize mutableUserStructureList;
@dynamic userStructureList;
- (BOOL) hasPercentageToStealFromGenerator {
  return !!hasPercentageToStealFromGenerator_;
}
- (void) setHasPercentageToStealFromGenerator:(BOOL) value_ {
  hasPercentageToStealFromGenerator_ = !!value_;
}
@synthesize percentageToStealFromGenerator;
- (id) init {
  if ((self = [super init])) {
    self.defender = [FullUserProto defaultInstance];
    self.prospectiveCashStolenFromStorage = 0;
    self.prospectiveOilStolenFromStorage = 0;
    self.pvpLeagueStats = [UserPvpLeagueProto defaultInstance];
    self.defenderMsg = @"";
    self.cmtd = [ClanMemberTeamDonationProto defaultInstance];
    self.monsterIdDropped = 0;
    self.percentageToStealFromGenerator = 0;
  }
  return self;
}
static PvpProto* defaultPvpProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpProto class]) {
    defaultPvpProtoInstance = [[PvpProto alloc] init];
  }
}
+ (PvpProto*) defaultInstance {
  return defaultPvpProtoInstance;
}
- (PvpProto*) defaultInstance {
  return defaultPvpProtoInstance;
}
- (NSArray *)defenderMonstersList {
  return mutableDefenderMonstersList;
}
- (PvpMonsterProto*)defenderMonstersAtIndex:(NSUInteger)index {
  return [mutableDefenderMonstersList objectAtIndex:index];
}
- (NSArray *)userBoardObstaclesList {
  return mutableUserBoardObstaclesList;
}
- (UserPvpBoardObstacleProto*)userBoardObstaclesAtIndex:(NSUInteger)index {
  return [mutableUserBoardObstaclesList objectAtIndex:index];
}
- (NSArray *)userResearchList {
  return mutableUserResearchList;
}
- (UserResearchProto*)userResearchAtIndex:(NSUInteger)index {
  return [mutableUserResearchList objectAtIndex:index];
}
- (NSArray *)userStructureList {
  return mutableUserStructureList;
}
- (FullUserStructureProto*)userStructureAtIndex:(NSUInteger)index {
  return [mutableUserStructureList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDefender) {
    [output writeMessage:1 value:self.defender];
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  if (self.hasProspectiveCashStolenFromStorage) {
    [output writeInt32:4 value:self.prospectiveCashStolenFromStorage];
  }
  if (self.hasProspectiveOilStolenFromStorage) {
    [output writeInt32:5 value:self.prospectiveOilStolenFromStorage];
  }
  if (self.hasPvpLeagueStats) {
    [output writeMessage:6 value:self.pvpLeagueStats];
  }
  if (self.hasDefenderMsg) {
    [output writeString:7 value:self.defenderMsg];
  }
  if (self.hasCmtd) {
    [output writeMessage:8 value:self.cmtd];
  }
  if (self.hasMonsterIdDropped) {
    [output writeInt32:9 value:self.monsterIdDropped];
  }
  [self.userBoardObstaclesList enumerateObjectsUsingBlock:^(UserPvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.userResearchList enumerateObjectsUsingBlock:^(UserResearchProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.userStructureList enumerateObjectsUsingBlock:^(FullUserStructureProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  if (self.hasPercentageToStealFromGenerator) {
    [output writeFloat:13 value:self.percentageToStealFromGenerator];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDefender) {
    size_ += computeMessageSize(1, self.defender);
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  if (self.hasProspectiveCashStolenFromStorage) {
    size_ += computeInt32Size(4, self.prospectiveCashStolenFromStorage);
  }
  if (self.hasProspectiveOilStolenFromStorage) {
    size_ += computeInt32Size(5, self.prospectiveOilStolenFromStorage);
  }
  if (self.hasPvpLeagueStats) {
    size_ += computeMessageSize(6, self.pvpLeagueStats);
  }
  if (self.hasDefenderMsg) {
    size_ += computeStringSize(7, self.defenderMsg);
  }
  if (self.hasCmtd) {
    size_ += computeMessageSize(8, self.cmtd);
  }
  if (self.hasMonsterIdDropped) {
    size_ += computeInt32Size(9, self.monsterIdDropped);
  }
  [self.userBoardObstaclesList enumerateObjectsUsingBlock:^(UserPvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  [self.userResearchList enumerateObjectsUsingBlock:^(UserResearchProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  [self.userStructureList enumerateObjectsUsingBlock:^(FullUserStructureProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  if (self.hasPercentageToStealFromGenerator) {
    size_ += computeFloatSize(13, self.percentageToStealFromGenerator);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpProto*) parseFromData:(NSData*) data {
  return (PvpProto*)[[[PvpProto builder] mergeFromData:data] build];
}
+ (PvpProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpProto*)[[[PvpProto builder] mergeFromInputStream:input] build];
}
+ (PvpProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpProto*)[[[PvpProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpProto*)[[[PvpProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpProto_Builder*) builder {
  return [[PvpProto_Builder alloc] init];
}
+ (PvpProto_Builder*) builderWithPrototype:(PvpProto*) prototype {
  return [[PvpProto builder] mergeFrom:prototype];
}
- (PvpProto_Builder*) builder {
  return [PvpProto builder];
}
- (PvpProto_Builder*) toBuilder {
  return [PvpProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDefender) {
    [output appendFormat:@"%@%@ {\n", indent, @"defender"];
    [self.defender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasProspectiveCashStolenFromStorage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveCashStolenFromStorage", [NSNumber numberWithInteger:self.prospectiveCashStolenFromStorage]];
  }
  if (self.hasProspectiveOilStolenFromStorage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveOilStolenFromStorage", [NSNumber numberWithInteger:self.prospectiveOilStolenFromStorage]];
  }
  if (self.hasPvpLeagueStats) {
    [output appendFormat:@"%@%@ {\n", indent, @"pvpLeagueStats"];
    [self.pvpLeagueStats writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefenderMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderMsg", self.defenderMsg];
  }
  if (self.hasCmtd) {
    [output appendFormat:@"%@%@ {\n", indent, @"cmtd"];
    [self.cmtd writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMonsterIdDropped) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterIdDropped", [NSNumber numberWithInteger:self.monsterIdDropped]];
  }
  [self.userBoardObstaclesList enumerateObjectsUsingBlock:^(UserPvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userBoardObstacles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userResearchList enumerateObjectsUsingBlock:^(UserResearchProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userResearch"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.userStructureList enumerateObjectsUsingBlock:^(FullUserStructureProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"userStructure"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasPercentageToStealFromGenerator) {
    [output appendFormat:@"%@%@: %@\n", indent, @"percentageToStealFromGenerator", [NSNumber numberWithFloat:self.percentageToStealFromGenerator]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpProto class]]) {
    return NO;
  }
  PvpProto *otherMessage = other;
  return
      self.hasDefender == otherMessage.hasDefender &&
      (!self.hasDefender || [self.defender isEqual:otherMessage.defender]) &&
      [self.defenderMonstersList isEqualToArray:otherMessage.defenderMonstersList] &&
      self.hasProspectiveCashStolenFromStorage == otherMessage.hasProspectiveCashStolenFromStorage &&
      (!self.hasProspectiveCashStolenFromStorage || self.prospectiveCashStolenFromStorage == otherMessage.prospectiveCashStolenFromStorage) &&
      self.hasProspectiveOilStolenFromStorage == otherMessage.hasProspectiveOilStolenFromStorage &&
      (!self.hasProspectiveOilStolenFromStorage || self.prospectiveOilStolenFromStorage == otherMessage.prospectiveOilStolenFromStorage) &&
      self.hasPvpLeagueStats == otherMessage.hasPvpLeagueStats &&
      (!self.hasPvpLeagueStats || [self.pvpLeagueStats isEqual:otherMessage.pvpLeagueStats]) &&
      self.hasDefenderMsg == otherMessage.hasDefenderMsg &&
      (!self.hasDefenderMsg || [self.defenderMsg isEqual:otherMessage.defenderMsg]) &&
      self.hasCmtd == otherMessage.hasCmtd &&
      (!self.hasCmtd || [self.cmtd isEqual:otherMessage.cmtd]) &&
      self.hasMonsterIdDropped == otherMessage.hasMonsterIdDropped &&
      (!self.hasMonsterIdDropped || self.monsterIdDropped == otherMessage.monsterIdDropped) &&
      [self.userBoardObstaclesList isEqualToArray:otherMessage.userBoardObstaclesList] &&
      [self.userResearchList isEqualToArray:otherMessage.userResearchList] &&
      [self.userStructureList isEqualToArray:otherMessage.userStructureList] &&
      self.hasPercentageToStealFromGenerator == otherMessage.hasPercentageToStealFromGenerator &&
      (!self.hasPercentageToStealFromGenerator || self.percentageToStealFromGenerator == otherMessage.percentageToStealFromGenerator) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDefender) {
    hashCode = hashCode * 31 + [self.defender hash];
  }
  [self.defenderMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasProspectiveCashStolenFromStorage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveCashStolenFromStorage] hash];
  }
  if (self.hasProspectiveOilStolenFromStorage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveOilStolenFromStorage] hash];
  }
  if (self.hasPvpLeagueStats) {
    hashCode = hashCode * 31 + [self.pvpLeagueStats hash];
  }
  if (self.hasDefenderMsg) {
    hashCode = hashCode * 31 + [self.defenderMsg hash];
  }
  if (self.hasCmtd) {
    hashCode = hashCode * 31 + [self.cmtd hash];
  }
  if (self.hasMonsterIdDropped) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterIdDropped] hash];
  }
  [self.userBoardObstaclesList enumerateObjectsUsingBlock:^(UserPvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userResearchList enumerateObjectsUsingBlock:^(UserResearchProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.userStructureList enumerateObjectsUsingBlock:^(FullUserStructureProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasPercentageToStealFromGenerator) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.percentageToStealFromGenerator] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpProto_Builder()
@property (strong) PvpProto* result;
@end

@implementation PvpProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpProto_Builder*) clear {
  self.result = [[PvpProto alloc] init];
  return self;
}
- (PvpProto_Builder*) clone {
  return [PvpProto builderWithPrototype:result];
}
- (PvpProto*) defaultInstance {
  return [PvpProto defaultInstance];
}
- (PvpProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpProto*) buildPartial {
  PvpProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpProto_Builder*) mergeFrom:(PvpProto*) other {
  if (other == [PvpProto defaultInstance]) {
    return self;
  }
  if (other.hasDefender) {
    [self mergeDefender:other.defender];
  }
  if (other.mutableDefenderMonstersList.count > 0) {
    if (result.mutableDefenderMonstersList == nil) {
      result.mutableDefenderMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableDefenderMonstersList];
    } else {
      [result.mutableDefenderMonstersList addObjectsFromArray:other.mutableDefenderMonstersList];
    }
  }
  if (other.hasProspectiveCashStolenFromStorage) {
    [self setProspectiveCashStolenFromStorage:other.prospectiveCashStolenFromStorage];
  }
  if (other.hasProspectiveOilStolenFromStorage) {
    [self setProspectiveOilStolenFromStorage:other.prospectiveOilStolenFromStorage];
  }
  if (other.hasPvpLeagueStats) {
    [self mergePvpLeagueStats:other.pvpLeagueStats];
  }
  if (other.hasDefenderMsg) {
    [self setDefenderMsg:other.defenderMsg];
  }
  if (other.hasCmtd) {
    [self mergeCmtd:other.cmtd];
  }
  if (other.hasMonsterIdDropped) {
    [self setMonsterIdDropped:other.monsterIdDropped];
  }
  if (other.mutableUserBoardObstaclesList.count > 0) {
    if (result.mutableUserBoardObstaclesList == nil) {
      result.mutableUserBoardObstaclesList = [[NSMutableArray alloc] initWithArray:other.mutableUserBoardObstaclesList];
    } else {
      [result.mutableUserBoardObstaclesList addObjectsFromArray:other.mutableUserBoardObstaclesList];
    }
  }
  if (other.mutableUserResearchList.count > 0) {
    if (result.mutableUserResearchList == nil) {
      result.mutableUserResearchList = [[NSMutableArray alloc] initWithArray:other.mutableUserResearchList];
    } else {
      [result.mutableUserResearchList addObjectsFromArray:other.mutableUserResearchList];
    }
  }
  if (other.mutableUserStructureList.count > 0) {
    if (result.mutableUserStructureList == nil) {
      result.mutableUserStructureList = [[NSMutableArray alloc] initWithArray:other.mutableUserStructureList];
    } else {
      [result.mutableUserStructureList addObjectsFromArray:other.mutableUserStructureList];
    }
  }
  if (other.hasPercentageToStealFromGenerator) {
    [self setPercentageToStealFromGenerator:other.percentageToStealFromGenerator];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FullUserProto_Builder* subBuilder = [FullUserProto builder];
        if (self.hasDefender) {
          [subBuilder mergeFrom:self.defender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefender:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        PvpMonsterProto_Builder* subBuilder = [PvpMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDefenderMonsters:[subBuilder buildPartial]];
        break;
      }
      case 32: {
        [self setProspectiveCashStolenFromStorage:[input readInt32]];
        break;
      }
      case 40: {
        [self setProspectiveOilStolenFromStorage:[input readInt32]];
        break;
      }
      case 50: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasPvpLeagueStats) {
          [subBuilder mergeFrom:self.pvpLeagueStats];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPvpLeagueStats:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setDefenderMsg:[input readString]];
        break;
      }
      case 66: {
        ClanMemberTeamDonationProto_Builder* subBuilder = [ClanMemberTeamDonationProto builder];
        if (self.hasCmtd) {
          [subBuilder mergeFrom:self.cmtd];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setCmtd:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setMonsterIdDropped:[input readInt32]];
        break;
      }
      case 82: {
        UserPvpBoardObstacleProto_Builder* subBuilder = [UserPvpBoardObstacleProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserBoardObstacles:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        UserResearchProto_Builder* subBuilder = [UserResearchProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserResearch:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        FullUserStructureProto_Builder* subBuilder = [FullUserStructureProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUserStructure:[subBuilder buildPartial]];
        break;
      }
      case 109: {
        [self setPercentageToStealFromGenerator:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasDefender {
  return result.hasDefender;
}
- (FullUserProto*) defender {
  return result.defender;
}
- (PvpProto_Builder*) setDefender:(FullUserProto*) value {
  result.hasDefender = YES;
  result.defender = value;
  return self;
}
- (PvpProto_Builder*) setDefender_Builder:(FullUserProto_Builder*) builderForValue {
  return [self setDefender:[builderForValue build]];
}
- (PvpProto_Builder*) mergeDefender:(FullUserProto*) value {
  if (result.hasDefender &&
      result.defender != [FullUserProto defaultInstance]) {
    result.defender =
      [[[FullUserProto builderWithPrototype:result.defender] mergeFrom:value] buildPartial];
  } else {
    result.defender = value;
  }
  result.hasDefender = YES;
  return self;
}
- (PvpProto_Builder*) clearDefender {
  result.hasDefender = NO;
  result.defender = [FullUserProto defaultInstance];
  return self;
}
- (NSMutableArray *)defenderMonstersList {
  return result.mutableDefenderMonstersList;
}
- (PvpMonsterProto*)defenderMonstersAtIndex:(NSUInteger)index {
  return [result defenderMonstersAtIndex:index];
}
- (PvpProto_Builder *)addDefenderMonsters:(PvpMonsterProto*)value {
  if (result.mutableDefenderMonstersList == nil) {
    result.mutableDefenderMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableDefenderMonstersList addObject:value];
  return self;
}
- (PvpProto_Builder *)addAllDefenderMonsters:(NSArray *)array {
  if (result.mutableDefenderMonstersList == nil) {
    result.mutableDefenderMonstersList = [NSMutableArray array];
  }
  [result.mutableDefenderMonstersList addObjectsFromArray:array];
  return self;
}
- (PvpProto_Builder *)clearDefenderMonsters {
  result.mutableDefenderMonstersList = nil;
  return self;
}
- (BOOL) hasProspectiveCashStolenFromStorage {
  return result.hasProspectiveCashStolenFromStorage;
}
- (int32_t) prospectiveCashStolenFromStorage {
  return result.prospectiveCashStolenFromStorage;
}
- (PvpProto_Builder*) setProspectiveCashStolenFromStorage:(int32_t) value {
  result.hasProspectiveCashStolenFromStorage = YES;
  result.prospectiveCashStolenFromStorage = value;
  return self;
}
- (PvpProto_Builder*) clearProspectiveCashStolenFromStorage {
  result.hasProspectiveCashStolenFromStorage = NO;
  result.prospectiveCashStolenFromStorage = 0;
  return self;
}
- (BOOL) hasProspectiveOilStolenFromStorage {
  return result.hasProspectiveOilStolenFromStorage;
}
- (int32_t) prospectiveOilStolenFromStorage {
  return result.prospectiveOilStolenFromStorage;
}
- (PvpProto_Builder*) setProspectiveOilStolenFromStorage:(int32_t) value {
  result.hasProspectiveOilStolenFromStorage = YES;
  result.prospectiveOilStolenFromStorage = value;
  return self;
}
- (PvpProto_Builder*) clearProspectiveOilStolenFromStorage {
  result.hasProspectiveOilStolenFromStorage = NO;
  result.prospectiveOilStolenFromStorage = 0;
  return self;
}
- (BOOL) hasPvpLeagueStats {
  return result.hasPvpLeagueStats;
}
- (UserPvpLeagueProto*) pvpLeagueStats {
  return result.pvpLeagueStats;
}
- (PvpProto_Builder*) setPvpLeagueStats:(UserPvpLeagueProto*) value {
  result.hasPvpLeagueStats = YES;
  result.pvpLeagueStats = value;
  return self;
}
- (PvpProto_Builder*) setPvpLeagueStats_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setPvpLeagueStats:[builderForValue build]];
}
- (PvpProto_Builder*) mergePvpLeagueStats:(UserPvpLeagueProto*) value {
  if (result.hasPvpLeagueStats &&
      result.pvpLeagueStats != [UserPvpLeagueProto defaultInstance]) {
    result.pvpLeagueStats =
      [[[UserPvpLeagueProto builderWithPrototype:result.pvpLeagueStats] mergeFrom:value] buildPartial];
  } else {
    result.pvpLeagueStats = value;
  }
  result.hasPvpLeagueStats = YES;
  return self;
}
- (PvpProto_Builder*) clearPvpLeagueStats {
  result.hasPvpLeagueStats = NO;
  result.pvpLeagueStats = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefenderMsg {
  return result.hasDefenderMsg;
}
- (NSString*) defenderMsg {
  return result.defenderMsg;
}
- (PvpProto_Builder*) setDefenderMsg:(NSString*) value {
  result.hasDefenderMsg = YES;
  result.defenderMsg = value;
  return self;
}
- (PvpProto_Builder*) clearDefenderMsg {
  result.hasDefenderMsg = NO;
  result.defenderMsg = @"";
  return self;
}
- (BOOL) hasCmtd {
  return result.hasCmtd;
}
- (ClanMemberTeamDonationProto*) cmtd {
  return result.cmtd;
}
- (PvpProto_Builder*) setCmtd:(ClanMemberTeamDonationProto*) value {
  result.hasCmtd = YES;
  result.cmtd = value;
  return self;
}
- (PvpProto_Builder*) setCmtd_Builder:(ClanMemberTeamDonationProto_Builder*) builderForValue {
  return [self setCmtd:[builderForValue build]];
}
- (PvpProto_Builder*) mergeCmtd:(ClanMemberTeamDonationProto*) value {
  if (result.hasCmtd &&
      result.cmtd != [ClanMemberTeamDonationProto defaultInstance]) {
    result.cmtd =
      [[[ClanMemberTeamDonationProto builderWithPrototype:result.cmtd] mergeFrom:value] buildPartial];
  } else {
    result.cmtd = value;
  }
  result.hasCmtd = YES;
  return self;
}
- (PvpProto_Builder*) clearCmtd {
  result.hasCmtd = NO;
  result.cmtd = [ClanMemberTeamDonationProto defaultInstance];
  return self;
}
- (BOOL) hasMonsterIdDropped {
  return result.hasMonsterIdDropped;
}
- (int32_t) monsterIdDropped {
  return result.monsterIdDropped;
}
- (PvpProto_Builder*) setMonsterIdDropped:(int32_t) value {
  result.hasMonsterIdDropped = YES;
  result.monsterIdDropped = value;
  return self;
}
- (PvpProto_Builder*) clearMonsterIdDropped {
  result.hasMonsterIdDropped = NO;
  result.monsterIdDropped = 0;
  return self;
}
- (NSMutableArray *)userBoardObstaclesList {
  return result.mutableUserBoardObstaclesList;
}
- (UserPvpBoardObstacleProto*)userBoardObstaclesAtIndex:(NSUInteger)index {
  return [result userBoardObstaclesAtIndex:index];
}
- (PvpProto_Builder *)addUserBoardObstacles:(UserPvpBoardObstacleProto*)value {
  if (result.mutableUserBoardObstaclesList == nil) {
    result.mutableUserBoardObstaclesList = [[NSMutableArray alloc]init];
  }
  [result.mutableUserBoardObstaclesList addObject:value];
  return self;
}
- (PvpProto_Builder *)addAllUserBoardObstacles:(NSArray *)array {
  if (result.mutableUserBoardObstaclesList == nil) {
    result.mutableUserBoardObstaclesList = [NSMutableArray array];
  }
  [result.mutableUserBoardObstaclesList addObjectsFromArray:array];
  return self;
}
- (PvpProto_Builder *)clearUserBoardObstacles {
  result.mutableUserBoardObstaclesList = nil;
  return self;
}
- (NSMutableArray *)userResearchList {
  return result.mutableUserResearchList;
}
- (UserResearchProto*)userResearchAtIndex:(NSUInteger)index {
  return [result userResearchAtIndex:index];
}
- (PvpProto_Builder *)addUserResearch:(UserResearchProto*)value {
  if (result.mutableUserResearchList == nil) {
    result.mutableUserResearchList = [[NSMutableArray alloc]init];
  }
  [result.mutableUserResearchList addObject:value];
  return self;
}
- (PvpProto_Builder *)addAllUserResearch:(NSArray *)array {
  if (result.mutableUserResearchList == nil) {
    result.mutableUserResearchList = [NSMutableArray array];
  }
  [result.mutableUserResearchList addObjectsFromArray:array];
  return self;
}
- (PvpProto_Builder *)clearUserResearch {
  result.mutableUserResearchList = nil;
  return self;
}
- (NSMutableArray *)userStructureList {
  return result.mutableUserStructureList;
}
- (FullUserStructureProto*)userStructureAtIndex:(NSUInteger)index {
  return [result userStructureAtIndex:index];
}
- (PvpProto_Builder *)addUserStructure:(FullUserStructureProto*)value {
  if (result.mutableUserStructureList == nil) {
    result.mutableUserStructureList = [[NSMutableArray alloc]init];
  }
  [result.mutableUserStructureList addObject:value];
  return self;
}
- (PvpProto_Builder *)addAllUserStructure:(NSArray *)array {
  if (result.mutableUserStructureList == nil) {
    result.mutableUserStructureList = [NSMutableArray array];
  }
  [result.mutableUserStructureList addObjectsFromArray:array];
  return self;
}
- (PvpProto_Builder *)clearUserStructure {
  result.mutableUserStructureList = nil;
  return self;
}
- (BOOL) hasPercentageToStealFromGenerator {
  return result.hasPercentageToStealFromGenerator;
}
- (Float32) percentageToStealFromGenerator {
  return result.percentageToStealFromGenerator;
}
- (PvpProto_Builder*) setPercentageToStealFromGenerator:(Float32) value {
  result.hasPercentageToStealFromGenerator = YES;
  result.percentageToStealFromGenerator = value;
  return self;
}
- (PvpProto_Builder*) clearPercentageToStealFromGenerator {
  result.hasPercentageToStealFromGenerator = NO;
  result.percentageToStealFromGenerator = 0;
  return self;
}
@end

@interface PvpMonsterProto ()
@property (strong) MinimumUserMonsterProto* defenderMonster;
@property int32_t monsterIdDropped;
@end

@implementation PvpMonsterProto

- (BOOL) hasDefenderMonster {
  return !!hasDefenderMonster_;
}
- (void) setHasDefenderMonster:(BOOL) value_ {
  hasDefenderMonster_ = !!value_;
}
@synthesize defenderMonster;
- (BOOL) hasMonsterIdDropped {
  return !!hasMonsterIdDropped_;
}
- (void) setHasMonsterIdDropped:(BOOL) value_ {
  hasMonsterIdDropped_ = !!value_;
}
@synthesize monsterIdDropped;
- (id) init {
  if ((self = [super init])) {
    self.defenderMonster = [MinimumUserMonsterProto defaultInstance];
    self.monsterIdDropped = 0;
  }
  return self;
}
static PvpMonsterProto* defaultPvpMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpMonsterProto class]) {
    defaultPvpMonsterProtoInstance = [[PvpMonsterProto alloc] init];
  }
}
+ (PvpMonsterProto*) defaultInstance {
  return defaultPvpMonsterProtoInstance;
}
- (PvpMonsterProto*) defaultInstance {
  return defaultPvpMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDefenderMonster) {
    [output writeMessage:1 value:self.defenderMonster];
  }
  if (self.hasMonsterIdDropped) {
    [output writeInt32:2 value:self.monsterIdDropped];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDefenderMonster) {
    size_ += computeMessageSize(1, self.defenderMonster);
  }
  if (self.hasMonsterIdDropped) {
    size_ += computeInt32Size(2, self.monsterIdDropped);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpMonsterProto*) parseFromData:(NSData*) data {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromData:data] build];
}
+ (PvpMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromInputStream:input] build];
}
+ (PvpMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpMonsterProto*)[[[PvpMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpMonsterProto_Builder*) builder {
  return [[PvpMonsterProto_Builder alloc] init];
}
+ (PvpMonsterProto_Builder*) builderWithPrototype:(PvpMonsterProto*) prototype {
  return [[PvpMonsterProto builder] mergeFrom:prototype];
}
- (PvpMonsterProto_Builder*) builder {
  return [PvpMonsterProto builder];
}
- (PvpMonsterProto_Builder*) toBuilder {
  return [PvpMonsterProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDefenderMonster) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderMonster"];
    [self.defenderMonster writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMonsterIdDropped) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterIdDropped", [NSNumber numberWithInteger:self.monsterIdDropped]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpMonsterProto class]]) {
    return NO;
  }
  PvpMonsterProto *otherMessage = other;
  return
      self.hasDefenderMonster == otherMessage.hasDefenderMonster &&
      (!self.hasDefenderMonster || [self.defenderMonster isEqual:otherMessage.defenderMonster]) &&
      self.hasMonsterIdDropped == otherMessage.hasMonsterIdDropped &&
      (!self.hasMonsterIdDropped || self.monsterIdDropped == otherMessage.monsterIdDropped) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDefenderMonster) {
    hashCode = hashCode * 31 + [self.defenderMonster hash];
  }
  if (self.hasMonsterIdDropped) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterIdDropped] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpMonsterProto_Builder()
@property (strong) PvpMonsterProto* result;
@end

@implementation PvpMonsterProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpMonsterProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpMonsterProto_Builder*) clear {
  self.result = [[PvpMonsterProto alloc] init];
  return self;
}
- (PvpMonsterProto_Builder*) clone {
  return [PvpMonsterProto builderWithPrototype:result];
}
- (PvpMonsterProto*) defaultInstance {
  return [PvpMonsterProto defaultInstance];
}
- (PvpMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpMonsterProto*) buildPartial {
  PvpMonsterProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpMonsterProto_Builder*) mergeFrom:(PvpMonsterProto*) other {
  if (other == [PvpMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasDefenderMonster) {
    [self mergeDefenderMonster:other.defenderMonster];
  }
  if (other.hasMonsterIdDropped) {
    [self setMonsterIdDropped:other.monsterIdDropped];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserMonsterProto_Builder* subBuilder = [MinimumUserMonsterProto builder];
        if (self.hasDefenderMonster) {
          [subBuilder mergeFrom:self.defenderMonster];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefenderMonster:[subBuilder buildPartial]];
        break;
      }
      case 16: {
        [self setMonsterIdDropped:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasDefenderMonster {
  return result.hasDefenderMonster;
}
- (MinimumUserMonsterProto*) defenderMonster {
  return result.defenderMonster;
}
- (PvpMonsterProto_Builder*) setDefenderMonster:(MinimumUserMonsterProto*) value {
  result.hasDefenderMonster = YES;
  result.defenderMonster = value;
  return self;
}
- (PvpMonsterProto_Builder*) setDefenderMonster_Builder:(MinimumUserMonsterProto_Builder*) builderForValue {
  return [self setDefenderMonster:[builderForValue build]];
}
- (PvpMonsterProto_Builder*) mergeDefenderMonster:(MinimumUserMonsterProto*) value {
  if (result.hasDefenderMonster &&
      result.defenderMonster != [MinimumUserMonsterProto defaultInstance]) {
    result.defenderMonster =
      [[[MinimumUserMonsterProto builderWithPrototype:result.defenderMonster] mergeFrom:value] buildPartial];
  } else {
    result.defenderMonster = value;
  }
  result.hasDefenderMonster = YES;
  return self;
}
- (PvpMonsterProto_Builder*) clearDefenderMonster {
  result.hasDefenderMonster = NO;
  result.defenderMonster = [MinimumUserMonsterProto defaultInstance];
  return self;
}
- (BOOL) hasMonsterIdDropped {
  return result.hasMonsterIdDropped;
}
- (int32_t) monsterIdDropped {
  return result.monsterIdDropped;
}
- (PvpMonsterProto_Builder*) setMonsterIdDropped:(int32_t) value {
  result.hasMonsterIdDropped = YES;
  result.monsterIdDropped = value;
  return self;
}
- (PvpMonsterProto_Builder*) clearMonsterIdDropped {
  result.hasMonsterIdDropped = NO;
  result.monsterIdDropped = 0;
  return self;
}
@end

@interface PvpHistoryProto ()
@property int64_t battleEndTime;
@property (strong) FullUserProto* attacker;
@property (strong) NSMutableArray * mutableAttackersMonstersList;
@property BOOL attackerWon;
@property int32_t defenderCashChange;
@property int32_t defenderOilChange;
@property BOOL exactedRevenge;
@property int32_t prospectiveCashWinnings;
@property int32_t prospectiveOilWinnings;
@property (strong) UserPvpLeagueProto* attackerBefore;
@property (strong) UserPvpLeagueProto* attackerAfter;
@property (strong) UserPvpLeagueProto* defenderBefore;
@property (strong) UserPvpLeagueProto* defenderAfter;
@property (strong) FullUserProto* defender;
@property int32_t attackerCashChange;
@property int32_t attackerOilChange;
@property BOOL clanAvenged;
@property (strong) NSString* replayId;
@property int32_t cashStolenFromStorage;
@property int32_t cashStolenFromGenerators;
@property int32_t oilStolenFromStorage;
@property int32_t oilStolenFromGenerators;
@end

@implementation PvpHistoryProto

- (BOOL) hasBattleEndTime {
  return !!hasBattleEndTime_;
}
- (void) setHasBattleEndTime:(BOOL) value_ {
  hasBattleEndTime_ = !!value_;
}
@synthesize battleEndTime;
- (BOOL) hasAttacker {
  return !!hasAttacker_;
}
- (void) setHasAttacker:(BOOL) value_ {
  hasAttacker_ = !!value_;
}
@synthesize attacker;
@synthesize mutableAttackersMonstersList;
@dynamic attackersMonstersList;
- (BOOL) hasAttackerWon {
  return !!hasAttackerWon_;
}
- (void) setHasAttackerWon:(BOOL) value_ {
  hasAttackerWon_ = !!value_;
}
- (BOOL) attackerWon {
  return !!attackerWon_;
}
- (void) setAttackerWon:(BOOL) value_ {
  attackerWon_ = !!value_;
}
- (BOOL) hasDefenderCashChange {
  return !!hasDefenderCashChange_;
}
- (void) setHasDefenderCashChange:(BOOL) value_ {
  hasDefenderCashChange_ = !!value_;
}
@synthesize defenderCashChange;
- (BOOL) hasDefenderOilChange {
  return !!hasDefenderOilChange_;
}
- (void) setHasDefenderOilChange:(BOOL) value_ {
  hasDefenderOilChange_ = !!value_;
}
@synthesize defenderOilChange;
- (BOOL) hasExactedRevenge {
  return !!hasExactedRevenge_;
}
- (void) setHasExactedRevenge:(BOOL) value_ {
  hasExactedRevenge_ = !!value_;
}
- (BOOL) exactedRevenge {
  return !!exactedRevenge_;
}
- (void) setExactedRevenge:(BOOL) value_ {
  exactedRevenge_ = !!value_;
}
- (BOOL) hasProspectiveCashWinnings {
  return !!hasProspectiveCashWinnings_;
}
- (void) setHasProspectiveCashWinnings:(BOOL) value_ {
  hasProspectiveCashWinnings_ = !!value_;
}
@synthesize prospectiveCashWinnings;
- (BOOL) hasProspectiveOilWinnings {
  return !!hasProspectiveOilWinnings_;
}
- (void) setHasProspectiveOilWinnings:(BOOL) value_ {
  hasProspectiveOilWinnings_ = !!value_;
}
@synthesize prospectiveOilWinnings;
- (BOOL) hasAttackerBefore {
  return !!hasAttackerBefore_;
}
- (void) setHasAttackerBefore:(BOOL) value_ {
  hasAttackerBefore_ = !!value_;
}
@synthesize attackerBefore;
- (BOOL) hasAttackerAfter {
  return !!hasAttackerAfter_;
}
- (void) setHasAttackerAfter:(BOOL) value_ {
  hasAttackerAfter_ = !!value_;
}
@synthesize attackerAfter;
- (BOOL) hasDefenderBefore {
  return !!hasDefenderBefore_;
}
- (void) setHasDefenderBefore:(BOOL) value_ {
  hasDefenderBefore_ = !!value_;
}
@synthesize defenderBefore;
- (BOOL) hasDefenderAfter {
  return !!hasDefenderAfter_;
}
- (void) setHasDefenderAfter:(BOOL) value_ {
  hasDefenderAfter_ = !!value_;
}
@synthesize defenderAfter;
- (BOOL) hasDefender {
  return !!hasDefender_;
}
- (void) setHasDefender:(BOOL) value_ {
  hasDefender_ = !!value_;
}
@synthesize defender;
- (BOOL) hasAttackerCashChange {
  return !!hasAttackerCashChange_;
}
- (void) setHasAttackerCashChange:(BOOL) value_ {
  hasAttackerCashChange_ = !!value_;
}
@synthesize attackerCashChange;
- (BOOL) hasAttackerOilChange {
  return !!hasAttackerOilChange_;
}
- (void) setHasAttackerOilChange:(BOOL) value_ {
  hasAttackerOilChange_ = !!value_;
}
@synthesize attackerOilChange;
- (BOOL) hasClanAvenged {
  return !!hasClanAvenged_;
}
- (void) setHasClanAvenged:(BOOL) value_ {
  hasClanAvenged_ = !!value_;
}
- (BOOL) clanAvenged {
  return !!clanAvenged_;
}
- (void) setClanAvenged:(BOOL) value_ {
  clanAvenged_ = !!value_;
}
- (BOOL) hasReplayId {
  return !!hasReplayId_;
}
- (void) setHasReplayId:(BOOL) value_ {
  hasReplayId_ = !!value_;
}
@synthesize replayId;
- (BOOL) hasCashStolenFromStorage {
  return !!hasCashStolenFromStorage_;
}
- (void) setHasCashStolenFromStorage:(BOOL) value_ {
  hasCashStolenFromStorage_ = !!value_;
}
@synthesize cashStolenFromStorage;
- (BOOL) hasCashStolenFromGenerators {
  return !!hasCashStolenFromGenerators_;
}
- (void) setHasCashStolenFromGenerators:(BOOL) value_ {
  hasCashStolenFromGenerators_ = !!value_;
}
@synthesize cashStolenFromGenerators;
- (BOOL) hasOilStolenFromStorage {
  return !!hasOilStolenFromStorage_;
}
- (void) setHasOilStolenFromStorage:(BOOL) value_ {
  hasOilStolenFromStorage_ = !!value_;
}
@synthesize oilStolenFromStorage;
- (BOOL) hasOilStolenFromGenerators {
  return !!hasOilStolenFromGenerators_;
}
- (void) setHasOilStolenFromGenerators:(BOOL) value_ {
  hasOilStolenFromGenerators_ = !!value_;
}
@synthesize oilStolenFromGenerators;
- (id) init {
  if ((self = [super init])) {
    self.battleEndTime = 0L;
    self.attacker = [FullUserProto defaultInstance];
    self.attackerWon = NO;
    self.defenderCashChange = 0;
    self.defenderOilChange = 0;
    self.exactedRevenge = NO;
    self.prospectiveCashWinnings = 0;
    self.prospectiveOilWinnings = 0;
    self.attackerBefore = [UserPvpLeagueProto defaultInstance];
    self.attackerAfter = [UserPvpLeagueProto defaultInstance];
    self.defenderBefore = [UserPvpLeagueProto defaultInstance];
    self.defenderAfter = [UserPvpLeagueProto defaultInstance];
    self.defender = [FullUserProto defaultInstance];
    self.attackerCashChange = 0;
    self.attackerOilChange = 0;
    self.clanAvenged = NO;
    self.replayId = @"";
    self.cashStolenFromStorage = 0;
    self.cashStolenFromGenerators = 0;
    self.oilStolenFromStorage = 0;
    self.oilStolenFromGenerators = 0;
  }
  return self;
}
static PvpHistoryProto* defaultPvpHistoryProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpHistoryProto class]) {
    defaultPvpHistoryProtoInstance = [[PvpHistoryProto alloc] init];
  }
}
+ (PvpHistoryProto*) defaultInstance {
  return defaultPvpHistoryProtoInstance;
}
- (PvpHistoryProto*) defaultInstance {
  return defaultPvpHistoryProtoInstance;
}
- (NSArray *)attackersMonstersList {
  return mutableAttackersMonstersList;
}
- (PvpMonsterProto*)attackersMonstersAtIndex:(NSUInteger)index {
  return [mutableAttackersMonstersList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasAttacker) {
    [output writeMessage:1 value:self.attacker];
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttackerWon) {
    [output writeBool:3 value:self.attackerWon];
  }
  if (self.hasDefenderCashChange) {
    [output writeSInt32:4 value:self.defenderCashChange];
  }
  if (self.hasDefenderOilChange) {
    [output writeSInt32:5 value:self.defenderOilChange];
  }
  if (self.hasExactedRevenge) {
    [output writeBool:6 value:self.exactedRevenge];
  }
  if (self.hasProspectiveCashWinnings) {
    [output writeInt32:7 value:self.prospectiveCashWinnings];
  }
  if (self.hasProspectiveOilWinnings) {
    [output writeInt32:8 value:self.prospectiveOilWinnings];
  }
  if (self.hasBattleEndTime) {
    [output writeInt64:9 value:self.battleEndTime];
  }
  if (self.hasAttackerBefore) {
    [output writeMessage:10 value:self.attackerBefore];
  }
  if (self.hasAttackerAfter) {
    [output writeMessage:11 value:self.attackerAfter];
  }
  if (self.hasDefenderBefore) {
    [output writeMessage:12 value:self.defenderBefore];
  }
  if (self.hasDefenderAfter) {
    [output writeMessage:13 value:self.defenderAfter];
  }
  if (self.hasDefender) {
    [output writeMessage:14 value:self.defender];
  }
  if (self.hasAttackerCashChange) {
    [output writeInt32:15 value:self.attackerCashChange];
  }
  if (self.hasAttackerOilChange) {
    [output writeInt32:16 value:self.attackerOilChange];
  }
  if (self.hasClanAvenged) {
    [output writeBool:17 value:self.clanAvenged];
  }
  if (self.hasReplayId) {
    [output writeString:19 value:self.replayId];
  }
  if (self.hasCashStolenFromStorage) {
    [output writeInt32:20 value:self.cashStolenFromStorage];
  }
  if (self.hasCashStolenFromGenerators) {
    [output writeInt32:21 value:self.cashStolenFromGenerators];
  }
  if (self.hasOilStolenFromStorage) {
    [output writeInt32:22 value:self.oilStolenFromStorage];
  }
  if (self.hasOilStolenFromGenerators) {
    [output writeInt32:23 value:self.oilStolenFromGenerators];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasAttacker) {
    size_ += computeMessageSize(1, self.attacker);
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttackerWon) {
    size_ += computeBoolSize(3, self.attackerWon);
  }
  if (self.hasDefenderCashChange) {
    size_ += computeSInt32Size(4, self.defenderCashChange);
  }
  if (self.hasDefenderOilChange) {
    size_ += computeSInt32Size(5, self.defenderOilChange);
  }
  if (self.hasExactedRevenge) {
    size_ += computeBoolSize(6, self.exactedRevenge);
  }
  if (self.hasProspectiveCashWinnings) {
    size_ += computeInt32Size(7, self.prospectiveCashWinnings);
  }
  if (self.hasProspectiveOilWinnings) {
    size_ += computeInt32Size(8, self.prospectiveOilWinnings);
  }
  if (self.hasBattleEndTime) {
    size_ += computeInt64Size(9, self.battleEndTime);
  }
  if (self.hasAttackerBefore) {
    size_ += computeMessageSize(10, self.attackerBefore);
  }
  if (self.hasAttackerAfter) {
    size_ += computeMessageSize(11, self.attackerAfter);
  }
  if (self.hasDefenderBefore) {
    size_ += computeMessageSize(12, self.defenderBefore);
  }
  if (self.hasDefenderAfter) {
    size_ += computeMessageSize(13, self.defenderAfter);
  }
  if (self.hasDefender) {
    size_ += computeMessageSize(14, self.defender);
  }
  if (self.hasAttackerCashChange) {
    size_ += computeInt32Size(15, self.attackerCashChange);
  }
  if (self.hasAttackerOilChange) {
    size_ += computeInt32Size(16, self.attackerOilChange);
  }
  if (self.hasClanAvenged) {
    size_ += computeBoolSize(17, self.clanAvenged);
  }
  if (self.hasReplayId) {
    size_ += computeStringSize(19, self.replayId);
  }
  if (self.hasCashStolenFromStorage) {
    size_ += computeInt32Size(20, self.cashStolenFromStorage);
  }
  if (self.hasCashStolenFromGenerators) {
    size_ += computeInt32Size(21, self.cashStolenFromGenerators);
  }
  if (self.hasOilStolenFromStorage) {
    size_ += computeInt32Size(22, self.oilStolenFromStorage);
  }
  if (self.hasOilStolenFromGenerators) {
    size_ += computeInt32Size(23, self.oilStolenFromGenerators);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpHistoryProto*) parseFromData:(NSData*) data {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromData:data] build];
}
+ (PvpHistoryProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromInputStream:input] build];
}
+ (PvpHistoryProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpHistoryProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpHistoryProto*)[[[PvpHistoryProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpHistoryProto_Builder*) builder {
  return [[PvpHistoryProto_Builder alloc] init];
}
+ (PvpHistoryProto_Builder*) builderWithPrototype:(PvpHistoryProto*) prototype {
  return [[PvpHistoryProto builder] mergeFrom:prototype];
}
- (PvpHistoryProto_Builder*) builder {
  return [PvpHistoryProto builder];
}
- (PvpHistoryProto_Builder*) toBuilder {
  return [PvpHistoryProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasAttacker) {
    [output appendFormat:@"%@%@ {\n", indent, @"attacker"];
    [self.attacker writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"attackersMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttackerWon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attackerWon", [NSNumber numberWithBool:self.attackerWon]];
  }
  if (self.hasDefenderCashChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderCashChange", [NSNumber numberWithInteger:self.defenderCashChange]];
  }
  if (self.hasDefenderOilChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderOilChange", [NSNumber numberWithInteger:self.defenderOilChange]];
  }
  if (self.hasExactedRevenge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"exactedRevenge", [NSNumber numberWithBool:self.exactedRevenge]];
  }
  if (self.hasProspectiveCashWinnings) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveCashWinnings", [NSNumber numberWithInteger:self.prospectiveCashWinnings]];
  }
  if (self.hasProspectiveOilWinnings) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prospectiveOilWinnings", [NSNumber numberWithInteger:self.prospectiveOilWinnings]];
  }
  if (self.hasBattleEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battleEndTime", [NSNumber numberWithLongLong:self.battleEndTime]];
  }
  if (self.hasAttackerBefore) {
    [output appendFormat:@"%@%@ {\n", indent, @"attackerBefore"];
    [self.attackerBefore writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttackerAfter) {
    [output appendFormat:@"%@%@ {\n", indent, @"attackerAfter"];
    [self.attackerAfter writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefenderBefore) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderBefore"];
    [self.defenderBefore writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefenderAfter) {
    [output appendFormat:@"%@%@ {\n", indent, @"defenderAfter"];
    [self.defenderAfter writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefender) {
    [output appendFormat:@"%@%@ {\n", indent, @"defender"];
    [self.defender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttackerCashChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attackerCashChange", [NSNumber numberWithInteger:self.attackerCashChange]];
  }
  if (self.hasAttackerOilChange) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attackerOilChange", [NSNumber numberWithInteger:self.attackerOilChange]];
  }
  if (self.hasClanAvenged) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanAvenged", [NSNumber numberWithBool:self.clanAvenged]];
  }
  if (self.hasReplayId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replayId", self.replayId];
  }
  if (self.hasCashStolenFromStorage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashStolenFromStorage", [NSNumber numberWithInteger:self.cashStolenFromStorage]];
  }
  if (self.hasCashStolenFromGenerators) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashStolenFromGenerators", [NSNumber numberWithInteger:self.cashStolenFromGenerators]];
  }
  if (self.hasOilStolenFromStorage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oilStolenFromStorage", [NSNumber numberWithInteger:self.oilStolenFromStorage]];
  }
  if (self.hasOilStolenFromGenerators) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oilStolenFromGenerators", [NSNumber numberWithInteger:self.oilStolenFromGenerators]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpHistoryProto class]]) {
    return NO;
  }
  PvpHistoryProto *otherMessage = other;
  return
      self.hasAttacker == otherMessage.hasAttacker &&
      (!self.hasAttacker || [self.attacker isEqual:otherMessage.attacker]) &&
      [self.attackersMonstersList isEqualToArray:otherMessage.attackersMonstersList] &&
      self.hasAttackerWon == otherMessage.hasAttackerWon &&
      (!self.hasAttackerWon || self.attackerWon == otherMessage.attackerWon) &&
      self.hasDefenderCashChange == otherMessage.hasDefenderCashChange &&
      (!self.hasDefenderCashChange || self.defenderCashChange == otherMessage.defenderCashChange) &&
      self.hasDefenderOilChange == otherMessage.hasDefenderOilChange &&
      (!self.hasDefenderOilChange || self.defenderOilChange == otherMessage.defenderOilChange) &&
      self.hasExactedRevenge == otherMessage.hasExactedRevenge &&
      (!self.hasExactedRevenge || self.exactedRevenge == otherMessage.exactedRevenge) &&
      self.hasProspectiveCashWinnings == otherMessage.hasProspectiveCashWinnings &&
      (!self.hasProspectiveCashWinnings || self.prospectiveCashWinnings == otherMessage.prospectiveCashWinnings) &&
      self.hasProspectiveOilWinnings == otherMessage.hasProspectiveOilWinnings &&
      (!self.hasProspectiveOilWinnings || self.prospectiveOilWinnings == otherMessage.prospectiveOilWinnings) &&
      self.hasBattleEndTime == otherMessage.hasBattleEndTime &&
      (!self.hasBattleEndTime || self.battleEndTime == otherMessage.battleEndTime) &&
      self.hasAttackerBefore == otherMessage.hasAttackerBefore &&
      (!self.hasAttackerBefore || [self.attackerBefore isEqual:otherMessage.attackerBefore]) &&
      self.hasAttackerAfter == otherMessage.hasAttackerAfter &&
      (!self.hasAttackerAfter || [self.attackerAfter isEqual:otherMessage.attackerAfter]) &&
      self.hasDefenderBefore == otherMessage.hasDefenderBefore &&
      (!self.hasDefenderBefore || [self.defenderBefore isEqual:otherMessage.defenderBefore]) &&
      self.hasDefenderAfter == otherMessage.hasDefenderAfter &&
      (!self.hasDefenderAfter || [self.defenderAfter isEqual:otherMessage.defenderAfter]) &&
      self.hasDefender == otherMessage.hasDefender &&
      (!self.hasDefender || [self.defender isEqual:otherMessage.defender]) &&
      self.hasAttackerCashChange == otherMessage.hasAttackerCashChange &&
      (!self.hasAttackerCashChange || self.attackerCashChange == otherMessage.attackerCashChange) &&
      self.hasAttackerOilChange == otherMessage.hasAttackerOilChange &&
      (!self.hasAttackerOilChange || self.attackerOilChange == otherMessage.attackerOilChange) &&
      self.hasClanAvenged == otherMessage.hasClanAvenged &&
      (!self.hasClanAvenged || self.clanAvenged == otherMessage.clanAvenged) &&
      self.hasReplayId == otherMessage.hasReplayId &&
      (!self.hasReplayId || [self.replayId isEqual:otherMessage.replayId]) &&
      self.hasCashStolenFromStorage == otherMessage.hasCashStolenFromStorage &&
      (!self.hasCashStolenFromStorage || self.cashStolenFromStorage == otherMessage.cashStolenFromStorage) &&
      self.hasCashStolenFromGenerators == otherMessage.hasCashStolenFromGenerators &&
      (!self.hasCashStolenFromGenerators || self.cashStolenFromGenerators == otherMessage.cashStolenFromGenerators) &&
      self.hasOilStolenFromStorage == otherMessage.hasOilStolenFromStorage &&
      (!self.hasOilStolenFromStorage || self.oilStolenFromStorage == otherMessage.oilStolenFromStorage) &&
      self.hasOilStolenFromGenerators == otherMessage.hasOilStolenFromGenerators &&
      (!self.hasOilStolenFromGenerators || self.oilStolenFromGenerators == otherMessage.oilStolenFromGenerators) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasAttacker) {
    hashCode = hashCode * 31 + [self.attacker hash];
  }
  [self.attackersMonstersList enumerateObjectsUsingBlock:^(PvpMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttackerWon) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.attackerWon] hash];
  }
  if (self.hasDefenderCashChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defenderCashChange] hash];
  }
  if (self.hasDefenderOilChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defenderOilChange] hash];
  }
  if (self.hasExactedRevenge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.exactedRevenge] hash];
  }
  if (self.hasProspectiveCashWinnings) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveCashWinnings] hash];
  }
  if (self.hasProspectiveOilWinnings) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.prospectiveOilWinnings] hash];
  }
  if (self.hasBattleEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.battleEndTime] hash];
  }
  if (self.hasAttackerBefore) {
    hashCode = hashCode * 31 + [self.attackerBefore hash];
  }
  if (self.hasAttackerAfter) {
    hashCode = hashCode * 31 + [self.attackerAfter hash];
  }
  if (self.hasDefenderBefore) {
    hashCode = hashCode * 31 + [self.defenderBefore hash];
  }
  if (self.hasDefenderAfter) {
    hashCode = hashCode * 31 + [self.defenderAfter hash];
  }
  if (self.hasDefender) {
    hashCode = hashCode * 31 + [self.defender hash];
  }
  if (self.hasAttackerCashChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.attackerCashChange] hash];
  }
  if (self.hasAttackerOilChange) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.attackerOilChange] hash];
  }
  if (self.hasClanAvenged) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.clanAvenged] hash];
  }
  if (self.hasReplayId) {
    hashCode = hashCode * 31 + [self.replayId hash];
  }
  if (self.hasCashStolenFromStorage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashStolenFromStorage] hash];
  }
  if (self.hasCashStolenFromGenerators) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashStolenFromGenerators] hash];
  }
  if (self.hasOilStolenFromStorage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oilStolenFromStorage] hash];
  }
  if (self.hasOilStolenFromGenerators) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oilStolenFromGenerators] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpHistoryProto_Builder()
@property (strong) PvpHistoryProto* result;
@end

@implementation PvpHistoryProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpHistoryProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpHistoryProto_Builder*) clear {
  self.result = [[PvpHistoryProto alloc] init];
  return self;
}
- (PvpHistoryProto_Builder*) clone {
  return [PvpHistoryProto builderWithPrototype:result];
}
- (PvpHistoryProto*) defaultInstance {
  return [PvpHistoryProto defaultInstance];
}
- (PvpHistoryProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpHistoryProto*) buildPartial {
  PvpHistoryProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpHistoryProto_Builder*) mergeFrom:(PvpHistoryProto*) other {
  if (other == [PvpHistoryProto defaultInstance]) {
    return self;
  }
  if (other.hasBattleEndTime) {
    [self setBattleEndTime:other.battleEndTime];
  }
  if (other.hasAttacker) {
    [self mergeAttacker:other.attacker];
  }
  if (other.mutableAttackersMonstersList.count > 0) {
    if (result.mutableAttackersMonstersList == nil) {
      result.mutableAttackersMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableAttackersMonstersList];
    } else {
      [result.mutableAttackersMonstersList addObjectsFromArray:other.mutableAttackersMonstersList];
    }
  }
  if (other.hasAttackerWon) {
    [self setAttackerWon:other.attackerWon];
  }
  if (other.hasDefenderCashChange) {
    [self setDefenderCashChange:other.defenderCashChange];
  }
  if (other.hasDefenderOilChange) {
    [self setDefenderOilChange:other.defenderOilChange];
  }
  if (other.hasExactedRevenge) {
    [self setExactedRevenge:other.exactedRevenge];
  }
  if (other.hasProspectiveCashWinnings) {
    [self setProspectiveCashWinnings:other.prospectiveCashWinnings];
  }
  if (other.hasProspectiveOilWinnings) {
    [self setProspectiveOilWinnings:other.prospectiveOilWinnings];
  }
  if (other.hasAttackerBefore) {
    [self mergeAttackerBefore:other.attackerBefore];
  }
  if (other.hasAttackerAfter) {
    [self mergeAttackerAfter:other.attackerAfter];
  }
  if (other.hasDefenderBefore) {
    [self mergeDefenderBefore:other.defenderBefore];
  }
  if (other.hasDefenderAfter) {
    [self mergeDefenderAfter:other.defenderAfter];
  }
  if (other.hasDefender) {
    [self mergeDefender:other.defender];
  }
  if (other.hasAttackerCashChange) {
    [self setAttackerCashChange:other.attackerCashChange];
  }
  if (other.hasAttackerOilChange) {
    [self setAttackerOilChange:other.attackerOilChange];
  }
  if (other.hasClanAvenged) {
    [self setClanAvenged:other.clanAvenged];
  }
  if (other.hasReplayId) {
    [self setReplayId:other.replayId];
  }
  if (other.hasCashStolenFromStorage) {
    [self setCashStolenFromStorage:other.cashStolenFromStorage];
  }
  if (other.hasCashStolenFromGenerators) {
    [self setCashStolenFromGenerators:other.cashStolenFromGenerators];
  }
  if (other.hasOilStolenFromStorage) {
    [self setOilStolenFromStorage:other.oilStolenFromStorage];
  }
  if (other.hasOilStolenFromGenerators) {
    [self setOilStolenFromGenerators:other.oilStolenFromGenerators];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpHistoryProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FullUserProto_Builder* subBuilder = [FullUserProto builder];
        if (self.hasAttacker) {
          [subBuilder mergeFrom:self.attacker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttacker:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        PvpMonsterProto_Builder* subBuilder = [PvpMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttackersMonsters:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setAttackerWon:[input readBool]];
        break;
      }
      case 32: {
        [self setDefenderCashChange:[input readSInt32]];
        break;
      }
      case 40: {
        [self setDefenderOilChange:[input readSInt32]];
        break;
      }
      case 48: {
        [self setExactedRevenge:[input readBool]];
        break;
      }
      case 56: {
        [self setProspectiveCashWinnings:[input readInt32]];
        break;
      }
      case 64: {
        [self setProspectiveOilWinnings:[input readInt32]];
        break;
      }
      case 72: {
        [self setBattleEndTime:[input readInt64]];
        break;
      }
      case 82: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasAttackerBefore) {
          [subBuilder mergeFrom:self.attackerBefore];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttackerBefore:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasAttackerAfter) {
          [subBuilder mergeFrom:self.attackerAfter];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttackerAfter:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasDefenderBefore) {
          [subBuilder mergeFrom:self.defenderBefore];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefenderBefore:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        UserPvpLeagueProto_Builder* subBuilder = [UserPvpLeagueProto builder];
        if (self.hasDefenderAfter) {
          [subBuilder mergeFrom:self.defenderAfter];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefenderAfter:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        FullUserProto_Builder* subBuilder = [FullUserProto builder];
        if (self.hasDefender) {
          [subBuilder mergeFrom:self.defender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefender:[subBuilder buildPartial]];
        break;
      }
      case 120: {
        [self setAttackerCashChange:[input readInt32]];
        break;
      }
      case 128: {
        [self setAttackerOilChange:[input readInt32]];
        break;
      }
      case 136: {
        [self setClanAvenged:[input readBool]];
        break;
      }
      case 154: {
        [self setReplayId:[input readString]];
        break;
      }
      case 160: {
        [self setCashStolenFromStorage:[input readInt32]];
        break;
      }
      case 168: {
        [self setCashStolenFromGenerators:[input readInt32]];
        break;
      }
      case 176: {
        [self setOilStolenFromStorage:[input readInt32]];
        break;
      }
      case 184: {
        [self setOilStolenFromGenerators:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasBattleEndTime {
  return result.hasBattleEndTime;
}
- (int64_t) battleEndTime {
  return result.battleEndTime;
}
- (PvpHistoryProto_Builder*) setBattleEndTime:(int64_t) value {
  result.hasBattleEndTime = YES;
  result.battleEndTime = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearBattleEndTime {
  result.hasBattleEndTime = NO;
  result.battleEndTime = 0L;
  return self;
}
- (BOOL) hasAttacker {
  return result.hasAttacker;
}
- (FullUserProto*) attacker {
  return result.attacker;
}
- (PvpHistoryProto_Builder*) setAttacker:(FullUserProto*) value {
  result.hasAttacker = YES;
  result.attacker = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttacker_Builder:(FullUserProto_Builder*) builderForValue {
  return [self setAttacker:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttacker:(FullUserProto*) value {
  if (result.hasAttacker &&
      result.attacker != [FullUserProto defaultInstance]) {
    result.attacker =
      [[[FullUserProto builderWithPrototype:result.attacker] mergeFrom:value] buildPartial];
  } else {
    result.attacker = value;
  }
  result.hasAttacker = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttacker {
  result.hasAttacker = NO;
  result.attacker = [FullUserProto defaultInstance];
  return self;
}
- (NSMutableArray *)attackersMonstersList {
  return result.mutableAttackersMonstersList;
}
- (PvpMonsterProto*)attackersMonstersAtIndex:(NSUInteger)index {
  return [result attackersMonstersAtIndex:index];
}
- (PvpHistoryProto_Builder *)addAttackersMonsters:(PvpMonsterProto*)value {
  if (result.mutableAttackersMonstersList == nil) {
    result.mutableAttackersMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableAttackersMonstersList addObject:value];
  return self;
}
- (PvpHistoryProto_Builder *)addAllAttackersMonsters:(NSArray *)array {
  if (result.mutableAttackersMonstersList == nil) {
    result.mutableAttackersMonstersList = [NSMutableArray array];
  }
  [result.mutableAttackersMonstersList addObjectsFromArray:array];
  return self;
}
- (PvpHistoryProto_Builder *)clearAttackersMonsters {
  result.mutableAttackersMonstersList = nil;
  return self;
}
- (BOOL) hasAttackerWon {
  return result.hasAttackerWon;
}
- (BOOL) attackerWon {
  return result.attackerWon;
}
- (PvpHistoryProto_Builder*) setAttackerWon:(BOOL) value {
  result.hasAttackerWon = YES;
  result.attackerWon = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerWon {
  result.hasAttackerWon = NO;
  result.attackerWon = NO;
  return self;
}
- (BOOL) hasDefenderCashChange {
  return result.hasDefenderCashChange;
}
- (int32_t) defenderCashChange {
  return result.defenderCashChange;
}
- (PvpHistoryProto_Builder*) setDefenderCashChange:(int32_t) value {
  result.hasDefenderCashChange = YES;
  result.defenderCashChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderCashChange {
  result.hasDefenderCashChange = NO;
  result.defenderCashChange = 0;
  return self;
}
- (BOOL) hasDefenderOilChange {
  return result.hasDefenderOilChange;
}
- (int32_t) defenderOilChange {
  return result.defenderOilChange;
}
- (PvpHistoryProto_Builder*) setDefenderOilChange:(int32_t) value {
  result.hasDefenderOilChange = YES;
  result.defenderOilChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderOilChange {
  result.hasDefenderOilChange = NO;
  result.defenderOilChange = 0;
  return self;
}
- (BOOL) hasExactedRevenge {
  return result.hasExactedRevenge;
}
- (BOOL) exactedRevenge {
  return result.exactedRevenge;
}
- (PvpHistoryProto_Builder*) setExactedRevenge:(BOOL) value {
  result.hasExactedRevenge = YES;
  result.exactedRevenge = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearExactedRevenge {
  result.hasExactedRevenge = NO;
  result.exactedRevenge = NO;
  return self;
}
- (BOOL) hasProspectiveCashWinnings {
  return result.hasProspectiveCashWinnings;
}
- (int32_t) prospectiveCashWinnings {
  return result.prospectiveCashWinnings;
}
- (PvpHistoryProto_Builder*) setProspectiveCashWinnings:(int32_t) value {
  result.hasProspectiveCashWinnings = YES;
  result.prospectiveCashWinnings = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearProspectiveCashWinnings {
  result.hasProspectiveCashWinnings = NO;
  result.prospectiveCashWinnings = 0;
  return self;
}
- (BOOL) hasProspectiveOilWinnings {
  return result.hasProspectiveOilWinnings;
}
- (int32_t) prospectiveOilWinnings {
  return result.prospectiveOilWinnings;
}
- (PvpHistoryProto_Builder*) setProspectiveOilWinnings:(int32_t) value {
  result.hasProspectiveOilWinnings = YES;
  result.prospectiveOilWinnings = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearProspectiveOilWinnings {
  result.hasProspectiveOilWinnings = NO;
  result.prospectiveOilWinnings = 0;
  return self;
}
- (BOOL) hasAttackerBefore {
  return result.hasAttackerBefore;
}
- (UserPvpLeagueProto*) attackerBefore {
  return result.attackerBefore;
}
- (PvpHistoryProto_Builder*) setAttackerBefore:(UserPvpLeagueProto*) value {
  result.hasAttackerBefore = YES;
  result.attackerBefore = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttackerBefore_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setAttackerBefore:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttackerBefore:(UserPvpLeagueProto*) value {
  if (result.hasAttackerBefore &&
      result.attackerBefore != [UserPvpLeagueProto defaultInstance]) {
    result.attackerBefore =
      [[[UserPvpLeagueProto builderWithPrototype:result.attackerBefore] mergeFrom:value] buildPartial];
  } else {
    result.attackerBefore = value;
  }
  result.hasAttackerBefore = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerBefore {
  result.hasAttackerBefore = NO;
  result.attackerBefore = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasAttackerAfter {
  return result.hasAttackerAfter;
}
- (UserPvpLeagueProto*) attackerAfter {
  return result.attackerAfter;
}
- (PvpHistoryProto_Builder*) setAttackerAfter:(UserPvpLeagueProto*) value {
  result.hasAttackerAfter = YES;
  result.attackerAfter = value;
  return self;
}
- (PvpHistoryProto_Builder*) setAttackerAfter_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setAttackerAfter:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeAttackerAfter:(UserPvpLeagueProto*) value {
  if (result.hasAttackerAfter &&
      result.attackerAfter != [UserPvpLeagueProto defaultInstance]) {
    result.attackerAfter =
      [[[UserPvpLeagueProto builderWithPrototype:result.attackerAfter] mergeFrom:value] buildPartial];
  } else {
    result.attackerAfter = value;
  }
  result.hasAttackerAfter = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerAfter {
  result.hasAttackerAfter = NO;
  result.attackerAfter = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefenderBefore {
  return result.hasDefenderBefore;
}
- (UserPvpLeagueProto*) defenderBefore {
  return result.defenderBefore;
}
- (PvpHistoryProto_Builder*) setDefenderBefore:(UserPvpLeagueProto*) value {
  result.hasDefenderBefore = YES;
  result.defenderBefore = value;
  return self;
}
- (PvpHistoryProto_Builder*) setDefenderBefore_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setDefenderBefore:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeDefenderBefore:(UserPvpLeagueProto*) value {
  if (result.hasDefenderBefore &&
      result.defenderBefore != [UserPvpLeagueProto defaultInstance]) {
    result.defenderBefore =
      [[[UserPvpLeagueProto builderWithPrototype:result.defenderBefore] mergeFrom:value] buildPartial];
  } else {
    result.defenderBefore = value;
  }
  result.hasDefenderBefore = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderBefore {
  result.hasDefenderBefore = NO;
  result.defenderBefore = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefenderAfter {
  return result.hasDefenderAfter;
}
- (UserPvpLeagueProto*) defenderAfter {
  return result.defenderAfter;
}
- (PvpHistoryProto_Builder*) setDefenderAfter:(UserPvpLeagueProto*) value {
  result.hasDefenderAfter = YES;
  result.defenderAfter = value;
  return self;
}
- (PvpHistoryProto_Builder*) setDefenderAfter_Builder:(UserPvpLeagueProto_Builder*) builderForValue {
  return [self setDefenderAfter:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeDefenderAfter:(UserPvpLeagueProto*) value {
  if (result.hasDefenderAfter &&
      result.defenderAfter != [UserPvpLeagueProto defaultInstance]) {
    result.defenderAfter =
      [[[UserPvpLeagueProto builderWithPrototype:result.defenderAfter] mergeFrom:value] buildPartial];
  } else {
    result.defenderAfter = value;
  }
  result.hasDefenderAfter = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefenderAfter {
  result.hasDefenderAfter = NO;
  result.defenderAfter = [UserPvpLeagueProto defaultInstance];
  return self;
}
- (BOOL) hasDefender {
  return result.hasDefender;
}
- (FullUserProto*) defender {
  return result.defender;
}
- (PvpHistoryProto_Builder*) setDefender:(FullUserProto*) value {
  result.hasDefender = YES;
  result.defender = value;
  return self;
}
- (PvpHistoryProto_Builder*) setDefender_Builder:(FullUserProto_Builder*) builderForValue {
  return [self setDefender:[builderForValue build]];
}
- (PvpHistoryProto_Builder*) mergeDefender:(FullUserProto*) value {
  if (result.hasDefender &&
      result.defender != [FullUserProto defaultInstance]) {
    result.defender =
      [[[FullUserProto builderWithPrototype:result.defender] mergeFrom:value] buildPartial];
  } else {
    result.defender = value;
  }
  result.hasDefender = YES;
  return self;
}
- (PvpHistoryProto_Builder*) clearDefender {
  result.hasDefender = NO;
  result.defender = [FullUserProto defaultInstance];
  return self;
}
- (BOOL) hasAttackerCashChange {
  return result.hasAttackerCashChange;
}
- (int32_t) attackerCashChange {
  return result.attackerCashChange;
}
- (PvpHistoryProto_Builder*) setAttackerCashChange:(int32_t) value {
  result.hasAttackerCashChange = YES;
  result.attackerCashChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerCashChange {
  result.hasAttackerCashChange = NO;
  result.attackerCashChange = 0;
  return self;
}
- (BOOL) hasAttackerOilChange {
  return result.hasAttackerOilChange;
}
- (int32_t) attackerOilChange {
  return result.attackerOilChange;
}
- (PvpHistoryProto_Builder*) setAttackerOilChange:(int32_t) value {
  result.hasAttackerOilChange = YES;
  result.attackerOilChange = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearAttackerOilChange {
  result.hasAttackerOilChange = NO;
  result.attackerOilChange = 0;
  return self;
}
- (BOOL) hasClanAvenged {
  return result.hasClanAvenged;
}
- (BOOL) clanAvenged {
  return result.clanAvenged;
}
- (PvpHistoryProto_Builder*) setClanAvenged:(BOOL) value {
  result.hasClanAvenged = YES;
  result.clanAvenged = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearClanAvenged {
  result.hasClanAvenged = NO;
  result.clanAvenged = NO;
  return self;
}
- (BOOL) hasReplayId {
  return result.hasReplayId;
}
- (NSString*) replayId {
  return result.replayId;
}
- (PvpHistoryProto_Builder*) setReplayId:(NSString*) value {
  result.hasReplayId = YES;
  result.replayId = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearReplayId {
  result.hasReplayId = NO;
  result.replayId = @"";
  return self;
}
- (BOOL) hasCashStolenFromStorage {
  return result.hasCashStolenFromStorage;
}
- (int32_t) cashStolenFromStorage {
  return result.cashStolenFromStorage;
}
- (PvpHistoryProto_Builder*) setCashStolenFromStorage:(int32_t) value {
  result.hasCashStolenFromStorage = YES;
  result.cashStolenFromStorage = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearCashStolenFromStorage {
  result.hasCashStolenFromStorage = NO;
  result.cashStolenFromStorage = 0;
  return self;
}
- (BOOL) hasCashStolenFromGenerators {
  return result.hasCashStolenFromGenerators;
}
- (int32_t) cashStolenFromGenerators {
  return result.cashStolenFromGenerators;
}
- (PvpHistoryProto_Builder*) setCashStolenFromGenerators:(int32_t) value {
  result.hasCashStolenFromGenerators = YES;
  result.cashStolenFromGenerators = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearCashStolenFromGenerators {
  result.hasCashStolenFromGenerators = NO;
  result.cashStolenFromGenerators = 0;
  return self;
}
- (BOOL) hasOilStolenFromStorage {
  return result.hasOilStolenFromStorage;
}
- (int32_t) oilStolenFromStorage {
  return result.oilStolenFromStorage;
}
- (PvpHistoryProto_Builder*) setOilStolenFromStorage:(int32_t) value {
  result.hasOilStolenFromStorage = YES;
  result.oilStolenFromStorage = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearOilStolenFromStorage {
  result.hasOilStolenFromStorage = NO;
  result.oilStolenFromStorage = 0;
  return self;
}
- (BOOL) hasOilStolenFromGenerators {
  return result.hasOilStolenFromGenerators;
}
- (int32_t) oilStolenFromGenerators {
  return result.oilStolenFromGenerators;
}
- (PvpHistoryProto_Builder*) setOilStolenFromGenerators:(int32_t) value {
  result.hasOilStolenFromGenerators = YES;
  result.oilStolenFromGenerators = value;
  return self;
}
- (PvpHistoryProto_Builder*) clearOilStolenFromGenerators {
  result.hasOilStolenFromGenerators = NO;
  result.oilStolenFromGenerators = 0;
  return self;
}
@end

@interface PvpLeagueProto ()
@property int32_t leagueId;
@property (strong) NSString* leagueName;
@property (strong) NSString* imgPrefix;
@property (strong) NSString* description;
@end

@implementation PvpLeagueProto

- (BOOL) hasLeagueId {
  return !!hasLeagueId_;
}
- (void) setHasLeagueId:(BOOL) value_ {
  hasLeagueId_ = !!value_;
}
@synthesize leagueId;
- (BOOL) hasLeagueName {
  return !!hasLeagueName_;
}
- (void) setHasLeagueName:(BOOL) value_ {
  hasLeagueName_ = !!value_;
}
@synthesize leagueName;
- (BOOL) hasImgPrefix {
  return !!hasImgPrefix_;
}
- (void) setHasImgPrefix:(BOOL) value_ {
  hasImgPrefix_ = !!value_;
}
@synthesize imgPrefix;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
- (id) init {
  if ((self = [super init])) {
    self.leagueId = 0;
    self.leagueName = @"";
    self.imgPrefix = @"";
    self.description = @"";
  }
  return self;
}
static PvpLeagueProto* defaultPvpLeagueProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpLeagueProto class]) {
    defaultPvpLeagueProtoInstance = [[PvpLeagueProto alloc] init];
  }
}
+ (PvpLeagueProto*) defaultInstance {
  return defaultPvpLeagueProtoInstance;
}
- (PvpLeagueProto*) defaultInstance {
  return defaultPvpLeagueProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLeagueId) {
    [output writeInt32:1 value:self.leagueId];
  }
  if (self.hasLeagueName) {
    [output writeString:2 value:self.leagueName];
  }
  if (self.hasImgPrefix) {
    [output writeString:3 value:self.imgPrefix];
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLeagueId) {
    size_ += computeInt32Size(1, self.leagueId);
  }
  if (self.hasLeagueName) {
    size_ += computeStringSize(2, self.leagueName);
  }
  if (self.hasImgPrefix) {
    size_ += computeStringSize(3, self.imgPrefix);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(5, self.description);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpLeagueProto*) parseFromData:(NSData*) data {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromData:data] build];
}
+ (PvpLeagueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpLeagueProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromInputStream:input] build];
}
+ (PvpLeagueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpLeagueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpLeagueProto*)[[[PvpLeagueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpLeagueProto_Builder*) builder {
  return [[PvpLeagueProto_Builder alloc] init];
}
+ (PvpLeagueProto_Builder*) builderWithPrototype:(PvpLeagueProto*) prototype {
  return [[PvpLeagueProto builder] mergeFrom:prototype];
}
- (PvpLeagueProto_Builder*) builder {
  return [PvpLeagueProto builder];
}
- (PvpLeagueProto_Builder*) toBuilder {
  return [PvpLeagueProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLeagueId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueId", [NSNumber numberWithInteger:self.leagueId]];
  }
  if (self.hasLeagueName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leagueName", self.leagueName];
  }
  if (self.hasImgPrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgPrefix", self.imgPrefix];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpLeagueProto class]]) {
    return NO;
  }
  PvpLeagueProto *otherMessage = other;
  return
      self.hasLeagueId == otherMessage.hasLeagueId &&
      (!self.hasLeagueId || self.leagueId == otherMessage.leagueId) &&
      self.hasLeagueName == otherMessage.hasLeagueName &&
      (!self.hasLeagueName || [self.leagueName isEqual:otherMessage.leagueName]) &&
      self.hasImgPrefix == otherMessage.hasImgPrefix &&
      (!self.hasImgPrefix || [self.imgPrefix isEqual:otherMessage.imgPrefix]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLeagueId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.leagueId] hash];
  }
  if (self.hasLeagueName) {
    hashCode = hashCode * 31 + [self.leagueName hash];
  }
  if (self.hasImgPrefix) {
    hashCode = hashCode * 31 + [self.imgPrefix hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpLeagueProto_Builder()
@property (strong) PvpLeagueProto* result;
@end

@implementation PvpLeagueProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpLeagueProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpLeagueProto_Builder*) clear {
  self.result = [[PvpLeagueProto alloc] init];
  return self;
}
- (PvpLeagueProto_Builder*) clone {
  return [PvpLeagueProto builderWithPrototype:result];
}
- (PvpLeagueProto*) defaultInstance {
  return [PvpLeagueProto defaultInstance];
}
- (PvpLeagueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpLeagueProto*) buildPartial {
  PvpLeagueProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpLeagueProto_Builder*) mergeFrom:(PvpLeagueProto*) other {
  if (other == [PvpLeagueProto defaultInstance]) {
    return self;
  }
  if (other.hasLeagueId) {
    [self setLeagueId:other.leagueId];
  }
  if (other.hasLeagueName) {
    [self setLeagueName:other.leagueName];
  }
  if (other.hasImgPrefix) {
    [self setImgPrefix:other.imgPrefix];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpLeagueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLeagueId:[input readInt32]];
        break;
      }
      case 18: {
        [self setLeagueName:[input readString]];
        break;
      }
      case 26: {
        [self setImgPrefix:[input readString]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasLeagueId {
  return result.hasLeagueId;
}
- (int32_t) leagueId {
  return result.leagueId;
}
- (PvpLeagueProto_Builder*) setLeagueId:(int32_t) value {
  result.hasLeagueId = YES;
  result.leagueId = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearLeagueId {
  result.hasLeagueId = NO;
  result.leagueId = 0;
  return self;
}
- (BOOL) hasLeagueName {
  return result.hasLeagueName;
}
- (NSString*) leagueName {
  return result.leagueName;
}
- (PvpLeagueProto_Builder*) setLeagueName:(NSString*) value {
  result.hasLeagueName = YES;
  result.leagueName = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearLeagueName {
  result.hasLeagueName = NO;
  result.leagueName = @"";
  return self;
}
- (BOOL) hasImgPrefix {
  return result.hasImgPrefix;
}
- (NSString*) imgPrefix {
  return result.imgPrefix;
}
- (PvpLeagueProto_Builder*) setImgPrefix:(NSString*) value {
  result.hasImgPrefix = YES;
  result.imgPrefix = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearImgPrefix {
  result.hasImgPrefix = NO;
  result.imgPrefix = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (PvpLeagueProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (PvpLeagueProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
@end

@interface PvpClanAvengeProto ()
@property (strong) NSString* clanAvengeUuid;
@property (strong) NSMutableArray * mutableUsersAvengingList;
@property (strong) MinimumUserProto* attacker;
@property (strong) MinimumUserProto* defender;
@property int64_t battleEndTime;
@property int64_t avengeRequestTime;
@property (strong) NSString* defenderClanUuid;
@end

@implementation PvpClanAvengeProto

- (BOOL) hasClanAvengeUuid {
  return !!hasClanAvengeUuid_;
}
- (void) setHasClanAvengeUuid:(BOOL) value_ {
  hasClanAvengeUuid_ = !!value_;
}
@synthesize clanAvengeUuid;
@synthesize mutableUsersAvengingList;
@dynamic usersAvengingList;
- (BOOL) hasAttacker {
  return !!hasAttacker_;
}
- (void) setHasAttacker:(BOOL) value_ {
  hasAttacker_ = !!value_;
}
@synthesize attacker;
- (BOOL) hasDefender {
  return !!hasDefender_;
}
- (void) setHasDefender:(BOOL) value_ {
  hasDefender_ = !!value_;
}
@synthesize defender;
- (BOOL) hasBattleEndTime {
  return !!hasBattleEndTime_;
}
- (void) setHasBattleEndTime:(BOOL) value_ {
  hasBattleEndTime_ = !!value_;
}
@synthesize battleEndTime;
- (BOOL) hasAvengeRequestTime {
  return !!hasAvengeRequestTime_;
}
- (void) setHasAvengeRequestTime:(BOOL) value_ {
  hasAvengeRequestTime_ = !!value_;
}
@synthesize avengeRequestTime;
- (BOOL) hasDefenderClanUuid {
  return !!hasDefenderClanUuid_;
}
- (void) setHasDefenderClanUuid:(BOOL) value_ {
  hasDefenderClanUuid_ = !!value_;
}
@synthesize defenderClanUuid;
- (id) init {
  if ((self = [super init])) {
    self.clanAvengeUuid = @"";
    self.attacker = [MinimumUserProto defaultInstance];
    self.defender = [MinimumUserProto defaultInstance];
    self.battleEndTime = 0L;
    self.avengeRequestTime = 0L;
    self.defenderClanUuid = @"";
  }
  return self;
}
static PvpClanAvengeProto* defaultPvpClanAvengeProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpClanAvengeProto class]) {
    defaultPvpClanAvengeProtoInstance = [[PvpClanAvengeProto alloc] init];
  }
}
+ (PvpClanAvengeProto*) defaultInstance {
  return defaultPvpClanAvengeProtoInstance;
}
- (PvpClanAvengeProto*) defaultInstance {
  return defaultPvpClanAvengeProtoInstance;
}
- (NSArray *)usersAvengingList {
  return mutableUsersAvengingList;
}
- (PvpUserClanAvengeProto*)usersAvengingAtIndex:(NSUInteger)index {
  return [mutableUsersAvengingList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasClanAvengeUuid) {
    [output writeString:1 value:self.clanAvengeUuid];
  }
  [self.usersAvengingList enumerateObjectsUsingBlock:^(PvpUserClanAvengeProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasAttacker) {
    [output writeMessage:3 value:self.attacker];
  }
  if (self.hasDefender) {
    [output writeMessage:4 value:self.defender];
  }
  if (self.hasBattleEndTime) {
    [output writeInt64:5 value:self.battleEndTime];
  }
  if (self.hasAvengeRequestTime) {
    [output writeInt64:6 value:self.avengeRequestTime];
  }
  if (self.hasDefenderClanUuid) {
    [output writeString:7 value:self.defenderClanUuid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasClanAvengeUuid) {
    size_ += computeStringSize(1, self.clanAvengeUuid);
  }
  [self.usersAvengingList enumerateObjectsUsingBlock:^(PvpUserClanAvengeProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasAttacker) {
    size_ += computeMessageSize(3, self.attacker);
  }
  if (self.hasDefender) {
    size_ += computeMessageSize(4, self.defender);
  }
  if (self.hasBattleEndTime) {
    size_ += computeInt64Size(5, self.battleEndTime);
  }
  if (self.hasAvengeRequestTime) {
    size_ += computeInt64Size(6, self.avengeRequestTime);
  }
  if (self.hasDefenderClanUuid) {
    size_ += computeStringSize(7, self.defenderClanUuid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpClanAvengeProto*) parseFromData:(NSData*) data {
  return (PvpClanAvengeProto*)[[[PvpClanAvengeProto builder] mergeFromData:data] build];
}
+ (PvpClanAvengeProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpClanAvengeProto*)[[[PvpClanAvengeProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpClanAvengeProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpClanAvengeProto*)[[[PvpClanAvengeProto builder] mergeFromInputStream:input] build];
}
+ (PvpClanAvengeProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpClanAvengeProto*)[[[PvpClanAvengeProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpClanAvengeProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpClanAvengeProto*)[[[PvpClanAvengeProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpClanAvengeProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpClanAvengeProto*)[[[PvpClanAvengeProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpClanAvengeProto_Builder*) builder {
  return [[PvpClanAvengeProto_Builder alloc] init];
}
+ (PvpClanAvengeProto_Builder*) builderWithPrototype:(PvpClanAvengeProto*) prototype {
  return [[PvpClanAvengeProto builder] mergeFrom:prototype];
}
- (PvpClanAvengeProto_Builder*) builder {
  return [PvpClanAvengeProto builder];
}
- (PvpClanAvengeProto_Builder*) toBuilder {
  return [PvpClanAvengeProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasClanAvengeUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanAvengeUuid", self.clanAvengeUuid];
  }
  [self.usersAvengingList enumerateObjectsUsingBlock:^(PvpUserClanAvengeProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"usersAvenging"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasAttacker) {
    [output appendFormat:@"%@%@ {\n", indent, @"attacker"];
    [self.attacker writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDefender) {
    [output appendFormat:@"%@%@ {\n", indent, @"defender"];
    [self.defender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBattleEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"battleEndTime", [NSNumber numberWithLongLong:self.battleEndTime]];
  }
  if (self.hasAvengeRequestTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avengeRequestTime", [NSNumber numberWithLongLong:self.avengeRequestTime]];
  }
  if (self.hasDefenderClanUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defenderClanUuid", self.defenderClanUuid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpClanAvengeProto class]]) {
    return NO;
  }
  PvpClanAvengeProto *otherMessage = other;
  return
      self.hasClanAvengeUuid == otherMessage.hasClanAvengeUuid &&
      (!self.hasClanAvengeUuid || [self.clanAvengeUuid isEqual:otherMessage.clanAvengeUuid]) &&
      [self.usersAvengingList isEqualToArray:otherMessage.usersAvengingList] &&
      self.hasAttacker == otherMessage.hasAttacker &&
      (!self.hasAttacker || [self.attacker isEqual:otherMessage.attacker]) &&
      self.hasDefender == otherMessage.hasDefender &&
      (!self.hasDefender || [self.defender isEqual:otherMessage.defender]) &&
      self.hasBattleEndTime == otherMessage.hasBattleEndTime &&
      (!self.hasBattleEndTime || self.battleEndTime == otherMessage.battleEndTime) &&
      self.hasAvengeRequestTime == otherMessage.hasAvengeRequestTime &&
      (!self.hasAvengeRequestTime || self.avengeRequestTime == otherMessage.avengeRequestTime) &&
      self.hasDefenderClanUuid == otherMessage.hasDefenderClanUuid &&
      (!self.hasDefenderClanUuid || [self.defenderClanUuid isEqual:otherMessage.defenderClanUuid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasClanAvengeUuid) {
    hashCode = hashCode * 31 + [self.clanAvengeUuid hash];
  }
  [self.usersAvengingList enumerateObjectsUsingBlock:^(PvpUserClanAvengeProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasAttacker) {
    hashCode = hashCode * 31 + [self.attacker hash];
  }
  if (self.hasDefender) {
    hashCode = hashCode * 31 + [self.defender hash];
  }
  if (self.hasBattleEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.battleEndTime] hash];
  }
  if (self.hasAvengeRequestTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.avengeRequestTime] hash];
  }
  if (self.hasDefenderClanUuid) {
    hashCode = hashCode * 31 + [self.defenderClanUuid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpClanAvengeProto_Builder()
@property (strong) PvpClanAvengeProto* result;
@end

@implementation PvpClanAvengeProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpClanAvengeProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpClanAvengeProto_Builder*) clear {
  self.result = [[PvpClanAvengeProto alloc] init];
  return self;
}
- (PvpClanAvengeProto_Builder*) clone {
  return [PvpClanAvengeProto builderWithPrototype:result];
}
- (PvpClanAvengeProto*) defaultInstance {
  return [PvpClanAvengeProto defaultInstance];
}
- (PvpClanAvengeProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpClanAvengeProto*) buildPartial {
  PvpClanAvengeProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpClanAvengeProto_Builder*) mergeFrom:(PvpClanAvengeProto*) other {
  if (other == [PvpClanAvengeProto defaultInstance]) {
    return self;
  }
  if (other.hasClanAvengeUuid) {
    [self setClanAvengeUuid:other.clanAvengeUuid];
  }
  if (other.mutableUsersAvengingList.count > 0) {
    if (result.mutableUsersAvengingList == nil) {
      result.mutableUsersAvengingList = [[NSMutableArray alloc] initWithArray:other.mutableUsersAvengingList];
    } else {
      [result.mutableUsersAvengingList addObjectsFromArray:other.mutableUsersAvengingList];
    }
  }
  if (other.hasAttacker) {
    [self mergeAttacker:other.attacker];
  }
  if (other.hasDefender) {
    [self mergeDefender:other.defender];
  }
  if (other.hasBattleEndTime) {
    [self setBattleEndTime:other.battleEndTime];
  }
  if (other.hasAvengeRequestTime) {
    [self setAvengeRequestTime:other.avengeRequestTime];
  }
  if (other.hasDefenderClanUuid) {
    [self setDefenderClanUuid:other.defenderClanUuid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpClanAvengeProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpClanAvengeProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setClanAvengeUuid:[input readString]];
        break;
      }
      case 18: {
        PvpUserClanAvengeProto_Builder* subBuilder = [PvpUserClanAvengeProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUsersAvenging:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasAttacker) {
          [subBuilder mergeFrom:self.attacker];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttacker:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasDefender) {
          [subBuilder mergeFrom:self.defender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDefender:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setBattleEndTime:[input readInt64]];
        break;
      }
      case 48: {
        [self setAvengeRequestTime:[input readInt64]];
        break;
      }
      case 58: {
        [self setDefenderClanUuid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasClanAvengeUuid {
  return result.hasClanAvengeUuid;
}
- (NSString*) clanAvengeUuid {
  return result.clanAvengeUuid;
}
- (PvpClanAvengeProto_Builder*) setClanAvengeUuid:(NSString*) value {
  result.hasClanAvengeUuid = YES;
  result.clanAvengeUuid = value;
  return self;
}
- (PvpClanAvengeProto_Builder*) clearClanAvengeUuid {
  result.hasClanAvengeUuid = NO;
  result.clanAvengeUuid = @"";
  return self;
}
- (NSMutableArray *)usersAvengingList {
  return result.mutableUsersAvengingList;
}
- (PvpUserClanAvengeProto*)usersAvengingAtIndex:(NSUInteger)index {
  return [result usersAvengingAtIndex:index];
}
- (PvpClanAvengeProto_Builder *)addUsersAvenging:(PvpUserClanAvengeProto*)value {
  if (result.mutableUsersAvengingList == nil) {
    result.mutableUsersAvengingList = [[NSMutableArray alloc]init];
  }
  [result.mutableUsersAvengingList addObject:value];
  return self;
}
- (PvpClanAvengeProto_Builder *)addAllUsersAvenging:(NSArray *)array {
  if (result.mutableUsersAvengingList == nil) {
    result.mutableUsersAvengingList = [NSMutableArray array];
  }
  [result.mutableUsersAvengingList addObjectsFromArray:array];
  return self;
}
- (PvpClanAvengeProto_Builder *)clearUsersAvenging {
  result.mutableUsersAvengingList = nil;
  return self;
}
- (BOOL) hasAttacker {
  return result.hasAttacker;
}
- (MinimumUserProto*) attacker {
  return result.attacker;
}
- (PvpClanAvengeProto_Builder*) setAttacker:(MinimumUserProto*) value {
  result.hasAttacker = YES;
  result.attacker = value;
  return self;
}
- (PvpClanAvengeProto_Builder*) setAttacker_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setAttacker:[builderForValue build]];
}
- (PvpClanAvengeProto_Builder*) mergeAttacker:(MinimumUserProto*) value {
  if (result.hasAttacker &&
      result.attacker != [MinimumUserProto defaultInstance]) {
    result.attacker =
      [[[MinimumUserProto builderWithPrototype:result.attacker] mergeFrom:value] buildPartial];
  } else {
    result.attacker = value;
  }
  result.hasAttacker = YES;
  return self;
}
- (PvpClanAvengeProto_Builder*) clearAttacker {
  result.hasAttacker = NO;
  result.attacker = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasDefender {
  return result.hasDefender;
}
- (MinimumUserProto*) defender {
  return result.defender;
}
- (PvpClanAvengeProto_Builder*) setDefender:(MinimumUserProto*) value {
  result.hasDefender = YES;
  result.defender = value;
  return self;
}
- (PvpClanAvengeProto_Builder*) setDefender_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setDefender:[builderForValue build]];
}
- (PvpClanAvengeProto_Builder*) mergeDefender:(MinimumUserProto*) value {
  if (result.hasDefender &&
      result.defender != [MinimumUserProto defaultInstance]) {
    result.defender =
      [[[MinimumUserProto builderWithPrototype:result.defender] mergeFrom:value] buildPartial];
  } else {
    result.defender = value;
  }
  result.hasDefender = YES;
  return self;
}
- (PvpClanAvengeProto_Builder*) clearDefender {
  result.hasDefender = NO;
  result.defender = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasBattleEndTime {
  return result.hasBattleEndTime;
}
- (int64_t) battleEndTime {
  return result.battleEndTime;
}
- (PvpClanAvengeProto_Builder*) setBattleEndTime:(int64_t) value {
  result.hasBattleEndTime = YES;
  result.battleEndTime = value;
  return self;
}
- (PvpClanAvengeProto_Builder*) clearBattleEndTime {
  result.hasBattleEndTime = NO;
  result.battleEndTime = 0L;
  return self;
}
- (BOOL) hasAvengeRequestTime {
  return result.hasAvengeRequestTime;
}
- (int64_t) avengeRequestTime {
  return result.avengeRequestTime;
}
- (PvpClanAvengeProto_Builder*) setAvengeRequestTime:(int64_t) value {
  result.hasAvengeRequestTime = YES;
  result.avengeRequestTime = value;
  return self;
}
- (PvpClanAvengeProto_Builder*) clearAvengeRequestTime {
  result.hasAvengeRequestTime = NO;
  result.avengeRequestTime = 0L;
  return self;
}
- (BOOL) hasDefenderClanUuid {
  return result.hasDefenderClanUuid;
}
- (NSString*) defenderClanUuid {
  return result.defenderClanUuid;
}
- (PvpClanAvengeProto_Builder*) setDefenderClanUuid:(NSString*) value {
  result.hasDefenderClanUuid = YES;
  result.defenderClanUuid = value;
  return self;
}
- (PvpClanAvengeProto_Builder*) clearDefenderClanUuid {
  result.hasDefenderClanUuid = NO;
  result.defenderClanUuid = @"";
  return self;
}
@end

@interface PvpUserClanAvengeProto ()
@property (strong) NSString* userUuid;
@property (strong) NSString* clanUuid;
@property (strong) NSString* clanAvengeUuid;
@property int64_t avengeTime;
@end

@implementation PvpUserClanAvengeProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasClanUuid {
  return !!hasClanUuid_;
}
- (void) setHasClanUuid:(BOOL) value_ {
  hasClanUuid_ = !!value_;
}
@synthesize clanUuid;
- (BOOL) hasClanAvengeUuid {
  return !!hasClanAvengeUuid_;
}
- (void) setHasClanAvengeUuid:(BOOL) value_ {
  hasClanAvengeUuid_ = !!value_;
}
@synthesize clanAvengeUuid;
- (BOOL) hasAvengeTime {
  return !!hasAvengeTime_;
}
- (void) setHasAvengeTime:(BOOL) value_ {
  hasAvengeTime_ = !!value_;
}
@synthesize avengeTime;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.clanUuid = @"";
    self.clanAvengeUuid = @"";
    self.avengeTime = 0L;
  }
  return self;
}
static PvpUserClanAvengeProto* defaultPvpUserClanAvengeProtoInstance = nil;
+ (void) initialize {
  if (self == [PvpUserClanAvengeProto class]) {
    defaultPvpUserClanAvengeProtoInstance = [[PvpUserClanAvengeProto alloc] init];
  }
}
+ (PvpUserClanAvengeProto*) defaultInstance {
  return defaultPvpUserClanAvengeProtoInstance;
}
- (PvpUserClanAvengeProto*) defaultInstance {
  return defaultPvpUserClanAvengeProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasClanUuid) {
    [output writeString:2 value:self.clanUuid];
  }
  if (self.hasClanAvengeUuid) {
    [output writeString:3 value:self.clanAvengeUuid];
  }
  if (self.hasAvengeTime) {
    [output writeInt64:4 value:self.avengeTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasClanUuid) {
    size_ += computeStringSize(2, self.clanUuid);
  }
  if (self.hasClanAvengeUuid) {
    size_ += computeStringSize(3, self.clanAvengeUuid);
  }
  if (self.hasAvengeTime) {
    size_ += computeInt64Size(4, self.avengeTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (PvpUserClanAvengeProto*) parseFromData:(NSData*) data {
  return (PvpUserClanAvengeProto*)[[[PvpUserClanAvengeProto builder] mergeFromData:data] build];
}
+ (PvpUserClanAvengeProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpUserClanAvengeProto*)[[[PvpUserClanAvengeProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (PvpUserClanAvengeProto*) parseFromInputStream:(NSInputStream*) input {
  return (PvpUserClanAvengeProto*)[[[PvpUserClanAvengeProto builder] mergeFromInputStream:input] build];
}
+ (PvpUserClanAvengeProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpUserClanAvengeProto*)[[[PvpUserClanAvengeProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpUserClanAvengeProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (PvpUserClanAvengeProto*)[[[PvpUserClanAvengeProto builder] mergeFromCodedInputStream:input] build];
}
+ (PvpUserClanAvengeProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (PvpUserClanAvengeProto*)[[[PvpUserClanAvengeProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (PvpUserClanAvengeProto_Builder*) builder {
  return [[PvpUserClanAvengeProto_Builder alloc] init];
}
+ (PvpUserClanAvengeProto_Builder*) builderWithPrototype:(PvpUserClanAvengeProto*) prototype {
  return [[PvpUserClanAvengeProto builder] mergeFrom:prototype];
}
- (PvpUserClanAvengeProto_Builder*) builder {
  return [PvpUserClanAvengeProto builder];
}
- (PvpUserClanAvengeProto_Builder*) toBuilder {
  return [PvpUserClanAvengeProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasClanUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanUuid", self.clanUuid];
  }
  if (self.hasClanAvengeUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanAvengeUuid", self.clanAvengeUuid];
  }
  if (self.hasAvengeTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"avengeTime", [NSNumber numberWithLongLong:self.avengeTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[PvpUserClanAvengeProto class]]) {
    return NO;
  }
  PvpUserClanAvengeProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasClanUuid == otherMessage.hasClanUuid &&
      (!self.hasClanUuid || [self.clanUuid isEqual:otherMessage.clanUuid]) &&
      self.hasClanAvengeUuid == otherMessage.hasClanAvengeUuid &&
      (!self.hasClanAvengeUuid || [self.clanAvengeUuid isEqual:otherMessage.clanAvengeUuid]) &&
      self.hasAvengeTime == otherMessage.hasAvengeTime &&
      (!self.hasAvengeTime || self.avengeTime == otherMessage.avengeTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasClanUuid) {
    hashCode = hashCode * 31 + [self.clanUuid hash];
  }
  if (self.hasClanAvengeUuid) {
    hashCode = hashCode * 31 + [self.clanAvengeUuid hash];
  }
  if (self.hasAvengeTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.avengeTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface PvpUserClanAvengeProto_Builder()
@property (strong) PvpUserClanAvengeProto* result;
@end

@implementation PvpUserClanAvengeProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[PvpUserClanAvengeProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (PvpUserClanAvengeProto_Builder*) clear {
  self.result = [[PvpUserClanAvengeProto alloc] init];
  return self;
}
- (PvpUserClanAvengeProto_Builder*) clone {
  return [PvpUserClanAvengeProto builderWithPrototype:result];
}
- (PvpUserClanAvengeProto*) defaultInstance {
  return [PvpUserClanAvengeProto defaultInstance];
}
- (PvpUserClanAvengeProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (PvpUserClanAvengeProto*) buildPartial {
  PvpUserClanAvengeProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (PvpUserClanAvengeProto_Builder*) mergeFrom:(PvpUserClanAvengeProto*) other {
  if (other == [PvpUserClanAvengeProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasClanUuid) {
    [self setClanUuid:other.clanUuid];
  }
  if (other.hasClanAvengeUuid) {
    [self setClanAvengeUuid:other.clanAvengeUuid];
  }
  if (other.hasAvengeTime) {
    [self setAvengeTime:other.avengeTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (PvpUserClanAvengeProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (PvpUserClanAvengeProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 18: {
        [self setClanUuid:[input readString]];
        break;
      }
      case 26: {
        [self setClanAvengeUuid:[input readString]];
        break;
      }
      case 32: {
        [self setAvengeTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (PvpUserClanAvengeProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (PvpUserClanAvengeProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasClanUuid {
  return result.hasClanUuid;
}
- (NSString*) clanUuid {
  return result.clanUuid;
}
- (PvpUserClanAvengeProto_Builder*) setClanUuid:(NSString*) value {
  result.hasClanUuid = YES;
  result.clanUuid = value;
  return self;
}
- (PvpUserClanAvengeProto_Builder*) clearClanUuid {
  result.hasClanUuid = NO;
  result.clanUuid = @"";
  return self;
}
- (BOOL) hasClanAvengeUuid {
  return result.hasClanAvengeUuid;
}
- (NSString*) clanAvengeUuid {
  return result.clanAvengeUuid;
}
- (PvpUserClanAvengeProto_Builder*) setClanAvengeUuid:(NSString*) value {
  result.hasClanAvengeUuid = YES;
  result.clanAvengeUuid = value;
  return self;
}
- (PvpUserClanAvengeProto_Builder*) clearClanAvengeUuid {
  result.hasClanAvengeUuid = NO;
  result.clanAvengeUuid = @"";
  return self;
}
- (BOOL) hasAvengeTime {
  return result.hasAvengeTime;
}
- (int64_t) avengeTime {
  return result.avengeTime;
}
- (PvpUserClanAvengeProto_Builder*) setAvengeTime:(int64_t) value {
  result.hasAvengeTime = YES;
  result.avengeTime = value;
  return self;
}
- (PvpUserClanAvengeProto_Builder*) clearAvengeTime {
  result.hasAvengeTime = NO;
  result.avengeTime = 0L;
  return self;
}
@end

@interface BattleReplayProto ()
@property (strong) NSString* replayUuid;
@property (strong) NSString* creatorUuid;
@property (strong) NSData* replay;
@property int32_t createTime;
@end

@implementation BattleReplayProto

- (BOOL) hasReplayUuid {
  return !!hasReplayUuid_;
}
- (void) setHasReplayUuid:(BOOL) value_ {
  hasReplayUuid_ = !!value_;
}
@synthesize replayUuid;
- (BOOL) hasCreatorUuid {
  return !!hasCreatorUuid_;
}
- (void) setHasCreatorUuid:(BOOL) value_ {
  hasCreatorUuid_ = !!value_;
}
@synthesize creatorUuid;
- (BOOL) hasReplay {
  return !!hasReplay_;
}
- (void) setHasReplay:(BOOL) value_ {
  hasReplay_ = !!value_;
}
@synthesize replay;
- (BOOL) hasCreateTime {
  return !!hasCreateTime_;
}
- (void) setHasCreateTime:(BOOL) value_ {
  hasCreateTime_ = !!value_;
}
@synthesize createTime;
- (id) init {
  if ((self = [super init])) {
    self.replayUuid = @"";
    self.creatorUuid = @"";
    self.replay = [NSData data];
    self.createTime = 0;
  }
  return self;
}
static BattleReplayProto* defaultBattleReplayProtoInstance = nil;
+ (void) initialize {
  if (self == [BattleReplayProto class]) {
    defaultBattleReplayProtoInstance = [[BattleReplayProto alloc] init];
  }
}
+ (BattleReplayProto*) defaultInstance {
  return defaultBattleReplayProtoInstance;
}
- (BattleReplayProto*) defaultInstance {
  return defaultBattleReplayProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReplayUuid) {
    [output writeString:1 value:self.replayUuid];
  }
  if (self.hasCreatorUuid) {
    [output writeString:2 value:self.creatorUuid];
  }
  if (self.hasReplay) {
    [output writeData:3 value:self.replay];
  }
  if (self.hasCreateTime) {
    [output writeInt32:4 value:self.createTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReplayUuid) {
    size_ += computeStringSize(1, self.replayUuid);
  }
  if (self.hasCreatorUuid) {
    size_ += computeStringSize(2, self.creatorUuid);
  }
  if (self.hasReplay) {
    size_ += computeDataSize(3, self.replay);
  }
  if (self.hasCreateTime) {
    size_ += computeInt32Size(4, self.createTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BattleReplayProto*) parseFromData:(NSData*) data {
  return (BattleReplayProto*)[[[BattleReplayProto builder] mergeFromData:data] build];
}
+ (BattleReplayProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BattleReplayProto*)[[[BattleReplayProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BattleReplayProto*) parseFromInputStream:(NSInputStream*) input {
  return (BattleReplayProto*)[[[BattleReplayProto builder] mergeFromInputStream:input] build];
}
+ (BattleReplayProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BattleReplayProto*)[[[BattleReplayProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BattleReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BattleReplayProto*)[[[BattleReplayProto builder] mergeFromCodedInputStream:input] build];
}
+ (BattleReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BattleReplayProto*)[[[BattleReplayProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BattleReplayProto_Builder*) builder {
  return [[BattleReplayProto_Builder alloc] init];
}
+ (BattleReplayProto_Builder*) builderWithPrototype:(BattleReplayProto*) prototype {
  return [[BattleReplayProto builder] mergeFrom:prototype];
}
- (BattleReplayProto_Builder*) builder {
  return [BattleReplayProto builder];
}
- (BattleReplayProto_Builder*) toBuilder {
  return [BattleReplayProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReplayUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replayUuid", self.replayUuid];
  }
  if (self.hasCreatorUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"creatorUuid", self.creatorUuid];
  }
  if (self.hasReplay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replay", self.replay];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithInteger:self.createTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BattleReplayProto class]]) {
    return NO;
  }
  BattleReplayProto *otherMessage = other;
  return
      self.hasReplayUuid == otherMessage.hasReplayUuid &&
      (!self.hasReplayUuid || [self.replayUuid isEqual:otherMessage.replayUuid]) &&
      self.hasCreatorUuid == otherMessage.hasCreatorUuid &&
      (!self.hasCreatorUuid || [self.creatorUuid isEqual:otherMessage.creatorUuid]) &&
      self.hasReplay == otherMessage.hasReplay &&
      (!self.hasReplay || [self.replay isEqual:otherMessage.replay]) &&
      self.hasCreateTime == otherMessage.hasCreateTime &&
      (!self.hasCreateTime || self.createTime == otherMessage.createTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReplayUuid) {
    hashCode = hashCode * 31 + [self.replayUuid hash];
  }
  if (self.hasCreatorUuid) {
    hashCode = hashCode * 31 + [self.creatorUuid hash];
  }
  if (self.hasReplay) {
    hashCode = hashCode * 31 + [self.replay hash];
  }
  if (self.hasCreateTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.createTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BattleReplayProto_Builder()
@property (strong) BattleReplayProto* result;
@end

@implementation BattleReplayProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[BattleReplayProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BattleReplayProto_Builder*) clear {
  self.result = [[BattleReplayProto alloc] init];
  return self;
}
- (BattleReplayProto_Builder*) clone {
  return [BattleReplayProto builderWithPrototype:result];
}
- (BattleReplayProto*) defaultInstance {
  return [BattleReplayProto defaultInstance];
}
- (BattleReplayProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BattleReplayProto*) buildPartial {
  BattleReplayProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (BattleReplayProto_Builder*) mergeFrom:(BattleReplayProto*) other {
  if (other == [BattleReplayProto defaultInstance]) {
    return self;
  }
  if (other.hasReplayUuid) {
    [self setReplayUuid:other.replayUuid];
  }
  if (other.hasCreatorUuid) {
    [self setCreatorUuid:other.creatorUuid];
  }
  if (other.hasReplay) {
    [self setReplay:other.replay];
  }
  if (other.hasCreateTime) {
    [self setCreateTime:other.createTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BattleReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BattleReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setReplayUuid:[input readString]];
        break;
      }
      case 18: {
        [self setCreatorUuid:[input readString]];
        break;
      }
      case 26: {
        [self setReplay:[input readData]];
        break;
      }
      case 32: {
        [self setCreateTime:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasReplayUuid {
  return result.hasReplayUuid;
}
- (NSString*) replayUuid {
  return result.replayUuid;
}
- (BattleReplayProto_Builder*) setReplayUuid:(NSString*) value {
  result.hasReplayUuid = YES;
  result.replayUuid = value;
  return self;
}
- (BattleReplayProto_Builder*) clearReplayUuid {
  result.hasReplayUuid = NO;
  result.replayUuid = @"";
  return self;
}
- (BOOL) hasCreatorUuid {
  return result.hasCreatorUuid;
}
- (NSString*) creatorUuid {
  return result.creatorUuid;
}
- (BattleReplayProto_Builder*) setCreatorUuid:(NSString*) value {
  result.hasCreatorUuid = YES;
  result.creatorUuid = value;
  return self;
}
- (BattleReplayProto_Builder*) clearCreatorUuid {
  result.hasCreatorUuid = NO;
  result.creatorUuid = @"";
  return self;
}
- (BOOL) hasReplay {
  return result.hasReplay;
}
- (NSData*) replay {
  return result.replay;
}
- (BattleReplayProto_Builder*) setReplay:(NSData*) value {
  result.hasReplay = YES;
  result.replay = value;
  return self;
}
- (BattleReplayProto_Builder*) clearReplay {
  result.hasReplay = NO;
  result.replay = [NSData data];
  return self;
}
- (BOOL) hasCreateTime {
  return result.hasCreateTime;
}
- (int32_t) createTime {
  return result.createTime;
}
- (BattleReplayProto_Builder*) setCreateTime:(int32_t) value {
  result.hasCreateTime = YES;
  result.createTime = value;
  return self;
}
- (BattleReplayProto_Builder*) clearCreateTime {
  result.hasCreateTime = NO;
  result.createTime = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
