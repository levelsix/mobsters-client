// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "ProtocolBuffers.h"

#import "MonsterStuff.pb.h"
#import "Board.pb.h"
#import "SharedEnumConfig.pb.h"
#import "Skill.pb.h"
// @@protoc_insertion_point(imports)

@class BoardLayoutProto;
@class BoardLayoutProto_Builder;
@class BoardPropertyProto;
@class BoardPropertyProto_Builder;
@class ClanMemberTeamDonationProto;
@class ClanMemberTeamDonationProto_Builder;
@class CombatReplayOrbProto;
@class CombatReplayOrbProto_Builder;
@class CombatReplayProto;
@class CombatReplayProto_Builder;
@class CombatReplayScheduleProto;
@class CombatReplayScheduleProto_Builder;
@class CombatReplaySkillStepProto;
@class CombatReplaySkillStepProto_Builder;
@class CombatReplayStepProto;
@class CombatReplayStepProto_Builder;
@class FullUserMonsterProto;
@class FullUserMonsterProto_Builder;
@class FullUserProto;
@class FullUserProto_Builder;
@class MinimumClanProto;
@class MinimumClanProto_Builder;
@class MinimumUserMonsterProto;
@class MinimumUserMonsterProto_Builder;
@class MinimumUserMonsterSellProto;
@class MinimumUserMonsterSellProto_Builder;
@class MinimumUserProto;
@class MinimumUserProtoWithFacebookId;
@class MinimumUserProtoWithFacebookId_Builder;
@class MinimumUserProtoWithLevel;
@class MinimumUserProtoWithLevel_Builder;
@class MinimumUserProtoWithMaxResources;
@class MinimumUserProtoWithMaxResources_Builder;
@class MinimumUserProto_Builder;
@class MonsterBattleDialogueProto;
@class MonsterBattleDialogueProto_Builder;
@class MonsterLevelInfoProto;
@class MonsterLevelInfoProto_Builder;
@class MonsterProto;
@class MonsterProto_Builder;
@class SkillPropertyProto;
@class SkillPropertyProto_Builder;
@class SkillProto;
@class SkillProto_Builder;
@class SkillSideEffectProto;
@class SkillSideEffectProto_Builder;
@class StaticUserLevelInfoProto;
@class StaticUserLevelInfoProto_Builder;
@class UserCurrentMonsterTeamProto;
@class UserCurrentMonsterTeamProto_Builder;
@class UserEnhancementItemProto;
@class UserEnhancementItemProto_Builder;
@class UserEnhancementProto;
@class UserEnhancementProto_Builder;
@class UserFacebookInviteForSlotProto;
@class UserFacebookInviteForSlotProto_Builder;
@class UserMonsterCurrentExpProto;
@class UserMonsterCurrentExpProto_Builder;
@class UserMonsterCurrentHealthProto;
@class UserMonsterCurrentHealthProto_Builder;
@class UserMonsterEvolutionProto;
@class UserMonsterEvolutionProto_Builder;
@class UserMonsterHealingProto;
@class UserMonsterHealingProto_Builder;
@class UserMonsterSnapshotProto;
@class UserMonsterSnapshotProto_Builder;
@class UserPvpLeagueProto;
@class UserPvpLeagueProto_Builder;
#ifndef __has_feature
  #define __has_feature(x) 0 // Compatibility with non-clang compilers.
#endif // __has_feature

#ifndef NS_RETURNS_NOT_RETAINED
  #if __has_feature(attribute_ns_returns_not_retained)
    #define NS_RETURNS_NOT_RETAINED __attribute__((ns_returns_not_retained))
  #else
    #define NS_RETURNS_NOT_RETAINED
  #endif
#endif

typedef NS_ENUM(SInt32, CombatReplayStepType) {
  CombatReplayStepTypeBattleInitialization = 1,
  CombatReplayStepTypeSpawnEnemy = 2,
  CombatReplayStepTypeNextTurn = 3,
  CombatReplayStepTypePlayerTurn = 4,
  CombatReplayStepTypePlayerMove = 5,
  CombatReplayStepTypePlayerAttack = 6,
  CombatReplayStepTypeEnemyTurn = 7,
  CombatReplayStepTypePlayerSwap = 8,
  CombatReplayStepTypePlayerDeath = 9,
  CombatReplayStepTypePlayerRevive = 10,
  CombatReplayStepTypeEnemyDeath = 11,
  CombatReplayStepTypePlayerVictory = 12,
};

BOOL CombatReplayStepTypeIsValidValue(CombatReplayStepType value);


@interface ReplayRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

@interface CombatReplayProto : PBGeneratedMessage {
@private
  BOOL hasReplayUuid_:1;
  BOOL hasBoard_:1;
  NSString* replayUuid;
  BoardLayoutProto* board;
  NSMutableArray * mutablePlayerTeamList;
  NSMutableArray * mutableEnemyTeamList;
  NSMutableArray * mutableStepsList;
  NSMutableArray * mutableOrbsList;
}
- (BOOL) hasReplayUuid;
- (BOOL) hasBoard;
@property (readonly, strong) NSString* replayUuid;
@property (readonly, strong) NSArray * playerTeamList;
@property (readonly, strong) NSArray * enemyTeamList;
@property (readonly, strong) NSArray * stepsList;
@property (readonly, strong) BoardLayoutProto* board;
@property (readonly, strong) NSArray * orbsList;
- (MinimumUserMonsterProto*)playerTeamAtIndex:(NSUInteger)index;
- (MinimumUserMonsterProto*)enemyTeamAtIndex:(NSUInteger)index;
- (CombatReplayStepProto*)stepsAtIndex:(NSUInteger)index;
- (CombatReplayOrbProto*)orbsAtIndex:(NSUInteger)index;

+ (CombatReplayProto*) defaultInstance;
- (CombatReplayProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (CombatReplayProto_Builder*) builder;
+ (CombatReplayProto_Builder*) builder;
+ (CombatReplayProto_Builder*) builderWithPrototype:(CombatReplayProto*) prototype;
- (CombatReplayProto_Builder*) toBuilder;

+ (CombatReplayProto*) parseFromData:(NSData*) data;
+ (CombatReplayProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayProto*) parseFromInputStream:(NSInputStream*) input;
+ (CombatReplayProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (CombatReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface CombatReplayProto_Builder : PBGeneratedMessageBuilder {
@private
  CombatReplayProto* result;
}

- (CombatReplayProto*) defaultInstance;

- (CombatReplayProto_Builder*) clear;
- (CombatReplayProto_Builder*) clone;

- (CombatReplayProto*) build;
- (CombatReplayProto*) buildPartial;

- (CombatReplayProto_Builder*) mergeFrom:(CombatReplayProto*) other;
- (CombatReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (CombatReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasReplayUuid;
- (NSString*) replayUuid;
- (CombatReplayProto_Builder*) setReplayUuid:(NSString*) value;
- (CombatReplayProto_Builder*) clearReplayUuid;

- (NSMutableArray *)playerTeamList;
- (MinimumUserMonsterProto*)playerTeamAtIndex:(NSUInteger)index;
- (CombatReplayProto_Builder *)addPlayerTeam:(MinimumUserMonsterProto*)value;
- (CombatReplayProto_Builder *)addAllPlayerTeam:(NSArray *)array;
- (CombatReplayProto_Builder *)clearPlayerTeam;

- (NSMutableArray *)enemyTeamList;
- (MinimumUserMonsterProto*)enemyTeamAtIndex:(NSUInteger)index;
- (CombatReplayProto_Builder *)addEnemyTeam:(MinimumUserMonsterProto*)value;
- (CombatReplayProto_Builder *)addAllEnemyTeam:(NSArray *)array;
- (CombatReplayProto_Builder *)clearEnemyTeam;

- (NSMutableArray *)stepsList;
- (CombatReplayStepProto*)stepsAtIndex:(NSUInteger)index;
- (CombatReplayProto_Builder *)addSteps:(CombatReplayStepProto*)value;
- (CombatReplayProto_Builder *)addAllSteps:(NSArray *)array;
- (CombatReplayProto_Builder *)clearSteps;

- (BOOL) hasBoard;
- (BoardLayoutProto*) board;
- (CombatReplayProto_Builder*) setBoard:(BoardLayoutProto*) value;
- (CombatReplayProto_Builder*) setBoard_Builder:(BoardLayoutProto_Builder*) builderForValue;
- (CombatReplayProto_Builder*) mergeBoard:(BoardLayoutProto*) value;
- (CombatReplayProto_Builder*) clearBoard;

- (NSMutableArray *)orbsList;
- (CombatReplayOrbProto*)orbsAtIndex:(NSUInteger)index;
- (CombatReplayProto_Builder *)addOrbs:(CombatReplayOrbProto*)value;
- (CombatReplayProto_Builder *)addAllOrbs:(NSArray *)array;
- (CombatReplayProto_Builder *)clearOrbs;
@end

@interface CombatReplayStepProto : PBGeneratedMessage {
@private
  BOOL hasStepIndex_:1;
  BOOL hasItemId_:1;
  BOOL hasDamage_:1;
  BOOL hasReplayUuid_:1;
  BOOL hasSchedule_:1;
  BOOL hasMovePos1_:1;
  BOOL hasMovePos2_:1;
  BOOL hasType_:1;
  int32_t stepIndex;
  int32_t itemId;
  int32_t damage;
  NSString* replayUuid;
  CombatReplayScheduleProto* schedule;
  uint32_t movePos1;
  uint32_t movePos2;
  CombatReplayStepType type;
  NSMutableArray * mutableSkillsList;
}
- (BOOL) hasReplayUuid;
- (BOOL) hasStepIndex;
- (BOOL) hasType;
- (BOOL) hasItemId;
- (BOOL) hasMovePos1;
- (BOOL) hasMovePos2;
- (BOOL) hasDamage;
- (BOOL) hasSchedule;
@property (readonly, strong) NSString* replayUuid;
@property (readonly) int32_t stepIndex;
@property (readonly) CombatReplayStepType type;
@property (readonly) int32_t itemId;
@property (readonly) uint32_t movePos1;
@property (readonly) uint32_t movePos2;
@property (readonly) int32_t damage;
@property (readonly, strong) CombatReplayScheduleProto* schedule;
@property (readonly, strong) NSArray * skillsList;
- (CombatReplaySkillStepProto*)skillsAtIndex:(NSUInteger)index;

+ (CombatReplayStepProto*) defaultInstance;
- (CombatReplayStepProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (CombatReplayStepProto_Builder*) builder;
+ (CombatReplayStepProto_Builder*) builder;
+ (CombatReplayStepProto_Builder*) builderWithPrototype:(CombatReplayStepProto*) prototype;
- (CombatReplayStepProto_Builder*) toBuilder;

+ (CombatReplayStepProto*) parseFromData:(NSData*) data;
+ (CombatReplayStepProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayStepProto*) parseFromInputStream:(NSInputStream*) input;
+ (CombatReplayStepProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (CombatReplayStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface CombatReplayStepProto_Builder : PBGeneratedMessageBuilder {
@private
  CombatReplayStepProto* result;
}

- (CombatReplayStepProto*) defaultInstance;

- (CombatReplayStepProto_Builder*) clear;
- (CombatReplayStepProto_Builder*) clone;

- (CombatReplayStepProto*) build;
- (CombatReplayStepProto*) buildPartial;

- (CombatReplayStepProto_Builder*) mergeFrom:(CombatReplayStepProto*) other;
- (CombatReplayStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (CombatReplayStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasReplayUuid;
- (NSString*) replayUuid;
- (CombatReplayStepProto_Builder*) setReplayUuid:(NSString*) value;
- (CombatReplayStepProto_Builder*) clearReplayUuid;

- (BOOL) hasStepIndex;
- (int32_t) stepIndex;
- (CombatReplayStepProto_Builder*) setStepIndex:(int32_t) value;
- (CombatReplayStepProto_Builder*) clearStepIndex;

- (BOOL) hasType;
- (CombatReplayStepType) type;
- (CombatReplayStepProto_Builder*) setType:(CombatReplayStepType) value;
- (CombatReplayStepProto_Builder*) clearTypeList;

- (BOOL) hasItemId;
- (int32_t) itemId;
- (CombatReplayStepProto_Builder*) setItemId:(int32_t) value;
- (CombatReplayStepProto_Builder*) clearItemId;

- (BOOL) hasMovePos1;
- (uint32_t) movePos1;
- (CombatReplayStepProto_Builder*) setMovePos1:(uint32_t) value;
- (CombatReplayStepProto_Builder*) clearMovePos1;

- (BOOL) hasMovePos2;
- (uint32_t) movePos2;
- (CombatReplayStepProto_Builder*) setMovePos2:(uint32_t) value;
- (CombatReplayStepProto_Builder*) clearMovePos2;

- (BOOL) hasDamage;
- (int32_t) damage;
- (CombatReplayStepProto_Builder*) setDamage:(int32_t) value;
- (CombatReplayStepProto_Builder*) clearDamage;

- (BOOL) hasSchedule;
- (CombatReplayScheduleProto*) schedule;
- (CombatReplayStepProto_Builder*) setSchedule:(CombatReplayScheduleProto*) value;
- (CombatReplayStepProto_Builder*) setSchedule_Builder:(CombatReplayScheduleProto_Builder*) builderForValue;
- (CombatReplayStepProto_Builder*) mergeSchedule:(CombatReplayScheduleProto*) value;
- (CombatReplayStepProto_Builder*) clearSchedule;

- (NSMutableArray *)skillsList;
- (CombatReplaySkillStepProto*)skillsAtIndex:(NSUInteger)index;
- (CombatReplayStepProto_Builder *)addSkills:(CombatReplaySkillStepProto*)value;
- (CombatReplayStepProto_Builder *)addAllSkills:(NSArray *)array;
- (CombatReplayStepProto_Builder *)clearSkills;
@end

@interface CombatReplaySkillStepProto : PBGeneratedMessage {
@private
  BOOL hasBelongsToPlayer_:1;
  BOOL hasStepIndex_:1;
  BOOL hasSkillId_:1;
  BOOL hasOwnerMonsterId_:1;
  BOOL hasReplayUuid_:1;
  BOOL hasTriggerPoint_:1;
  BOOL belongsToPlayer_:1;
  int32_t stepIndex;
  int32_t skillId;
  int32_t ownerMonsterId;
  NSString* replayUuid;
  SkillTriggerPoint triggerPoint;
}
- (BOOL) hasReplayUuid;
- (BOOL) hasStepIndex;
- (BOOL) hasSkillId;
- (BOOL) hasBelongsToPlayer;
- (BOOL) hasOwnerMonsterId;
- (BOOL) hasTriggerPoint;
@property (readonly, strong) NSString* replayUuid;
@property (readonly) int32_t stepIndex;
@property (readonly) int32_t skillId;
- (BOOL) belongsToPlayer;
@property (readonly) int32_t ownerMonsterId;
@property (readonly) SkillTriggerPoint triggerPoint;

+ (CombatReplaySkillStepProto*) defaultInstance;
- (CombatReplaySkillStepProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (CombatReplaySkillStepProto_Builder*) builder;
+ (CombatReplaySkillStepProto_Builder*) builder;
+ (CombatReplaySkillStepProto_Builder*) builderWithPrototype:(CombatReplaySkillStepProto*) prototype;
- (CombatReplaySkillStepProto_Builder*) toBuilder;

+ (CombatReplaySkillStepProto*) parseFromData:(NSData*) data;
+ (CombatReplaySkillStepProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplaySkillStepProto*) parseFromInputStream:(NSInputStream*) input;
+ (CombatReplaySkillStepProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplaySkillStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (CombatReplaySkillStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface CombatReplaySkillStepProto_Builder : PBGeneratedMessageBuilder {
@private
  CombatReplaySkillStepProto* result;
}

- (CombatReplaySkillStepProto*) defaultInstance;

- (CombatReplaySkillStepProto_Builder*) clear;
- (CombatReplaySkillStepProto_Builder*) clone;

- (CombatReplaySkillStepProto*) build;
- (CombatReplaySkillStepProto*) buildPartial;

- (CombatReplaySkillStepProto_Builder*) mergeFrom:(CombatReplaySkillStepProto*) other;
- (CombatReplaySkillStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (CombatReplaySkillStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasReplayUuid;
- (NSString*) replayUuid;
- (CombatReplaySkillStepProto_Builder*) setReplayUuid:(NSString*) value;
- (CombatReplaySkillStepProto_Builder*) clearReplayUuid;

- (BOOL) hasStepIndex;
- (int32_t) stepIndex;
- (CombatReplaySkillStepProto_Builder*) setStepIndex:(int32_t) value;
- (CombatReplaySkillStepProto_Builder*) clearStepIndex;

- (BOOL) hasSkillId;
- (int32_t) skillId;
- (CombatReplaySkillStepProto_Builder*) setSkillId:(int32_t) value;
- (CombatReplaySkillStepProto_Builder*) clearSkillId;

- (BOOL) hasBelongsToPlayer;
- (BOOL) belongsToPlayer;
- (CombatReplaySkillStepProto_Builder*) setBelongsToPlayer:(BOOL) value;
- (CombatReplaySkillStepProto_Builder*) clearBelongsToPlayer;

- (BOOL) hasOwnerMonsterId;
- (int32_t) ownerMonsterId;
- (CombatReplaySkillStepProto_Builder*) setOwnerMonsterId:(int32_t) value;
- (CombatReplaySkillStepProto_Builder*) clearOwnerMonsterId;

- (BOOL) hasTriggerPoint;
- (SkillTriggerPoint) triggerPoint;
- (CombatReplaySkillStepProto_Builder*) setTriggerPoint:(SkillTriggerPoint) value;
- (CombatReplaySkillStepProto_Builder*) clearTriggerPointList;
@end

@interface CombatReplayScheduleProto : PBGeneratedMessage {
@private
  BOOL hasTotalTurns_:1;
  int32_t totalTurns;
  PBAppendableArray * mutablePlayerTurnsList;
}
- (BOOL) hasTotalTurns;
@property (readonly) int32_t totalTurns;
@property (readonly, strong) PBArray * playerTurnsList;
- (int32_t)playerTurnsAtIndex:(NSUInteger)index;

+ (CombatReplayScheduleProto*) defaultInstance;
- (CombatReplayScheduleProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (CombatReplayScheduleProto_Builder*) builder;
+ (CombatReplayScheduleProto_Builder*) builder;
+ (CombatReplayScheduleProto_Builder*) builderWithPrototype:(CombatReplayScheduleProto*) prototype;
- (CombatReplayScheduleProto_Builder*) toBuilder;

+ (CombatReplayScheduleProto*) parseFromData:(NSData*) data;
+ (CombatReplayScheduleProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayScheduleProto*) parseFromInputStream:(NSInputStream*) input;
+ (CombatReplayScheduleProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayScheduleProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (CombatReplayScheduleProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface CombatReplayScheduleProto_Builder : PBGeneratedMessageBuilder {
@private
  CombatReplayScheduleProto* result;
}

- (CombatReplayScheduleProto*) defaultInstance;

- (CombatReplayScheduleProto_Builder*) clear;
- (CombatReplayScheduleProto_Builder*) clone;

- (CombatReplayScheduleProto*) build;
- (CombatReplayScheduleProto*) buildPartial;

- (CombatReplayScheduleProto_Builder*) mergeFrom:(CombatReplayScheduleProto*) other;
- (CombatReplayScheduleProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (CombatReplayScheduleProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasTotalTurns;
- (int32_t) totalTurns;
- (CombatReplayScheduleProto_Builder*) setTotalTurns:(int32_t) value;
- (CombatReplayScheduleProto_Builder*) clearTotalTurns;

- (PBAppendableArray *)playerTurnsList;
- (int32_t)playerTurnsAtIndex:(NSUInteger)index;
- (CombatReplayScheduleProto_Builder *)addPlayerTurns:(int32_t)value;
- (CombatReplayScheduleProto_Builder *)addAllPlayerTurns:(NSArray *)array;
- (CombatReplayScheduleProto_Builder *)setPlayerTurnsValues:(const int32_t *)values count:(NSUInteger)count;
- (CombatReplayScheduleProto_Builder *)clearPlayerTurns;
@end

@interface CombatReplayOrbProto : PBGeneratedMessage {
@private
  BOOL hasInitialOrb_:1;
  BOOL hasSpawnedRow_:1;
  BOOL hasSpawnedCol_:1;
  BOOL hasType_:1;
  BOOL hasSpawnedElement_:1;
  BOOL initialOrb_:1;
  int32_t spawnedRow;
  int32_t spawnedCol;
  int32_t type;
  Element spawnedElement;
}
- (BOOL) hasSpawnedRow;
- (BOOL) hasSpawnedCol;
- (BOOL) hasSpawnedElement;
- (BOOL) hasInitialOrb;
- (BOOL) hasType;
@property (readonly) int32_t spawnedRow;
@property (readonly) int32_t spawnedCol;
@property (readonly) Element spawnedElement;
- (BOOL) initialOrb;
@property (readonly) int32_t type;

+ (CombatReplayOrbProto*) defaultInstance;
- (CombatReplayOrbProto*) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (CombatReplayOrbProto_Builder*) builder;
+ (CombatReplayOrbProto_Builder*) builder;
+ (CombatReplayOrbProto_Builder*) builderWithPrototype:(CombatReplayOrbProto*) prototype;
- (CombatReplayOrbProto_Builder*) toBuilder;

+ (CombatReplayOrbProto*) parseFromData:(NSData*) data;
+ (CombatReplayOrbProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayOrbProto*) parseFromInputStream:(NSInputStream*) input;
+ (CombatReplayOrbProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (CombatReplayOrbProto*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (CombatReplayOrbProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface CombatReplayOrbProto_Builder : PBGeneratedMessageBuilder {
@private
  CombatReplayOrbProto* result;
}

- (CombatReplayOrbProto*) defaultInstance;

- (CombatReplayOrbProto_Builder*) clear;
- (CombatReplayOrbProto_Builder*) clone;

- (CombatReplayOrbProto*) build;
- (CombatReplayOrbProto*) buildPartial;

- (CombatReplayOrbProto_Builder*) mergeFrom:(CombatReplayOrbProto*) other;
- (CombatReplayOrbProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (CombatReplayOrbProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasSpawnedRow;
- (int32_t) spawnedRow;
- (CombatReplayOrbProto_Builder*) setSpawnedRow:(int32_t) value;
- (CombatReplayOrbProto_Builder*) clearSpawnedRow;

- (BOOL) hasSpawnedCol;
- (int32_t) spawnedCol;
- (CombatReplayOrbProto_Builder*) setSpawnedCol:(int32_t) value;
- (CombatReplayOrbProto_Builder*) clearSpawnedCol;

- (BOOL) hasSpawnedElement;
- (Element) spawnedElement;
- (CombatReplayOrbProto_Builder*) setSpawnedElement:(Element) value;
- (CombatReplayOrbProto_Builder*) clearSpawnedElementList;

- (BOOL) hasInitialOrb;
- (BOOL) initialOrb;
- (CombatReplayOrbProto_Builder*) setInitialOrb:(BOOL) value;
- (CombatReplayOrbProto_Builder*) clearInitialOrb;

- (BOOL) hasType;
- (int32_t) type;
- (CombatReplayOrbProto_Builder*) setType:(int32_t) value;
- (CombatReplayOrbProto_Builder*) clearType;
@end


// @@protoc_insertion_point(global_scope)
