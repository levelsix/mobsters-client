// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "StaticData.pb.h"
// @@protoc_insertion_point(imports)

@implementation StaticDataRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [StaticDataRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [AchievementStuffRoot registerAllExtensions:registry];
    [BattleRoot registerAllExtensions:registry];
    [BattleItemRoot registerAllExtensions:registry];
    [BoardRoot registerAllExtensions:registry];
    [BoosterPackStuffRoot registerAllExtensions:registry];
    [CityRoot registerAllExtensions:registry];
    [ClanRoot registerAllExtensions:registry];
    [ItemRoot registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [PrerequisiteRoot registerAllExtensions:registry];
    [QuestRoot registerAllExtensions:registry];
    [ResearchRoot registerAllExtensions:registry];
    [SkillRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    [TaskRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface StaticDataProto ()
@property (strong) MinimumUserProto* sender;
@property (strong) NSMutableArray * mutableExpansionCostsList;
@property (strong) NSMutableArray * mutableAllCitiesList;
@property (strong) NSMutableArray * mutableAllTasksList;
@property (strong) NSMutableArray * mutableAllTaskMapElementsList;
@property (strong) NSMutableArray * mutableAllMonstersList;
@property (strong) NSMutableArray * mutableSlipList;
@property (strong) NSMutableArray * mutableInProgressQuestsList;
@property (strong) NSMutableArray * mutableUnredeemedQuestsList;
@property (strong) NSMutableArray * mutableAvailableQuestsList;
@property (strong) NSMutableArray * mutableBoosterPacksList;
@property (strong) BoosterPackProto* starterPack;
@property (strong) NSMutableArray * mutableAllGeneratorsList;
@property (strong) NSMutableArray * mutableAllStoragesList;
@property (strong) NSMutableArray * mutableAllHospitalsList;
@property (strong) NSMutableArray * mutableAllResidencesList;
@property (strong) NSMutableArray * mutableAllTownHallsList;
@property (strong) NSMutableArray * mutableAllLabsList;
@property (strong) NSMutableArray * mutableAllMiniJobCentersList;
@property (strong) NSMutableArray * mutableAllEvoChambersList;
@property (strong) NSMutableArray * mutableAllTeamCentersList;
@property (strong) NSMutableArray * mutableAllClanHousesList;
@property (strong) NSMutableArray * mutableAllMoneyTreesList;
@property (strong) NSMutableArray * mutableAllPvpBoardHousesList;
@property (strong) NSMutableArray * mutableAllResearchHousesList;
@property (strong) NSMutableArray * mutableAllBattleItemFactorysList;
@property (strong) NSMutableArray * mutablePersistentEventsList;
@property (strong) NSMutableArray * mutableMbdsList;
@property (strong) NSMutableArray * mutableRaidsList;
@property (strong) NSMutableArray * mutablePersistentClanEventsList;
@property (strong) NSMutableArray * mutableItemsList;
@property (strong) NSMutableArray * mutableObstaclesList;
@property (strong) NSMutableArray * mutableClanIconsList;
@property (strong) NSMutableArray * mutableLeaguesList;
@property (strong) NSMutableArray * mutableAchievementsList;
@property (strong) NSMutableArray * mutableSkillsList;
@property (strong) NSMutableArray * mutableSideEffectsList;
@property (strong) NSMutableArray * mutablePrereqsList;
@property (strong) NSMutableArray * mutableBoardsList;
@property (strong) NSMutableArray * mutableResearchList;
@property (strong) NSMutableArray * mutableBattleItemList;
@property (strong) NSMutableArray * mutablePvpBoardObstacleProtosList;
@end

@implementation StaticDataProto

- (BOOL) hasSender {
  return !!hasSender_;
}
- (void) setHasSender:(BOOL) value_ {
  hasSender_ = !!value_;
}
@synthesize sender;
@synthesize mutableExpansionCostsList;
@dynamic expansionCostsList;
@synthesize mutableAllCitiesList;
@dynamic allCitiesList;
@synthesize mutableAllTasksList;
@dynamic allTasksList;
@synthesize mutableAllTaskMapElementsList;
@dynamic allTaskMapElementsList;
@synthesize mutableAllMonstersList;
@dynamic allMonstersList;
@synthesize mutableSlipList;
@dynamic slipList;
@synthesize mutableInProgressQuestsList;
@dynamic inProgressQuestsList;
@synthesize mutableUnredeemedQuestsList;
@dynamic unredeemedQuestsList;
@synthesize mutableAvailableQuestsList;
@dynamic availableQuestsList;
@synthesize mutableBoosterPacksList;
@dynamic boosterPacksList;
- (BOOL) hasStarterPack {
  return !!hasStarterPack_;
}
- (void) setHasStarterPack:(BOOL) value_ {
  hasStarterPack_ = !!value_;
}
@synthesize starterPack;
@synthesize mutableAllGeneratorsList;
@dynamic allGeneratorsList;
@synthesize mutableAllStoragesList;
@dynamic allStoragesList;
@synthesize mutableAllHospitalsList;
@dynamic allHospitalsList;
@synthesize mutableAllResidencesList;
@dynamic allResidencesList;
@synthesize mutableAllTownHallsList;
@dynamic allTownHallsList;
@synthesize mutableAllLabsList;
@dynamic allLabsList;
@synthesize mutableAllMiniJobCentersList;
@dynamic allMiniJobCentersList;
@synthesize mutableAllEvoChambersList;
@dynamic allEvoChambersList;
@synthesize mutableAllTeamCentersList;
@dynamic allTeamCentersList;
@synthesize mutableAllClanHousesList;
@dynamic allClanHousesList;
@synthesize mutableAllMoneyTreesList;
@dynamic allMoneyTreesList;
@synthesize mutableAllPvpBoardHousesList;
@dynamic allPvpBoardHousesList;
@synthesize mutableAllResearchHousesList;
@dynamic allResearchHousesList;
@synthesize mutableAllBattleItemFactorysList;
@dynamic allBattleItemFactorysList;
@synthesize mutablePersistentEventsList;
@dynamic persistentEventsList;
@synthesize mutableMbdsList;
@dynamic mbdsList;
@synthesize mutableRaidsList;
@dynamic raidsList;
@synthesize mutablePersistentClanEventsList;
@dynamic persistentClanEventsList;
@synthesize mutableItemsList;
@dynamic itemsList;
@synthesize mutableObstaclesList;
@dynamic obstaclesList;
@synthesize mutableClanIconsList;
@dynamic clanIconsList;
@synthesize mutableLeaguesList;
@dynamic leaguesList;
@synthesize mutableAchievementsList;
@dynamic achievementsList;
@synthesize mutableSkillsList;
@dynamic skillsList;
@synthesize mutableSideEffectsList;
@dynamic sideEffectsList;
@synthesize mutablePrereqsList;
@dynamic prereqsList;
@synthesize mutableBoardsList;
@dynamic boardsList;
@synthesize mutableResearchList;
@dynamic researchList;
@synthesize mutableBattleItemList;
@dynamic battleItemList;
@synthesize mutablePvpBoardObstacleProtosList;
@dynamic pvpBoardObstacleProtosList;
- (id) init {
  if ((self = [super init])) {
    self.sender = [MinimumUserProto defaultInstance];
    self.starterPack = [BoosterPackProto defaultInstance];
  }
  return self;
}
static StaticDataProto* defaultStaticDataProtoInstance = nil;
+ (void) initialize {
  if (self == [StaticDataProto class]) {
    defaultStaticDataProtoInstance = [[StaticDataProto alloc] init];
  }
}
+ (StaticDataProto*) defaultInstance {
  return defaultStaticDataProtoInstance;
}
- (StaticDataProto*) defaultInstance {
  return defaultStaticDataProtoInstance;
}
- (NSArray *)expansionCostsList {
  return mutableExpansionCostsList;
}
- (CityExpansionCostProto*)expansionCostsAtIndex:(NSUInteger)index {
  return [mutableExpansionCostsList objectAtIndex:index];
}
- (NSArray *)allCitiesList {
  return mutableAllCitiesList;
}
- (FullCityProto*)allCitiesAtIndex:(NSUInteger)index {
  return [mutableAllCitiesList objectAtIndex:index];
}
- (NSArray *)allTasksList {
  return mutableAllTasksList;
}
- (FullTaskProto*)allTasksAtIndex:(NSUInteger)index {
  return [mutableAllTasksList objectAtIndex:index];
}
- (NSArray *)allTaskMapElementsList {
  return mutableAllTaskMapElementsList;
}
- (TaskMapElementProto*)allTaskMapElementsAtIndex:(NSUInteger)index {
  return [mutableAllTaskMapElementsList objectAtIndex:index];
}
- (NSArray *)allMonstersList {
  return mutableAllMonstersList;
}
- (MonsterProto*)allMonstersAtIndex:(NSUInteger)index {
  return [mutableAllMonstersList objectAtIndex:index];
}
- (NSArray *)slipList {
  return mutableSlipList;
}
- (StaticUserLevelInfoProto*)slipAtIndex:(NSUInteger)index {
  return [mutableSlipList objectAtIndex:index];
}
- (NSArray *)inProgressQuestsList {
  return mutableInProgressQuestsList;
}
- (FullQuestProto*)inProgressQuestsAtIndex:(NSUInteger)index {
  return [mutableInProgressQuestsList objectAtIndex:index];
}
- (NSArray *)unredeemedQuestsList {
  return mutableUnredeemedQuestsList;
}
- (FullQuestProto*)unredeemedQuestsAtIndex:(NSUInteger)index {
  return [mutableUnredeemedQuestsList objectAtIndex:index];
}
- (NSArray *)availableQuestsList {
  return mutableAvailableQuestsList;
}
- (FullQuestProto*)availableQuestsAtIndex:(NSUInteger)index {
  return [mutableAvailableQuestsList objectAtIndex:index];
}
- (NSArray *)boosterPacksList {
  return mutableBoosterPacksList;
}
- (BoosterPackProto*)boosterPacksAtIndex:(NSUInteger)index {
  return [mutableBoosterPacksList objectAtIndex:index];
}
- (NSArray *)allGeneratorsList {
  return mutableAllGeneratorsList;
}
- (ResourceGeneratorProto*)allGeneratorsAtIndex:(NSUInteger)index {
  return [mutableAllGeneratorsList objectAtIndex:index];
}
- (NSArray *)allStoragesList {
  return mutableAllStoragesList;
}
- (ResourceStorageProto*)allStoragesAtIndex:(NSUInteger)index {
  return [mutableAllStoragesList objectAtIndex:index];
}
- (NSArray *)allHospitalsList {
  return mutableAllHospitalsList;
}
- (HospitalProto*)allHospitalsAtIndex:(NSUInteger)index {
  return [mutableAllHospitalsList objectAtIndex:index];
}
- (NSArray *)allResidencesList {
  return mutableAllResidencesList;
}
- (ResidenceProto*)allResidencesAtIndex:(NSUInteger)index {
  return [mutableAllResidencesList objectAtIndex:index];
}
- (NSArray *)allTownHallsList {
  return mutableAllTownHallsList;
}
- (TownHallProto*)allTownHallsAtIndex:(NSUInteger)index {
  return [mutableAllTownHallsList objectAtIndex:index];
}
- (NSArray *)allLabsList {
  return mutableAllLabsList;
}
- (LabProto*)allLabsAtIndex:(NSUInteger)index {
  return [mutableAllLabsList objectAtIndex:index];
}
- (NSArray *)allMiniJobCentersList {
  return mutableAllMiniJobCentersList;
}
- (MiniJobCenterProto*)allMiniJobCentersAtIndex:(NSUInteger)index {
  return [mutableAllMiniJobCentersList objectAtIndex:index];
}
- (NSArray *)allEvoChambersList {
  return mutableAllEvoChambersList;
}
- (EvoChamberProto*)allEvoChambersAtIndex:(NSUInteger)index {
  return [mutableAllEvoChambersList objectAtIndex:index];
}
- (NSArray *)allTeamCentersList {
  return mutableAllTeamCentersList;
}
- (TeamCenterProto*)allTeamCentersAtIndex:(NSUInteger)index {
  return [mutableAllTeamCentersList objectAtIndex:index];
}
- (NSArray *)allClanHousesList {
  return mutableAllClanHousesList;
}
- (ClanHouseProto*)allClanHousesAtIndex:(NSUInteger)index {
  return [mutableAllClanHousesList objectAtIndex:index];
}
- (NSArray *)allMoneyTreesList {
  return mutableAllMoneyTreesList;
}
- (MoneyTreeProto*)allMoneyTreesAtIndex:(NSUInteger)index {
  return [mutableAllMoneyTreesList objectAtIndex:index];
}
- (NSArray *)allPvpBoardHousesList {
  return mutableAllPvpBoardHousesList;
}
- (PvpBoardHouseProto*)allPvpBoardHousesAtIndex:(NSUInteger)index {
  return [mutableAllPvpBoardHousesList objectAtIndex:index];
}
- (NSArray *)allResearchHousesList {
  return mutableAllResearchHousesList;
}
- (ResearchHouseProto*)allResearchHousesAtIndex:(NSUInteger)index {
  return [mutableAllResearchHousesList objectAtIndex:index];
}
- (NSArray *)allBattleItemFactorysList {
  return mutableAllBattleItemFactorysList;
}
- (BattleItemFactoryProto*)allBattleItemFactorysAtIndex:(NSUInteger)index {
  return [mutableAllBattleItemFactorysList objectAtIndex:index];
}
- (NSArray *)persistentEventsList {
  return mutablePersistentEventsList;
}
- (PersistentEventProto*)persistentEventsAtIndex:(NSUInteger)index {
  return [mutablePersistentEventsList objectAtIndex:index];
}
- (NSArray *)mbdsList {
  return mutableMbdsList;
}
- (MonsterBattleDialogueProto*)mbdsAtIndex:(NSUInteger)index {
  return [mutableMbdsList objectAtIndex:index];
}
- (NSArray *)raidsList {
  return mutableRaidsList;
}
- (ClanRaidProto*)raidsAtIndex:(NSUInteger)index {
  return [mutableRaidsList objectAtIndex:index];
}
- (NSArray *)persistentClanEventsList {
  return mutablePersistentClanEventsList;
}
- (PersistentClanEventProto*)persistentClanEventsAtIndex:(NSUInteger)index {
  return [mutablePersistentClanEventsList objectAtIndex:index];
}
- (NSArray *)itemsList {
  return mutableItemsList;
}
- (ItemProto*)itemsAtIndex:(NSUInteger)index {
  return [mutableItemsList objectAtIndex:index];
}
- (NSArray *)obstaclesList {
  return mutableObstaclesList;
}
- (ObstacleProto*)obstaclesAtIndex:(NSUInteger)index {
  return [mutableObstaclesList objectAtIndex:index];
}
- (NSArray *)clanIconsList {
  return mutableClanIconsList;
}
- (ClanIconProto*)clanIconsAtIndex:(NSUInteger)index {
  return [mutableClanIconsList objectAtIndex:index];
}
- (NSArray *)leaguesList {
  return mutableLeaguesList;
}
- (PvpLeagueProto*)leaguesAtIndex:(NSUInteger)index {
  return [mutableLeaguesList objectAtIndex:index];
}
- (NSArray *)achievementsList {
  return mutableAchievementsList;
}
- (AchievementProto*)achievementsAtIndex:(NSUInteger)index {
  return [mutableAchievementsList objectAtIndex:index];
}
- (NSArray *)skillsList {
  return mutableSkillsList;
}
- (SkillProto*)skillsAtIndex:(NSUInteger)index {
  return [mutableSkillsList objectAtIndex:index];
}
- (NSArray *)sideEffectsList {
  return mutableSideEffectsList;
}
- (SkillSideEffectProto*)sideEffectsAtIndex:(NSUInteger)index {
  return [mutableSideEffectsList objectAtIndex:index];
}
- (NSArray *)prereqsList {
  return mutablePrereqsList;
}
- (PrereqProto*)prereqsAtIndex:(NSUInteger)index {
  return [mutablePrereqsList objectAtIndex:index];
}
- (NSArray *)boardsList {
  return mutableBoardsList;
}
- (BoardLayoutProto*)boardsAtIndex:(NSUInteger)index {
  return [mutableBoardsList objectAtIndex:index];
}
- (NSArray *)researchList {
  return mutableResearchList;
}
- (ResearchProto*)researchAtIndex:(NSUInteger)index {
  return [mutableResearchList objectAtIndex:index];
}
- (NSArray *)battleItemList {
  return mutableBattleItemList;
}
- (BattleItemProto*)battleItemAtIndex:(NSUInteger)index {
  return [mutableBattleItemList objectAtIndex:index];
}
- (NSArray *)pvpBoardObstacleProtosList {
  return mutablePvpBoardObstacleProtosList;
}
- (PvpBoardObstacleProto*)pvpBoardObstacleProtosAtIndex:(NSUInteger)index {
  return [mutablePvpBoardObstacleProtosList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSender) {
    [output writeMessage:1 value:self.sender];
  }
  [self.expansionCostsList enumerateObjectsUsingBlock:^(CityExpansionCostProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.allCitiesList enumerateObjectsUsingBlock:^(FullCityProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.allTasksList enumerateObjectsUsingBlock:^(FullTaskProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.allMonstersList enumerateObjectsUsingBlock:^(MonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.slipList enumerateObjectsUsingBlock:^(StaticUserLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.inProgressQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unredeemedQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.availableQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.boosterPacksList enumerateObjectsUsingBlock:^(BoosterPackProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.allGeneratorsList enumerateObjectsUsingBlock:^(ResourceGeneratorProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.allStoragesList enumerateObjectsUsingBlock:^(ResourceStorageProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:13 value:element];
  }];
  [self.allHospitalsList enumerateObjectsUsingBlock:^(HospitalProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:14 value:element];
  }];
  [self.allResidencesList enumerateObjectsUsingBlock:^(ResidenceProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:15 value:element];
  }];
  [self.allTownHallsList enumerateObjectsUsingBlock:^(TownHallProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:16 value:element];
  }];
  [self.allLabsList enumerateObjectsUsingBlock:^(LabProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:17 value:element];
  }];
  [self.persistentEventsList enumerateObjectsUsingBlock:^(PersistentEventProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:18 value:element];
  }];
  [self.mbdsList enumerateObjectsUsingBlock:^(MonsterBattleDialogueProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:19 value:element];
  }];
  [self.raidsList enumerateObjectsUsingBlock:^(ClanRaidProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:20 value:element];
  }];
  [self.persistentClanEventsList enumerateObjectsUsingBlock:^(PersistentClanEventProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:21 value:element];
  }];
  [self.itemsList enumerateObjectsUsingBlock:^(ItemProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:22 value:element];
  }];
  [self.obstaclesList enumerateObjectsUsingBlock:^(ObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:23 value:element];
  }];
  [self.clanIconsList enumerateObjectsUsingBlock:^(ClanIconProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:24 value:element];
  }];
  [self.leaguesList enumerateObjectsUsingBlock:^(PvpLeagueProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:25 value:element];
  }];
  [self.achievementsList enumerateObjectsUsingBlock:^(AchievementProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:26 value:element];
  }];
  [self.allMiniJobCentersList enumerateObjectsUsingBlock:^(MiniJobCenterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:27 value:element];
  }];
  [self.allTaskMapElementsList enumerateObjectsUsingBlock:^(TaskMapElementProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:28 value:element];
  }];
  [self.allEvoChambersList enumerateObjectsUsingBlock:^(EvoChamberProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:29 value:element];
  }];
  [self.allTeamCentersList enumerateObjectsUsingBlock:^(TeamCenterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:30 value:element];
  }];
  [self.skillsList enumerateObjectsUsingBlock:^(SkillProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:31 value:element];
  }];
  [self.allClanHousesList enumerateObjectsUsingBlock:^(ClanHouseProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:32 value:element];
  }];
  [self.prereqsList enumerateObjectsUsingBlock:^(PrereqProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:33 value:element];
  }];
  [self.boardsList enumerateObjectsUsingBlock:^(BoardLayoutProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:34 value:element];
  }];
  [self.researchList enumerateObjectsUsingBlock:^(ResearchProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:35 value:element];
  }];
  if (self.hasStarterPack) {
    [output writeMessage:36 value:self.starterPack];
  }
  [self.sideEffectsList enumerateObjectsUsingBlock:^(SkillSideEffectProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:37 value:element];
  }];
  [self.allMoneyTreesList enumerateObjectsUsingBlock:^(MoneyTreeProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:38 value:element];
  }];
  [self.allPvpBoardHousesList enumerateObjectsUsingBlock:^(PvpBoardHouseProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:39 value:element];
  }];
  [self.pvpBoardObstacleProtosList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:40 value:element];
  }];
  [self.allResearchHousesList enumerateObjectsUsingBlock:^(ResearchHouseProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:41 value:element];
  }];
  [self.allBattleItemFactorysList enumerateObjectsUsingBlock:^(BattleItemFactoryProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:42 value:element];
  }];
  [self.battleItemList enumerateObjectsUsingBlock:^(BattleItemProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:43 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSender) {
    size_ += computeMessageSize(1, self.sender);
  }
  [self.expansionCostsList enumerateObjectsUsingBlock:^(CityExpansionCostProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  [self.allCitiesList enumerateObjectsUsingBlock:^(FullCityProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.allTasksList enumerateObjectsUsingBlock:^(FullTaskProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.allMonstersList enumerateObjectsUsingBlock:^(MonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.slipList enumerateObjectsUsingBlock:^(StaticUserLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  [self.inProgressQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  [self.unredeemedQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  [self.availableQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  [self.boosterPacksList enumerateObjectsUsingBlock:^(BoosterPackProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  [self.allGeneratorsList enumerateObjectsUsingBlock:^(ResourceGeneratorProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  [self.allStoragesList enumerateObjectsUsingBlock:^(ResourceStorageProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(13, element);
  }];
  [self.allHospitalsList enumerateObjectsUsingBlock:^(HospitalProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(14, element);
  }];
  [self.allResidencesList enumerateObjectsUsingBlock:^(ResidenceProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(15, element);
  }];
  [self.allTownHallsList enumerateObjectsUsingBlock:^(TownHallProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(16, element);
  }];
  [self.allLabsList enumerateObjectsUsingBlock:^(LabProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(17, element);
  }];
  [self.persistentEventsList enumerateObjectsUsingBlock:^(PersistentEventProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(18, element);
  }];
  [self.mbdsList enumerateObjectsUsingBlock:^(MonsterBattleDialogueProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(19, element);
  }];
  [self.raidsList enumerateObjectsUsingBlock:^(ClanRaidProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(20, element);
  }];
  [self.persistentClanEventsList enumerateObjectsUsingBlock:^(PersistentClanEventProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(21, element);
  }];
  [self.itemsList enumerateObjectsUsingBlock:^(ItemProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(22, element);
  }];
  [self.obstaclesList enumerateObjectsUsingBlock:^(ObstacleProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(23, element);
  }];
  [self.clanIconsList enumerateObjectsUsingBlock:^(ClanIconProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(24, element);
  }];
  [self.leaguesList enumerateObjectsUsingBlock:^(PvpLeagueProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(25, element);
  }];
  [self.achievementsList enumerateObjectsUsingBlock:^(AchievementProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(26, element);
  }];
  [self.allMiniJobCentersList enumerateObjectsUsingBlock:^(MiniJobCenterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(27, element);
  }];
  [self.allTaskMapElementsList enumerateObjectsUsingBlock:^(TaskMapElementProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(28, element);
  }];
  [self.allEvoChambersList enumerateObjectsUsingBlock:^(EvoChamberProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(29, element);
  }];
  [self.allTeamCentersList enumerateObjectsUsingBlock:^(TeamCenterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(30, element);
  }];
  [self.skillsList enumerateObjectsUsingBlock:^(SkillProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(31, element);
  }];
  [self.allClanHousesList enumerateObjectsUsingBlock:^(ClanHouseProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(32, element);
  }];
  [self.prereqsList enumerateObjectsUsingBlock:^(PrereqProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(33, element);
  }];
  [self.boardsList enumerateObjectsUsingBlock:^(BoardLayoutProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(34, element);
  }];
  [self.researchList enumerateObjectsUsingBlock:^(ResearchProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(35, element);
  }];
  if (self.hasStarterPack) {
    size_ += computeMessageSize(36, self.starterPack);
  }
  [self.sideEffectsList enumerateObjectsUsingBlock:^(SkillSideEffectProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(37, element);
  }];
  [self.allMoneyTreesList enumerateObjectsUsingBlock:^(MoneyTreeProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(38, element);
  }];
  [self.allPvpBoardHousesList enumerateObjectsUsingBlock:^(PvpBoardHouseProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(39, element);
  }];
  [self.pvpBoardObstacleProtosList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(40, element);
  }];
  [self.allResearchHousesList enumerateObjectsUsingBlock:^(ResearchHouseProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(41, element);
  }];
  [self.allBattleItemFactorysList enumerateObjectsUsingBlock:^(BattleItemFactoryProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(42, element);
  }];
  [self.battleItemList enumerateObjectsUsingBlock:^(BattleItemProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(43, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (StaticDataProto*) parseFromData:(NSData*) data {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromData:data] build];
}
+ (StaticDataProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (StaticDataProto*) parseFromInputStream:(NSInputStream*) input {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromInputStream:input] build];
}
+ (StaticDataProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StaticDataProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromCodedInputStream:input] build];
}
+ (StaticDataProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (StaticDataProto*)[[[StaticDataProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (StaticDataProto_Builder*) builder {
  return [[StaticDataProto_Builder alloc] init];
}
+ (StaticDataProto_Builder*) builderWithPrototype:(StaticDataProto*) prototype {
  return [[StaticDataProto builder] mergeFrom:prototype];
}
- (StaticDataProto_Builder*) builder {
  return [StaticDataProto builder];
}
- (StaticDataProto_Builder*) toBuilder {
  return [StaticDataProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSender) {
    [output appendFormat:@"%@%@ {\n", indent, @"sender"];
    [self.sender writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.expansionCostsList enumerateObjectsUsingBlock:^(CityExpansionCostProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"expansionCosts"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allCitiesList enumerateObjectsUsingBlock:^(FullCityProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allCities"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allTasksList enumerateObjectsUsingBlock:^(FullTaskProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allTasks"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allMonstersList enumerateObjectsUsingBlock:^(MonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.slipList enumerateObjectsUsingBlock:^(StaticUserLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"slip"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.inProgressQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"inProgressQuests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unredeemedQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"unredeemedQuests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.availableQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"availableQuests"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.boosterPacksList enumerateObjectsUsingBlock:^(BoosterPackProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"boosterPacks"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allGeneratorsList enumerateObjectsUsingBlock:^(ResourceGeneratorProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allGenerators"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allStoragesList enumerateObjectsUsingBlock:^(ResourceStorageProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allStorages"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allHospitalsList enumerateObjectsUsingBlock:^(HospitalProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allHospitals"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allResidencesList enumerateObjectsUsingBlock:^(ResidenceProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allResidences"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allTownHallsList enumerateObjectsUsingBlock:^(TownHallProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allTownHalls"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allLabsList enumerateObjectsUsingBlock:^(LabProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allLabs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.persistentEventsList enumerateObjectsUsingBlock:^(PersistentEventProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"persistentEvents"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.mbdsList enumerateObjectsUsingBlock:^(MonsterBattleDialogueProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"mbds"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.raidsList enumerateObjectsUsingBlock:^(ClanRaidProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"raids"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.persistentClanEventsList enumerateObjectsUsingBlock:^(PersistentClanEventProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"persistentClanEvents"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.itemsList enumerateObjectsUsingBlock:^(ItemProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"items"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.obstaclesList enumerateObjectsUsingBlock:^(ObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"obstacles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.clanIconsList enumerateObjectsUsingBlock:^(ClanIconProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"clanIcons"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.leaguesList enumerateObjectsUsingBlock:^(PvpLeagueProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"leagues"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.achievementsList enumerateObjectsUsingBlock:^(AchievementProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"achievements"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allMiniJobCentersList enumerateObjectsUsingBlock:^(MiniJobCenterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allMiniJobCenters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allTaskMapElementsList enumerateObjectsUsingBlock:^(TaskMapElementProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allTaskMapElements"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allEvoChambersList enumerateObjectsUsingBlock:^(EvoChamberProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allEvoChambers"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allTeamCentersList enumerateObjectsUsingBlock:^(TeamCenterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allTeamCenters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.skillsList enumerateObjectsUsingBlock:^(SkillProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"skills"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allClanHousesList enumerateObjectsUsingBlock:^(ClanHouseProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allClanHouses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.prereqsList enumerateObjectsUsingBlock:^(PrereqProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"prereqs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.boardsList enumerateObjectsUsingBlock:^(BoardLayoutProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"boards"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.researchList enumerateObjectsUsingBlock:^(ResearchProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"research"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasStarterPack) {
    [output appendFormat:@"%@%@ {\n", indent, @"starterPack"];
    [self.starterPack writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.sideEffectsList enumerateObjectsUsingBlock:^(SkillSideEffectProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"sideEffects"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allMoneyTreesList enumerateObjectsUsingBlock:^(MoneyTreeProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allMoneyTrees"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allPvpBoardHousesList enumerateObjectsUsingBlock:^(PvpBoardHouseProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allPvpBoardHouses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.pvpBoardObstacleProtosList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"pvpBoardObstacleProtos"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allResearchHousesList enumerateObjectsUsingBlock:^(ResearchHouseProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allResearchHouses"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.allBattleItemFactorysList enumerateObjectsUsingBlock:^(BattleItemFactoryProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"allBattleItemFactorys"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.battleItemList enumerateObjectsUsingBlock:^(BattleItemProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"battleItem"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[StaticDataProto class]]) {
    return NO;
  }
  StaticDataProto *otherMessage = other;
  return
      self.hasSender == otherMessage.hasSender &&
      (!self.hasSender || [self.sender isEqual:otherMessage.sender]) &&
      [self.expansionCostsList isEqualToArray:otherMessage.expansionCostsList] &&
      [self.allCitiesList isEqualToArray:otherMessage.allCitiesList] &&
      [self.allTasksList isEqualToArray:otherMessage.allTasksList] &&
      [self.allMonstersList isEqualToArray:otherMessage.allMonstersList] &&
      [self.slipList isEqualToArray:otherMessage.slipList] &&
      [self.inProgressQuestsList isEqualToArray:otherMessage.inProgressQuestsList] &&
      [self.unredeemedQuestsList isEqualToArray:otherMessage.unredeemedQuestsList] &&
      [self.availableQuestsList isEqualToArray:otherMessage.availableQuestsList] &&
      [self.boosterPacksList isEqualToArray:otherMessage.boosterPacksList] &&
      [self.allGeneratorsList isEqualToArray:otherMessage.allGeneratorsList] &&
      [self.allStoragesList isEqualToArray:otherMessage.allStoragesList] &&
      [self.allHospitalsList isEqualToArray:otherMessage.allHospitalsList] &&
      [self.allResidencesList isEqualToArray:otherMessage.allResidencesList] &&
      [self.allTownHallsList isEqualToArray:otherMessage.allTownHallsList] &&
      [self.allLabsList isEqualToArray:otherMessage.allLabsList] &&
      [self.persistentEventsList isEqualToArray:otherMessage.persistentEventsList] &&
      [self.mbdsList isEqualToArray:otherMessage.mbdsList] &&
      [self.raidsList isEqualToArray:otherMessage.raidsList] &&
      [self.persistentClanEventsList isEqualToArray:otherMessage.persistentClanEventsList] &&
      [self.itemsList isEqualToArray:otherMessage.itemsList] &&
      [self.obstaclesList isEqualToArray:otherMessage.obstaclesList] &&
      [self.clanIconsList isEqualToArray:otherMessage.clanIconsList] &&
      [self.leaguesList isEqualToArray:otherMessage.leaguesList] &&
      [self.achievementsList isEqualToArray:otherMessage.achievementsList] &&
      [self.allMiniJobCentersList isEqualToArray:otherMessage.allMiniJobCentersList] &&
      [self.allTaskMapElementsList isEqualToArray:otherMessage.allTaskMapElementsList] &&
      [self.allEvoChambersList isEqualToArray:otherMessage.allEvoChambersList] &&
      [self.allTeamCentersList isEqualToArray:otherMessage.allTeamCentersList] &&
      [self.skillsList isEqualToArray:otherMessage.skillsList] &&
      [self.allClanHousesList isEqualToArray:otherMessage.allClanHousesList] &&
      [self.prereqsList isEqualToArray:otherMessage.prereqsList] &&
      [self.boardsList isEqualToArray:otherMessage.boardsList] &&
      [self.researchList isEqualToArray:otherMessage.researchList] &&
      self.hasStarterPack == otherMessage.hasStarterPack &&
      (!self.hasStarterPack || [self.starterPack isEqual:otherMessage.starterPack]) &&
      [self.sideEffectsList isEqualToArray:otherMessage.sideEffectsList] &&
      [self.allMoneyTreesList isEqualToArray:otherMessage.allMoneyTreesList] &&
      [self.allPvpBoardHousesList isEqualToArray:otherMessage.allPvpBoardHousesList] &&
      [self.pvpBoardObstacleProtosList isEqualToArray:otherMessage.pvpBoardObstacleProtosList] &&
      [self.allResearchHousesList isEqualToArray:otherMessage.allResearchHousesList] &&
      [self.allBattleItemFactorysList isEqualToArray:otherMessage.allBattleItemFactorysList] &&
      [self.battleItemList isEqualToArray:otherMessage.battleItemList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSender) {
    hashCode = hashCode * 31 + [self.sender hash];
  }
  [self.expansionCostsList enumerateObjectsUsingBlock:^(CityExpansionCostProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allCitiesList enumerateObjectsUsingBlock:^(FullCityProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allTasksList enumerateObjectsUsingBlock:^(FullTaskProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allMonstersList enumerateObjectsUsingBlock:^(MonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.slipList enumerateObjectsUsingBlock:^(StaticUserLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.inProgressQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.unredeemedQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.availableQuestsList enumerateObjectsUsingBlock:^(FullQuestProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.boosterPacksList enumerateObjectsUsingBlock:^(BoosterPackProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allGeneratorsList enumerateObjectsUsingBlock:^(ResourceGeneratorProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allStoragesList enumerateObjectsUsingBlock:^(ResourceStorageProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allHospitalsList enumerateObjectsUsingBlock:^(HospitalProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allResidencesList enumerateObjectsUsingBlock:^(ResidenceProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allTownHallsList enumerateObjectsUsingBlock:^(TownHallProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allLabsList enumerateObjectsUsingBlock:^(LabProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.persistentEventsList enumerateObjectsUsingBlock:^(PersistentEventProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.mbdsList enumerateObjectsUsingBlock:^(MonsterBattleDialogueProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.raidsList enumerateObjectsUsingBlock:^(ClanRaidProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.persistentClanEventsList enumerateObjectsUsingBlock:^(PersistentClanEventProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.itemsList enumerateObjectsUsingBlock:^(ItemProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.obstaclesList enumerateObjectsUsingBlock:^(ObstacleProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.clanIconsList enumerateObjectsUsingBlock:^(ClanIconProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.leaguesList enumerateObjectsUsingBlock:^(PvpLeagueProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.achievementsList enumerateObjectsUsingBlock:^(AchievementProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allMiniJobCentersList enumerateObjectsUsingBlock:^(MiniJobCenterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allTaskMapElementsList enumerateObjectsUsingBlock:^(TaskMapElementProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allEvoChambersList enumerateObjectsUsingBlock:^(EvoChamberProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allTeamCentersList enumerateObjectsUsingBlock:^(TeamCenterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.skillsList enumerateObjectsUsingBlock:^(SkillProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allClanHousesList enumerateObjectsUsingBlock:^(ClanHouseProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.prereqsList enumerateObjectsUsingBlock:^(PrereqProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.boardsList enumerateObjectsUsingBlock:^(BoardLayoutProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.researchList enumerateObjectsUsingBlock:^(ResearchProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStarterPack) {
    hashCode = hashCode * 31 + [self.starterPack hash];
  }
  [self.sideEffectsList enumerateObjectsUsingBlock:^(SkillSideEffectProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allMoneyTreesList enumerateObjectsUsingBlock:^(MoneyTreeProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allPvpBoardHousesList enumerateObjectsUsingBlock:^(PvpBoardHouseProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.pvpBoardObstacleProtosList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allResearchHousesList enumerateObjectsUsingBlock:^(ResearchHouseProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.allBattleItemFactorysList enumerateObjectsUsingBlock:^(BattleItemFactoryProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.battleItemList enumerateObjectsUsingBlock:^(BattleItemProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface StaticDataProto_Builder()
@property (strong) StaticDataProto* result;
@end

@implementation StaticDataProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[StaticDataProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (StaticDataProto_Builder*) clear {
  self.result = [[StaticDataProto alloc] init];
  return self;
}
- (StaticDataProto_Builder*) clone {
  return [StaticDataProto builderWithPrototype:result];
}
- (StaticDataProto*) defaultInstance {
  return [StaticDataProto defaultInstance];
}
- (StaticDataProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (StaticDataProto*) buildPartial {
  StaticDataProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (StaticDataProto_Builder*) mergeFrom:(StaticDataProto*) other {
  if (other == [StaticDataProto defaultInstance]) {
    return self;
  }
  if (other.hasSender) {
    [self mergeSender:other.sender];
  }
  if (other.mutableExpansionCostsList.count > 0) {
    if (result.mutableExpansionCostsList == nil) {
      result.mutableExpansionCostsList = [[NSMutableArray alloc] initWithArray:other.mutableExpansionCostsList];
    } else {
      [result.mutableExpansionCostsList addObjectsFromArray:other.mutableExpansionCostsList];
    }
  }
  if (other.mutableAllCitiesList.count > 0) {
    if (result.mutableAllCitiesList == nil) {
      result.mutableAllCitiesList = [[NSMutableArray alloc] initWithArray:other.mutableAllCitiesList];
    } else {
      [result.mutableAllCitiesList addObjectsFromArray:other.mutableAllCitiesList];
    }
  }
  if (other.mutableAllTasksList.count > 0) {
    if (result.mutableAllTasksList == nil) {
      result.mutableAllTasksList = [[NSMutableArray alloc] initWithArray:other.mutableAllTasksList];
    } else {
      [result.mutableAllTasksList addObjectsFromArray:other.mutableAllTasksList];
    }
  }
  if (other.mutableAllTaskMapElementsList.count > 0) {
    if (result.mutableAllTaskMapElementsList == nil) {
      result.mutableAllTaskMapElementsList = [[NSMutableArray alloc] initWithArray:other.mutableAllTaskMapElementsList];
    } else {
      [result.mutableAllTaskMapElementsList addObjectsFromArray:other.mutableAllTaskMapElementsList];
    }
  }
  if (other.mutableAllMonstersList.count > 0) {
    if (result.mutableAllMonstersList == nil) {
      result.mutableAllMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableAllMonstersList];
    } else {
      [result.mutableAllMonstersList addObjectsFromArray:other.mutableAllMonstersList];
    }
  }
  if (other.mutableSlipList.count > 0) {
    if (result.mutableSlipList == nil) {
      result.mutableSlipList = [[NSMutableArray alloc] initWithArray:other.mutableSlipList];
    } else {
      [result.mutableSlipList addObjectsFromArray:other.mutableSlipList];
    }
  }
  if (other.mutableInProgressQuestsList.count > 0) {
    if (result.mutableInProgressQuestsList == nil) {
      result.mutableInProgressQuestsList = [[NSMutableArray alloc] initWithArray:other.mutableInProgressQuestsList];
    } else {
      [result.mutableInProgressQuestsList addObjectsFromArray:other.mutableInProgressQuestsList];
    }
  }
  if (other.mutableUnredeemedQuestsList.count > 0) {
    if (result.mutableUnredeemedQuestsList == nil) {
      result.mutableUnredeemedQuestsList = [[NSMutableArray alloc] initWithArray:other.mutableUnredeemedQuestsList];
    } else {
      [result.mutableUnredeemedQuestsList addObjectsFromArray:other.mutableUnredeemedQuestsList];
    }
  }
  if (other.mutableAvailableQuestsList.count > 0) {
    if (result.mutableAvailableQuestsList == nil) {
      result.mutableAvailableQuestsList = [[NSMutableArray alloc] initWithArray:other.mutableAvailableQuestsList];
    } else {
      [result.mutableAvailableQuestsList addObjectsFromArray:other.mutableAvailableQuestsList];
    }
  }
  if (other.mutableBoosterPacksList.count > 0) {
    if (result.mutableBoosterPacksList == nil) {
      result.mutableBoosterPacksList = [[NSMutableArray alloc] initWithArray:other.mutableBoosterPacksList];
    } else {
      [result.mutableBoosterPacksList addObjectsFromArray:other.mutableBoosterPacksList];
    }
  }
  if (other.hasStarterPack) {
    [self mergeStarterPack:other.starterPack];
  }
  if (other.mutableAllGeneratorsList.count > 0) {
    if (result.mutableAllGeneratorsList == nil) {
      result.mutableAllGeneratorsList = [[NSMutableArray alloc] initWithArray:other.mutableAllGeneratorsList];
    } else {
      [result.mutableAllGeneratorsList addObjectsFromArray:other.mutableAllGeneratorsList];
    }
  }
  if (other.mutableAllStoragesList.count > 0) {
    if (result.mutableAllStoragesList == nil) {
      result.mutableAllStoragesList = [[NSMutableArray alloc] initWithArray:other.mutableAllStoragesList];
    } else {
      [result.mutableAllStoragesList addObjectsFromArray:other.mutableAllStoragesList];
    }
  }
  if (other.mutableAllHospitalsList.count > 0) {
    if (result.mutableAllHospitalsList == nil) {
      result.mutableAllHospitalsList = [[NSMutableArray alloc] initWithArray:other.mutableAllHospitalsList];
    } else {
      [result.mutableAllHospitalsList addObjectsFromArray:other.mutableAllHospitalsList];
    }
  }
  if (other.mutableAllResidencesList.count > 0) {
    if (result.mutableAllResidencesList == nil) {
      result.mutableAllResidencesList = [[NSMutableArray alloc] initWithArray:other.mutableAllResidencesList];
    } else {
      [result.mutableAllResidencesList addObjectsFromArray:other.mutableAllResidencesList];
    }
  }
  if (other.mutableAllTownHallsList.count > 0) {
    if (result.mutableAllTownHallsList == nil) {
      result.mutableAllTownHallsList = [[NSMutableArray alloc] initWithArray:other.mutableAllTownHallsList];
    } else {
      [result.mutableAllTownHallsList addObjectsFromArray:other.mutableAllTownHallsList];
    }
  }
  if (other.mutableAllLabsList.count > 0) {
    if (result.mutableAllLabsList == nil) {
      result.mutableAllLabsList = [[NSMutableArray alloc] initWithArray:other.mutableAllLabsList];
    } else {
      [result.mutableAllLabsList addObjectsFromArray:other.mutableAllLabsList];
    }
  }
  if (other.mutableAllMiniJobCentersList.count > 0) {
    if (result.mutableAllMiniJobCentersList == nil) {
      result.mutableAllMiniJobCentersList = [[NSMutableArray alloc] initWithArray:other.mutableAllMiniJobCentersList];
    } else {
      [result.mutableAllMiniJobCentersList addObjectsFromArray:other.mutableAllMiniJobCentersList];
    }
  }
  if (other.mutableAllEvoChambersList.count > 0) {
    if (result.mutableAllEvoChambersList == nil) {
      result.mutableAllEvoChambersList = [[NSMutableArray alloc] initWithArray:other.mutableAllEvoChambersList];
    } else {
      [result.mutableAllEvoChambersList addObjectsFromArray:other.mutableAllEvoChambersList];
    }
  }
  if (other.mutableAllTeamCentersList.count > 0) {
    if (result.mutableAllTeamCentersList == nil) {
      result.mutableAllTeamCentersList = [[NSMutableArray alloc] initWithArray:other.mutableAllTeamCentersList];
    } else {
      [result.mutableAllTeamCentersList addObjectsFromArray:other.mutableAllTeamCentersList];
    }
  }
  if (other.mutableAllClanHousesList.count > 0) {
    if (result.mutableAllClanHousesList == nil) {
      result.mutableAllClanHousesList = [[NSMutableArray alloc] initWithArray:other.mutableAllClanHousesList];
    } else {
      [result.mutableAllClanHousesList addObjectsFromArray:other.mutableAllClanHousesList];
    }
  }
  if (other.mutableAllMoneyTreesList.count > 0) {
    if (result.mutableAllMoneyTreesList == nil) {
      result.mutableAllMoneyTreesList = [[NSMutableArray alloc] initWithArray:other.mutableAllMoneyTreesList];
    } else {
      [result.mutableAllMoneyTreesList addObjectsFromArray:other.mutableAllMoneyTreesList];
    }
  }
  if (other.mutableAllPvpBoardHousesList.count > 0) {
    if (result.mutableAllPvpBoardHousesList == nil) {
      result.mutableAllPvpBoardHousesList = [[NSMutableArray alloc] initWithArray:other.mutableAllPvpBoardHousesList];
    } else {
      [result.mutableAllPvpBoardHousesList addObjectsFromArray:other.mutableAllPvpBoardHousesList];
    }
  }
  if (other.mutableAllResearchHousesList.count > 0) {
    if (result.mutableAllResearchHousesList == nil) {
      result.mutableAllResearchHousesList = [[NSMutableArray alloc] initWithArray:other.mutableAllResearchHousesList];
    } else {
      [result.mutableAllResearchHousesList addObjectsFromArray:other.mutableAllResearchHousesList];
    }
  }
  if (other.mutableAllBattleItemFactorysList.count > 0) {
    if (result.mutableAllBattleItemFactorysList == nil) {
      result.mutableAllBattleItemFactorysList = [[NSMutableArray alloc] initWithArray:other.mutableAllBattleItemFactorysList];
    } else {
      [result.mutableAllBattleItemFactorysList addObjectsFromArray:other.mutableAllBattleItemFactorysList];
    }
  }
  if (other.mutablePersistentEventsList.count > 0) {
    if (result.mutablePersistentEventsList == nil) {
      result.mutablePersistentEventsList = [[NSMutableArray alloc] initWithArray:other.mutablePersistentEventsList];
    } else {
      [result.mutablePersistentEventsList addObjectsFromArray:other.mutablePersistentEventsList];
    }
  }
  if (other.mutableMbdsList.count > 0) {
    if (result.mutableMbdsList == nil) {
      result.mutableMbdsList = [[NSMutableArray alloc] initWithArray:other.mutableMbdsList];
    } else {
      [result.mutableMbdsList addObjectsFromArray:other.mutableMbdsList];
    }
  }
  if (other.mutableRaidsList.count > 0) {
    if (result.mutableRaidsList == nil) {
      result.mutableRaidsList = [[NSMutableArray alloc] initWithArray:other.mutableRaidsList];
    } else {
      [result.mutableRaidsList addObjectsFromArray:other.mutableRaidsList];
    }
  }
  if (other.mutablePersistentClanEventsList.count > 0) {
    if (result.mutablePersistentClanEventsList == nil) {
      result.mutablePersistentClanEventsList = [[NSMutableArray alloc] initWithArray:other.mutablePersistentClanEventsList];
    } else {
      [result.mutablePersistentClanEventsList addObjectsFromArray:other.mutablePersistentClanEventsList];
    }
  }
  if (other.mutableItemsList.count > 0) {
    if (result.mutableItemsList == nil) {
      result.mutableItemsList = [[NSMutableArray alloc] initWithArray:other.mutableItemsList];
    } else {
      [result.mutableItemsList addObjectsFromArray:other.mutableItemsList];
    }
  }
  if (other.mutableObstaclesList.count > 0) {
    if (result.mutableObstaclesList == nil) {
      result.mutableObstaclesList = [[NSMutableArray alloc] initWithArray:other.mutableObstaclesList];
    } else {
      [result.mutableObstaclesList addObjectsFromArray:other.mutableObstaclesList];
    }
  }
  if (other.mutableClanIconsList.count > 0) {
    if (result.mutableClanIconsList == nil) {
      result.mutableClanIconsList = [[NSMutableArray alloc] initWithArray:other.mutableClanIconsList];
    } else {
      [result.mutableClanIconsList addObjectsFromArray:other.mutableClanIconsList];
    }
  }
  if (other.mutableLeaguesList.count > 0) {
    if (result.mutableLeaguesList == nil) {
      result.mutableLeaguesList = [[NSMutableArray alloc] initWithArray:other.mutableLeaguesList];
    } else {
      [result.mutableLeaguesList addObjectsFromArray:other.mutableLeaguesList];
    }
  }
  if (other.mutableAchievementsList.count > 0) {
    if (result.mutableAchievementsList == nil) {
      result.mutableAchievementsList = [[NSMutableArray alloc] initWithArray:other.mutableAchievementsList];
    } else {
      [result.mutableAchievementsList addObjectsFromArray:other.mutableAchievementsList];
    }
  }
  if (other.mutableSkillsList.count > 0) {
    if (result.mutableSkillsList == nil) {
      result.mutableSkillsList = [[NSMutableArray alloc] initWithArray:other.mutableSkillsList];
    } else {
      [result.mutableSkillsList addObjectsFromArray:other.mutableSkillsList];
    }
  }
  if (other.mutableSideEffectsList.count > 0) {
    if (result.mutableSideEffectsList == nil) {
      result.mutableSideEffectsList = [[NSMutableArray alloc] initWithArray:other.mutableSideEffectsList];
    } else {
      [result.mutableSideEffectsList addObjectsFromArray:other.mutableSideEffectsList];
    }
  }
  if (other.mutablePrereqsList.count > 0) {
    if (result.mutablePrereqsList == nil) {
      result.mutablePrereqsList = [[NSMutableArray alloc] initWithArray:other.mutablePrereqsList];
    } else {
      [result.mutablePrereqsList addObjectsFromArray:other.mutablePrereqsList];
    }
  }
  if (other.mutableBoardsList.count > 0) {
    if (result.mutableBoardsList == nil) {
      result.mutableBoardsList = [[NSMutableArray alloc] initWithArray:other.mutableBoardsList];
    } else {
      [result.mutableBoardsList addObjectsFromArray:other.mutableBoardsList];
    }
  }
  if (other.mutableResearchList.count > 0) {
    if (result.mutableResearchList == nil) {
      result.mutableResearchList = [[NSMutableArray alloc] initWithArray:other.mutableResearchList];
    } else {
      [result.mutableResearchList addObjectsFromArray:other.mutableResearchList];
    }
  }
  if (other.mutableBattleItemList.count > 0) {
    if (result.mutableBattleItemList == nil) {
      result.mutableBattleItemList = [[NSMutableArray alloc] initWithArray:other.mutableBattleItemList];
    } else {
      [result.mutableBattleItemList addObjectsFromArray:other.mutableBattleItemList];
    }
  }
  if (other.mutablePvpBoardObstacleProtosList.count > 0) {
    if (result.mutablePvpBoardObstacleProtosList == nil) {
      result.mutablePvpBoardObstacleProtosList = [[NSMutableArray alloc] initWithArray:other.mutablePvpBoardObstacleProtosList];
    } else {
      [result.mutablePvpBoardObstacleProtosList addObjectsFromArray:other.mutablePvpBoardObstacleProtosList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (StaticDataProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (StaticDataProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasSender) {
          [subBuilder mergeFrom:self.sender];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSender:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        CityExpansionCostProto_Builder* subBuilder = [CityExpansionCostProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addExpansionCosts:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        FullCityProto_Builder* subBuilder = [FullCityProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllCities:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        FullTaskProto_Builder* subBuilder = [FullTaskProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllTasks:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        MonsterProto_Builder* subBuilder = [MonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllMonsters:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        StaticUserLevelInfoProto_Builder* subBuilder = [StaticUserLevelInfoProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSlip:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        FullQuestProto_Builder* subBuilder = [FullQuestProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addInProgressQuests:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        FullQuestProto_Builder* subBuilder = [FullQuestProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUnredeemedQuests:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        FullQuestProto_Builder* subBuilder = [FullQuestProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAvailableQuests:[subBuilder buildPartial]];
        break;
      }
      case 90: {
        BoosterPackProto_Builder* subBuilder = [BoosterPackProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBoosterPacks:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        ResourceGeneratorProto_Builder* subBuilder = [ResourceGeneratorProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllGenerators:[subBuilder buildPartial]];
        break;
      }
      case 106: {
        ResourceStorageProto_Builder* subBuilder = [ResourceStorageProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllStorages:[subBuilder buildPartial]];
        break;
      }
      case 114: {
        HospitalProto_Builder* subBuilder = [HospitalProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllHospitals:[subBuilder buildPartial]];
        break;
      }
      case 122: {
        ResidenceProto_Builder* subBuilder = [ResidenceProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllResidences:[subBuilder buildPartial]];
        break;
      }
      case 130: {
        TownHallProto_Builder* subBuilder = [TownHallProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllTownHalls:[subBuilder buildPartial]];
        break;
      }
      case 138: {
        LabProto_Builder* subBuilder = [LabProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllLabs:[subBuilder buildPartial]];
        break;
      }
      case 146: {
        PersistentEventProto_Builder* subBuilder = [PersistentEventProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPersistentEvents:[subBuilder buildPartial]];
        break;
      }
      case 154: {
        MonsterBattleDialogueProto_Builder* subBuilder = [MonsterBattleDialogueProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addMbds:[subBuilder buildPartial]];
        break;
      }
      case 162: {
        ClanRaidProto_Builder* subBuilder = [ClanRaidProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRaids:[subBuilder buildPartial]];
        break;
      }
      case 170: {
        PersistentClanEventProto_Builder* subBuilder = [PersistentClanEventProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPersistentClanEvents:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        ItemProto_Builder* subBuilder = [ItemProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItems:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        ObstacleProto_Builder* subBuilder = [ObstacleProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addObstacles:[subBuilder buildPartial]];
        break;
      }
      case 194: {
        ClanIconProto_Builder* subBuilder = [ClanIconProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addClanIcons:[subBuilder buildPartial]];
        break;
      }
      case 202: {
        PvpLeagueProto_Builder* subBuilder = [PvpLeagueProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLeagues:[subBuilder buildPartial]];
        break;
      }
      case 210: {
        AchievementProto_Builder* subBuilder = [AchievementProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAchievements:[subBuilder buildPartial]];
        break;
      }
      case 218: {
        MiniJobCenterProto_Builder* subBuilder = [MiniJobCenterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllMiniJobCenters:[subBuilder buildPartial]];
        break;
      }
      case 226: {
        TaskMapElementProto_Builder* subBuilder = [TaskMapElementProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllTaskMapElements:[subBuilder buildPartial]];
        break;
      }
      case 234: {
        EvoChamberProto_Builder* subBuilder = [EvoChamberProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllEvoChambers:[subBuilder buildPartial]];
        break;
      }
      case 242: {
        TeamCenterProto_Builder* subBuilder = [TeamCenterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllTeamCenters:[subBuilder buildPartial]];
        break;
      }
      case 250: {
        SkillProto_Builder* subBuilder = [SkillProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSkills:[subBuilder buildPartial]];
        break;
      }
      case 258: {
        ClanHouseProto_Builder* subBuilder = [ClanHouseProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllClanHouses:[subBuilder buildPartial]];
        break;
      }
      case 266: {
        PrereqProto_Builder* subBuilder = [PrereqProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPrereqs:[subBuilder buildPartial]];
        break;
      }
      case 274: {
        BoardLayoutProto_Builder* subBuilder = [BoardLayoutProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBoards:[subBuilder buildPartial]];
        break;
      }
      case 282: {
        ResearchProto_Builder* subBuilder = [ResearchProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addResearch:[subBuilder buildPartial]];
        break;
      }
      case 290: {
        BoosterPackProto_Builder* subBuilder = [BoosterPackProto builder];
        if (self.hasStarterPack) {
          [subBuilder mergeFrom:self.starterPack];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setStarterPack:[subBuilder buildPartial]];
        break;
      }
      case 298: {
        SkillSideEffectProto_Builder* subBuilder = [SkillSideEffectProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSideEffects:[subBuilder buildPartial]];
        break;
      }
      case 306: {
        MoneyTreeProto_Builder* subBuilder = [MoneyTreeProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllMoneyTrees:[subBuilder buildPartial]];
        break;
      }
      case 314: {
        PvpBoardHouseProto_Builder* subBuilder = [PvpBoardHouseProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllPvpBoardHouses:[subBuilder buildPartial]];
        break;
      }
      case 322: {
        PvpBoardObstacleProto_Builder* subBuilder = [PvpBoardObstacleProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPvpBoardObstacleProtos:[subBuilder buildPartial]];
        break;
      }
      case 330: {
        ResearchHouseProto_Builder* subBuilder = [ResearchHouseProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllResearchHouses:[subBuilder buildPartial]];
        break;
      }
      case 338: {
        BattleItemFactoryProto_Builder* subBuilder = [BattleItemFactoryProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAllBattleItemFactorys:[subBuilder buildPartial]];
        break;
      }
      case 346: {
        BattleItemProto_Builder* subBuilder = [BattleItemProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBattleItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasSender {
  return result.hasSender;
}
- (MinimumUserProto*) sender {
  return result.sender;
}
- (StaticDataProto_Builder*) setSender:(MinimumUserProto*) value {
  result.hasSender = YES;
  result.sender = value;
  return self;
}
- (StaticDataProto_Builder*) setSender_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setSender:[builderForValue build]];
}
- (StaticDataProto_Builder*) mergeSender:(MinimumUserProto*) value {
  if (result.hasSender &&
      result.sender != [MinimumUserProto defaultInstance]) {
    result.sender =
      [[[MinimumUserProto builderWithPrototype:result.sender] mergeFrom:value] buildPartial];
  } else {
    result.sender = value;
  }
  result.hasSender = YES;
  return self;
}
- (StaticDataProto_Builder*) clearSender {
  result.hasSender = NO;
  result.sender = [MinimumUserProto defaultInstance];
  return self;
}
- (NSMutableArray *)expansionCostsList {
  return result.mutableExpansionCostsList;
}
- (CityExpansionCostProto*)expansionCostsAtIndex:(NSUInteger)index {
  return [result expansionCostsAtIndex:index];
}
- (StaticDataProto_Builder *)addExpansionCosts:(CityExpansionCostProto*)value {
  if (result.mutableExpansionCostsList == nil) {
    result.mutableExpansionCostsList = [[NSMutableArray alloc]init];
  }
  [result.mutableExpansionCostsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllExpansionCosts:(NSArray *)array {
  if (result.mutableExpansionCostsList == nil) {
    result.mutableExpansionCostsList = [NSMutableArray array];
  }
  [result.mutableExpansionCostsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearExpansionCosts {
  result.mutableExpansionCostsList = nil;
  return self;
}
- (NSMutableArray *)allCitiesList {
  return result.mutableAllCitiesList;
}
- (FullCityProto*)allCitiesAtIndex:(NSUInteger)index {
  return [result allCitiesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllCities:(FullCityProto*)value {
  if (result.mutableAllCitiesList == nil) {
    result.mutableAllCitiesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllCitiesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllCities:(NSArray *)array {
  if (result.mutableAllCitiesList == nil) {
    result.mutableAllCitiesList = [NSMutableArray array];
  }
  [result.mutableAllCitiesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllCities {
  result.mutableAllCitiesList = nil;
  return self;
}
- (NSMutableArray *)allTasksList {
  return result.mutableAllTasksList;
}
- (FullTaskProto*)allTasksAtIndex:(NSUInteger)index {
  return [result allTasksAtIndex:index];
}
- (StaticDataProto_Builder *)addAllTasks:(FullTaskProto*)value {
  if (result.mutableAllTasksList == nil) {
    result.mutableAllTasksList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllTasksList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllTasks:(NSArray *)array {
  if (result.mutableAllTasksList == nil) {
    result.mutableAllTasksList = [NSMutableArray array];
  }
  [result.mutableAllTasksList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllTasks {
  result.mutableAllTasksList = nil;
  return self;
}
- (NSMutableArray *)allTaskMapElementsList {
  return result.mutableAllTaskMapElementsList;
}
- (TaskMapElementProto*)allTaskMapElementsAtIndex:(NSUInteger)index {
  return [result allTaskMapElementsAtIndex:index];
}
- (StaticDataProto_Builder *)addAllTaskMapElements:(TaskMapElementProto*)value {
  if (result.mutableAllTaskMapElementsList == nil) {
    result.mutableAllTaskMapElementsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllTaskMapElementsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllTaskMapElements:(NSArray *)array {
  if (result.mutableAllTaskMapElementsList == nil) {
    result.mutableAllTaskMapElementsList = [NSMutableArray array];
  }
  [result.mutableAllTaskMapElementsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllTaskMapElements {
  result.mutableAllTaskMapElementsList = nil;
  return self;
}
- (NSMutableArray *)allMonstersList {
  return result.mutableAllMonstersList;
}
- (MonsterProto*)allMonstersAtIndex:(NSUInteger)index {
  return [result allMonstersAtIndex:index];
}
- (StaticDataProto_Builder *)addAllMonsters:(MonsterProto*)value {
  if (result.mutableAllMonstersList == nil) {
    result.mutableAllMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllMonstersList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllMonsters:(NSArray *)array {
  if (result.mutableAllMonstersList == nil) {
    result.mutableAllMonstersList = [NSMutableArray array];
  }
  [result.mutableAllMonstersList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllMonsters {
  result.mutableAllMonstersList = nil;
  return self;
}
- (NSMutableArray *)slipList {
  return result.mutableSlipList;
}
- (StaticUserLevelInfoProto*)slipAtIndex:(NSUInteger)index {
  return [result slipAtIndex:index];
}
- (StaticDataProto_Builder *)addSlip:(StaticUserLevelInfoProto*)value {
  if (result.mutableSlipList == nil) {
    result.mutableSlipList = [[NSMutableArray alloc]init];
  }
  [result.mutableSlipList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllSlip:(NSArray *)array {
  if (result.mutableSlipList == nil) {
    result.mutableSlipList = [NSMutableArray array];
  }
  [result.mutableSlipList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearSlip {
  result.mutableSlipList = nil;
  return self;
}
- (NSMutableArray *)inProgressQuestsList {
  return result.mutableInProgressQuestsList;
}
- (FullQuestProto*)inProgressQuestsAtIndex:(NSUInteger)index {
  return [result inProgressQuestsAtIndex:index];
}
- (StaticDataProto_Builder *)addInProgressQuests:(FullQuestProto*)value {
  if (result.mutableInProgressQuestsList == nil) {
    result.mutableInProgressQuestsList = [[NSMutableArray alloc]init];
  }
  [result.mutableInProgressQuestsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllInProgressQuests:(NSArray *)array {
  if (result.mutableInProgressQuestsList == nil) {
    result.mutableInProgressQuestsList = [NSMutableArray array];
  }
  [result.mutableInProgressQuestsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearInProgressQuests {
  result.mutableInProgressQuestsList = nil;
  return self;
}
- (NSMutableArray *)unredeemedQuestsList {
  return result.mutableUnredeemedQuestsList;
}
- (FullQuestProto*)unredeemedQuestsAtIndex:(NSUInteger)index {
  return [result unredeemedQuestsAtIndex:index];
}
- (StaticDataProto_Builder *)addUnredeemedQuests:(FullQuestProto*)value {
  if (result.mutableUnredeemedQuestsList == nil) {
    result.mutableUnredeemedQuestsList = [[NSMutableArray alloc]init];
  }
  [result.mutableUnredeemedQuestsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllUnredeemedQuests:(NSArray *)array {
  if (result.mutableUnredeemedQuestsList == nil) {
    result.mutableUnredeemedQuestsList = [NSMutableArray array];
  }
  [result.mutableUnredeemedQuestsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearUnredeemedQuests {
  result.mutableUnredeemedQuestsList = nil;
  return self;
}
- (NSMutableArray *)availableQuestsList {
  return result.mutableAvailableQuestsList;
}
- (FullQuestProto*)availableQuestsAtIndex:(NSUInteger)index {
  return [result availableQuestsAtIndex:index];
}
- (StaticDataProto_Builder *)addAvailableQuests:(FullQuestProto*)value {
  if (result.mutableAvailableQuestsList == nil) {
    result.mutableAvailableQuestsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAvailableQuestsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAvailableQuests:(NSArray *)array {
  if (result.mutableAvailableQuestsList == nil) {
    result.mutableAvailableQuestsList = [NSMutableArray array];
  }
  [result.mutableAvailableQuestsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAvailableQuests {
  result.mutableAvailableQuestsList = nil;
  return self;
}
- (NSMutableArray *)boosterPacksList {
  return result.mutableBoosterPacksList;
}
- (BoosterPackProto*)boosterPacksAtIndex:(NSUInteger)index {
  return [result boosterPacksAtIndex:index];
}
- (StaticDataProto_Builder *)addBoosterPacks:(BoosterPackProto*)value {
  if (result.mutableBoosterPacksList == nil) {
    result.mutableBoosterPacksList = [[NSMutableArray alloc]init];
  }
  [result.mutableBoosterPacksList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllBoosterPacks:(NSArray *)array {
  if (result.mutableBoosterPacksList == nil) {
    result.mutableBoosterPacksList = [NSMutableArray array];
  }
  [result.mutableBoosterPacksList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearBoosterPacks {
  result.mutableBoosterPacksList = nil;
  return self;
}
- (BOOL) hasStarterPack {
  return result.hasStarterPack;
}
- (BoosterPackProto*) starterPack {
  return result.starterPack;
}
- (StaticDataProto_Builder*) setStarterPack:(BoosterPackProto*) value {
  result.hasStarterPack = YES;
  result.starterPack = value;
  return self;
}
- (StaticDataProto_Builder*) setStarterPack_Builder:(BoosterPackProto_Builder*) builderForValue {
  return [self setStarterPack:[builderForValue build]];
}
- (StaticDataProto_Builder*) mergeStarterPack:(BoosterPackProto*) value {
  if (result.hasStarterPack &&
      result.starterPack != [BoosterPackProto defaultInstance]) {
    result.starterPack =
      [[[BoosterPackProto builderWithPrototype:result.starterPack] mergeFrom:value] buildPartial];
  } else {
    result.starterPack = value;
  }
  result.hasStarterPack = YES;
  return self;
}
- (StaticDataProto_Builder*) clearStarterPack {
  result.hasStarterPack = NO;
  result.starterPack = [BoosterPackProto defaultInstance];
  return self;
}
- (NSMutableArray *)allGeneratorsList {
  return result.mutableAllGeneratorsList;
}
- (ResourceGeneratorProto*)allGeneratorsAtIndex:(NSUInteger)index {
  return [result allGeneratorsAtIndex:index];
}
- (StaticDataProto_Builder *)addAllGenerators:(ResourceGeneratorProto*)value {
  if (result.mutableAllGeneratorsList == nil) {
    result.mutableAllGeneratorsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllGeneratorsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllGenerators:(NSArray *)array {
  if (result.mutableAllGeneratorsList == nil) {
    result.mutableAllGeneratorsList = [NSMutableArray array];
  }
  [result.mutableAllGeneratorsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllGenerators {
  result.mutableAllGeneratorsList = nil;
  return self;
}
- (NSMutableArray *)allStoragesList {
  return result.mutableAllStoragesList;
}
- (ResourceStorageProto*)allStoragesAtIndex:(NSUInteger)index {
  return [result allStoragesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllStorages:(ResourceStorageProto*)value {
  if (result.mutableAllStoragesList == nil) {
    result.mutableAllStoragesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllStoragesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllStorages:(NSArray *)array {
  if (result.mutableAllStoragesList == nil) {
    result.mutableAllStoragesList = [NSMutableArray array];
  }
  [result.mutableAllStoragesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllStorages {
  result.mutableAllStoragesList = nil;
  return self;
}
- (NSMutableArray *)allHospitalsList {
  return result.mutableAllHospitalsList;
}
- (HospitalProto*)allHospitalsAtIndex:(NSUInteger)index {
  return [result allHospitalsAtIndex:index];
}
- (StaticDataProto_Builder *)addAllHospitals:(HospitalProto*)value {
  if (result.mutableAllHospitalsList == nil) {
    result.mutableAllHospitalsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllHospitalsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllHospitals:(NSArray *)array {
  if (result.mutableAllHospitalsList == nil) {
    result.mutableAllHospitalsList = [NSMutableArray array];
  }
  [result.mutableAllHospitalsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllHospitals {
  result.mutableAllHospitalsList = nil;
  return self;
}
- (NSMutableArray *)allResidencesList {
  return result.mutableAllResidencesList;
}
- (ResidenceProto*)allResidencesAtIndex:(NSUInteger)index {
  return [result allResidencesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllResidences:(ResidenceProto*)value {
  if (result.mutableAllResidencesList == nil) {
    result.mutableAllResidencesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllResidencesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllResidences:(NSArray *)array {
  if (result.mutableAllResidencesList == nil) {
    result.mutableAllResidencesList = [NSMutableArray array];
  }
  [result.mutableAllResidencesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllResidences {
  result.mutableAllResidencesList = nil;
  return self;
}
- (NSMutableArray *)allTownHallsList {
  return result.mutableAllTownHallsList;
}
- (TownHallProto*)allTownHallsAtIndex:(NSUInteger)index {
  return [result allTownHallsAtIndex:index];
}
- (StaticDataProto_Builder *)addAllTownHalls:(TownHallProto*)value {
  if (result.mutableAllTownHallsList == nil) {
    result.mutableAllTownHallsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllTownHallsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllTownHalls:(NSArray *)array {
  if (result.mutableAllTownHallsList == nil) {
    result.mutableAllTownHallsList = [NSMutableArray array];
  }
  [result.mutableAllTownHallsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllTownHalls {
  result.mutableAllTownHallsList = nil;
  return self;
}
- (NSMutableArray *)allLabsList {
  return result.mutableAllLabsList;
}
- (LabProto*)allLabsAtIndex:(NSUInteger)index {
  return [result allLabsAtIndex:index];
}
- (StaticDataProto_Builder *)addAllLabs:(LabProto*)value {
  if (result.mutableAllLabsList == nil) {
    result.mutableAllLabsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllLabsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllLabs:(NSArray *)array {
  if (result.mutableAllLabsList == nil) {
    result.mutableAllLabsList = [NSMutableArray array];
  }
  [result.mutableAllLabsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllLabs {
  result.mutableAllLabsList = nil;
  return self;
}
- (NSMutableArray *)allMiniJobCentersList {
  return result.mutableAllMiniJobCentersList;
}
- (MiniJobCenterProto*)allMiniJobCentersAtIndex:(NSUInteger)index {
  return [result allMiniJobCentersAtIndex:index];
}
- (StaticDataProto_Builder *)addAllMiniJobCenters:(MiniJobCenterProto*)value {
  if (result.mutableAllMiniJobCentersList == nil) {
    result.mutableAllMiniJobCentersList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllMiniJobCentersList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllMiniJobCenters:(NSArray *)array {
  if (result.mutableAllMiniJobCentersList == nil) {
    result.mutableAllMiniJobCentersList = [NSMutableArray array];
  }
  [result.mutableAllMiniJobCentersList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllMiniJobCenters {
  result.mutableAllMiniJobCentersList = nil;
  return self;
}
- (NSMutableArray *)allEvoChambersList {
  return result.mutableAllEvoChambersList;
}
- (EvoChamberProto*)allEvoChambersAtIndex:(NSUInteger)index {
  return [result allEvoChambersAtIndex:index];
}
- (StaticDataProto_Builder *)addAllEvoChambers:(EvoChamberProto*)value {
  if (result.mutableAllEvoChambersList == nil) {
    result.mutableAllEvoChambersList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllEvoChambersList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllEvoChambers:(NSArray *)array {
  if (result.mutableAllEvoChambersList == nil) {
    result.mutableAllEvoChambersList = [NSMutableArray array];
  }
  [result.mutableAllEvoChambersList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllEvoChambers {
  result.mutableAllEvoChambersList = nil;
  return self;
}
- (NSMutableArray *)allTeamCentersList {
  return result.mutableAllTeamCentersList;
}
- (TeamCenterProto*)allTeamCentersAtIndex:(NSUInteger)index {
  return [result allTeamCentersAtIndex:index];
}
- (StaticDataProto_Builder *)addAllTeamCenters:(TeamCenterProto*)value {
  if (result.mutableAllTeamCentersList == nil) {
    result.mutableAllTeamCentersList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllTeamCentersList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllTeamCenters:(NSArray *)array {
  if (result.mutableAllTeamCentersList == nil) {
    result.mutableAllTeamCentersList = [NSMutableArray array];
  }
  [result.mutableAllTeamCentersList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllTeamCenters {
  result.mutableAllTeamCentersList = nil;
  return self;
}
- (NSMutableArray *)allClanHousesList {
  return result.mutableAllClanHousesList;
}
- (ClanHouseProto*)allClanHousesAtIndex:(NSUInteger)index {
  return [result allClanHousesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllClanHouses:(ClanHouseProto*)value {
  if (result.mutableAllClanHousesList == nil) {
    result.mutableAllClanHousesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllClanHousesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllClanHouses:(NSArray *)array {
  if (result.mutableAllClanHousesList == nil) {
    result.mutableAllClanHousesList = [NSMutableArray array];
  }
  [result.mutableAllClanHousesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllClanHouses {
  result.mutableAllClanHousesList = nil;
  return self;
}
- (NSMutableArray *)allMoneyTreesList {
  return result.mutableAllMoneyTreesList;
}
- (MoneyTreeProto*)allMoneyTreesAtIndex:(NSUInteger)index {
  return [result allMoneyTreesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllMoneyTrees:(MoneyTreeProto*)value {
  if (result.mutableAllMoneyTreesList == nil) {
    result.mutableAllMoneyTreesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllMoneyTreesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllMoneyTrees:(NSArray *)array {
  if (result.mutableAllMoneyTreesList == nil) {
    result.mutableAllMoneyTreesList = [NSMutableArray array];
  }
  [result.mutableAllMoneyTreesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllMoneyTrees {
  result.mutableAllMoneyTreesList = nil;
  return self;
}
- (NSMutableArray *)allPvpBoardHousesList {
  return result.mutableAllPvpBoardHousesList;
}
- (PvpBoardHouseProto*)allPvpBoardHousesAtIndex:(NSUInteger)index {
  return [result allPvpBoardHousesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllPvpBoardHouses:(PvpBoardHouseProto*)value {
  if (result.mutableAllPvpBoardHousesList == nil) {
    result.mutableAllPvpBoardHousesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllPvpBoardHousesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllPvpBoardHouses:(NSArray *)array {
  if (result.mutableAllPvpBoardHousesList == nil) {
    result.mutableAllPvpBoardHousesList = [NSMutableArray array];
  }
  [result.mutableAllPvpBoardHousesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllPvpBoardHouses {
  result.mutableAllPvpBoardHousesList = nil;
  return self;
}
- (NSMutableArray *)allResearchHousesList {
  return result.mutableAllResearchHousesList;
}
- (ResearchHouseProto*)allResearchHousesAtIndex:(NSUInteger)index {
  return [result allResearchHousesAtIndex:index];
}
- (StaticDataProto_Builder *)addAllResearchHouses:(ResearchHouseProto*)value {
  if (result.mutableAllResearchHousesList == nil) {
    result.mutableAllResearchHousesList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllResearchHousesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllResearchHouses:(NSArray *)array {
  if (result.mutableAllResearchHousesList == nil) {
    result.mutableAllResearchHousesList = [NSMutableArray array];
  }
  [result.mutableAllResearchHousesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllResearchHouses {
  result.mutableAllResearchHousesList = nil;
  return self;
}
- (NSMutableArray *)allBattleItemFactorysList {
  return result.mutableAllBattleItemFactorysList;
}
- (BattleItemFactoryProto*)allBattleItemFactorysAtIndex:(NSUInteger)index {
  return [result allBattleItemFactorysAtIndex:index];
}
- (StaticDataProto_Builder *)addAllBattleItemFactorys:(BattleItemFactoryProto*)value {
  if (result.mutableAllBattleItemFactorysList == nil) {
    result.mutableAllBattleItemFactorysList = [[NSMutableArray alloc]init];
  }
  [result.mutableAllBattleItemFactorysList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAllBattleItemFactorys:(NSArray *)array {
  if (result.mutableAllBattleItemFactorysList == nil) {
    result.mutableAllBattleItemFactorysList = [NSMutableArray array];
  }
  [result.mutableAllBattleItemFactorysList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAllBattleItemFactorys {
  result.mutableAllBattleItemFactorysList = nil;
  return self;
}
- (NSMutableArray *)persistentEventsList {
  return result.mutablePersistentEventsList;
}
- (PersistentEventProto*)persistentEventsAtIndex:(NSUInteger)index {
  return [result persistentEventsAtIndex:index];
}
- (StaticDataProto_Builder *)addPersistentEvents:(PersistentEventProto*)value {
  if (result.mutablePersistentEventsList == nil) {
    result.mutablePersistentEventsList = [[NSMutableArray alloc]init];
  }
  [result.mutablePersistentEventsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllPersistentEvents:(NSArray *)array {
  if (result.mutablePersistentEventsList == nil) {
    result.mutablePersistentEventsList = [NSMutableArray array];
  }
  [result.mutablePersistentEventsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearPersistentEvents {
  result.mutablePersistentEventsList = nil;
  return self;
}
- (NSMutableArray *)mbdsList {
  return result.mutableMbdsList;
}
- (MonsterBattleDialogueProto*)mbdsAtIndex:(NSUInteger)index {
  return [result mbdsAtIndex:index];
}
- (StaticDataProto_Builder *)addMbds:(MonsterBattleDialogueProto*)value {
  if (result.mutableMbdsList == nil) {
    result.mutableMbdsList = [[NSMutableArray alloc]init];
  }
  [result.mutableMbdsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllMbds:(NSArray *)array {
  if (result.mutableMbdsList == nil) {
    result.mutableMbdsList = [NSMutableArray array];
  }
  [result.mutableMbdsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearMbds {
  result.mutableMbdsList = nil;
  return self;
}
- (NSMutableArray *)raidsList {
  return result.mutableRaidsList;
}
- (ClanRaidProto*)raidsAtIndex:(NSUInteger)index {
  return [result raidsAtIndex:index];
}
- (StaticDataProto_Builder *)addRaids:(ClanRaidProto*)value {
  if (result.mutableRaidsList == nil) {
    result.mutableRaidsList = [[NSMutableArray alloc]init];
  }
  [result.mutableRaidsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllRaids:(NSArray *)array {
  if (result.mutableRaidsList == nil) {
    result.mutableRaidsList = [NSMutableArray array];
  }
  [result.mutableRaidsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearRaids {
  result.mutableRaidsList = nil;
  return self;
}
- (NSMutableArray *)persistentClanEventsList {
  return result.mutablePersistentClanEventsList;
}
- (PersistentClanEventProto*)persistentClanEventsAtIndex:(NSUInteger)index {
  return [result persistentClanEventsAtIndex:index];
}
- (StaticDataProto_Builder *)addPersistentClanEvents:(PersistentClanEventProto*)value {
  if (result.mutablePersistentClanEventsList == nil) {
    result.mutablePersistentClanEventsList = [[NSMutableArray alloc]init];
  }
  [result.mutablePersistentClanEventsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllPersistentClanEvents:(NSArray *)array {
  if (result.mutablePersistentClanEventsList == nil) {
    result.mutablePersistentClanEventsList = [NSMutableArray array];
  }
  [result.mutablePersistentClanEventsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearPersistentClanEvents {
  result.mutablePersistentClanEventsList = nil;
  return self;
}
- (NSMutableArray *)itemsList {
  return result.mutableItemsList;
}
- (ItemProto*)itemsAtIndex:(NSUInteger)index {
  return [result itemsAtIndex:index];
}
- (StaticDataProto_Builder *)addItems:(ItemProto*)value {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [[NSMutableArray alloc]init];
  }
  [result.mutableItemsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllItems:(NSArray *)array {
  if (result.mutableItemsList == nil) {
    result.mutableItemsList = [NSMutableArray array];
  }
  [result.mutableItemsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearItems {
  result.mutableItemsList = nil;
  return self;
}
- (NSMutableArray *)obstaclesList {
  return result.mutableObstaclesList;
}
- (ObstacleProto*)obstaclesAtIndex:(NSUInteger)index {
  return [result obstaclesAtIndex:index];
}
- (StaticDataProto_Builder *)addObstacles:(ObstacleProto*)value {
  if (result.mutableObstaclesList == nil) {
    result.mutableObstaclesList = [[NSMutableArray alloc]init];
  }
  [result.mutableObstaclesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllObstacles:(NSArray *)array {
  if (result.mutableObstaclesList == nil) {
    result.mutableObstaclesList = [NSMutableArray array];
  }
  [result.mutableObstaclesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearObstacles {
  result.mutableObstaclesList = nil;
  return self;
}
- (NSMutableArray *)clanIconsList {
  return result.mutableClanIconsList;
}
- (ClanIconProto*)clanIconsAtIndex:(NSUInteger)index {
  return [result clanIconsAtIndex:index];
}
- (StaticDataProto_Builder *)addClanIcons:(ClanIconProto*)value {
  if (result.mutableClanIconsList == nil) {
    result.mutableClanIconsList = [[NSMutableArray alloc]init];
  }
  [result.mutableClanIconsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllClanIcons:(NSArray *)array {
  if (result.mutableClanIconsList == nil) {
    result.mutableClanIconsList = [NSMutableArray array];
  }
  [result.mutableClanIconsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearClanIcons {
  result.mutableClanIconsList = nil;
  return self;
}
- (NSMutableArray *)leaguesList {
  return result.mutableLeaguesList;
}
- (PvpLeagueProto*)leaguesAtIndex:(NSUInteger)index {
  return [result leaguesAtIndex:index];
}
- (StaticDataProto_Builder *)addLeagues:(PvpLeagueProto*)value {
  if (result.mutableLeaguesList == nil) {
    result.mutableLeaguesList = [[NSMutableArray alloc]init];
  }
  [result.mutableLeaguesList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllLeagues:(NSArray *)array {
  if (result.mutableLeaguesList == nil) {
    result.mutableLeaguesList = [NSMutableArray array];
  }
  [result.mutableLeaguesList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearLeagues {
  result.mutableLeaguesList = nil;
  return self;
}
- (NSMutableArray *)achievementsList {
  return result.mutableAchievementsList;
}
- (AchievementProto*)achievementsAtIndex:(NSUInteger)index {
  return [result achievementsAtIndex:index];
}
- (StaticDataProto_Builder *)addAchievements:(AchievementProto*)value {
  if (result.mutableAchievementsList == nil) {
    result.mutableAchievementsList = [[NSMutableArray alloc]init];
  }
  [result.mutableAchievementsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllAchievements:(NSArray *)array {
  if (result.mutableAchievementsList == nil) {
    result.mutableAchievementsList = [NSMutableArray array];
  }
  [result.mutableAchievementsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearAchievements {
  result.mutableAchievementsList = nil;
  return self;
}
- (NSMutableArray *)skillsList {
  return result.mutableSkillsList;
}
- (SkillProto*)skillsAtIndex:(NSUInteger)index {
  return [result skillsAtIndex:index];
}
- (StaticDataProto_Builder *)addSkills:(SkillProto*)value {
  if (result.mutableSkillsList == nil) {
    result.mutableSkillsList = [[NSMutableArray alloc]init];
  }
  [result.mutableSkillsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllSkills:(NSArray *)array {
  if (result.mutableSkillsList == nil) {
    result.mutableSkillsList = [NSMutableArray array];
  }
  [result.mutableSkillsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearSkills {
  result.mutableSkillsList = nil;
  return self;
}
- (NSMutableArray *)sideEffectsList {
  return result.mutableSideEffectsList;
}
- (SkillSideEffectProto*)sideEffectsAtIndex:(NSUInteger)index {
  return [result sideEffectsAtIndex:index];
}
- (StaticDataProto_Builder *)addSideEffects:(SkillSideEffectProto*)value {
  if (result.mutableSideEffectsList == nil) {
    result.mutableSideEffectsList = [[NSMutableArray alloc]init];
  }
  [result.mutableSideEffectsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllSideEffects:(NSArray *)array {
  if (result.mutableSideEffectsList == nil) {
    result.mutableSideEffectsList = [NSMutableArray array];
  }
  [result.mutableSideEffectsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearSideEffects {
  result.mutableSideEffectsList = nil;
  return self;
}
- (NSMutableArray *)prereqsList {
  return result.mutablePrereqsList;
}
- (PrereqProto*)prereqsAtIndex:(NSUInteger)index {
  return [result prereqsAtIndex:index];
}
- (StaticDataProto_Builder *)addPrereqs:(PrereqProto*)value {
  if (result.mutablePrereqsList == nil) {
    result.mutablePrereqsList = [[NSMutableArray alloc]init];
  }
  [result.mutablePrereqsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllPrereqs:(NSArray *)array {
  if (result.mutablePrereqsList == nil) {
    result.mutablePrereqsList = [NSMutableArray array];
  }
  [result.mutablePrereqsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearPrereqs {
  result.mutablePrereqsList = nil;
  return self;
}
- (NSMutableArray *)boardsList {
  return result.mutableBoardsList;
}
- (BoardLayoutProto*)boardsAtIndex:(NSUInteger)index {
  return [result boardsAtIndex:index];
}
- (StaticDataProto_Builder *)addBoards:(BoardLayoutProto*)value {
  if (result.mutableBoardsList == nil) {
    result.mutableBoardsList = [[NSMutableArray alloc]init];
  }
  [result.mutableBoardsList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllBoards:(NSArray *)array {
  if (result.mutableBoardsList == nil) {
    result.mutableBoardsList = [NSMutableArray array];
  }
  [result.mutableBoardsList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearBoards {
  result.mutableBoardsList = nil;
  return self;
}
- (NSMutableArray *)researchList {
  return result.mutableResearchList;
}
- (ResearchProto*)researchAtIndex:(NSUInteger)index {
  return [result researchAtIndex:index];
}
- (StaticDataProto_Builder *)addResearch:(ResearchProto*)value {
  if (result.mutableResearchList == nil) {
    result.mutableResearchList = [[NSMutableArray alloc]init];
  }
  [result.mutableResearchList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllResearch:(NSArray *)array {
  if (result.mutableResearchList == nil) {
    result.mutableResearchList = [NSMutableArray array];
  }
  [result.mutableResearchList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearResearch {
  result.mutableResearchList = nil;
  return self;
}
- (NSMutableArray *)battleItemList {
  return result.mutableBattleItemList;
}
- (BattleItemProto*)battleItemAtIndex:(NSUInteger)index {
  return [result battleItemAtIndex:index];
}
- (StaticDataProto_Builder *)addBattleItem:(BattleItemProto*)value {
  if (result.mutableBattleItemList == nil) {
    result.mutableBattleItemList = [[NSMutableArray alloc]init];
  }
  [result.mutableBattleItemList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllBattleItem:(NSArray *)array {
  if (result.mutableBattleItemList == nil) {
    result.mutableBattleItemList = [NSMutableArray array];
  }
  [result.mutableBattleItemList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearBattleItem {
  result.mutableBattleItemList = nil;
  return self;
}
- (NSMutableArray *)pvpBoardObstacleProtosList {
  return result.mutablePvpBoardObstacleProtosList;
}
- (PvpBoardObstacleProto*)pvpBoardObstacleProtosAtIndex:(NSUInteger)index {
  return [result pvpBoardObstacleProtosAtIndex:index];
}
- (StaticDataProto_Builder *)addPvpBoardObstacleProtos:(PvpBoardObstacleProto*)value {
  if (result.mutablePvpBoardObstacleProtosList == nil) {
    result.mutablePvpBoardObstacleProtosList = [[NSMutableArray alloc]init];
  }
  [result.mutablePvpBoardObstacleProtosList addObject:value];
  return self;
}
- (StaticDataProto_Builder *)addAllPvpBoardObstacleProtos:(NSArray *)array {
  if (result.mutablePvpBoardObstacleProtosList == nil) {
    result.mutablePvpBoardObstacleProtosList = [NSMutableArray array];
  }
  [result.mutablePvpBoardObstacleProtosList addObjectsFromArray:array];
  return self;
}
- (StaticDataProto_Builder *)clearPvpBoardObstacleProtos {
  result.mutablePvpBoardObstacleProtosList = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
