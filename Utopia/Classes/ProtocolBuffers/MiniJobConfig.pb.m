// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MiniJobConfig.pb.h"
// @@protoc_insertion_point(imports)

@implementation MiniJobConfigRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MiniJobConfigRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [RewardRoot registerAllExtensions:registry];
    [SharedEnumConfigRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MiniJobProto ()
@property int32_t miniJobId;
@property int32_t requiredStructId;
@property (strong) NSString* name;
@property int32_t cashReward;
@property int32_t oilReward;
@property int32_t gemReward;
@property int32_t monsterIdReward;
@property int32_t itemIdReward;
@property int32_t itemRewardQuantity;
@property int32_t secondItemIdReward;
@property int32_t secondItemRewardQuantity;
@property Quality quality;
@property int32_t maxNumMonstersAllowed;
@property Float32 chanceToAppear;
@property int32_t hpRequired;
@property int32_t atkRequired;
@property int32_t minDmgDealt;
@property int32_t maxDmgDealt;
@property int32_t durationMinMinutes;
@property int32_t durationMaxMinutes;
@property (strong) RewardProto* rewardOne;
@property (strong) RewardProto* rewardTwo;
@property (strong) RewardProto* rewardThree;
@end

@implementation MiniJobProto

- (BOOL) hasMiniJobId {
  return !!hasMiniJobId_;
}
- (void) setHasMiniJobId:(BOOL) value_ {
  hasMiniJobId_ = !!value_;
}
@synthesize miniJobId;
- (BOOL) hasRequiredStructId {
  return !!hasRequiredStructId_;
}
- (void) setHasRequiredStructId:(BOOL) value_ {
  hasRequiredStructId_ = !!value_;
}
@synthesize requiredStructId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasCashReward {
  return !!hasCashReward_;
}
- (void) setHasCashReward:(BOOL) value_ {
  hasCashReward_ = !!value_;
}
@synthesize cashReward;
- (BOOL) hasOilReward {
  return !!hasOilReward_;
}
- (void) setHasOilReward:(BOOL) value_ {
  hasOilReward_ = !!value_;
}
@synthesize oilReward;
- (BOOL) hasGemReward {
  return !!hasGemReward_;
}
- (void) setHasGemReward:(BOOL) value_ {
  hasGemReward_ = !!value_;
}
@synthesize gemReward;
- (BOOL) hasMonsterIdReward {
  return !!hasMonsterIdReward_;
}
- (void) setHasMonsterIdReward:(BOOL) value_ {
  hasMonsterIdReward_ = !!value_;
}
@synthesize monsterIdReward;
- (BOOL) hasItemIdReward {
  return !!hasItemIdReward_;
}
- (void) setHasItemIdReward:(BOOL) value_ {
  hasItemIdReward_ = !!value_;
}
@synthesize itemIdReward;
- (BOOL) hasItemRewardQuantity {
  return !!hasItemRewardQuantity_;
}
- (void) setHasItemRewardQuantity:(BOOL) value_ {
  hasItemRewardQuantity_ = !!value_;
}
@synthesize itemRewardQuantity;
- (BOOL) hasSecondItemIdReward {
  return !!hasSecondItemIdReward_;
}
- (void) setHasSecondItemIdReward:(BOOL) value_ {
  hasSecondItemIdReward_ = !!value_;
}
@synthesize secondItemIdReward;
- (BOOL) hasSecondItemRewardQuantity {
  return !!hasSecondItemRewardQuantity_;
}
- (void) setHasSecondItemRewardQuantity:(BOOL) value_ {
  hasSecondItemRewardQuantity_ = !!value_;
}
@synthesize secondItemRewardQuantity;
- (BOOL) hasQuality {
  return !!hasQuality_;
}
- (void) setHasQuality:(BOOL) value_ {
  hasQuality_ = !!value_;
}
@synthesize quality;
- (BOOL) hasMaxNumMonstersAllowed {
  return !!hasMaxNumMonstersAllowed_;
}
- (void) setHasMaxNumMonstersAllowed:(BOOL) value_ {
  hasMaxNumMonstersAllowed_ = !!value_;
}
@synthesize maxNumMonstersAllowed;
- (BOOL) hasChanceToAppear {
  return !!hasChanceToAppear_;
}
- (void) setHasChanceToAppear:(BOOL) value_ {
  hasChanceToAppear_ = !!value_;
}
@synthesize chanceToAppear;
- (BOOL) hasHpRequired {
  return !!hasHpRequired_;
}
- (void) setHasHpRequired:(BOOL) value_ {
  hasHpRequired_ = !!value_;
}
@synthesize hpRequired;
- (BOOL) hasAtkRequired {
  return !!hasAtkRequired_;
}
- (void) setHasAtkRequired:(BOOL) value_ {
  hasAtkRequired_ = !!value_;
}
@synthesize atkRequired;
- (BOOL) hasMinDmgDealt {
  return !!hasMinDmgDealt_;
}
- (void) setHasMinDmgDealt:(BOOL) value_ {
  hasMinDmgDealt_ = !!value_;
}
@synthesize minDmgDealt;
- (BOOL) hasMaxDmgDealt {
  return !!hasMaxDmgDealt_;
}
- (void) setHasMaxDmgDealt:(BOOL) value_ {
  hasMaxDmgDealt_ = !!value_;
}
@synthesize maxDmgDealt;
- (BOOL) hasDurationMinMinutes {
  return !!hasDurationMinMinutes_;
}
- (void) setHasDurationMinMinutes:(BOOL) value_ {
  hasDurationMinMinutes_ = !!value_;
}
@synthesize durationMinMinutes;
- (BOOL) hasDurationMaxMinutes {
  return !!hasDurationMaxMinutes_;
}
- (void) setHasDurationMaxMinutes:(BOOL) value_ {
  hasDurationMaxMinutes_ = !!value_;
}
@synthesize durationMaxMinutes;
- (BOOL) hasRewardOne {
  return !!hasRewardOne_;
}
- (void) setHasRewardOne:(BOOL) value_ {
  hasRewardOne_ = !!value_;
}
@synthesize rewardOne;
- (BOOL) hasRewardTwo {
  return !!hasRewardTwo_;
}
- (void) setHasRewardTwo:(BOOL) value_ {
  hasRewardTwo_ = !!value_;
}
@synthesize rewardTwo;
- (BOOL) hasRewardThree {
  return !!hasRewardThree_;
}
- (void) setHasRewardThree:(BOOL) value_ {
  hasRewardThree_ = !!value_;
}
@synthesize rewardThree;
- (id) init {
  if ((self = [super init])) {
    self.miniJobId = 0;
    self.requiredStructId = 0;
    self.name = @"";
    self.cashReward = 0;
    self.oilReward = 0;
    self.gemReward = 0;
    self.monsterIdReward = 0;
    self.itemIdReward = 0;
    self.itemRewardQuantity = 0;
    self.secondItemIdReward = 0;
    self.secondItemRewardQuantity = 0;
    self.quality = QualityNoQuality;
    self.maxNumMonstersAllowed = 0;
    self.chanceToAppear = 0;
    self.hpRequired = 0;
    self.atkRequired = 0;
    self.minDmgDealt = 0;
    self.maxDmgDealt = 0;
    self.durationMinMinutes = 0;
    self.durationMaxMinutes = 0;
    self.rewardOne = [RewardProto defaultInstance];
    self.rewardTwo = [RewardProto defaultInstance];
    self.rewardThree = [RewardProto defaultInstance];
  }
  return self;
}
static MiniJobProto* defaultMiniJobProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniJobProto class]) {
    defaultMiniJobProtoInstance = [[MiniJobProto alloc] init];
  }
}
+ (MiniJobProto*) defaultInstance {
  return defaultMiniJobProtoInstance;
}
- (MiniJobProto*) defaultInstance {
  return defaultMiniJobProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMiniJobId) {
    [output writeInt32:1 value:self.miniJobId];
  }
  if (self.hasRequiredStructId) {
    [output writeInt32:2 value:self.requiredStructId];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasCashReward) {
    [output writeInt32:4 value:self.cashReward];
  }
  if (self.hasOilReward) {
    [output writeInt32:5 value:self.oilReward];
  }
  if (self.hasGemReward) {
    [output writeInt32:6 value:self.gemReward];
  }
  if (self.hasMonsterIdReward) {
    [output writeInt32:7 value:self.monsterIdReward];
  }
  if (self.hasQuality) {
    [output writeEnum:8 value:self.quality];
  }
  if (self.hasMaxNumMonstersAllowed) {
    [output writeInt32:9 value:self.maxNumMonstersAllowed];
  }
  if (self.hasChanceToAppear) {
    [output writeFloat:10 value:self.chanceToAppear];
  }
  if (self.hasHpRequired) {
    [output writeInt32:11 value:self.hpRequired];
  }
  if (self.hasAtkRequired) {
    [output writeInt32:12 value:self.atkRequired];
  }
  if (self.hasMinDmgDealt) {
    [output writeInt32:13 value:self.minDmgDealt];
  }
  if (self.hasMaxDmgDealt) {
    [output writeInt32:14 value:self.maxDmgDealt];
  }
  if (self.hasDurationMinMinutes) {
    [output writeInt32:15 value:self.durationMinMinutes];
  }
  if (self.hasDurationMaxMinutes) {
    [output writeInt32:16 value:self.durationMaxMinutes];
  }
  if (self.hasItemIdReward) {
    [output writeInt32:17 value:self.itemIdReward];
  }
  if (self.hasItemRewardQuantity) {
    [output writeInt32:18 value:self.itemRewardQuantity];
  }
  if (self.hasSecondItemIdReward) {
    [output writeInt32:19 value:self.secondItemIdReward];
  }
  if (self.hasSecondItemRewardQuantity) {
    [output writeInt32:20 value:self.secondItemRewardQuantity];
  }
  if (self.hasRewardOne) {
    [output writeMessage:21 value:self.rewardOne];
  }
  if (self.hasRewardTwo) {
    [output writeMessage:22 value:self.rewardTwo];
  }
  if (self.hasRewardThree) {
    [output writeMessage:23 value:self.rewardThree];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMiniJobId) {
    size_ += computeInt32Size(1, self.miniJobId);
  }
  if (self.hasRequiredStructId) {
    size_ += computeInt32Size(2, self.requiredStructId);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasCashReward) {
    size_ += computeInt32Size(4, self.cashReward);
  }
  if (self.hasOilReward) {
    size_ += computeInt32Size(5, self.oilReward);
  }
  if (self.hasGemReward) {
    size_ += computeInt32Size(6, self.gemReward);
  }
  if (self.hasMonsterIdReward) {
    size_ += computeInt32Size(7, self.monsterIdReward);
  }
  if (self.hasQuality) {
    size_ += computeEnumSize(8, self.quality);
  }
  if (self.hasMaxNumMonstersAllowed) {
    size_ += computeInt32Size(9, self.maxNumMonstersAllowed);
  }
  if (self.hasChanceToAppear) {
    size_ += computeFloatSize(10, self.chanceToAppear);
  }
  if (self.hasHpRequired) {
    size_ += computeInt32Size(11, self.hpRequired);
  }
  if (self.hasAtkRequired) {
    size_ += computeInt32Size(12, self.atkRequired);
  }
  if (self.hasMinDmgDealt) {
    size_ += computeInt32Size(13, self.minDmgDealt);
  }
  if (self.hasMaxDmgDealt) {
    size_ += computeInt32Size(14, self.maxDmgDealt);
  }
  if (self.hasDurationMinMinutes) {
    size_ += computeInt32Size(15, self.durationMinMinutes);
  }
  if (self.hasDurationMaxMinutes) {
    size_ += computeInt32Size(16, self.durationMaxMinutes);
  }
  if (self.hasItemIdReward) {
    size_ += computeInt32Size(17, self.itemIdReward);
  }
  if (self.hasItemRewardQuantity) {
    size_ += computeInt32Size(18, self.itemRewardQuantity);
  }
  if (self.hasSecondItemIdReward) {
    size_ += computeInt32Size(19, self.secondItemIdReward);
  }
  if (self.hasSecondItemRewardQuantity) {
    size_ += computeInt32Size(20, self.secondItemRewardQuantity);
  }
  if (self.hasRewardOne) {
    size_ += computeMessageSize(21, self.rewardOne);
  }
  if (self.hasRewardTwo) {
    size_ += computeMessageSize(22, self.rewardTwo);
  }
  if (self.hasRewardThree) {
    size_ += computeMessageSize(23, self.rewardThree);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MiniJobProto*) parseFromData:(NSData*) data {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromData:data] build];
}
+ (MiniJobProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniJobProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromInputStream:input] build];
}
+ (MiniJobProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniJobProto*)[[[MiniJobProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniJobProto_Builder*) builder {
  return [[MiniJobProto_Builder alloc] init];
}
+ (MiniJobProto_Builder*) builderWithPrototype:(MiniJobProto*) prototype {
  return [[MiniJobProto builder] mergeFrom:prototype];
}
- (MiniJobProto_Builder*) builder {
  return [MiniJobProto builder];
}
- (MiniJobProto_Builder*) toBuilder {
  return [MiniJobProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMiniJobId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniJobId", [NSNumber numberWithInteger:self.miniJobId]];
  }
  if (self.hasRequiredStructId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"requiredStructId", [NSNumber numberWithInteger:self.requiredStructId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasCashReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashReward", [NSNumber numberWithInteger:self.cashReward]];
  }
  if (self.hasOilReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oilReward", [NSNumber numberWithInteger:self.oilReward]];
  }
  if (self.hasGemReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gemReward", [NSNumber numberWithInteger:self.gemReward]];
  }
  if (self.hasMonsterIdReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterIdReward", [NSNumber numberWithInteger:self.monsterIdReward]];
  }
  if (self.hasQuality) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quality", [NSNumber numberWithInteger:self.quality]];
  }
  if (self.hasMaxNumMonstersAllowed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxNumMonstersAllowed", [NSNumber numberWithInteger:self.maxNumMonstersAllowed]];
  }
  if (self.hasChanceToAppear) {
    [output appendFormat:@"%@%@: %@\n", indent, @"chanceToAppear", [NSNumber numberWithFloat:self.chanceToAppear]];
  }
  if (self.hasHpRequired) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hpRequired", [NSNumber numberWithInteger:self.hpRequired]];
  }
  if (self.hasAtkRequired) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atkRequired", [NSNumber numberWithInteger:self.atkRequired]];
  }
  if (self.hasMinDmgDealt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minDmgDealt", [NSNumber numberWithInteger:self.minDmgDealt]];
  }
  if (self.hasMaxDmgDealt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxDmgDealt", [NSNumber numberWithInteger:self.maxDmgDealt]];
  }
  if (self.hasDurationMinMinutes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"durationMinMinutes", [NSNumber numberWithInteger:self.durationMinMinutes]];
  }
  if (self.hasDurationMaxMinutes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"durationMaxMinutes", [NSNumber numberWithInteger:self.durationMaxMinutes]];
  }
  if (self.hasItemIdReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemIdReward", [NSNumber numberWithInteger:self.itemIdReward]];
  }
  if (self.hasItemRewardQuantity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemRewardQuantity", [NSNumber numberWithInteger:self.itemRewardQuantity]];
  }
  if (self.hasSecondItemIdReward) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secondItemIdReward", [NSNumber numberWithInteger:self.secondItemIdReward]];
  }
  if (self.hasSecondItemRewardQuantity) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secondItemRewardQuantity", [NSNumber numberWithInteger:self.secondItemRewardQuantity]];
  }
  if (self.hasRewardOne) {
    [output appendFormat:@"%@%@ {\n", indent, @"rewardOne"];
    [self.rewardOne writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRewardTwo) {
    [output appendFormat:@"%@%@ {\n", indent, @"rewardTwo"];
    [self.rewardTwo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRewardThree) {
    [output appendFormat:@"%@%@ {\n", indent, @"rewardThree"];
    [self.rewardThree writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MiniJobProto class]]) {
    return NO;
  }
  MiniJobProto *otherMessage = other;
  return
      self.hasMiniJobId == otherMessage.hasMiniJobId &&
      (!self.hasMiniJobId || self.miniJobId == otherMessage.miniJobId) &&
      self.hasRequiredStructId == otherMessage.hasRequiredStructId &&
      (!self.hasRequiredStructId || self.requiredStructId == otherMessage.requiredStructId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasCashReward == otherMessage.hasCashReward &&
      (!self.hasCashReward || self.cashReward == otherMessage.cashReward) &&
      self.hasOilReward == otherMessage.hasOilReward &&
      (!self.hasOilReward || self.oilReward == otherMessage.oilReward) &&
      self.hasGemReward == otherMessage.hasGemReward &&
      (!self.hasGemReward || self.gemReward == otherMessage.gemReward) &&
      self.hasMonsterIdReward == otherMessage.hasMonsterIdReward &&
      (!self.hasMonsterIdReward || self.monsterIdReward == otherMessage.monsterIdReward) &&
      self.hasQuality == otherMessage.hasQuality &&
      (!self.hasQuality || self.quality == otherMessage.quality) &&
      self.hasMaxNumMonstersAllowed == otherMessage.hasMaxNumMonstersAllowed &&
      (!self.hasMaxNumMonstersAllowed || self.maxNumMonstersAllowed == otherMessage.maxNumMonstersAllowed) &&
      self.hasChanceToAppear == otherMessage.hasChanceToAppear &&
      (!self.hasChanceToAppear || self.chanceToAppear == otherMessage.chanceToAppear) &&
      self.hasHpRequired == otherMessage.hasHpRequired &&
      (!self.hasHpRequired || self.hpRequired == otherMessage.hpRequired) &&
      self.hasAtkRequired == otherMessage.hasAtkRequired &&
      (!self.hasAtkRequired || self.atkRequired == otherMessage.atkRequired) &&
      self.hasMinDmgDealt == otherMessage.hasMinDmgDealt &&
      (!self.hasMinDmgDealt || self.minDmgDealt == otherMessage.minDmgDealt) &&
      self.hasMaxDmgDealt == otherMessage.hasMaxDmgDealt &&
      (!self.hasMaxDmgDealt || self.maxDmgDealt == otherMessage.maxDmgDealt) &&
      self.hasDurationMinMinutes == otherMessage.hasDurationMinMinutes &&
      (!self.hasDurationMinMinutes || self.durationMinMinutes == otherMessage.durationMinMinutes) &&
      self.hasDurationMaxMinutes == otherMessage.hasDurationMaxMinutes &&
      (!self.hasDurationMaxMinutes || self.durationMaxMinutes == otherMessage.durationMaxMinutes) &&
      self.hasItemIdReward == otherMessage.hasItemIdReward &&
      (!self.hasItemIdReward || self.itemIdReward == otherMessage.itemIdReward) &&
      self.hasItemRewardQuantity == otherMessage.hasItemRewardQuantity &&
      (!self.hasItemRewardQuantity || self.itemRewardQuantity == otherMessage.itemRewardQuantity) &&
      self.hasSecondItemIdReward == otherMessage.hasSecondItemIdReward &&
      (!self.hasSecondItemIdReward || self.secondItemIdReward == otherMessage.secondItemIdReward) &&
      self.hasSecondItemRewardQuantity == otherMessage.hasSecondItemRewardQuantity &&
      (!self.hasSecondItemRewardQuantity || self.secondItemRewardQuantity == otherMessage.secondItemRewardQuantity) &&
      self.hasRewardOne == otherMessage.hasRewardOne &&
      (!self.hasRewardOne || [self.rewardOne isEqual:otherMessage.rewardOne]) &&
      self.hasRewardTwo == otherMessage.hasRewardTwo &&
      (!self.hasRewardTwo || [self.rewardTwo isEqual:otherMessage.rewardTwo]) &&
      self.hasRewardThree == otherMessage.hasRewardThree &&
      (!self.hasRewardThree || [self.rewardThree isEqual:otherMessage.rewardThree]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMiniJobId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniJobId] hash];
  }
  if (self.hasRequiredStructId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.requiredStructId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasCashReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashReward] hash];
  }
  if (self.hasOilReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oilReward] hash];
  }
  if (self.hasGemReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gemReward] hash];
  }
  if (self.hasMonsterIdReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterIdReward] hash];
  }
  if (self.hasQuality) {
    hashCode = hashCode * 31 + self.quality;
  }
  if (self.hasMaxNumMonstersAllowed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxNumMonstersAllowed] hash];
  }
  if (self.hasChanceToAppear) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.chanceToAppear] hash];
  }
  if (self.hasHpRequired) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.hpRequired] hash];
  }
  if (self.hasAtkRequired) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.atkRequired] hash];
  }
  if (self.hasMinDmgDealt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.minDmgDealt] hash];
  }
  if (self.hasMaxDmgDealt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxDmgDealt] hash];
  }
  if (self.hasDurationMinMinutes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.durationMinMinutes] hash];
  }
  if (self.hasDurationMaxMinutes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.durationMaxMinutes] hash];
  }
  if (self.hasItemIdReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemIdReward] hash];
  }
  if (self.hasItemRewardQuantity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemRewardQuantity] hash];
  }
  if (self.hasSecondItemIdReward) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.secondItemIdReward] hash];
  }
  if (self.hasSecondItemRewardQuantity) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.secondItemRewardQuantity] hash];
  }
  if (self.hasRewardOne) {
    hashCode = hashCode * 31 + [self.rewardOne hash];
  }
  if (self.hasRewardTwo) {
    hashCode = hashCode * 31 + [self.rewardTwo hash];
  }
  if (self.hasRewardThree) {
    hashCode = hashCode * 31 + [self.rewardThree hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MiniJobProto_Builder()
@property (strong) MiniJobProto* result;
@end

@implementation MiniJobProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MiniJobProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniJobProto_Builder*) clear {
  self.result = [[MiniJobProto alloc] init];
  return self;
}
- (MiniJobProto_Builder*) clone {
  return [MiniJobProto builderWithPrototype:result];
}
- (MiniJobProto*) defaultInstance {
  return [MiniJobProto defaultInstance];
}
- (MiniJobProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniJobProto*) buildPartial {
  MiniJobProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MiniJobProto_Builder*) mergeFrom:(MiniJobProto*) other {
  if (other == [MiniJobProto defaultInstance]) {
    return self;
  }
  if (other.hasMiniJobId) {
    [self setMiniJobId:other.miniJobId];
  }
  if (other.hasRequiredStructId) {
    [self setRequiredStructId:other.requiredStructId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasCashReward) {
    [self setCashReward:other.cashReward];
  }
  if (other.hasOilReward) {
    [self setOilReward:other.oilReward];
  }
  if (other.hasGemReward) {
    [self setGemReward:other.gemReward];
  }
  if (other.hasMonsterIdReward) {
    [self setMonsterIdReward:other.monsterIdReward];
  }
  if (other.hasItemIdReward) {
    [self setItemIdReward:other.itemIdReward];
  }
  if (other.hasItemRewardQuantity) {
    [self setItemRewardQuantity:other.itemRewardQuantity];
  }
  if (other.hasSecondItemIdReward) {
    [self setSecondItemIdReward:other.secondItemIdReward];
  }
  if (other.hasSecondItemRewardQuantity) {
    [self setSecondItemRewardQuantity:other.secondItemRewardQuantity];
  }
  if (other.hasQuality) {
    [self setQuality:other.quality];
  }
  if (other.hasMaxNumMonstersAllowed) {
    [self setMaxNumMonstersAllowed:other.maxNumMonstersAllowed];
  }
  if (other.hasChanceToAppear) {
    [self setChanceToAppear:other.chanceToAppear];
  }
  if (other.hasHpRequired) {
    [self setHpRequired:other.hpRequired];
  }
  if (other.hasAtkRequired) {
    [self setAtkRequired:other.atkRequired];
  }
  if (other.hasMinDmgDealt) {
    [self setMinDmgDealt:other.minDmgDealt];
  }
  if (other.hasMaxDmgDealt) {
    [self setMaxDmgDealt:other.maxDmgDealt];
  }
  if (other.hasDurationMinMinutes) {
    [self setDurationMinMinutes:other.durationMinMinutes];
  }
  if (other.hasDurationMaxMinutes) {
    [self setDurationMaxMinutes:other.durationMaxMinutes];
  }
  if (other.hasRewardOne) {
    [self mergeRewardOne:other.rewardOne];
  }
  if (other.hasRewardTwo) {
    [self mergeRewardTwo:other.rewardTwo];
  }
  if (other.hasRewardThree) {
    [self mergeRewardThree:other.rewardThree];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMiniJobId:[input readInt32]];
        break;
      }
      case 16: {
        [self setRequiredStructId:[input readInt32]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 32: {
        [self setCashReward:[input readInt32]];
        break;
      }
      case 40: {
        [self setOilReward:[input readInt32]];
        break;
      }
      case 48: {
        [self setGemReward:[input readInt32]];
        break;
      }
      case 56: {
        [self setMonsterIdReward:[input readInt32]];
        break;
      }
      case 64: {
        Quality value = (Quality)[input readEnum];
        if (QualityIsValidValue(value)) {
          [self setQuality:value];
        } else {
          [unknownFields mergeVarintField:8 value:value];
        }
        break;
      }
      case 72: {
        [self setMaxNumMonstersAllowed:[input readInt32]];
        break;
      }
      case 85: {
        [self setChanceToAppear:[input readFloat]];
        break;
      }
      case 88: {
        [self setHpRequired:[input readInt32]];
        break;
      }
      case 96: {
        [self setAtkRequired:[input readInt32]];
        break;
      }
      case 104: {
        [self setMinDmgDealt:[input readInt32]];
        break;
      }
      case 112: {
        [self setMaxDmgDealt:[input readInt32]];
        break;
      }
      case 120: {
        [self setDurationMinMinutes:[input readInt32]];
        break;
      }
      case 128: {
        [self setDurationMaxMinutes:[input readInt32]];
        break;
      }
      case 136: {
        [self setItemIdReward:[input readInt32]];
        break;
      }
      case 144: {
        [self setItemRewardQuantity:[input readInt32]];
        break;
      }
      case 152: {
        [self setSecondItemIdReward:[input readInt32]];
        break;
      }
      case 160: {
        [self setSecondItemRewardQuantity:[input readInt32]];
        break;
      }
      case 170: {
        RewardProto_Builder* subBuilder = [RewardProto builder];
        if (self.hasRewardOne) {
          [subBuilder mergeFrom:self.rewardOne];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRewardOne:[subBuilder buildPartial]];
        break;
      }
      case 178: {
        RewardProto_Builder* subBuilder = [RewardProto builder];
        if (self.hasRewardTwo) {
          [subBuilder mergeFrom:self.rewardTwo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRewardTwo:[subBuilder buildPartial]];
        break;
      }
      case 186: {
        RewardProto_Builder* subBuilder = [RewardProto builder];
        if (self.hasRewardThree) {
          [subBuilder mergeFrom:self.rewardThree];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRewardThree:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMiniJobId {
  return result.hasMiniJobId;
}
- (int32_t) miniJobId {
  return result.miniJobId;
}
- (MiniJobProto_Builder*) setMiniJobId:(int32_t) value {
  result.hasMiniJobId = YES;
  result.miniJobId = value;
  return self;
}
- (MiniJobProto_Builder*) clearMiniJobId {
  result.hasMiniJobId = NO;
  result.miniJobId = 0;
  return self;
}
- (BOOL) hasRequiredStructId {
  return result.hasRequiredStructId;
}
- (int32_t) requiredStructId {
  return result.requiredStructId;
}
- (MiniJobProto_Builder*) setRequiredStructId:(int32_t) value {
  result.hasRequiredStructId = YES;
  result.requiredStructId = value;
  return self;
}
- (MiniJobProto_Builder*) clearRequiredStructId {
  result.hasRequiredStructId = NO;
  result.requiredStructId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MiniJobProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MiniJobProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasCashReward {
  return result.hasCashReward;
}
- (int32_t) cashReward {
  return result.cashReward;
}
- (MiniJobProto_Builder*) setCashReward:(int32_t) value {
  result.hasCashReward = YES;
  result.cashReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearCashReward {
  result.hasCashReward = NO;
  result.cashReward = 0;
  return self;
}
- (BOOL) hasOilReward {
  return result.hasOilReward;
}
- (int32_t) oilReward {
  return result.oilReward;
}
- (MiniJobProto_Builder*) setOilReward:(int32_t) value {
  result.hasOilReward = YES;
  result.oilReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearOilReward {
  result.hasOilReward = NO;
  result.oilReward = 0;
  return self;
}
- (BOOL) hasGemReward {
  return result.hasGemReward;
}
- (int32_t) gemReward {
  return result.gemReward;
}
- (MiniJobProto_Builder*) setGemReward:(int32_t) value {
  result.hasGemReward = YES;
  result.gemReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearGemReward {
  result.hasGemReward = NO;
  result.gemReward = 0;
  return self;
}
- (BOOL) hasMonsterIdReward {
  return result.hasMonsterIdReward;
}
- (int32_t) monsterIdReward {
  return result.monsterIdReward;
}
- (MiniJobProto_Builder*) setMonsterIdReward:(int32_t) value {
  result.hasMonsterIdReward = YES;
  result.monsterIdReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearMonsterIdReward {
  result.hasMonsterIdReward = NO;
  result.monsterIdReward = 0;
  return self;
}
- (BOOL) hasItemIdReward {
  return result.hasItemIdReward;
}
- (int32_t) itemIdReward {
  return result.itemIdReward;
}
- (MiniJobProto_Builder*) setItemIdReward:(int32_t) value {
  result.hasItemIdReward = YES;
  result.itemIdReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearItemIdReward {
  result.hasItemIdReward = NO;
  result.itemIdReward = 0;
  return self;
}
- (BOOL) hasItemRewardQuantity {
  return result.hasItemRewardQuantity;
}
- (int32_t) itemRewardQuantity {
  return result.itemRewardQuantity;
}
- (MiniJobProto_Builder*) setItemRewardQuantity:(int32_t) value {
  result.hasItemRewardQuantity = YES;
  result.itemRewardQuantity = value;
  return self;
}
- (MiniJobProto_Builder*) clearItemRewardQuantity {
  result.hasItemRewardQuantity = NO;
  result.itemRewardQuantity = 0;
  return self;
}
- (BOOL) hasSecondItemIdReward {
  return result.hasSecondItemIdReward;
}
- (int32_t) secondItemIdReward {
  return result.secondItemIdReward;
}
- (MiniJobProto_Builder*) setSecondItemIdReward:(int32_t) value {
  result.hasSecondItemIdReward = YES;
  result.secondItemIdReward = value;
  return self;
}
- (MiniJobProto_Builder*) clearSecondItemIdReward {
  result.hasSecondItemIdReward = NO;
  result.secondItemIdReward = 0;
  return self;
}
- (BOOL) hasSecondItemRewardQuantity {
  return result.hasSecondItemRewardQuantity;
}
- (int32_t) secondItemRewardQuantity {
  return result.secondItemRewardQuantity;
}
- (MiniJobProto_Builder*) setSecondItemRewardQuantity:(int32_t) value {
  result.hasSecondItemRewardQuantity = YES;
  result.secondItemRewardQuantity = value;
  return self;
}
- (MiniJobProto_Builder*) clearSecondItemRewardQuantity {
  result.hasSecondItemRewardQuantity = NO;
  result.secondItemRewardQuantity = 0;
  return self;
}
- (BOOL) hasQuality {
  return result.hasQuality;
}
- (Quality) quality {
  return result.quality;
}
- (MiniJobProto_Builder*) setQuality:(Quality) value {
  result.hasQuality = YES;
  result.quality = value;
  return self;
}
- (MiniJobProto_Builder*) clearQualityList {
  result.hasQuality = NO;
  result.quality = QualityNoQuality;
  return self;
}
- (BOOL) hasMaxNumMonstersAllowed {
  return result.hasMaxNumMonstersAllowed;
}
- (int32_t) maxNumMonstersAllowed {
  return result.maxNumMonstersAllowed;
}
- (MiniJobProto_Builder*) setMaxNumMonstersAllowed:(int32_t) value {
  result.hasMaxNumMonstersAllowed = YES;
  result.maxNumMonstersAllowed = value;
  return self;
}
- (MiniJobProto_Builder*) clearMaxNumMonstersAllowed {
  result.hasMaxNumMonstersAllowed = NO;
  result.maxNumMonstersAllowed = 0;
  return self;
}
- (BOOL) hasChanceToAppear {
  return result.hasChanceToAppear;
}
- (Float32) chanceToAppear {
  return result.chanceToAppear;
}
- (MiniJobProto_Builder*) setChanceToAppear:(Float32) value {
  result.hasChanceToAppear = YES;
  result.chanceToAppear = value;
  return self;
}
- (MiniJobProto_Builder*) clearChanceToAppear {
  result.hasChanceToAppear = NO;
  result.chanceToAppear = 0;
  return self;
}
- (BOOL) hasHpRequired {
  return result.hasHpRequired;
}
- (int32_t) hpRequired {
  return result.hpRequired;
}
- (MiniJobProto_Builder*) setHpRequired:(int32_t) value {
  result.hasHpRequired = YES;
  result.hpRequired = value;
  return self;
}
- (MiniJobProto_Builder*) clearHpRequired {
  result.hasHpRequired = NO;
  result.hpRequired = 0;
  return self;
}
- (BOOL) hasAtkRequired {
  return result.hasAtkRequired;
}
- (int32_t) atkRequired {
  return result.atkRequired;
}
- (MiniJobProto_Builder*) setAtkRequired:(int32_t) value {
  result.hasAtkRequired = YES;
  result.atkRequired = value;
  return self;
}
- (MiniJobProto_Builder*) clearAtkRequired {
  result.hasAtkRequired = NO;
  result.atkRequired = 0;
  return self;
}
- (BOOL) hasMinDmgDealt {
  return result.hasMinDmgDealt;
}
- (int32_t) minDmgDealt {
  return result.minDmgDealt;
}
- (MiniJobProto_Builder*) setMinDmgDealt:(int32_t) value {
  result.hasMinDmgDealt = YES;
  result.minDmgDealt = value;
  return self;
}
- (MiniJobProto_Builder*) clearMinDmgDealt {
  result.hasMinDmgDealt = NO;
  result.minDmgDealt = 0;
  return self;
}
- (BOOL) hasMaxDmgDealt {
  return result.hasMaxDmgDealt;
}
- (int32_t) maxDmgDealt {
  return result.maxDmgDealt;
}
- (MiniJobProto_Builder*) setMaxDmgDealt:(int32_t) value {
  result.hasMaxDmgDealt = YES;
  result.maxDmgDealt = value;
  return self;
}
- (MiniJobProto_Builder*) clearMaxDmgDealt {
  result.hasMaxDmgDealt = NO;
  result.maxDmgDealt = 0;
  return self;
}
- (BOOL) hasDurationMinMinutes {
  return result.hasDurationMinMinutes;
}
- (int32_t) durationMinMinutes {
  return result.durationMinMinutes;
}
- (MiniJobProto_Builder*) setDurationMinMinutes:(int32_t) value {
  result.hasDurationMinMinutes = YES;
  result.durationMinMinutes = value;
  return self;
}
- (MiniJobProto_Builder*) clearDurationMinMinutes {
  result.hasDurationMinMinutes = NO;
  result.durationMinMinutes = 0;
  return self;
}
- (BOOL) hasDurationMaxMinutes {
  return result.hasDurationMaxMinutes;
}
- (int32_t) durationMaxMinutes {
  return result.durationMaxMinutes;
}
- (MiniJobProto_Builder*) setDurationMaxMinutes:(int32_t) value {
  result.hasDurationMaxMinutes = YES;
  result.durationMaxMinutes = value;
  return self;
}
- (MiniJobProto_Builder*) clearDurationMaxMinutes {
  result.hasDurationMaxMinutes = NO;
  result.durationMaxMinutes = 0;
  return self;
}
- (BOOL) hasRewardOne {
  return result.hasRewardOne;
}
- (RewardProto*) rewardOne {
  return result.rewardOne;
}
- (MiniJobProto_Builder*) setRewardOne:(RewardProto*) value {
  result.hasRewardOne = YES;
  result.rewardOne = value;
  return self;
}
- (MiniJobProto_Builder*) setRewardOne_Builder:(RewardProto_Builder*) builderForValue {
  return [self setRewardOne:[builderForValue build]];
}
- (MiniJobProto_Builder*) mergeRewardOne:(RewardProto*) value {
  if (result.hasRewardOne &&
      result.rewardOne != [RewardProto defaultInstance]) {
    result.rewardOne =
      [[[RewardProto builderWithPrototype:result.rewardOne] mergeFrom:value] buildPartial];
  } else {
    result.rewardOne = value;
  }
  result.hasRewardOne = YES;
  return self;
}
- (MiniJobProto_Builder*) clearRewardOne {
  result.hasRewardOne = NO;
  result.rewardOne = [RewardProto defaultInstance];
  return self;
}
- (BOOL) hasRewardTwo {
  return result.hasRewardTwo;
}
- (RewardProto*) rewardTwo {
  return result.rewardTwo;
}
- (MiniJobProto_Builder*) setRewardTwo:(RewardProto*) value {
  result.hasRewardTwo = YES;
  result.rewardTwo = value;
  return self;
}
- (MiniJobProto_Builder*) setRewardTwo_Builder:(RewardProto_Builder*) builderForValue {
  return [self setRewardTwo:[builderForValue build]];
}
- (MiniJobProto_Builder*) mergeRewardTwo:(RewardProto*) value {
  if (result.hasRewardTwo &&
      result.rewardTwo != [RewardProto defaultInstance]) {
    result.rewardTwo =
      [[[RewardProto builderWithPrototype:result.rewardTwo] mergeFrom:value] buildPartial];
  } else {
    result.rewardTwo = value;
  }
  result.hasRewardTwo = YES;
  return self;
}
- (MiniJobProto_Builder*) clearRewardTwo {
  result.hasRewardTwo = NO;
  result.rewardTwo = [RewardProto defaultInstance];
  return self;
}
- (BOOL) hasRewardThree {
  return result.hasRewardThree;
}
- (RewardProto*) rewardThree {
  return result.rewardThree;
}
- (MiniJobProto_Builder*) setRewardThree:(RewardProto*) value {
  result.hasRewardThree = YES;
  result.rewardThree = value;
  return self;
}
- (MiniJobProto_Builder*) setRewardThree_Builder:(RewardProto_Builder*) builderForValue {
  return [self setRewardThree:[builderForValue build]];
}
- (MiniJobProto_Builder*) mergeRewardThree:(RewardProto*) value {
  if (result.hasRewardThree &&
      result.rewardThree != [RewardProto defaultInstance]) {
    result.rewardThree =
      [[[RewardProto builderWithPrototype:result.rewardThree] mergeFrom:value] buildPartial];
  } else {
    result.rewardThree = value;
  }
  result.hasRewardThree = YES;
  return self;
}
- (MiniJobProto_Builder*) clearRewardThree {
  result.hasRewardThree = NO;
  result.rewardThree = [RewardProto defaultInstance];
  return self;
}
@end

@interface UserMiniJobProto ()
@property (strong) NSString* userMiniJobUuid;
@property int32_t baseDmgReceived;
@property int64_t timeStarted;
@property (strong) NSMutableArray * mutableUserMonsterUuidsList;
@property int64_t timeCompleted;
@property int32_t durationMinutes;
@property (strong) MiniJobProto* miniJob;
@property int32_t durationSeconds;
@end

@implementation UserMiniJobProto

- (BOOL) hasUserMiniJobUuid {
  return !!hasUserMiniJobUuid_;
}
- (void) setHasUserMiniJobUuid:(BOOL) value_ {
  hasUserMiniJobUuid_ = !!value_;
}
@synthesize userMiniJobUuid;
- (BOOL) hasBaseDmgReceived {
  return !!hasBaseDmgReceived_;
}
- (void) setHasBaseDmgReceived:(BOOL) value_ {
  hasBaseDmgReceived_ = !!value_;
}
@synthesize baseDmgReceived;
- (BOOL) hasTimeStarted {
  return !!hasTimeStarted_;
}
- (void) setHasTimeStarted:(BOOL) value_ {
  hasTimeStarted_ = !!value_;
}
@synthesize timeStarted;
@synthesize mutableUserMonsterUuidsList;
@dynamic userMonsterUuidsList;
- (BOOL) hasTimeCompleted {
  return !!hasTimeCompleted_;
}
- (void) setHasTimeCompleted:(BOOL) value_ {
  hasTimeCompleted_ = !!value_;
}
@synthesize timeCompleted;
- (BOOL) hasDurationMinutes {
  return !!hasDurationMinutes_;
}
- (void) setHasDurationMinutes:(BOOL) value_ {
  hasDurationMinutes_ = !!value_;
}
@synthesize durationMinutes;
- (BOOL) hasMiniJob {
  return !!hasMiniJob_;
}
- (void) setHasMiniJob:(BOOL) value_ {
  hasMiniJob_ = !!value_;
}
@synthesize miniJob;
- (BOOL) hasDurationSeconds {
  return !!hasDurationSeconds_;
}
- (void) setHasDurationSeconds:(BOOL) value_ {
  hasDurationSeconds_ = !!value_;
}
@synthesize durationSeconds;
- (id) init {
  if ((self = [super init])) {
    self.userMiniJobUuid = @"";
    self.baseDmgReceived = 0;
    self.timeStarted = 0L;
    self.timeCompleted = 0L;
    self.durationMinutes = 0;
    self.miniJob = [MiniJobProto defaultInstance];
    self.durationSeconds = 0;
  }
  return self;
}
static UserMiniJobProto* defaultUserMiniJobProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMiniJobProto class]) {
    defaultUserMiniJobProtoInstance = [[UserMiniJobProto alloc] init];
  }
}
+ (UserMiniJobProto*) defaultInstance {
  return defaultUserMiniJobProtoInstance;
}
- (UserMiniJobProto*) defaultInstance {
  return defaultUserMiniJobProtoInstance;
}
- (NSArray *)userMonsterUuidsList {
  return mutableUserMonsterUuidsList;
}
- (NSString*)userMonsterUuidsAtIndex:(NSUInteger)index {
  return [mutableUserMonsterUuidsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMiniJobUuid) {
    [output writeString:1 value:self.userMiniJobUuid];
  }
  if (self.hasBaseDmgReceived) {
    [output writeInt32:2 value:self.baseDmgReceived];
  }
  if (self.hasTimeStarted) {
    [output writeInt64:3 value:self.timeStarted];
  }
  [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  if (self.hasTimeCompleted) {
    [output writeInt64:5 value:self.timeCompleted];
  }
  if (self.hasMiniJob) {
    [output writeMessage:6 value:self.miniJob];
  }
  if (self.hasDurationMinutes) {
    [output writeInt32:7 value:self.durationMinutes];
  }
  if (self.hasDurationSeconds) {
    [output writeInt32:8 value:self.durationSeconds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMiniJobUuid) {
    size_ += computeStringSize(1, self.userMiniJobUuid);
  }
  if (self.hasBaseDmgReceived) {
    size_ += computeInt32Size(2, self.baseDmgReceived);
  }
  if (self.hasTimeStarted) {
    size_ += computeInt64Size(3, self.timeStarted);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userMonsterUuidsList.count;
    [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasTimeCompleted) {
    size_ += computeInt64Size(5, self.timeCompleted);
  }
  if (self.hasMiniJob) {
    size_ += computeMessageSize(6, self.miniJob);
  }
  if (self.hasDurationMinutes) {
    size_ += computeInt32Size(7, self.durationMinutes);
  }
  if (self.hasDurationSeconds) {
    size_ += computeInt32Size(8, self.durationSeconds);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMiniJobProto*) parseFromData:(NSData*) data {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromData:data] build];
}
+ (UserMiniJobProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMiniJobProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromInputStream:input] build];
}
+ (UserMiniJobProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMiniJobProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniJobProto*)[[[UserMiniJobProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniJobProto_Builder*) builder {
  return [[UserMiniJobProto_Builder alloc] init];
}
+ (UserMiniJobProto_Builder*) builderWithPrototype:(UserMiniJobProto*) prototype {
  return [[UserMiniJobProto builder] mergeFrom:prototype];
}
- (UserMiniJobProto_Builder*) builder {
  return [UserMiniJobProto builder];
}
- (UserMiniJobProto_Builder*) toBuilder {
  return [UserMiniJobProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMiniJobUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMiniJobUuid", self.userMiniJobUuid];
  }
  if (self.hasBaseDmgReceived) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseDmgReceived", [NSNumber numberWithInteger:self.baseDmgReceived]];
  }
  if (self.hasTimeStarted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeStarted", [NSNumber numberWithLongLong:self.timeStarted]];
  }
  [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuids", obj];
  }];
  if (self.hasTimeCompleted) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeCompleted", [NSNumber numberWithLongLong:self.timeCompleted]];
  }
  if (self.hasMiniJob) {
    [output appendFormat:@"%@%@ {\n", indent, @"miniJob"];
    [self.miniJob writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDurationMinutes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"durationMinutes", [NSNumber numberWithInteger:self.durationMinutes]];
  }
  if (self.hasDurationSeconds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"durationSeconds", [NSNumber numberWithInteger:self.durationSeconds]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMiniJobProto class]]) {
    return NO;
  }
  UserMiniJobProto *otherMessage = other;
  return
      self.hasUserMiniJobUuid == otherMessage.hasUserMiniJobUuid &&
      (!self.hasUserMiniJobUuid || [self.userMiniJobUuid isEqual:otherMessage.userMiniJobUuid]) &&
      self.hasBaseDmgReceived == otherMessage.hasBaseDmgReceived &&
      (!self.hasBaseDmgReceived || self.baseDmgReceived == otherMessage.baseDmgReceived) &&
      self.hasTimeStarted == otherMessage.hasTimeStarted &&
      (!self.hasTimeStarted || self.timeStarted == otherMessage.timeStarted) &&
      [self.userMonsterUuidsList isEqualToArray:otherMessage.userMonsterUuidsList] &&
      self.hasTimeCompleted == otherMessage.hasTimeCompleted &&
      (!self.hasTimeCompleted || self.timeCompleted == otherMessage.timeCompleted) &&
      self.hasMiniJob == otherMessage.hasMiniJob &&
      (!self.hasMiniJob || [self.miniJob isEqual:otherMessage.miniJob]) &&
      self.hasDurationMinutes == otherMessage.hasDurationMinutes &&
      (!self.hasDurationMinutes || self.durationMinutes == otherMessage.durationMinutes) &&
      self.hasDurationSeconds == otherMessage.hasDurationSeconds &&
      (!self.hasDurationSeconds || self.durationSeconds == otherMessage.durationSeconds) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMiniJobUuid) {
    hashCode = hashCode * 31 + [self.userMiniJobUuid hash];
  }
  if (self.hasBaseDmgReceived) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.baseDmgReceived] hash];
  }
  if (self.hasTimeStarted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeStarted] hash];
  }
  [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTimeCompleted) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeCompleted] hash];
  }
  if (self.hasMiniJob) {
    hashCode = hashCode * 31 + [self.miniJob hash];
  }
  if (self.hasDurationMinutes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.durationMinutes] hash];
  }
  if (self.hasDurationSeconds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.durationSeconds] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMiniJobProto_Builder()
@property (strong) UserMiniJobProto* result;
@end

@implementation UserMiniJobProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMiniJobProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMiniJobProto_Builder*) clear {
  self.result = [[UserMiniJobProto alloc] init];
  return self;
}
- (UserMiniJobProto_Builder*) clone {
  return [UserMiniJobProto builderWithPrototype:result];
}
- (UserMiniJobProto*) defaultInstance {
  return [UserMiniJobProto defaultInstance];
}
- (UserMiniJobProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMiniJobProto*) buildPartial {
  UserMiniJobProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMiniJobProto_Builder*) mergeFrom:(UserMiniJobProto*) other {
  if (other == [UserMiniJobProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMiniJobUuid) {
    [self setUserMiniJobUuid:other.userMiniJobUuid];
  }
  if (other.hasBaseDmgReceived) {
    [self setBaseDmgReceived:other.baseDmgReceived];
  }
  if (other.hasTimeStarted) {
    [self setTimeStarted:other.timeStarted];
  }
  if (other.mutableUserMonsterUuidsList.count > 0) {
    if (result.mutableUserMonsterUuidsList == nil) {
      result.mutableUserMonsterUuidsList = [[NSMutableArray alloc] initWithArray:other.mutableUserMonsterUuidsList];
    } else {
      [result.mutableUserMonsterUuidsList addObjectsFromArray:other.mutableUserMonsterUuidsList];
    }
  }
  if (other.hasTimeCompleted) {
    [self setTimeCompleted:other.timeCompleted];
  }
  if (other.hasDurationMinutes) {
    [self setDurationMinutes:other.durationMinutes];
  }
  if (other.hasMiniJob) {
    [self mergeMiniJob:other.miniJob];
  }
  if (other.hasDurationSeconds) {
    [self setDurationSeconds:other.durationSeconds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMiniJobProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMiniJobUuid:[input readString]];
        break;
      }
      case 16: {
        [self setBaseDmgReceived:[input readInt32]];
        break;
      }
      case 24: {
        [self setTimeStarted:[input readInt64]];
        break;
      }
      case 34: {
        [self addUserMonsterUuids:[input readString]];
        break;
      }
      case 40: {
        [self setTimeCompleted:[input readInt64]];
        break;
      }
      case 50: {
        MiniJobProto_Builder* subBuilder = [MiniJobProto builder];
        if (self.hasMiniJob) {
          [subBuilder mergeFrom:self.miniJob];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMiniJob:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setDurationMinutes:[input readInt32]];
        break;
      }
      case 64: {
        [self setDurationSeconds:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMiniJobUuid {
  return result.hasUserMiniJobUuid;
}
- (NSString*) userMiniJobUuid {
  return result.userMiniJobUuid;
}
- (UserMiniJobProto_Builder*) setUserMiniJobUuid:(NSString*) value {
  result.hasUserMiniJobUuid = YES;
  result.userMiniJobUuid = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearUserMiniJobUuid {
  result.hasUserMiniJobUuid = NO;
  result.userMiniJobUuid = @"";
  return self;
}
- (BOOL) hasBaseDmgReceived {
  return result.hasBaseDmgReceived;
}
- (int32_t) baseDmgReceived {
  return result.baseDmgReceived;
}
- (UserMiniJobProto_Builder*) setBaseDmgReceived:(int32_t) value {
  result.hasBaseDmgReceived = YES;
  result.baseDmgReceived = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearBaseDmgReceived {
  result.hasBaseDmgReceived = NO;
  result.baseDmgReceived = 0;
  return self;
}
- (BOOL) hasTimeStarted {
  return result.hasTimeStarted;
}
- (int64_t) timeStarted {
  return result.timeStarted;
}
- (UserMiniJobProto_Builder*) setTimeStarted:(int64_t) value {
  result.hasTimeStarted = YES;
  result.timeStarted = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearTimeStarted {
  result.hasTimeStarted = NO;
  result.timeStarted = 0L;
  return self;
}
- (NSMutableArray *)userMonsterUuidsList {
  return result.mutableUserMonsterUuidsList;
}
- (NSString*)userMonsterUuidsAtIndex:(NSUInteger)index {
  return [result userMonsterUuidsAtIndex:index];
}
- (UserMiniJobProto_Builder *)addUserMonsterUuids:(NSString*)value {
  if (result.mutableUserMonsterUuidsList == nil) {
    result.mutableUserMonsterUuidsList = [[NSMutableArray alloc]init];
  }
  [result.mutableUserMonsterUuidsList addObject:value];
  return self;
}
- (UserMiniJobProto_Builder *)addAllUserMonsterUuids:(NSArray *)array {
  if (result.mutableUserMonsterUuidsList == nil) {
    result.mutableUserMonsterUuidsList = [NSMutableArray array];
  }
  [result.mutableUserMonsterUuidsList addObjectsFromArray:array];
  return self;
}
- (UserMiniJobProto_Builder *)clearUserMonsterUuids {
  result.mutableUserMonsterUuidsList = nil;
  return self;
}
- (BOOL) hasTimeCompleted {
  return result.hasTimeCompleted;
}
- (int64_t) timeCompleted {
  return result.timeCompleted;
}
- (UserMiniJobProto_Builder*) setTimeCompleted:(int64_t) value {
  result.hasTimeCompleted = YES;
  result.timeCompleted = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearTimeCompleted {
  result.hasTimeCompleted = NO;
  result.timeCompleted = 0L;
  return self;
}
- (BOOL) hasDurationMinutes {
  return result.hasDurationMinutes;
}
- (int32_t) durationMinutes {
  return result.durationMinutes;
}
- (UserMiniJobProto_Builder*) setDurationMinutes:(int32_t) value {
  result.hasDurationMinutes = YES;
  result.durationMinutes = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearDurationMinutes {
  result.hasDurationMinutes = NO;
  result.durationMinutes = 0;
  return self;
}
- (BOOL) hasMiniJob {
  return result.hasMiniJob;
}
- (MiniJobProto*) miniJob {
  return result.miniJob;
}
- (UserMiniJobProto_Builder*) setMiniJob:(MiniJobProto*) value {
  result.hasMiniJob = YES;
  result.miniJob = value;
  return self;
}
- (UserMiniJobProto_Builder*) setMiniJob_Builder:(MiniJobProto_Builder*) builderForValue {
  return [self setMiniJob:[builderForValue build]];
}
- (UserMiniJobProto_Builder*) mergeMiniJob:(MiniJobProto*) value {
  if (result.hasMiniJob &&
      result.miniJob != [MiniJobProto defaultInstance]) {
    result.miniJob =
      [[[MiniJobProto builderWithPrototype:result.miniJob] mergeFrom:value] buildPartial];
  } else {
    result.miniJob = value;
  }
  result.hasMiniJob = YES;
  return self;
}
- (UserMiniJobProto_Builder*) clearMiniJob {
  result.hasMiniJob = NO;
  result.miniJob = [MiniJobProto defaultInstance];
  return self;
}
- (BOOL) hasDurationSeconds {
  return result.hasDurationSeconds;
}
- (int32_t) durationSeconds {
  return result.durationSeconds;
}
- (UserMiniJobProto_Builder*) setDurationSeconds:(int32_t) value {
  result.hasDurationSeconds = YES;
  result.durationSeconds = value;
  return self;
}
- (UserMiniJobProto_Builder*) clearDurationSeconds {
  result.hasDurationSeconds = NO;
  result.durationSeconds = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
