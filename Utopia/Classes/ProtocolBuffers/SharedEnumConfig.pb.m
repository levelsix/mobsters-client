// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "SharedEnumConfig.pb.h"
// @@protoc_insertion_point(imports)

@implementation SharedEnumConfigRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SharedEnumConfigRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL DayOfWeekIsValidValue(DayOfWeek value) {
  switch (value) {
    case DayOfWeekSunday:
    case DayOfWeekMonday:
    case DayOfWeekTuesday:
    case DayOfWeekWednesday:
    case DayOfWeekThursday:
    case DayOfWeekFriday:
    case DayOfWeekSaturday:
    case DayOfWeekNoDayOfWeek:
      return YES;
    default:
      return NO;
  }
}
BOOL ElementIsValidValue(Element value) {
  switch (value) {
    case ElementFire:
    case ElementEarth:
    case ElementWater:
    case ElementLight:
    case ElementDark:
    case ElementRock:
    case ElementNoElement:
      return YES;
    default:
      return NO;
  }
}
BOOL QualityIsValidValue(Quality value) {
  switch (value) {
    case QualityNoQuality:
    case QualityCommon:
    case QualityRare:
    case QualitySuper:
    case QualityUltra:
    case QualityEpic:
    case QualityLegendary:
    case QualityEvo:
      return YES;
    default:
      return NO;
  }
}
BOOL GameActionTypeIsValidValue(GameActionType value) {
  switch (value) {
    case GameActionTypeNoHelp:
    case GameActionTypeUpgradeStruct:
    case GameActionTypeHeal:
    case GameActionTypeEvolve:
    case GameActionTypeMiniJob:
    case GameActionTypeEnhanceTime:
    case GameActionTypeRemoveObstacle:
    case GameActionTypeCombineMonster:
    case GameActionTypeEnterPersistentEvent:
    case GameActionTypePerformingResearch:
    case GameActionTypeCreateBattleItem:
      return YES;
    default:
      return NO;
  }
}
BOOL GameTypeIsValidValue(GameType value) {
  switch (value) {
    case GameTypeNoType:
    case GameTypeStructure:
    case GameTypeResearch:
    case GameTypeSkill:
    case GameTypeTask:
    case GameTypeBattleItem:
    case GameTypeBoardObstacle:
      return YES;
    default:
      return NO;
  }
}
BOOL ResourceTypeIsValidValue(ResourceType value) {
  switch (value) {
    case ResourceTypeNoResource:
    case ResourceTypeCash:
    case ResourceTypeOil:
    case ResourceTypeGems:
    case ResourceTypeGachaCredits:
    case ResourceTypeMonster:
      return YES;
    default:
      return NO;
  }
}
BOOL ResponseStatusIsValidValue(ResponseStatus value) {
  switch (value) {
    case ResponseStatusSuccess:
    case ResponseStatusFailOther:
    case ResponseStatusFailTimeOutOfSync:
    case ResponseStatusFailInsufficientFunds:
    case ResponseStatusFailInsufficientCash:
    case ResponseStatusFailInsufficientOil:
    case ResponseStatusFailInsufficientGems:
    case ResponseStatusFailNotComplete:
    case ResponseStatusFailInsufficientItem:
    case ResponseStatusFailDoesntExist:
    case ResponseStatusFailAlreadyRedeemed:
    case ResponseStatusFailNotEnabled:
    case ResponseStatusFailInvalidBattleItems:
    case ResponseStatusFailInsufficientGachaCredits:
    case ResponseStatusFailTooLong:
    case ResponseStatusFailBanned:
    case ResponseStatusFailNoContentSent:
    case ResponseStatusFailNotValidLanguage:
    case ResponseStatusFailNoSuchPlayer:
    case ResponseStatusSuccessRequest:
    case ResponseStatusSuccessJoin:
    case ResponseStatusSuccessMonsterJustDied:
    case ResponseStatusFailNameTaken:
    case ResponseStatusFailAlreadyInClan:
    case ResponseStatusFailInvalidTagLength:
    case ResponseStatusFailTagTaken:
    case ResponseStatusFailAlreadyStarted:
    case ResponseStatusFailNotInClan:
    case ResponseStatusFailOwnerOfClanWithOthersStillIn:
    case ResponseStatusFailAlreadyFulfilled:
    case ResponseStatusFailRequestAlreadyFiled:
    case ResponseStatusFailClanIsFull:
    case ResponseStatusFailDidNotRequest:
    case ResponseStatusFailNotAuthorized:
    case ResponseStatusFailNoActiveClanRaid:
    case ResponseStatusFailNoMonstersSent:
    case ResponseStatusFailMonsterAlreadyDead:
    case ResponseStatusFailFulfilledRequestExists:
    case ResponseStatusFailDuplicateReceipt:
    case ResponseStatusFailMethodNotSupported:
    case ResponseStatusFailNoResults:
    case ResponseStatusFailMonsterReachedEvolvingLimit:
    case ResponseStatusFailMaxNumEvolutionsReached:
    case ResponseStatusFailMonsterInEnhancing:
    case ResponseStatusFailMonsterInEvolution:
    case ResponseStatusFailMonsterNonexistent:
    case ResponseStatusFailMonsterRestricted:
    case ResponseStatusFailMonsterAlreadyInHealing:
    case ResponseStatusFailHealingNotComplete:
    case ResponseStatusFailInsufficientFacebookInvites:
    case ResponseStatusFailInconsistentInviteData:
    case ResponseStatusFailStructureAtMaxFbInviteLvl:
    case ResponseStatusFailMoreThanOneMonsterForSpeedup:
    case ResponseStatusFailExpired:
    case ResponseStatusFailAlreadyBeenUsed:
    case ResponseStatusFailEnemyUnavailable:
    case ResponseStatusFailBattleTookTooLong:
    case ResponseStatusFailNotBuiltYet:
    case ResponseStatusFailNotUsersStruct:
    case ResponseStatusFailAtMaxLevelAlready:
    case ResponseStatusFailNotExpiredYet:
    case ResponseStatusFailUserWithUdidAlreadyExists:
    case ResponseStatusFailInvalidReferCode:
    case ResponseStatusFailUserWithFacebookIdExists:
    case ResponseStatusFailFbIdExists:
    case ResponseStatusFailUserFbIdAlreadySet:
      return YES;
    default:
      return NO;
  }
}

// @@protoc_insertion_point(global_scope)
