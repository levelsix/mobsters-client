// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Skill.pb.h"
// @@protoc_insertion_point(imports)

@implementation SkillRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [SkillRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL SkillTypeIsValidValue(SkillType value) {
  switch (value) {
    case SkillTypeNoSkill:
    case SkillTypeCakeDrop:
    case SkillTypeJelly:
    case SkillTypeQuickAttack:
    case SkillTypeBombs:
    case SkillTypeShield:
    case SkillTypePoison:
    case SkillTypeRoidRage:
    case SkillTypeMomentum:
    case SkillTypeThickSkin:
    case SkillTypeCritAndEvade:
    case SkillTypeShuffle:
    case SkillTypeHeadshot:
    case SkillTypeMud:
    case SkillTypeLifeSteal:
    case SkillTypeCounterStrike:
    case SkillTypeFlameStrike:
    case SkillTypeConfusion:
    case SkillTypeStaticField:
    case SkillTypeBlindingLight:
    case SkillTypePoisonPowder:
    case SkillTypeSkewer:
    case SkillTypeKnockout:
    case SkillTypeShallowGrave:
    case SkillTypeHammerTime:
    case SkillTypeBloodRage:
    case SkillTypeTakeAim:
    case SkillTypeHellFire:
    case SkillTypeEnergize:
    case SkillTypeRightHook:
    case SkillTypeCurse:
    case SkillTypeInsurance:
    case SkillTypeFlameBreak:
    case SkillTypePoisonSkewer:
    case SkillTypePoisonFire:
    case SkillTypeChill:
      return YES;
    default:
      return NO;
  }
}
BOOL SkillActivationTypeIsValidValue(SkillActivationType value) {
  switch (value) {
    case SkillActivationTypeUserActivated:
    case SkillActivationTypeAutoActivated:
    case SkillActivationTypePassive:
      return YES;
    default:
      return NO;
  }
}
BOOL SideEffectTypeIsValidValue(SideEffectType value) {
  switch (value) {
    case SideEffectTypeNoSideEffect:
    case SideEffectTypeNerfPoison:
    case SideEffectTypeNerfCurse:
    case SideEffectTypeNerfStun:
    case SideEffectTypeNerfConfusion:
    case SideEffectTypeNerfBlindingLight:
    case SideEffectTypeNerfBloodRage:
    case SideEffectTypeBuffMomentum:
    case SideEffectTypeBuffThickSkin:
    case SideEffectTypeBuffDrunkenBrawl:
    case SideEffectTypeBuffCriticalStrike:
    case SideEffectTypeBuffEvade:
    case SideEffectTypeBuffStaticField:
    case SideEffectTypeBuffCounterStrike:
    case SideEffectTypeBuffRoidRage:
    case SideEffectTypeBuffShallowGrave:
    case SideEffectTypeBuffEnergize:
    case SideEffectTypeBuffInsurance:
    case SideEffectTypeBuffHammerTime:
    case SideEffectTypeBuffTakeAim:
    case SideEffectTypeNerfChill:
      return YES;
    default:
      return NO;
  }
}
BOOL SideEffectTraitTypeIsValidValue(SideEffectTraitType value) {
  switch (value) {
    case SideEffectTraitTypeNoTrait:
    case SideEffectTraitTypeBuff:
    case SideEffectTraitTypeNerf:
      return YES;
    default:
      return NO;
  }
}
BOOL SideEffectPositionTypeIsValidValue(SideEffectPositionType value) {
  switch (value) {
    case SideEffectPositionTypeBelowCharacter:
    case SideEffectPositionTypeAboveCharacter:
      return YES;
    default:
      return NO;
  }
}
BOOL SideEffectBlendModeIsValidValue(SideEffectBlendMode value) {
  switch (value) {
    case SideEffectBlendModeNormalFullOpacity:
      return YES;
    default:
      return NO;
  }
}
@interface SkillProto ()
@property int32_t skillId;
@property (strong) NSString* name;
@property int32_t orbCost;
@property SkillType type;
@property SkillActivationType activationType;
@property int32_t predecId;
@property int32_t sucId;
@property (strong) NSMutableArray * mutablePropertiesList;
@property (strong) NSString* defDesc;
@property (strong) NSString* offDesc;
@property (strong) NSString* shortDefDesc;
@property (strong) NSString* shortOffDesc;
@property (strong) NSString* imgNamePrefix;
@property int32_t skillEffectDuration;
@end

@implementation SkillProto

- (BOOL) hasSkillId {
  return !!hasSkillId_;
}
- (void) setHasSkillId:(BOOL) value_ {
  hasSkillId_ = !!value_;
}
@synthesize skillId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasOrbCost {
  return !!hasOrbCost_;
}
- (void) setHasOrbCost:(BOOL) value_ {
  hasOrbCost_ = !!value_;
}
@synthesize orbCost;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasActivationType {
  return !!hasActivationType_;
}
- (void) setHasActivationType:(BOOL) value_ {
  hasActivationType_ = !!value_;
}
@synthesize activationType;
- (BOOL) hasPredecId {
  return !!hasPredecId_;
}
- (void) setHasPredecId:(BOOL) value_ {
  hasPredecId_ = !!value_;
}
@synthesize predecId;
- (BOOL) hasSucId {
  return !!hasSucId_;
}
- (void) setHasSucId:(BOOL) value_ {
  hasSucId_ = !!value_;
}
@synthesize sucId;
@synthesize mutablePropertiesList;
@dynamic propertiesList;
- (BOOL) hasDefDesc {
  return !!hasDefDesc_;
}
- (void) setHasDefDesc:(BOOL) value_ {
  hasDefDesc_ = !!value_;
}
@synthesize defDesc;
- (BOOL) hasOffDesc {
  return !!hasOffDesc_;
}
- (void) setHasOffDesc:(BOOL) value_ {
  hasOffDesc_ = !!value_;
}
@synthesize offDesc;
- (BOOL) hasShortDefDesc {
  return !!hasShortDefDesc_;
}
- (void) setHasShortDefDesc:(BOOL) value_ {
  hasShortDefDesc_ = !!value_;
}
@synthesize shortDefDesc;
- (BOOL) hasShortOffDesc {
  return !!hasShortOffDesc_;
}
- (void) setHasShortOffDesc:(BOOL) value_ {
  hasShortOffDesc_ = !!value_;
}
@synthesize shortOffDesc;
- (BOOL) hasImgNamePrefix {
  return !!hasImgNamePrefix_;
}
- (void) setHasImgNamePrefix:(BOOL) value_ {
  hasImgNamePrefix_ = !!value_;
}
@synthesize imgNamePrefix;
- (BOOL) hasSkillEffectDuration {
  return !!hasSkillEffectDuration_;
}
- (void) setHasSkillEffectDuration:(BOOL) value_ {
  hasSkillEffectDuration_ = !!value_;
}
@synthesize skillEffectDuration;
- (id) init {
  if ((self = [super init])) {
    self.skillId = 0;
    self.name = @"";
    self.orbCost = 0;
    self.type = SkillTypeNoSkill;
    self.activationType = SkillActivationTypeUserActivated;
    self.predecId = 0;
    self.sucId = 0;
    self.defDesc = @"";
    self.offDesc = @"";
    self.shortDefDesc = @"";
    self.shortOffDesc = @"";
    self.imgNamePrefix = @"";
    self.skillEffectDuration = 0;
  }
  return self;
}
static SkillProto* defaultSkillProtoInstance = nil;
+ (void) initialize {
  if (self == [SkillProto class]) {
    defaultSkillProtoInstance = [[SkillProto alloc] init];
  }
}
+ (SkillProto*) defaultInstance {
  return defaultSkillProtoInstance;
}
- (SkillProto*) defaultInstance {
  return defaultSkillProtoInstance;
}
- (NSArray *)propertiesList {
  return mutablePropertiesList;
}
- (SkillPropertyProto*)propertiesAtIndex:(NSUInteger)index {
  return [mutablePropertiesList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillId) {
    [output writeInt32:1 value:self.skillId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasOrbCost) {
    [output writeInt32:3 value:self.orbCost];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasActivationType) {
    [output writeEnum:5 value:self.activationType];
  }
  if (self.hasPredecId) {
    [output writeInt32:6 value:self.predecId];
  }
  if (self.hasSucId) {
    [output writeInt32:7 value:self.sucId];
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasDefDesc) {
    [output writeString:9 value:self.defDesc];
  }
  if (self.hasImgNamePrefix) {
    [output writeString:12 value:self.imgNamePrefix];
  }
  if (self.hasSkillEffectDuration) {
    [output writeInt32:13 value:self.skillEffectDuration];
  }
  if (self.hasOffDesc) {
    [output writeString:14 value:self.offDesc];
  }
  if (self.hasShortDefDesc) {
    [output writeString:15 value:self.shortDefDesc];
  }
  if (self.hasShortOffDesc) {
    [output writeString:16 value:self.shortOffDesc];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillId) {
    size_ += computeInt32Size(1, self.skillId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasOrbCost) {
    size_ += computeInt32Size(3, self.orbCost);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  if (self.hasActivationType) {
    size_ += computeEnumSize(5, self.activationType);
  }
  if (self.hasPredecId) {
    size_ += computeInt32Size(6, self.predecId);
  }
  if (self.hasSucId) {
    size_ += computeInt32Size(7, self.sucId);
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasDefDesc) {
    size_ += computeStringSize(9, self.defDesc);
  }
  if (self.hasImgNamePrefix) {
    size_ += computeStringSize(12, self.imgNamePrefix);
  }
  if (self.hasSkillEffectDuration) {
    size_ += computeInt32Size(13, self.skillEffectDuration);
  }
  if (self.hasOffDesc) {
    size_ += computeStringSize(14, self.offDesc);
  }
  if (self.hasShortDefDesc) {
    size_ += computeStringSize(15, self.shortDefDesc);
  }
  if (self.hasShortOffDesc) {
    size_ += computeStringSize(16, self.shortOffDesc);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SkillProto*) parseFromData:(NSData*) data {
  return (SkillProto*)[[[SkillProto builder] mergeFromData:data] build];
}
+ (SkillProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillProto*)[[[SkillProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SkillProto*) parseFromInputStream:(NSInputStream*) input {
  return (SkillProto*)[[[SkillProto builder] mergeFromInputStream:input] build];
}
+ (SkillProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillProto*)[[[SkillProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SkillProto*)[[[SkillProto builder] mergeFromCodedInputStream:input] build];
}
+ (SkillProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillProto*)[[[SkillProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillProto_Builder*) builder {
  return [[SkillProto_Builder alloc] init];
}
+ (SkillProto_Builder*) builderWithPrototype:(SkillProto*) prototype {
  return [[SkillProto builder] mergeFrom:prototype];
}
- (SkillProto_Builder*) builder {
  return [SkillProto builder];
}
- (SkillProto_Builder*) toBuilder {
  return [SkillProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillId", [NSNumber numberWithInteger:self.skillId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasOrbCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orbCost", [NSNumber numberWithInteger:self.orbCost]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasActivationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"activationType", [NSNumber numberWithInteger:self.activationType]];
  }
  if (self.hasPredecId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"predecId", [NSNumber numberWithInteger:self.predecId]];
  }
  if (self.hasSucId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sucId", [NSNumber numberWithInteger:self.sucId]];
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"properties"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDefDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defDesc", self.defDesc];
  }
  if (self.hasImgNamePrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgNamePrefix", self.imgNamePrefix];
  }
  if (self.hasSkillEffectDuration) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillEffectDuration", [NSNumber numberWithInteger:self.skillEffectDuration]];
  }
  if (self.hasOffDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offDesc", self.offDesc];
  }
  if (self.hasShortDefDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortDefDesc", self.shortDefDesc];
  }
  if (self.hasShortOffDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shortOffDesc", self.shortOffDesc];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SkillProto class]]) {
    return NO;
  }
  SkillProto *otherMessage = other;
  return
      self.hasSkillId == otherMessage.hasSkillId &&
      (!self.hasSkillId || self.skillId == otherMessage.skillId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasOrbCost == otherMessage.hasOrbCost &&
      (!self.hasOrbCost || self.orbCost == otherMessage.orbCost) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasActivationType == otherMessage.hasActivationType &&
      (!self.hasActivationType || self.activationType == otherMessage.activationType) &&
      self.hasPredecId == otherMessage.hasPredecId &&
      (!self.hasPredecId || self.predecId == otherMessage.predecId) &&
      self.hasSucId == otherMessage.hasSucId &&
      (!self.hasSucId || self.sucId == otherMessage.sucId) &&
      [self.propertiesList isEqualToArray:otherMessage.propertiesList] &&
      self.hasDefDesc == otherMessage.hasDefDesc &&
      (!self.hasDefDesc || [self.defDesc isEqual:otherMessage.defDesc]) &&
      self.hasImgNamePrefix == otherMessage.hasImgNamePrefix &&
      (!self.hasImgNamePrefix || [self.imgNamePrefix isEqual:otherMessage.imgNamePrefix]) &&
      self.hasSkillEffectDuration == otherMessage.hasSkillEffectDuration &&
      (!self.hasSkillEffectDuration || self.skillEffectDuration == otherMessage.skillEffectDuration) &&
      self.hasOffDesc == otherMessage.hasOffDesc &&
      (!self.hasOffDesc || [self.offDesc isEqual:otherMessage.offDesc]) &&
      self.hasShortDefDesc == otherMessage.hasShortDefDesc &&
      (!self.hasShortDefDesc || [self.shortDefDesc isEqual:otherMessage.shortDefDesc]) &&
      self.hasShortOffDesc == otherMessage.hasShortOffDesc &&
      (!self.hasShortOffDesc || [self.shortOffDesc isEqual:otherMessage.shortOffDesc]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasOrbCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.orbCost] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasActivationType) {
    hashCode = hashCode * 31 + self.activationType;
  }
  if (self.hasPredecId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.predecId] hash];
  }
  if (self.hasSucId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sucId] hash];
  }
  [self.propertiesList enumerateObjectsUsingBlock:^(SkillPropertyProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasDefDesc) {
    hashCode = hashCode * 31 + [self.defDesc hash];
  }
  if (self.hasImgNamePrefix) {
    hashCode = hashCode * 31 + [self.imgNamePrefix hash];
  }
  if (self.hasSkillEffectDuration) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillEffectDuration] hash];
  }
  if (self.hasOffDesc) {
    hashCode = hashCode * 31 + [self.offDesc hash];
  }
  if (self.hasShortDefDesc) {
    hashCode = hashCode * 31 + [self.shortDefDesc hash];
  }
  if (self.hasShortOffDesc) {
    hashCode = hashCode * 31 + [self.shortOffDesc hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SkillProto_Builder()
@property (strong) SkillProto* result;
@end

@implementation SkillProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SkillProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SkillProto_Builder*) clear {
  self.result = [[SkillProto alloc] init];
  return self;
}
- (SkillProto_Builder*) clone {
  return [SkillProto builderWithPrototype:result];
}
- (SkillProto*) defaultInstance {
  return [SkillProto defaultInstance];
}
- (SkillProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SkillProto*) buildPartial {
  SkillProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SkillProto_Builder*) mergeFrom:(SkillProto*) other {
  if (other == [SkillProto defaultInstance]) {
    return self;
  }
  if (other.hasSkillId) {
    [self setSkillId:other.skillId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasOrbCost) {
    [self setOrbCost:other.orbCost];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasActivationType) {
    [self setActivationType:other.activationType];
  }
  if (other.hasPredecId) {
    [self setPredecId:other.predecId];
  }
  if (other.hasSucId) {
    [self setSucId:other.sucId];
  }
  if (other.mutablePropertiesList.count > 0) {
    if (result.mutablePropertiesList == nil) {
      result.mutablePropertiesList = [[NSMutableArray alloc] initWithArray:other.mutablePropertiesList];
    } else {
      [result.mutablePropertiesList addObjectsFromArray:other.mutablePropertiesList];
    }
  }
  if (other.hasDefDesc) {
    [self setDefDesc:other.defDesc];
  }
  if (other.hasOffDesc) {
    [self setOffDesc:other.offDesc];
  }
  if (other.hasShortDefDesc) {
    [self setShortDefDesc:other.shortDefDesc];
  }
  if (other.hasShortOffDesc) {
    [self setShortOffDesc:other.shortOffDesc];
  }
  if (other.hasImgNamePrefix) {
    [self setImgNamePrefix:other.imgNamePrefix];
  }
  if (other.hasSkillEffectDuration) {
    [self setSkillEffectDuration:other.skillEffectDuration];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SkillProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SkillProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 24: {
        [self setOrbCost:[input readInt32]];
        break;
      }
      case 32: {
        SkillType value = (SkillType)[input readEnum];
        if (SkillTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        SkillActivationType value = (SkillActivationType)[input readEnum];
        if (SkillActivationTypeIsValidValue(value)) {
          [self setActivationType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 48: {
        [self setPredecId:[input readInt32]];
        break;
      }
      case 56: {
        [self setSucId:[input readInt32]];
        break;
      }
      case 66: {
        SkillPropertyProto_Builder* subBuilder = [SkillPropertyProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addProperties:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        [self setDefDesc:[input readString]];
        break;
      }
      case 98: {
        [self setImgNamePrefix:[input readString]];
        break;
      }
      case 104: {
        [self setSkillEffectDuration:[input readInt32]];
        break;
      }
      case 114: {
        [self setOffDesc:[input readString]];
        break;
      }
      case 122: {
        [self setShortDefDesc:[input readString]];
        break;
      }
      case 130: {
        [self setShortOffDesc:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSkillId {
  return result.hasSkillId;
}
- (int32_t) skillId {
  return result.skillId;
}
- (SkillProto_Builder*) setSkillId:(int32_t) value {
  result.hasSkillId = YES;
  result.skillId = value;
  return self;
}
- (SkillProto_Builder*) clearSkillId {
  result.hasSkillId = NO;
  result.skillId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (SkillProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (SkillProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasOrbCost {
  return result.hasOrbCost;
}
- (int32_t) orbCost {
  return result.orbCost;
}
- (SkillProto_Builder*) setOrbCost:(int32_t) value {
  result.hasOrbCost = YES;
  result.orbCost = value;
  return self;
}
- (SkillProto_Builder*) clearOrbCost {
  result.hasOrbCost = NO;
  result.orbCost = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (SkillType) type {
  return result.type;
}
- (SkillProto_Builder*) setType:(SkillType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (SkillProto_Builder*) clearTypeList {
  result.hasType = NO;
  result.type = SkillTypeNoSkill;
  return self;
}
- (BOOL) hasActivationType {
  return result.hasActivationType;
}
- (SkillActivationType) activationType {
  return result.activationType;
}
- (SkillProto_Builder*) setActivationType:(SkillActivationType) value {
  result.hasActivationType = YES;
  result.activationType = value;
  return self;
}
- (SkillProto_Builder*) clearActivationTypeList {
  result.hasActivationType = NO;
  result.activationType = SkillActivationTypeUserActivated;
  return self;
}
- (BOOL) hasPredecId {
  return result.hasPredecId;
}
- (int32_t) predecId {
  return result.predecId;
}
- (SkillProto_Builder*) setPredecId:(int32_t) value {
  result.hasPredecId = YES;
  result.predecId = value;
  return self;
}
- (SkillProto_Builder*) clearPredecId {
  result.hasPredecId = NO;
  result.predecId = 0;
  return self;
}
- (BOOL) hasSucId {
  return result.hasSucId;
}
- (int32_t) sucId {
  return result.sucId;
}
- (SkillProto_Builder*) setSucId:(int32_t) value {
  result.hasSucId = YES;
  result.sucId = value;
  return self;
}
- (SkillProto_Builder*) clearSucId {
  result.hasSucId = NO;
  result.sucId = 0;
  return self;
}
- (NSMutableArray *)propertiesList {
  return result.mutablePropertiesList;
}
- (SkillPropertyProto*)propertiesAtIndex:(NSUInteger)index {
  return [result propertiesAtIndex:index];
}
- (SkillProto_Builder *)addProperties:(SkillPropertyProto*)value {
  if (result.mutablePropertiesList == nil) {
    result.mutablePropertiesList = [[NSMutableArray alloc]init];
  }
  [result.mutablePropertiesList addObject:value];
  return self;
}
- (SkillProto_Builder *)addAllProperties:(NSArray *)array {
  if (result.mutablePropertiesList == nil) {
    result.mutablePropertiesList = [NSMutableArray array];
  }
  [result.mutablePropertiesList addObjectsFromArray:array];
  return self;
}
- (SkillProto_Builder *)clearProperties {
  result.mutablePropertiesList = nil;
  return self;
}
- (BOOL) hasDefDesc {
  return result.hasDefDesc;
}
- (NSString*) defDesc {
  return result.defDesc;
}
- (SkillProto_Builder*) setDefDesc:(NSString*) value {
  result.hasDefDesc = YES;
  result.defDesc = value;
  return self;
}
- (SkillProto_Builder*) clearDefDesc {
  result.hasDefDesc = NO;
  result.defDesc = @"";
  return self;
}
- (BOOL) hasOffDesc {
  return result.hasOffDesc;
}
- (NSString*) offDesc {
  return result.offDesc;
}
- (SkillProto_Builder*) setOffDesc:(NSString*) value {
  result.hasOffDesc = YES;
  result.offDesc = value;
  return self;
}
- (SkillProto_Builder*) clearOffDesc {
  result.hasOffDesc = NO;
  result.offDesc = @"";
  return self;
}
- (BOOL) hasShortDefDesc {
  return result.hasShortDefDesc;
}
- (NSString*) shortDefDesc {
  return result.shortDefDesc;
}
- (SkillProto_Builder*) setShortDefDesc:(NSString*) value {
  result.hasShortDefDesc = YES;
  result.shortDefDesc = value;
  return self;
}
- (SkillProto_Builder*) clearShortDefDesc {
  result.hasShortDefDesc = NO;
  result.shortDefDesc = @"";
  return self;
}
- (BOOL) hasShortOffDesc {
  return result.hasShortOffDesc;
}
- (NSString*) shortOffDesc {
  return result.shortOffDesc;
}
- (SkillProto_Builder*) setShortOffDesc:(NSString*) value {
  result.hasShortOffDesc = YES;
  result.shortOffDesc = value;
  return self;
}
- (SkillProto_Builder*) clearShortOffDesc {
  result.hasShortOffDesc = NO;
  result.shortOffDesc = @"";
  return self;
}
- (BOOL) hasImgNamePrefix {
  return result.hasImgNamePrefix;
}
- (NSString*) imgNamePrefix {
  return result.imgNamePrefix;
}
- (SkillProto_Builder*) setImgNamePrefix:(NSString*) value {
  result.hasImgNamePrefix = YES;
  result.imgNamePrefix = value;
  return self;
}
- (SkillProto_Builder*) clearImgNamePrefix {
  result.hasImgNamePrefix = NO;
  result.imgNamePrefix = @"";
  return self;
}
- (BOOL) hasSkillEffectDuration {
  return result.hasSkillEffectDuration;
}
- (int32_t) skillEffectDuration {
  return result.skillEffectDuration;
}
- (SkillProto_Builder*) setSkillEffectDuration:(int32_t) value {
  result.hasSkillEffectDuration = YES;
  result.skillEffectDuration = value;
  return self;
}
- (SkillProto_Builder*) clearSkillEffectDuration {
  result.hasSkillEffectDuration = NO;
  result.skillEffectDuration = 0;
  return self;
}
@end

@interface SkillPropertyProto ()
@property int32_t skillPropertyId;
@property (strong) NSString* name;
@property Float32 skillValue;
@end

@implementation SkillPropertyProto

- (BOOL) hasSkillPropertyId {
  return !!hasSkillPropertyId_;
}
- (void) setHasSkillPropertyId:(BOOL) value_ {
  hasSkillPropertyId_ = !!value_;
}
@synthesize skillPropertyId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasSkillValue {
  return !!hasSkillValue_;
}
- (void) setHasSkillValue:(BOOL) value_ {
  hasSkillValue_ = !!value_;
}
@synthesize skillValue;
- (id) init {
  if ((self = [super init])) {
    self.skillPropertyId = 0;
    self.name = @"";
    self.skillValue = 0;
  }
  return self;
}
static SkillPropertyProto* defaultSkillPropertyProtoInstance = nil;
+ (void) initialize {
  if (self == [SkillPropertyProto class]) {
    defaultSkillPropertyProtoInstance = [[SkillPropertyProto alloc] init];
  }
}
+ (SkillPropertyProto*) defaultInstance {
  return defaultSkillPropertyProtoInstance;
}
- (SkillPropertyProto*) defaultInstance {
  return defaultSkillPropertyProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillPropertyId) {
    [output writeInt32:1 value:self.skillPropertyId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasSkillValue) {
    [output writeFloat:3 value:self.skillValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillPropertyId) {
    size_ += computeInt32Size(1, self.skillPropertyId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasSkillValue) {
    size_ += computeFloatSize(3, self.skillValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SkillPropertyProto*) parseFromData:(NSData*) data {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromData:data] build];
}
+ (SkillPropertyProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SkillPropertyProto*) parseFromInputStream:(NSInputStream*) input {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromInputStream:input] build];
}
+ (SkillPropertyProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillPropertyProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromCodedInputStream:input] build];
}
+ (SkillPropertyProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillPropertyProto*)[[[SkillPropertyProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillPropertyProto_Builder*) builder {
  return [[SkillPropertyProto_Builder alloc] init];
}
+ (SkillPropertyProto_Builder*) builderWithPrototype:(SkillPropertyProto*) prototype {
  return [[SkillPropertyProto builder] mergeFrom:prototype];
}
- (SkillPropertyProto_Builder*) builder {
  return [SkillPropertyProto builder];
}
- (SkillPropertyProto_Builder*) toBuilder {
  return [SkillPropertyProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillPropertyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillPropertyId", [NSNumber numberWithInteger:self.skillPropertyId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasSkillValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillValue", [NSNumber numberWithFloat:self.skillValue]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SkillPropertyProto class]]) {
    return NO;
  }
  SkillPropertyProto *otherMessage = other;
  return
      self.hasSkillPropertyId == otherMessage.hasSkillPropertyId &&
      (!self.hasSkillPropertyId || self.skillPropertyId == otherMessage.skillPropertyId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasSkillValue == otherMessage.hasSkillValue &&
      (!self.hasSkillValue || self.skillValue == otherMessage.skillValue) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSkillPropertyId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillPropertyId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasSkillValue) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.skillValue] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SkillPropertyProto_Builder()
@property (strong) SkillPropertyProto* result;
@end

@implementation SkillPropertyProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SkillPropertyProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SkillPropertyProto_Builder*) clear {
  self.result = [[SkillPropertyProto alloc] init];
  return self;
}
- (SkillPropertyProto_Builder*) clone {
  return [SkillPropertyProto builderWithPrototype:result];
}
- (SkillPropertyProto*) defaultInstance {
  return [SkillPropertyProto defaultInstance];
}
- (SkillPropertyProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SkillPropertyProto*) buildPartial {
  SkillPropertyProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SkillPropertyProto_Builder*) mergeFrom:(SkillPropertyProto*) other {
  if (other == [SkillPropertyProto defaultInstance]) {
    return self;
  }
  if (other.hasSkillPropertyId) {
    [self setSkillPropertyId:other.skillPropertyId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasSkillValue) {
    [self setSkillValue:other.skillValue];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SkillPropertyProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SkillPropertyProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillPropertyId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 29: {
        [self setSkillValue:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasSkillPropertyId {
  return result.hasSkillPropertyId;
}
- (int32_t) skillPropertyId {
  return result.skillPropertyId;
}
- (SkillPropertyProto_Builder*) setSkillPropertyId:(int32_t) value {
  result.hasSkillPropertyId = YES;
  result.skillPropertyId = value;
  return self;
}
- (SkillPropertyProto_Builder*) clearSkillPropertyId {
  result.hasSkillPropertyId = NO;
  result.skillPropertyId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (SkillPropertyProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (SkillPropertyProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasSkillValue {
  return result.hasSkillValue;
}
- (Float32) skillValue {
  return result.skillValue;
}
- (SkillPropertyProto_Builder*) setSkillValue:(Float32) value {
  result.hasSkillValue = YES;
  result.skillValue = value;
  return self;
}
- (SkillPropertyProto_Builder*) clearSkillValue {
  result.hasSkillValue = NO;
  result.skillValue = 0;
  return self;
}
@end

@interface SkillSideEffectProto ()
@property int32_t skillSideEffectId;
@property (strong) NSString* name;
@property (strong) NSString* desc;
@property SideEffectType type;
@property SideEffectTraitType traitType;
@property (strong) NSString* imgName;
@property int32_t imgPixelOffsetX;
@property int32_t imgPixelOffsetY;
@property (strong) NSString* iconImgName;
@property (strong) NSString* pfxName;
@property (strong) NSString* pfxColor;
@property SideEffectPositionType positionType;
@property int32_t pfxPixelOffsetX;
@property int32_t pfxPixelOffsetY;
@property SideEffectBlendMode blendMode;
@end

@implementation SkillSideEffectProto

- (BOOL) hasSkillSideEffectId {
  return !!hasSkillSideEffectId_;
}
- (void) setHasSkillSideEffectId:(BOOL) value_ {
  hasSkillSideEffectId_ = !!value_;
}
@synthesize skillSideEffectId;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value_ {
  hasDesc_ = !!value_;
}
@synthesize desc;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasTraitType {
  return !!hasTraitType_;
}
- (void) setHasTraitType:(BOOL) value_ {
  hasTraitType_ = !!value_;
}
@synthesize traitType;
- (BOOL) hasImgName {
  return !!hasImgName_;
}
- (void) setHasImgName:(BOOL) value_ {
  hasImgName_ = !!value_;
}
@synthesize imgName;
- (BOOL) hasImgPixelOffsetX {
  return !!hasImgPixelOffsetX_;
}
- (void) setHasImgPixelOffsetX:(BOOL) value_ {
  hasImgPixelOffsetX_ = !!value_;
}
@synthesize imgPixelOffsetX;
- (BOOL) hasImgPixelOffsetY {
  return !!hasImgPixelOffsetY_;
}
- (void) setHasImgPixelOffsetY:(BOOL) value_ {
  hasImgPixelOffsetY_ = !!value_;
}
@synthesize imgPixelOffsetY;
- (BOOL) hasIconImgName {
  return !!hasIconImgName_;
}
- (void) setHasIconImgName:(BOOL) value_ {
  hasIconImgName_ = !!value_;
}
@synthesize iconImgName;
- (BOOL) hasPfxName {
  return !!hasPfxName_;
}
- (void) setHasPfxName:(BOOL) value_ {
  hasPfxName_ = !!value_;
}
@synthesize pfxName;
- (BOOL) hasPfxColor {
  return !!hasPfxColor_;
}
- (void) setHasPfxColor:(BOOL) value_ {
  hasPfxColor_ = !!value_;
}
@synthesize pfxColor;
- (BOOL) hasPositionType {
  return !!hasPositionType_;
}
- (void) setHasPositionType:(BOOL) value_ {
  hasPositionType_ = !!value_;
}
@synthesize positionType;
- (BOOL) hasPfxPixelOffsetX {
  return !!hasPfxPixelOffsetX_;
}
- (void) setHasPfxPixelOffsetX:(BOOL) value_ {
  hasPfxPixelOffsetX_ = !!value_;
}
@synthesize pfxPixelOffsetX;
- (BOOL) hasPfxPixelOffsetY {
  return !!hasPfxPixelOffsetY_;
}
- (void) setHasPfxPixelOffsetY:(BOOL) value_ {
  hasPfxPixelOffsetY_ = !!value_;
}
@synthesize pfxPixelOffsetY;
- (BOOL) hasBlendMode {
  return !!hasBlendMode_;
}
- (void) setHasBlendMode:(BOOL) value_ {
  hasBlendMode_ = !!value_;
}
@synthesize blendMode;
- (id) init {
  if ((self = [super init])) {
    self.skillSideEffectId = 0;
    self.name = @"";
    self.desc = @"";
    self.type = SideEffectTypeNoSideEffect;
    self.traitType = SideEffectTraitTypeNoTrait;
    self.imgName = @"";
    self.imgPixelOffsetX = 0;
    self.imgPixelOffsetY = 0;
    self.iconImgName = @"";
    self.pfxName = @"";
    self.pfxColor = @"";
    self.positionType = SideEffectPositionTypeBelowCharacter;
    self.pfxPixelOffsetX = 0;
    self.pfxPixelOffsetY = 0;
    self.blendMode = SideEffectBlendModeNormalFullOpacity;
  }
  return self;
}
static SkillSideEffectProto* defaultSkillSideEffectProtoInstance = nil;
+ (void) initialize {
  if (self == [SkillSideEffectProto class]) {
    defaultSkillSideEffectProtoInstance = [[SkillSideEffectProto alloc] init];
  }
}
+ (SkillSideEffectProto*) defaultInstance {
  return defaultSkillSideEffectProtoInstance;
}
- (SkillSideEffectProto*) defaultInstance {
  return defaultSkillSideEffectProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillSideEffectId) {
    [output writeInt32:1 value:self.skillSideEffectId];
  }
  if (self.hasName) {
    [output writeString:2 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:3 value:self.desc];
  }
  if (self.hasType) {
    [output writeEnum:4 value:self.type];
  }
  if (self.hasTraitType) {
    [output writeEnum:5 value:self.traitType];
  }
  if (self.hasImgName) {
    [output writeString:6 value:self.imgName];
  }
  if (self.hasImgPixelOffsetX) {
    [output writeInt32:7 value:self.imgPixelOffsetX];
  }
  if (self.hasImgPixelOffsetY) {
    [output writeInt32:8 value:self.imgPixelOffsetY];
  }
  if (self.hasIconImgName) {
    [output writeString:9 value:self.iconImgName];
  }
  if (self.hasPfxName) {
    [output writeString:10 value:self.pfxName];
  }
  if (self.hasPfxColor) {
    [output writeString:11 value:self.pfxColor];
  }
  if (self.hasPositionType) {
    [output writeEnum:12 value:self.positionType];
  }
  if (self.hasPfxPixelOffsetX) {
    [output writeInt32:13 value:self.pfxPixelOffsetX];
  }
  if (self.hasPfxPixelOffsetY) {
    [output writeInt32:14 value:self.pfxPixelOffsetY];
  }
  if (self.hasBlendMode) {
    [output writeEnum:15 value:self.blendMode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillSideEffectId) {
    size_ += computeInt32Size(1, self.skillSideEffectId);
  }
  if (self.hasName) {
    size_ += computeStringSize(2, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(3, self.desc);
  }
  if (self.hasType) {
    size_ += computeEnumSize(4, self.type);
  }
  if (self.hasTraitType) {
    size_ += computeEnumSize(5, self.traitType);
  }
  if (self.hasImgName) {
    size_ += computeStringSize(6, self.imgName);
  }
  if (self.hasImgPixelOffsetX) {
    size_ += computeInt32Size(7, self.imgPixelOffsetX);
  }
  if (self.hasImgPixelOffsetY) {
    size_ += computeInt32Size(8, self.imgPixelOffsetY);
  }
  if (self.hasIconImgName) {
    size_ += computeStringSize(9, self.iconImgName);
  }
  if (self.hasPfxName) {
    size_ += computeStringSize(10, self.pfxName);
  }
  if (self.hasPfxColor) {
    size_ += computeStringSize(11, self.pfxColor);
  }
  if (self.hasPositionType) {
    size_ += computeEnumSize(12, self.positionType);
  }
  if (self.hasPfxPixelOffsetX) {
    size_ += computeInt32Size(13, self.pfxPixelOffsetX);
  }
  if (self.hasPfxPixelOffsetY) {
    size_ += computeInt32Size(14, self.pfxPixelOffsetY);
  }
  if (self.hasBlendMode) {
    size_ += computeEnumSize(15, self.blendMode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SkillSideEffectProto*) parseFromData:(NSData*) data {
  return (SkillSideEffectProto*)[[[SkillSideEffectProto builder] mergeFromData:data] build];
}
+ (SkillSideEffectProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillSideEffectProto*)[[[SkillSideEffectProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SkillSideEffectProto*) parseFromInputStream:(NSInputStream*) input {
  return (SkillSideEffectProto*)[[[SkillSideEffectProto builder] mergeFromInputStream:input] build];
}
+ (SkillSideEffectProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillSideEffectProto*)[[[SkillSideEffectProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillSideEffectProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SkillSideEffectProto*)[[[SkillSideEffectProto builder] mergeFromCodedInputStream:input] build];
}
+ (SkillSideEffectProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SkillSideEffectProto*)[[[SkillSideEffectProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SkillSideEffectProto_Builder*) builder {
  return [[SkillSideEffectProto_Builder alloc] init];
}
+ (SkillSideEffectProto_Builder*) builderWithPrototype:(SkillSideEffectProto*) prototype {
  return [[SkillSideEffectProto builder] mergeFrom:prototype];
}
- (SkillSideEffectProto_Builder*) builder {
  return [SkillSideEffectProto builder];
}
- (SkillSideEffectProto_Builder*) toBuilder {
  return [SkillSideEffectProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillSideEffectId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillSideEffectId", [NSNumber numberWithInteger:self.skillSideEffectId]];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasTraitType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"traitType", [NSNumber numberWithInteger:self.traitType]];
  }
  if (self.hasImgName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgName", self.imgName];
  }
  if (self.hasImgPixelOffsetX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgPixelOffsetX", [NSNumber numberWithInteger:self.imgPixelOffsetX]];
  }
  if (self.hasImgPixelOffsetY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgPixelOffsetY", [NSNumber numberWithInteger:self.imgPixelOffsetY]];
  }
  if (self.hasIconImgName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"iconImgName", self.iconImgName];
  }
  if (self.hasPfxName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pfxName", self.pfxName];
  }
  if (self.hasPfxColor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pfxColor", self.pfxColor];
  }
  if (self.hasPositionType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"positionType", [NSNumber numberWithInteger:self.positionType]];
  }
  if (self.hasPfxPixelOffsetX) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pfxPixelOffsetX", [NSNumber numberWithInteger:self.pfxPixelOffsetX]];
  }
  if (self.hasPfxPixelOffsetY) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pfxPixelOffsetY", [NSNumber numberWithInteger:self.pfxPixelOffsetY]];
  }
  if (self.hasBlendMode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"blendMode", [NSNumber numberWithInteger:self.blendMode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SkillSideEffectProto class]]) {
    return NO;
  }
  SkillSideEffectProto *otherMessage = other;
  return
      self.hasSkillSideEffectId == otherMessage.hasSkillSideEffectId &&
      (!self.hasSkillSideEffectId || self.skillSideEffectId == otherMessage.skillSideEffectId) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasTraitType == otherMessage.hasTraitType &&
      (!self.hasTraitType || self.traitType == otherMessage.traitType) &&
      self.hasImgName == otherMessage.hasImgName &&
      (!self.hasImgName || [self.imgName isEqual:otherMessage.imgName]) &&
      self.hasImgPixelOffsetX == otherMessage.hasImgPixelOffsetX &&
      (!self.hasImgPixelOffsetX || self.imgPixelOffsetX == otherMessage.imgPixelOffsetX) &&
      self.hasImgPixelOffsetY == otherMessage.hasImgPixelOffsetY &&
      (!self.hasImgPixelOffsetY || self.imgPixelOffsetY == otherMessage.imgPixelOffsetY) &&
      self.hasIconImgName == otherMessage.hasIconImgName &&
      (!self.hasIconImgName || [self.iconImgName isEqual:otherMessage.iconImgName]) &&
      self.hasPfxName == otherMessage.hasPfxName &&
      (!self.hasPfxName || [self.pfxName isEqual:otherMessage.pfxName]) &&
      self.hasPfxColor == otherMessage.hasPfxColor &&
      (!self.hasPfxColor || [self.pfxColor isEqual:otherMessage.pfxColor]) &&
      self.hasPositionType == otherMessage.hasPositionType &&
      (!self.hasPositionType || self.positionType == otherMessage.positionType) &&
      self.hasPfxPixelOffsetX == otherMessage.hasPfxPixelOffsetX &&
      (!self.hasPfxPixelOffsetX || self.pfxPixelOffsetX == otherMessage.pfxPixelOffsetX) &&
      self.hasPfxPixelOffsetY == otherMessage.hasPfxPixelOffsetY &&
      (!self.hasPfxPixelOffsetY || self.pfxPixelOffsetY == otherMessage.pfxPixelOffsetY) &&
      self.hasBlendMode == otherMessage.hasBlendMode &&
      (!self.hasBlendMode || self.blendMode == otherMessage.blendMode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSkillSideEffectId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillSideEffectId] hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasTraitType) {
    hashCode = hashCode * 31 + self.traitType;
  }
  if (self.hasImgName) {
    hashCode = hashCode * 31 + [self.imgName hash];
  }
  if (self.hasImgPixelOffsetX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.imgPixelOffsetX] hash];
  }
  if (self.hasImgPixelOffsetY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.imgPixelOffsetY] hash];
  }
  if (self.hasIconImgName) {
    hashCode = hashCode * 31 + [self.iconImgName hash];
  }
  if (self.hasPfxName) {
    hashCode = hashCode * 31 + [self.pfxName hash];
  }
  if (self.hasPfxColor) {
    hashCode = hashCode * 31 + [self.pfxColor hash];
  }
  if (self.hasPositionType) {
    hashCode = hashCode * 31 + self.positionType;
  }
  if (self.hasPfxPixelOffsetX) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pfxPixelOffsetX] hash];
  }
  if (self.hasPfxPixelOffsetY) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pfxPixelOffsetY] hash];
  }
  if (self.hasBlendMode) {
    hashCode = hashCode * 31 + self.blendMode;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SkillSideEffectProto_Builder()
@property (strong) SkillSideEffectProto* result;
@end

@implementation SkillSideEffectProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[SkillSideEffectProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (SkillSideEffectProto_Builder*) clear {
  self.result = [[SkillSideEffectProto alloc] init];
  return self;
}
- (SkillSideEffectProto_Builder*) clone {
  return [SkillSideEffectProto builderWithPrototype:result];
}
- (SkillSideEffectProto*) defaultInstance {
  return [SkillSideEffectProto defaultInstance];
}
- (SkillSideEffectProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SkillSideEffectProto*) buildPartial {
  SkillSideEffectProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (SkillSideEffectProto_Builder*) mergeFrom:(SkillSideEffectProto*) other {
  if (other == [SkillSideEffectProto defaultInstance]) {
    return self;
  }
  if (other.hasSkillSideEffectId) {
    [self setSkillSideEffectId:other.skillSideEffectId];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasTraitType) {
    [self setTraitType:other.traitType];
  }
  if (other.hasImgName) {
    [self setImgName:other.imgName];
  }
  if (other.hasImgPixelOffsetX) {
    [self setImgPixelOffsetX:other.imgPixelOffsetX];
  }
  if (other.hasImgPixelOffsetY) {
    [self setImgPixelOffsetY:other.imgPixelOffsetY];
  }
  if (other.hasIconImgName) {
    [self setIconImgName:other.iconImgName];
  }
  if (other.hasPfxName) {
    [self setPfxName:other.pfxName];
  }
  if (other.hasPfxColor) {
    [self setPfxColor:other.pfxColor];
  }
  if (other.hasPositionType) {
    [self setPositionType:other.positionType];
  }
  if (other.hasPfxPixelOffsetX) {
    [self setPfxPixelOffsetX:other.pfxPixelOffsetX];
  }
  if (other.hasPfxPixelOffsetY) {
    [self setPfxPixelOffsetY:other.pfxPixelOffsetY];
  }
  if (other.hasBlendMode) {
    [self setBlendMode:other.blendMode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SkillSideEffectProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SkillSideEffectProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillSideEffectId:[input readInt32]];
        break;
      }
      case 18: {
        [self setName:[input readString]];
        break;
      }
      case 26: {
        [self setDesc:[input readString]];
        break;
      }
      case 32: {
        SideEffectType value = (SideEffectType)[input readEnum];
        if (SideEffectTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        SideEffectTraitType value = (SideEffectTraitType)[input readEnum];
        if (SideEffectTraitTypeIsValidValue(value)) {
          [self setTraitType:value];
        } else {
          [unknownFields mergeVarintField:5 value:value];
        }
        break;
      }
      case 50: {
        [self setImgName:[input readString]];
        break;
      }
      case 56: {
        [self setImgPixelOffsetX:[input readInt32]];
        break;
      }
      case 64: {
        [self setImgPixelOffsetY:[input readInt32]];
        break;
      }
      case 74: {
        [self setIconImgName:[input readString]];
        break;
      }
      case 82: {
        [self setPfxName:[input readString]];
        break;
      }
      case 90: {
        [self setPfxColor:[input readString]];
        break;
      }
      case 96: {
        SideEffectPositionType value = (SideEffectPositionType)[input readEnum];
        if (SideEffectPositionTypeIsValidValue(value)) {
          [self setPositionType:value];
        } else {
          [unknownFields mergeVarintField:12 value:value];
        }
        break;
      }
      case 104: {
        [self setPfxPixelOffsetX:[input readInt32]];
        break;
      }
      case 112: {
        [self setPfxPixelOffsetY:[input readInt32]];
        break;
      }
      case 120: {
        SideEffectBlendMode value = (SideEffectBlendMode)[input readEnum];
        if (SideEffectBlendModeIsValidValue(value)) {
          [self setBlendMode:value];
        } else {
          [unknownFields mergeVarintField:15 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSkillSideEffectId {
  return result.hasSkillSideEffectId;
}
- (int32_t) skillSideEffectId {
  return result.skillSideEffectId;
}
- (SkillSideEffectProto_Builder*) setSkillSideEffectId:(int32_t) value {
  result.hasSkillSideEffectId = YES;
  result.skillSideEffectId = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearSkillSideEffectId {
  result.hasSkillSideEffectId = NO;
  result.skillSideEffectId = 0;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (SkillSideEffectProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (SkillSideEffectProto_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (SideEffectType) type {
  return result.type;
}
- (SkillSideEffectProto_Builder*) setType:(SideEffectType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearTypeList {
  result.hasType = NO;
  result.type = SideEffectTypeNoSideEffect;
  return self;
}
- (BOOL) hasTraitType {
  return result.hasTraitType;
}
- (SideEffectTraitType) traitType {
  return result.traitType;
}
- (SkillSideEffectProto_Builder*) setTraitType:(SideEffectTraitType) value {
  result.hasTraitType = YES;
  result.traitType = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearTraitTypeList {
  result.hasTraitType = NO;
  result.traitType = SideEffectTraitTypeNoTrait;
  return self;
}
- (BOOL) hasImgName {
  return result.hasImgName;
}
- (NSString*) imgName {
  return result.imgName;
}
- (SkillSideEffectProto_Builder*) setImgName:(NSString*) value {
  result.hasImgName = YES;
  result.imgName = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearImgName {
  result.hasImgName = NO;
  result.imgName = @"";
  return self;
}
- (BOOL) hasImgPixelOffsetX {
  return result.hasImgPixelOffsetX;
}
- (int32_t) imgPixelOffsetX {
  return result.imgPixelOffsetX;
}
- (SkillSideEffectProto_Builder*) setImgPixelOffsetX:(int32_t) value {
  result.hasImgPixelOffsetX = YES;
  result.imgPixelOffsetX = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearImgPixelOffsetX {
  result.hasImgPixelOffsetX = NO;
  result.imgPixelOffsetX = 0;
  return self;
}
- (BOOL) hasImgPixelOffsetY {
  return result.hasImgPixelOffsetY;
}
- (int32_t) imgPixelOffsetY {
  return result.imgPixelOffsetY;
}
- (SkillSideEffectProto_Builder*) setImgPixelOffsetY:(int32_t) value {
  result.hasImgPixelOffsetY = YES;
  result.imgPixelOffsetY = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearImgPixelOffsetY {
  result.hasImgPixelOffsetY = NO;
  result.imgPixelOffsetY = 0;
  return self;
}
- (BOOL) hasIconImgName {
  return result.hasIconImgName;
}
- (NSString*) iconImgName {
  return result.iconImgName;
}
- (SkillSideEffectProto_Builder*) setIconImgName:(NSString*) value {
  result.hasIconImgName = YES;
  result.iconImgName = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearIconImgName {
  result.hasIconImgName = NO;
  result.iconImgName = @"";
  return self;
}
- (BOOL) hasPfxName {
  return result.hasPfxName;
}
- (NSString*) pfxName {
  return result.pfxName;
}
- (SkillSideEffectProto_Builder*) setPfxName:(NSString*) value {
  result.hasPfxName = YES;
  result.pfxName = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearPfxName {
  result.hasPfxName = NO;
  result.pfxName = @"";
  return self;
}
- (BOOL) hasPfxColor {
  return result.hasPfxColor;
}
- (NSString*) pfxColor {
  return result.pfxColor;
}
- (SkillSideEffectProto_Builder*) setPfxColor:(NSString*) value {
  result.hasPfxColor = YES;
  result.pfxColor = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearPfxColor {
  result.hasPfxColor = NO;
  result.pfxColor = @"";
  return self;
}
- (BOOL) hasPositionType {
  return result.hasPositionType;
}
- (SideEffectPositionType) positionType {
  return result.positionType;
}
- (SkillSideEffectProto_Builder*) setPositionType:(SideEffectPositionType) value {
  result.hasPositionType = YES;
  result.positionType = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearPositionTypeList {
  result.hasPositionType = NO;
  result.positionType = SideEffectPositionTypeBelowCharacter;
  return self;
}
- (BOOL) hasPfxPixelOffsetX {
  return result.hasPfxPixelOffsetX;
}
- (int32_t) pfxPixelOffsetX {
  return result.pfxPixelOffsetX;
}
- (SkillSideEffectProto_Builder*) setPfxPixelOffsetX:(int32_t) value {
  result.hasPfxPixelOffsetX = YES;
  result.pfxPixelOffsetX = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearPfxPixelOffsetX {
  result.hasPfxPixelOffsetX = NO;
  result.pfxPixelOffsetX = 0;
  return self;
}
- (BOOL) hasPfxPixelOffsetY {
  return result.hasPfxPixelOffsetY;
}
- (int32_t) pfxPixelOffsetY {
  return result.pfxPixelOffsetY;
}
- (SkillSideEffectProto_Builder*) setPfxPixelOffsetY:(int32_t) value {
  result.hasPfxPixelOffsetY = YES;
  result.pfxPixelOffsetY = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearPfxPixelOffsetY {
  result.hasPfxPixelOffsetY = NO;
  result.pfxPixelOffsetY = 0;
  return self;
}
- (BOOL) hasBlendMode {
  return result.hasBlendMode;
}
- (SideEffectBlendMode) blendMode {
  return result.blendMode;
}
- (SkillSideEffectProto_Builder*) setBlendMode:(SideEffectBlendMode) value {
  result.hasBlendMode = YES;
  result.blendMode = value;
  return self;
}
- (SkillSideEffectProto_Builder*) clearBlendModeList {
  result.hasBlendMode = NO;
  result.blendMode = SideEffectBlendModeNormalFullOpacity;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
