// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MiniEvent.pb.h"
// @@protoc_insertion_point(imports)

@implementation MiniEventRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MiniEventRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MiniEventProto ()
@property int32_t miniEventId;
@property int64_t miniEventStartTime;
@property int64_t miniEventEndTime;
@property (strong) MiniEventForPlayerLevelProto* lvlEntered;
@property (strong) NSMutableArray * mutableGoalsList;
@property (strong) NSMutableArray * mutableLeaderboardRewardsList;
@property (strong) NSString* name;
@property (strong) NSString* desc;
@property (strong) NSString* img;
@property (strong) NSString* icon;
@end

@implementation MiniEventProto

- (BOOL) hasMiniEventId {
  return !!hasMiniEventId_;
}
- (void) setHasMiniEventId:(BOOL) value_ {
  hasMiniEventId_ = !!value_;
}
@synthesize miniEventId;
- (BOOL) hasMiniEventStartTime {
  return !!hasMiniEventStartTime_;
}
- (void) setHasMiniEventStartTime:(BOOL) value_ {
  hasMiniEventStartTime_ = !!value_;
}
@synthesize miniEventStartTime;
- (BOOL) hasMiniEventEndTime {
  return !!hasMiniEventEndTime_;
}
- (void) setHasMiniEventEndTime:(BOOL) value_ {
  hasMiniEventEndTime_ = !!value_;
}
@synthesize miniEventEndTime;
- (BOOL) hasLvlEntered {
  return !!hasLvlEntered_;
}
- (void) setHasLvlEntered:(BOOL) value_ {
  hasLvlEntered_ = !!value_;
}
@synthesize lvlEntered;
@synthesize mutableGoalsList;
@dynamic goalsList;
@synthesize mutableLeaderboardRewardsList;
@dynamic leaderboardRewardsList;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasDesc {
  return !!hasDesc_;
}
- (void) setHasDesc:(BOOL) value_ {
  hasDesc_ = !!value_;
}
@synthesize desc;
- (BOOL) hasImg {
  return !!hasImg_;
}
- (void) setHasImg:(BOOL) value_ {
  hasImg_ = !!value_;
}
@synthesize img;
- (BOOL) hasIcon {
  return !!hasIcon_;
}
- (void) setHasIcon:(BOOL) value_ {
  hasIcon_ = !!value_;
}
@synthesize icon;
- (id) init {
  if ((self = [super init])) {
    self.miniEventId = 0;
    self.miniEventStartTime = 0L;
    self.miniEventEndTime = 0L;
    self.lvlEntered = [MiniEventForPlayerLevelProto defaultInstance];
    self.name = @"";
    self.desc = @"";
    self.img = @"";
    self.icon = @"";
  }
  return self;
}
static MiniEventProto* defaultMiniEventProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniEventProto class]) {
    defaultMiniEventProtoInstance = [[MiniEventProto alloc] init];
  }
}
+ (MiniEventProto*) defaultInstance {
  return defaultMiniEventProtoInstance;
}
- (MiniEventProto*) defaultInstance {
  return defaultMiniEventProtoInstance;
}
- (NSArray *)goalsList {
  return mutableGoalsList;
}
- (MiniEventGoalProto*)goalsAtIndex:(NSUInteger)index {
  return [mutableGoalsList objectAtIndex:index];
}
- (NSArray *)leaderboardRewardsList {
  return mutableLeaderboardRewardsList;
}
- (MiniEventLeaderboardRewardProto*)leaderboardRewardsAtIndex:(NSUInteger)index {
  return [mutableLeaderboardRewardsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMiniEventId) {
    [output writeInt32:1 value:self.miniEventId];
  }
  if (self.hasMiniEventStartTime) {
    [output writeInt64:2 value:self.miniEventStartTime];
  }
  if (self.hasMiniEventEndTime) {
    [output writeInt64:3 value:self.miniEventEndTime];
  }
  if (self.hasLvlEntered) {
    [output writeMessage:4 value:self.lvlEntered];
  }
  [self.goalsList enumerateObjectsUsingBlock:^(MiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.leaderboardRewardsList enumerateObjectsUsingBlock:^(MiniEventLeaderboardRewardProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasName) {
    [output writeString:7 value:self.name];
  }
  if (self.hasDesc) {
    [output writeString:8 value:self.desc];
  }
  if (self.hasImg) {
    [output writeString:9 value:self.img];
  }
  if (self.hasIcon) {
    [output writeString:10 value:self.icon];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMiniEventId) {
    size_ += computeInt32Size(1, self.miniEventId);
  }
  if (self.hasMiniEventStartTime) {
    size_ += computeInt64Size(2, self.miniEventStartTime);
  }
  if (self.hasMiniEventEndTime) {
    size_ += computeInt64Size(3, self.miniEventEndTime);
  }
  if (self.hasLvlEntered) {
    size_ += computeMessageSize(4, self.lvlEntered);
  }
  [self.goalsList enumerateObjectsUsingBlock:^(MiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.leaderboardRewardsList enumerateObjectsUsingBlock:^(MiniEventLeaderboardRewardProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasName) {
    size_ += computeStringSize(7, self.name);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(8, self.desc);
  }
  if (self.hasImg) {
    size_ += computeStringSize(9, self.img);
  }
  if (self.hasIcon) {
    size_ += computeStringSize(10, self.icon);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MiniEventProto*) parseFromData:(NSData*) data {
  return (MiniEventProto*)[[[MiniEventProto builder] mergeFromData:data] build];
}
+ (MiniEventProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventProto*)[[[MiniEventProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniEventProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniEventProto*)[[[MiniEventProto builder] mergeFromInputStream:input] build];
}
+ (MiniEventProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventProto*)[[[MiniEventProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniEventProto*)[[[MiniEventProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventProto*)[[[MiniEventProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventProto_Builder*) builder {
  return [[MiniEventProto_Builder alloc] init];
}
+ (MiniEventProto_Builder*) builderWithPrototype:(MiniEventProto*) prototype {
  return [[MiniEventProto builder] mergeFrom:prototype];
}
- (MiniEventProto_Builder*) builder {
  return [MiniEventProto builder];
}
- (MiniEventProto_Builder*) toBuilder {
  return [MiniEventProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMiniEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventId", [NSNumber numberWithInteger:self.miniEventId]];
  }
  if (self.hasMiniEventStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventStartTime", [NSNumber numberWithLongLong:self.miniEventStartTime]];
  }
  if (self.hasMiniEventEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventEndTime", [NSNumber numberWithLongLong:self.miniEventEndTime]];
  }
  if (self.hasLvlEntered) {
    [output appendFormat:@"%@%@ {\n", indent, @"lvlEntered"];
    [self.lvlEntered writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.goalsList enumerateObjectsUsingBlock:^(MiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"goals"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.leaderboardRewardsList enumerateObjectsUsingBlock:^(MiniEventLeaderboardRewardProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"leaderboardRewards"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasImg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"img", self.img];
  }
  if (self.hasIcon) {
    [output appendFormat:@"%@%@: %@\n", indent, @"icon", self.icon];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MiniEventProto class]]) {
    return NO;
  }
  MiniEventProto *otherMessage = other;
  return
      self.hasMiniEventId == otherMessage.hasMiniEventId &&
      (!self.hasMiniEventId || self.miniEventId == otherMessage.miniEventId) &&
      self.hasMiniEventStartTime == otherMessage.hasMiniEventStartTime &&
      (!self.hasMiniEventStartTime || self.miniEventStartTime == otherMessage.miniEventStartTime) &&
      self.hasMiniEventEndTime == otherMessage.hasMiniEventEndTime &&
      (!self.hasMiniEventEndTime || self.miniEventEndTime == otherMessage.miniEventEndTime) &&
      self.hasLvlEntered == otherMessage.hasLvlEntered &&
      (!self.hasLvlEntered || [self.lvlEntered isEqual:otherMessage.lvlEntered]) &&
      [self.goalsList isEqualToArray:otherMessage.goalsList] &&
      [self.leaderboardRewardsList isEqualToArray:otherMessage.leaderboardRewardsList] &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasDesc == otherMessage.hasDesc &&
      (!self.hasDesc || [self.desc isEqual:otherMessage.desc]) &&
      self.hasImg == otherMessage.hasImg &&
      (!self.hasImg || [self.img isEqual:otherMessage.img]) &&
      self.hasIcon == otherMessage.hasIcon &&
      (!self.hasIcon || [self.icon isEqual:otherMessage.icon]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMiniEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventId] hash];
  }
  if (self.hasMiniEventStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.miniEventStartTime] hash];
  }
  if (self.hasMiniEventEndTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.miniEventEndTime] hash];
  }
  if (self.hasLvlEntered) {
    hashCode = hashCode * 31 + [self.lvlEntered hash];
  }
  [self.goalsList enumerateObjectsUsingBlock:^(MiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.leaderboardRewardsList enumerateObjectsUsingBlock:^(MiniEventLeaderboardRewardProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasDesc) {
    hashCode = hashCode * 31 + [self.desc hash];
  }
  if (self.hasImg) {
    hashCode = hashCode * 31 + [self.img hash];
  }
  if (self.hasIcon) {
    hashCode = hashCode * 31 + [self.icon hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MiniEventProto_Builder()
@property (strong) MiniEventProto* result;
@end

@implementation MiniEventProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MiniEventProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniEventProto_Builder*) clear {
  self.result = [[MiniEventProto alloc] init];
  return self;
}
- (MiniEventProto_Builder*) clone {
  return [MiniEventProto builderWithPrototype:result];
}
- (MiniEventProto*) defaultInstance {
  return [MiniEventProto defaultInstance];
}
- (MiniEventProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniEventProto*) buildPartial {
  MiniEventProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MiniEventProto_Builder*) mergeFrom:(MiniEventProto*) other {
  if (other == [MiniEventProto defaultInstance]) {
    return self;
  }
  if (other.hasMiniEventId) {
    [self setMiniEventId:other.miniEventId];
  }
  if (other.hasMiniEventStartTime) {
    [self setMiniEventStartTime:other.miniEventStartTime];
  }
  if (other.hasMiniEventEndTime) {
    [self setMiniEventEndTime:other.miniEventEndTime];
  }
  if (other.hasLvlEntered) {
    [self mergeLvlEntered:other.lvlEntered];
  }
  if (other.mutableGoalsList.count > 0) {
    if (result.mutableGoalsList == nil) {
      result.mutableGoalsList = [[NSMutableArray alloc] initWithArray:other.mutableGoalsList];
    } else {
      [result.mutableGoalsList addObjectsFromArray:other.mutableGoalsList];
    }
  }
  if (other.mutableLeaderboardRewardsList.count > 0) {
    if (result.mutableLeaderboardRewardsList == nil) {
      result.mutableLeaderboardRewardsList = [[NSMutableArray alloc] initWithArray:other.mutableLeaderboardRewardsList];
    } else {
      [result.mutableLeaderboardRewardsList addObjectsFromArray:other.mutableLeaderboardRewardsList];
    }
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasDesc) {
    [self setDesc:other.desc];
  }
  if (other.hasImg) {
    [self setImg:other.img];
  }
  if (other.hasIcon) {
    [self setIcon:other.icon];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMiniEventId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMiniEventStartTime:[input readInt64]];
        break;
      }
      case 24: {
        [self setMiniEventEndTime:[input readInt64]];
        break;
      }
      case 34: {
        MiniEventForPlayerLevelProto_Builder* subBuilder = [MiniEventForPlayerLevelProto builder];
        if (self.hasLvlEntered) {
          [subBuilder mergeFrom:self.lvlEntered];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLvlEntered:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        MiniEventGoalProto_Builder* subBuilder = [MiniEventGoalProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGoals:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        MiniEventLeaderboardRewardProto_Builder* subBuilder = [MiniEventLeaderboardRewardProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLeaderboardRewards:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        [self setName:[input readString]];
        break;
      }
      case 66: {
        [self setDesc:[input readString]];
        break;
      }
      case 74: {
        [self setImg:[input readString]];
        break;
      }
      case 82: {
        [self setIcon:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMiniEventId {
  return result.hasMiniEventId;
}
- (int32_t) miniEventId {
  return result.miniEventId;
}
- (MiniEventProto_Builder*) setMiniEventId:(int32_t) value {
  result.hasMiniEventId = YES;
  result.miniEventId = value;
  return self;
}
- (MiniEventProto_Builder*) clearMiniEventId {
  result.hasMiniEventId = NO;
  result.miniEventId = 0;
  return self;
}
- (BOOL) hasMiniEventStartTime {
  return result.hasMiniEventStartTime;
}
- (int64_t) miniEventStartTime {
  return result.miniEventStartTime;
}
- (MiniEventProto_Builder*) setMiniEventStartTime:(int64_t) value {
  result.hasMiniEventStartTime = YES;
  result.miniEventStartTime = value;
  return self;
}
- (MiniEventProto_Builder*) clearMiniEventStartTime {
  result.hasMiniEventStartTime = NO;
  result.miniEventStartTime = 0L;
  return self;
}
- (BOOL) hasMiniEventEndTime {
  return result.hasMiniEventEndTime;
}
- (int64_t) miniEventEndTime {
  return result.miniEventEndTime;
}
- (MiniEventProto_Builder*) setMiniEventEndTime:(int64_t) value {
  result.hasMiniEventEndTime = YES;
  result.miniEventEndTime = value;
  return self;
}
- (MiniEventProto_Builder*) clearMiniEventEndTime {
  result.hasMiniEventEndTime = NO;
  result.miniEventEndTime = 0L;
  return self;
}
- (BOOL) hasLvlEntered {
  return result.hasLvlEntered;
}
- (MiniEventForPlayerLevelProto*) lvlEntered {
  return result.lvlEntered;
}
- (MiniEventProto_Builder*) setLvlEntered:(MiniEventForPlayerLevelProto*) value {
  result.hasLvlEntered = YES;
  result.lvlEntered = value;
  return self;
}
- (MiniEventProto_Builder*) setLvlEntered_Builder:(MiniEventForPlayerLevelProto_Builder*) builderForValue {
  return [self setLvlEntered:[builderForValue build]];
}
- (MiniEventProto_Builder*) mergeLvlEntered:(MiniEventForPlayerLevelProto*) value {
  if (result.hasLvlEntered &&
      result.lvlEntered != [MiniEventForPlayerLevelProto defaultInstance]) {
    result.lvlEntered =
      [[[MiniEventForPlayerLevelProto builderWithPrototype:result.lvlEntered] mergeFrom:value] buildPartial];
  } else {
    result.lvlEntered = value;
  }
  result.hasLvlEntered = YES;
  return self;
}
- (MiniEventProto_Builder*) clearLvlEntered {
  result.hasLvlEntered = NO;
  result.lvlEntered = [MiniEventForPlayerLevelProto defaultInstance];
  return self;
}
- (NSMutableArray *)goalsList {
  return result.mutableGoalsList;
}
- (MiniEventGoalProto*)goalsAtIndex:(NSUInteger)index {
  return [result goalsAtIndex:index];
}
- (MiniEventProto_Builder *)addGoals:(MiniEventGoalProto*)value {
  if (result.mutableGoalsList == nil) {
    result.mutableGoalsList = [[NSMutableArray alloc]init];
  }
  [result.mutableGoalsList addObject:value];
  return self;
}
- (MiniEventProto_Builder *)addAllGoals:(NSArray *)array {
  if (result.mutableGoalsList == nil) {
    result.mutableGoalsList = [NSMutableArray array];
  }
  [result.mutableGoalsList addObjectsFromArray:array];
  return self;
}
- (MiniEventProto_Builder *)clearGoals {
  result.mutableGoalsList = nil;
  return self;
}
- (NSMutableArray *)leaderboardRewardsList {
  return result.mutableLeaderboardRewardsList;
}
- (MiniEventLeaderboardRewardProto*)leaderboardRewardsAtIndex:(NSUInteger)index {
  return [result leaderboardRewardsAtIndex:index];
}
- (MiniEventProto_Builder *)addLeaderboardRewards:(MiniEventLeaderboardRewardProto*)value {
  if (result.mutableLeaderboardRewardsList == nil) {
    result.mutableLeaderboardRewardsList = [[NSMutableArray alloc]init];
  }
  [result.mutableLeaderboardRewardsList addObject:value];
  return self;
}
- (MiniEventProto_Builder *)addAllLeaderboardRewards:(NSArray *)array {
  if (result.mutableLeaderboardRewardsList == nil) {
    result.mutableLeaderboardRewardsList = [NSMutableArray array];
  }
  [result.mutableLeaderboardRewardsList addObjectsFromArray:array];
  return self;
}
- (MiniEventProto_Builder *)clearLeaderboardRewards {
  result.mutableLeaderboardRewardsList = nil;
  return self;
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (MiniEventProto_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (MiniEventProto_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasDesc {
  return result.hasDesc;
}
- (NSString*) desc {
  return result.desc;
}
- (MiniEventProto_Builder*) setDesc:(NSString*) value {
  result.hasDesc = YES;
  result.desc = value;
  return self;
}
- (MiniEventProto_Builder*) clearDesc {
  result.hasDesc = NO;
  result.desc = @"";
  return self;
}
- (BOOL) hasImg {
  return result.hasImg;
}
- (NSString*) img {
  return result.img;
}
- (MiniEventProto_Builder*) setImg:(NSString*) value {
  result.hasImg = YES;
  result.img = value;
  return self;
}
- (MiniEventProto_Builder*) clearImg {
  result.hasImg = NO;
  result.img = @"";
  return self;
}
- (BOOL) hasIcon {
  return result.hasIcon;
}
- (NSString*) icon {
  return result.icon;
}
- (MiniEventProto_Builder*) setIcon:(NSString*) value {
  result.hasIcon = YES;
  result.icon = value;
  return self;
}
- (MiniEventProto_Builder*) clearIcon {
  result.hasIcon = NO;
  result.icon = @"";
  return self;
}
@end

@interface MiniEventGoalProto ()
@property int32_t miniEventGoalId;
@property int32_t miniEventId;
@property MiniEventGoalProto_MiniEventGoalType goalType;
@property int32_t goalAmt;
@property (strong) NSString* goalDesc;
@property int32_t pointsGained;
@property (strong) NSString* actionDescription;
@end

@implementation MiniEventGoalProto

- (BOOL) hasMiniEventGoalId {
  return !!hasMiniEventGoalId_;
}
- (void) setHasMiniEventGoalId:(BOOL) value_ {
  hasMiniEventGoalId_ = !!value_;
}
@synthesize miniEventGoalId;
- (BOOL) hasMiniEventId {
  return !!hasMiniEventId_;
}
- (void) setHasMiniEventId:(BOOL) value_ {
  hasMiniEventId_ = !!value_;
}
@synthesize miniEventId;
- (BOOL) hasGoalType {
  return !!hasGoalType_;
}
- (void) setHasGoalType:(BOOL) value_ {
  hasGoalType_ = !!value_;
}
@synthesize goalType;
- (BOOL) hasGoalAmt {
  return !!hasGoalAmt_;
}
- (void) setHasGoalAmt:(BOOL) value_ {
  hasGoalAmt_ = !!value_;
}
@synthesize goalAmt;
- (BOOL) hasGoalDesc {
  return !!hasGoalDesc_;
}
- (void) setHasGoalDesc:(BOOL) value_ {
  hasGoalDesc_ = !!value_;
}
@synthesize goalDesc;
- (BOOL) hasPointsGained {
  return !!hasPointsGained_;
}
- (void) setHasPointsGained:(BOOL) value_ {
  hasPointsGained_ = !!value_;
}
@synthesize pointsGained;
- (BOOL) hasActionDescription {
  return !!hasActionDescription_;
}
- (void) setHasActionDescription:(BOOL) value_ {
  hasActionDescription_ = !!value_;
}
@synthesize actionDescription;
- (id) init {
  if ((self = [super init])) {
    self.miniEventGoalId = 0;
    self.miniEventId = 0;
    self.goalType = MiniEventGoalProto_MiniEventGoalTypeNoGoal;
    self.goalAmt = 0;
    self.goalDesc = @"";
    self.pointsGained = 0;
    self.actionDescription = @"";
  }
  return self;
}
static MiniEventGoalProto* defaultMiniEventGoalProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniEventGoalProto class]) {
    defaultMiniEventGoalProtoInstance = [[MiniEventGoalProto alloc] init];
  }
}
+ (MiniEventGoalProto*) defaultInstance {
  return defaultMiniEventGoalProtoInstance;
}
- (MiniEventGoalProto*) defaultInstance {
  return defaultMiniEventGoalProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMiniEventGoalId) {
    [output writeInt32:1 value:self.miniEventGoalId];
  }
  if (self.hasMiniEventId) {
    [output writeInt32:2 value:self.miniEventId];
  }
  if (self.hasGoalType) {
    [output writeEnum:3 value:self.goalType];
  }
  if (self.hasGoalAmt) {
    [output writeInt32:4 value:self.goalAmt];
  }
  if (self.hasGoalDesc) {
    [output writeString:5 value:self.goalDesc];
  }
  if (self.hasPointsGained) {
    [output writeInt32:6 value:self.pointsGained];
  }
  if (self.hasActionDescription) {
    [output writeString:7 value:self.actionDescription];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMiniEventGoalId) {
    size_ += computeInt32Size(1, self.miniEventGoalId);
  }
  if (self.hasMiniEventId) {
    size_ += computeInt32Size(2, self.miniEventId);
  }
  if (self.hasGoalType) {
    size_ += computeEnumSize(3, self.goalType);
  }
  if (self.hasGoalAmt) {
    size_ += computeInt32Size(4, self.goalAmt);
  }
  if (self.hasGoalDesc) {
    size_ += computeStringSize(5, self.goalDesc);
  }
  if (self.hasPointsGained) {
    size_ += computeInt32Size(6, self.pointsGained);
  }
  if (self.hasActionDescription) {
    size_ += computeStringSize(7, self.actionDescription);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MiniEventGoalProto*) parseFromData:(NSData*) data {
  return (MiniEventGoalProto*)[[[MiniEventGoalProto builder] mergeFromData:data] build];
}
+ (MiniEventGoalProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventGoalProto*)[[[MiniEventGoalProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniEventGoalProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniEventGoalProto*)[[[MiniEventGoalProto builder] mergeFromInputStream:input] build];
}
+ (MiniEventGoalProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventGoalProto*)[[[MiniEventGoalProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventGoalProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniEventGoalProto*)[[[MiniEventGoalProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniEventGoalProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventGoalProto*)[[[MiniEventGoalProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventGoalProto_Builder*) builder {
  return [[MiniEventGoalProto_Builder alloc] init];
}
+ (MiniEventGoalProto_Builder*) builderWithPrototype:(MiniEventGoalProto*) prototype {
  return [[MiniEventGoalProto builder] mergeFrom:prototype];
}
- (MiniEventGoalProto_Builder*) builder {
  return [MiniEventGoalProto builder];
}
- (MiniEventGoalProto_Builder*) toBuilder {
  return [MiniEventGoalProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMiniEventGoalId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventGoalId", [NSNumber numberWithInteger:self.miniEventGoalId]];
  }
  if (self.hasMiniEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventId", [NSNumber numberWithInteger:self.miniEventId]];
  }
  if (self.hasGoalType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goalType", [NSNumber numberWithInteger:self.goalType]];
  }
  if (self.hasGoalAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goalAmt", [NSNumber numberWithInteger:self.goalAmt]];
  }
  if (self.hasGoalDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goalDesc", self.goalDesc];
  }
  if (self.hasPointsGained) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pointsGained", [NSNumber numberWithInteger:self.pointsGained]];
  }
  if (self.hasActionDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"actionDescription", self.actionDescription];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MiniEventGoalProto class]]) {
    return NO;
  }
  MiniEventGoalProto *otherMessage = other;
  return
      self.hasMiniEventGoalId == otherMessage.hasMiniEventGoalId &&
      (!self.hasMiniEventGoalId || self.miniEventGoalId == otherMessage.miniEventGoalId) &&
      self.hasMiniEventId == otherMessage.hasMiniEventId &&
      (!self.hasMiniEventId || self.miniEventId == otherMessage.miniEventId) &&
      self.hasGoalType == otherMessage.hasGoalType &&
      (!self.hasGoalType || self.goalType == otherMessage.goalType) &&
      self.hasGoalAmt == otherMessage.hasGoalAmt &&
      (!self.hasGoalAmt || self.goalAmt == otherMessage.goalAmt) &&
      self.hasGoalDesc == otherMessage.hasGoalDesc &&
      (!self.hasGoalDesc || [self.goalDesc isEqual:otherMessage.goalDesc]) &&
      self.hasPointsGained == otherMessage.hasPointsGained &&
      (!self.hasPointsGained || self.pointsGained == otherMessage.pointsGained) &&
      self.hasActionDescription == otherMessage.hasActionDescription &&
      (!self.hasActionDescription || [self.actionDescription isEqual:otherMessage.actionDescription]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMiniEventGoalId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventGoalId] hash];
  }
  if (self.hasMiniEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventId] hash];
  }
  if (self.hasGoalType) {
    hashCode = hashCode * 31 + self.goalType;
  }
  if (self.hasGoalAmt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.goalAmt] hash];
  }
  if (self.hasGoalDesc) {
    hashCode = hashCode * 31 + [self.goalDesc hash];
  }
  if (self.hasPointsGained) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.pointsGained] hash];
  }
  if (self.hasActionDescription) {
    hashCode = hashCode * 31 + [self.actionDescription hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MiniEventGoalProto_MiniEventGoalTypeIsValidValue(MiniEventGoalProto_MiniEventGoalType value) {
  switch (value) {
    case MiniEventGoalProto_MiniEventGoalTypeNoGoal:
    case MiniEventGoalProto_MiniEventGoalTypeHealHp:
    case MiniEventGoalProto_MiniEventGoalTypeEnhanceToonXp:
    case MiniEventGoalProto_MiniEventGoalTypeUseCashUpgradingBuilding:
    case MiniEventGoalProto_MiniEventGoalTypeUseOilUpgradingBuilding:
    case MiniEventGoalProto_MiniEventGoalTypeCaptureScientist:
      return YES;
    default:
      return NO;
  }
}
@interface MiniEventGoalProto_Builder()
@property (strong) MiniEventGoalProto* result;
@end

@implementation MiniEventGoalProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MiniEventGoalProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniEventGoalProto_Builder*) clear {
  self.result = [[MiniEventGoalProto alloc] init];
  return self;
}
- (MiniEventGoalProto_Builder*) clone {
  return [MiniEventGoalProto builderWithPrototype:result];
}
- (MiniEventGoalProto*) defaultInstance {
  return [MiniEventGoalProto defaultInstance];
}
- (MiniEventGoalProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniEventGoalProto*) buildPartial {
  MiniEventGoalProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MiniEventGoalProto_Builder*) mergeFrom:(MiniEventGoalProto*) other {
  if (other == [MiniEventGoalProto defaultInstance]) {
    return self;
  }
  if (other.hasMiniEventGoalId) {
    [self setMiniEventGoalId:other.miniEventGoalId];
  }
  if (other.hasMiniEventId) {
    [self setMiniEventId:other.miniEventId];
  }
  if (other.hasGoalType) {
    [self setGoalType:other.goalType];
  }
  if (other.hasGoalAmt) {
    [self setGoalAmt:other.goalAmt];
  }
  if (other.hasGoalDesc) {
    [self setGoalDesc:other.goalDesc];
  }
  if (other.hasPointsGained) {
    [self setPointsGained:other.pointsGained];
  }
  if (other.hasActionDescription) {
    [self setActionDescription:other.actionDescription];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniEventGoalProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniEventGoalProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMiniEventGoalId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMiniEventId:[input readInt32]];
        break;
      }
      case 24: {
        MiniEventGoalProto_MiniEventGoalType value = (MiniEventGoalProto_MiniEventGoalType)[input readEnum];
        if (MiniEventGoalProto_MiniEventGoalTypeIsValidValue(value)) {
          [self setGoalType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setGoalAmt:[input readInt32]];
        break;
      }
      case 42: {
        [self setGoalDesc:[input readString]];
        break;
      }
      case 48: {
        [self setPointsGained:[input readInt32]];
        break;
      }
      case 58: {
        [self setActionDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMiniEventGoalId {
  return result.hasMiniEventGoalId;
}
- (int32_t) miniEventGoalId {
  return result.miniEventGoalId;
}
- (MiniEventGoalProto_Builder*) setMiniEventGoalId:(int32_t) value {
  result.hasMiniEventGoalId = YES;
  result.miniEventGoalId = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearMiniEventGoalId {
  result.hasMiniEventGoalId = NO;
  result.miniEventGoalId = 0;
  return self;
}
- (BOOL) hasMiniEventId {
  return result.hasMiniEventId;
}
- (int32_t) miniEventId {
  return result.miniEventId;
}
- (MiniEventGoalProto_Builder*) setMiniEventId:(int32_t) value {
  result.hasMiniEventId = YES;
  result.miniEventId = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearMiniEventId {
  result.hasMiniEventId = NO;
  result.miniEventId = 0;
  return self;
}
- (BOOL) hasGoalType {
  return result.hasGoalType;
}
- (MiniEventGoalProto_MiniEventGoalType) goalType {
  return result.goalType;
}
- (MiniEventGoalProto_Builder*) setGoalType:(MiniEventGoalProto_MiniEventGoalType) value {
  result.hasGoalType = YES;
  result.goalType = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearGoalTypeList {
  result.hasGoalType = NO;
  result.goalType = MiniEventGoalProto_MiniEventGoalTypeNoGoal;
  return self;
}
- (BOOL) hasGoalAmt {
  return result.hasGoalAmt;
}
- (int32_t) goalAmt {
  return result.goalAmt;
}
- (MiniEventGoalProto_Builder*) setGoalAmt:(int32_t) value {
  result.hasGoalAmt = YES;
  result.goalAmt = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearGoalAmt {
  result.hasGoalAmt = NO;
  result.goalAmt = 0;
  return self;
}
- (BOOL) hasGoalDesc {
  return result.hasGoalDesc;
}
- (NSString*) goalDesc {
  return result.goalDesc;
}
- (MiniEventGoalProto_Builder*) setGoalDesc:(NSString*) value {
  result.hasGoalDesc = YES;
  result.goalDesc = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearGoalDesc {
  result.hasGoalDesc = NO;
  result.goalDesc = @"";
  return self;
}
- (BOOL) hasPointsGained {
  return result.hasPointsGained;
}
- (int32_t) pointsGained {
  return result.pointsGained;
}
- (MiniEventGoalProto_Builder*) setPointsGained:(int32_t) value {
  result.hasPointsGained = YES;
  result.pointsGained = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearPointsGained {
  result.hasPointsGained = NO;
  result.pointsGained = 0;
  return self;
}
- (BOOL) hasActionDescription {
  return result.hasActionDescription;
}
- (NSString*) actionDescription {
  return result.actionDescription;
}
- (MiniEventGoalProto_Builder*) setActionDescription:(NSString*) value {
  result.hasActionDescription = YES;
  result.actionDescription = value;
  return self;
}
- (MiniEventGoalProto_Builder*) clearActionDescription {
  result.hasActionDescription = NO;
  result.actionDescription = @"";
  return self;
}
@end

@interface MiniEventForPlayerLevelProto ()
@property int32_t mefplId;
@property int32_t miniEventId;
@property int32_t playerLvlMin;
@property int32_t playerLvlMax;
@property int32_t tierOneMinPts;
@property int32_t tierTwoMinPts;
@property int32_t tierThreeMinPts;
@property (strong) NSMutableArray * mutableRewardsList;
@end

@implementation MiniEventForPlayerLevelProto

- (BOOL) hasMefplId {
  return !!hasMefplId_;
}
- (void) setHasMefplId:(BOOL) value_ {
  hasMefplId_ = !!value_;
}
@synthesize mefplId;
- (BOOL) hasMiniEventId {
  return !!hasMiniEventId_;
}
- (void) setHasMiniEventId:(BOOL) value_ {
  hasMiniEventId_ = !!value_;
}
@synthesize miniEventId;
- (BOOL) hasPlayerLvlMin {
  return !!hasPlayerLvlMin_;
}
- (void) setHasPlayerLvlMin:(BOOL) value_ {
  hasPlayerLvlMin_ = !!value_;
}
@synthesize playerLvlMin;
- (BOOL) hasPlayerLvlMax {
  return !!hasPlayerLvlMax_;
}
- (void) setHasPlayerLvlMax:(BOOL) value_ {
  hasPlayerLvlMax_ = !!value_;
}
@synthesize playerLvlMax;
- (BOOL) hasTierOneMinPts {
  return !!hasTierOneMinPts_;
}
- (void) setHasTierOneMinPts:(BOOL) value_ {
  hasTierOneMinPts_ = !!value_;
}
@synthesize tierOneMinPts;
- (BOOL) hasTierTwoMinPts {
  return !!hasTierTwoMinPts_;
}
- (void) setHasTierTwoMinPts:(BOOL) value_ {
  hasTierTwoMinPts_ = !!value_;
}
@synthesize tierTwoMinPts;
- (BOOL) hasTierThreeMinPts {
  return !!hasTierThreeMinPts_;
}
- (void) setHasTierThreeMinPts:(BOOL) value_ {
  hasTierThreeMinPts_ = !!value_;
}
@synthesize tierThreeMinPts;
@synthesize mutableRewardsList;
@dynamic rewardsList;
- (id) init {
  if ((self = [super init])) {
    self.mefplId = 0;
    self.miniEventId = 0;
    self.playerLvlMin = 0;
    self.playerLvlMax = 0;
    self.tierOneMinPts = 0;
    self.tierTwoMinPts = 0;
    self.tierThreeMinPts = 0;
  }
  return self;
}
static MiniEventForPlayerLevelProto* defaultMiniEventForPlayerLevelProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniEventForPlayerLevelProto class]) {
    defaultMiniEventForPlayerLevelProtoInstance = [[MiniEventForPlayerLevelProto alloc] init];
  }
}
+ (MiniEventForPlayerLevelProto*) defaultInstance {
  return defaultMiniEventForPlayerLevelProtoInstance;
}
- (MiniEventForPlayerLevelProto*) defaultInstance {
  return defaultMiniEventForPlayerLevelProtoInstance;
}
- (NSArray *)rewardsList {
  return mutableRewardsList;
}
- (MiniEventTierRewardProto*)rewardsAtIndex:(NSUInteger)index {
  return [mutableRewardsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMefplId) {
    [output writeInt32:1 value:self.mefplId];
  }
  if (self.hasMiniEventId) {
    [output writeInt32:2 value:self.miniEventId];
  }
  if (self.hasPlayerLvlMin) {
    [output writeInt32:3 value:self.playerLvlMin];
  }
  if (self.hasPlayerLvlMax) {
    [output writeInt32:4 value:self.playerLvlMax];
  }
  if (self.hasTierOneMinPts) {
    [output writeInt32:5 value:self.tierOneMinPts];
  }
  if (self.hasTierTwoMinPts) {
    [output writeInt32:6 value:self.tierTwoMinPts];
  }
  if (self.hasTierThreeMinPts) {
    [output writeInt32:7 value:self.tierThreeMinPts];
  }
  [self.rewardsList enumerateObjectsUsingBlock:^(MiniEventTierRewardProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMefplId) {
    size_ += computeInt32Size(1, self.mefplId);
  }
  if (self.hasMiniEventId) {
    size_ += computeInt32Size(2, self.miniEventId);
  }
  if (self.hasPlayerLvlMin) {
    size_ += computeInt32Size(3, self.playerLvlMin);
  }
  if (self.hasPlayerLvlMax) {
    size_ += computeInt32Size(4, self.playerLvlMax);
  }
  if (self.hasTierOneMinPts) {
    size_ += computeInt32Size(5, self.tierOneMinPts);
  }
  if (self.hasTierTwoMinPts) {
    size_ += computeInt32Size(6, self.tierTwoMinPts);
  }
  if (self.hasTierThreeMinPts) {
    size_ += computeInt32Size(7, self.tierThreeMinPts);
  }
  [self.rewardsList enumerateObjectsUsingBlock:^(MiniEventTierRewardProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MiniEventForPlayerLevelProto*) parseFromData:(NSData*) data {
  return (MiniEventForPlayerLevelProto*)[[[MiniEventForPlayerLevelProto builder] mergeFromData:data] build];
}
+ (MiniEventForPlayerLevelProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventForPlayerLevelProto*)[[[MiniEventForPlayerLevelProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniEventForPlayerLevelProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniEventForPlayerLevelProto*)[[[MiniEventForPlayerLevelProto builder] mergeFromInputStream:input] build];
}
+ (MiniEventForPlayerLevelProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventForPlayerLevelProto*)[[[MiniEventForPlayerLevelProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventForPlayerLevelProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniEventForPlayerLevelProto*)[[[MiniEventForPlayerLevelProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniEventForPlayerLevelProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventForPlayerLevelProto*)[[[MiniEventForPlayerLevelProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventForPlayerLevelProto_Builder*) builder {
  return [[MiniEventForPlayerLevelProto_Builder alloc] init];
}
+ (MiniEventForPlayerLevelProto_Builder*) builderWithPrototype:(MiniEventForPlayerLevelProto*) prototype {
  return [[MiniEventForPlayerLevelProto builder] mergeFrom:prototype];
}
- (MiniEventForPlayerLevelProto_Builder*) builder {
  return [MiniEventForPlayerLevelProto builder];
}
- (MiniEventForPlayerLevelProto_Builder*) toBuilder {
  return [MiniEventForPlayerLevelProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMefplId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mefplId", [NSNumber numberWithInteger:self.mefplId]];
  }
  if (self.hasMiniEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventId", [NSNumber numberWithInteger:self.miniEventId]];
  }
  if (self.hasPlayerLvlMin) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerLvlMin", [NSNumber numberWithInteger:self.playerLvlMin]];
  }
  if (self.hasPlayerLvlMax) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerLvlMax", [NSNumber numberWithInteger:self.playerLvlMax]];
  }
  if (self.hasTierOneMinPts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierOneMinPts", [NSNumber numberWithInteger:self.tierOneMinPts]];
  }
  if (self.hasTierTwoMinPts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierTwoMinPts", [NSNumber numberWithInteger:self.tierTwoMinPts]];
  }
  if (self.hasTierThreeMinPts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierThreeMinPts", [NSNumber numberWithInteger:self.tierThreeMinPts]];
  }
  [self.rewardsList enumerateObjectsUsingBlock:^(MiniEventTierRewardProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rewards"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MiniEventForPlayerLevelProto class]]) {
    return NO;
  }
  MiniEventForPlayerLevelProto *otherMessage = other;
  return
      self.hasMefplId == otherMessage.hasMefplId &&
      (!self.hasMefplId || self.mefplId == otherMessage.mefplId) &&
      self.hasMiniEventId == otherMessage.hasMiniEventId &&
      (!self.hasMiniEventId || self.miniEventId == otherMessage.miniEventId) &&
      self.hasPlayerLvlMin == otherMessage.hasPlayerLvlMin &&
      (!self.hasPlayerLvlMin || self.playerLvlMin == otherMessage.playerLvlMin) &&
      self.hasPlayerLvlMax == otherMessage.hasPlayerLvlMax &&
      (!self.hasPlayerLvlMax || self.playerLvlMax == otherMessage.playerLvlMax) &&
      self.hasTierOneMinPts == otherMessage.hasTierOneMinPts &&
      (!self.hasTierOneMinPts || self.tierOneMinPts == otherMessage.tierOneMinPts) &&
      self.hasTierTwoMinPts == otherMessage.hasTierTwoMinPts &&
      (!self.hasTierTwoMinPts || self.tierTwoMinPts == otherMessage.tierTwoMinPts) &&
      self.hasTierThreeMinPts == otherMessage.hasTierThreeMinPts &&
      (!self.hasTierThreeMinPts || self.tierThreeMinPts == otherMessage.tierThreeMinPts) &&
      [self.rewardsList isEqualToArray:otherMessage.rewardsList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMefplId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mefplId] hash];
  }
  if (self.hasMiniEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventId] hash];
  }
  if (self.hasPlayerLvlMin) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playerLvlMin] hash];
  }
  if (self.hasPlayerLvlMax) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.playerLvlMax] hash];
  }
  if (self.hasTierOneMinPts) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tierOneMinPts] hash];
  }
  if (self.hasTierTwoMinPts) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tierTwoMinPts] hash];
  }
  if (self.hasTierThreeMinPts) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tierThreeMinPts] hash];
  }
  [self.rewardsList enumerateObjectsUsingBlock:^(MiniEventTierRewardProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MiniEventForPlayerLevelProto_Builder()
@property (strong) MiniEventForPlayerLevelProto* result;
@end

@implementation MiniEventForPlayerLevelProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MiniEventForPlayerLevelProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniEventForPlayerLevelProto_Builder*) clear {
  self.result = [[MiniEventForPlayerLevelProto alloc] init];
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clone {
  return [MiniEventForPlayerLevelProto builderWithPrototype:result];
}
- (MiniEventForPlayerLevelProto*) defaultInstance {
  return [MiniEventForPlayerLevelProto defaultInstance];
}
- (MiniEventForPlayerLevelProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniEventForPlayerLevelProto*) buildPartial {
  MiniEventForPlayerLevelProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MiniEventForPlayerLevelProto_Builder*) mergeFrom:(MiniEventForPlayerLevelProto*) other {
  if (other == [MiniEventForPlayerLevelProto defaultInstance]) {
    return self;
  }
  if (other.hasMefplId) {
    [self setMefplId:other.mefplId];
  }
  if (other.hasMiniEventId) {
    [self setMiniEventId:other.miniEventId];
  }
  if (other.hasPlayerLvlMin) {
    [self setPlayerLvlMin:other.playerLvlMin];
  }
  if (other.hasPlayerLvlMax) {
    [self setPlayerLvlMax:other.playerLvlMax];
  }
  if (other.hasTierOneMinPts) {
    [self setTierOneMinPts:other.tierOneMinPts];
  }
  if (other.hasTierTwoMinPts) {
    [self setTierTwoMinPts:other.tierTwoMinPts];
  }
  if (other.hasTierThreeMinPts) {
    [self setTierThreeMinPts:other.tierThreeMinPts];
  }
  if (other.mutableRewardsList.count > 0) {
    if (result.mutableRewardsList == nil) {
      result.mutableRewardsList = [[NSMutableArray alloc] initWithArray:other.mutableRewardsList];
    } else {
      [result.mutableRewardsList addObjectsFromArray:other.mutableRewardsList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniEventForPlayerLevelProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMefplId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMiniEventId:[input readInt32]];
        break;
      }
      case 24: {
        [self setPlayerLvlMin:[input readInt32]];
        break;
      }
      case 32: {
        [self setPlayerLvlMax:[input readInt32]];
        break;
      }
      case 40: {
        [self setTierOneMinPts:[input readInt32]];
        break;
      }
      case 48: {
        [self setTierTwoMinPts:[input readInt32]];
        break;
      }
      case 56: {
        [self setTierThreeMinPts:[input readInt32]];
        break;
      }
      case 66: {
        MiniEventTierRewardProto_Builder* subBuilder = [MiniEventTierRewardProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addRewards:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMefplId {
  return result.hasMefplId;
}
- (int32_t) mefplId {
  return result.mefplId;
}
- (MiniEventForPlayerLevelProto_Builder*) setMefplId:(int32_t) value {
  result.hasMefplId = YES;
  result.mefplId = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearMefplId {
  result.hasMefplId = NO;
  result.mefplId = 0;
  return self;
}
- (BOOL) hasMiniEventId {
  return result.hasMiniEventId;
}
- (int32_t) miniEventId {
  return result.miniEventId;
}
- (MiniEventForPlayerLevelProto_Builder*) setMiniEventId:(int32_t) value {
  result.hasMiniEventId = YES;
  result.miniEventId = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearMiniEventId {
  result.hasMiniEventId = NO;
  result.miniEventId = 0;
  return self;
}
- (BOOL) hasPlayerLvlMin {
  return result.hasPlayerLvlMin;
}
- (int32_t) playerLvlMin {
  return result.playerLvlMin;
}
- (MiniEventForPlayerLevelProto_Builder*) setPlayerLvlMin:(int32_t) value {
  result.hasPlayerLvlMin = YES;
  result.playerLvlMin = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearPlayerLvlMin {
  result.hasPlayerLvlMin = NO;
  result.playerLvlMin = 0;
  return self;
}
- (BOOL) hasPlayerLvlMax {
  return result.hasPlayerLvlMax;
}
- (int32_t) playerLvlMax {
  return result.playerLvlMax;
}
- (MiniEventForPlayerLevelProto_Builder*) setPlayerLvlMax:(int32_t) value {
  result.hasPlayerLvlMax = YES;
  result.playerLvlMax = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearPlayerLvlMax {
  result.hasPlayerLvlMax = NO;
  result.playerLvlMax = 0;
  return self;
}
- (BOOL) hasTierOneMinPts {
  return result.hasTierOneMinPts;
}
- (int32_t) tierOneMinPts {
  return result.tierOneMinPts;
}
- (MiniEventForPlayerLevelProto_Builder*) setTierOneMinPts:(int32_t) value {
  result.hasTierOneMinPts = YES;
  result.tierOneMinPts = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearTierOneMinPts {
  result.hasTierOneMinPts = NO;
  result.tierOneMinPts = 0;
  return self;
}
- (BOOL) hasTierTwoMinPts {
  return result.hasTierTwoMinPts;
}
- (int32_t) tierTwoMinPts {
  return result.tierTwoMinPts;
}
- (MiniEventForPlayerLevelProto_Builder*) setTierTwoMinPts:(int32_t) value {
  result.hasTierTwoMinPts = YES;
  result.tierTwoMinPts = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearTierTwoMinPts {
  result.hasTierTwoMinPts = NO;
  result.tierTwoMinPts = 0;
  return self;
}
- (BOOL) hasTierThreeMinPts {
  return result.hasTierThreeMinPts;
}
- (int32_t) tierThreeMinPts {
  return result.tierThreeMinPts;
}
- (MiniEventForPlayerLevelProto_Builder*) setTierThreeMinPts:(int32_t) value {
  result.hasTierThreeMinPts = YES;
  result.tierThreeMinPts = value;
  return self;
}
- (MiniEventForPlayerLevelProto_Builder*) clearTierThreeMinPts {
  result.hasTierThreeMinPts = NO;
  result.tierThreeMinPts = 0;
  return self;
}
- (NSMutableArray *)rewardsList {
  return result.mutableRewardsList;
}
- (MiniEventTierRewardProto*)rewardsAtIndex:(NSUInteger)index {
  return [result rewardsAtIndex:index];
}
- (MiniEventForPlayerLevelProto_Builder *)addRewards:(MiniEventTierRewardProto*)value {
  if (result.mutableRewardsList == nil) {
    result.mutableRewardsList = [[NSMutableArray alloc]init];
  }
  [result.mutableRewardsList addObject:value];
  return self;
}
- (MiniEventForPlayerLevelProto_Builder *)addAllRewards:(NSArray *)array {
  if (result.mutableRewardsList == nil) {
    result.mutableRewardsList = [NSMutableArray array];
  }
  [result.mutableRewardsList addObjectsFromArray:array];
  return self;
}
- (MiniEventForPlayerLevelProto_Builder *)clearRewards {
  result.mutableRewardsList = nil;
  return self;
}
@end

@interface MiniEventTierRewardProto ()
@property int32_t metrId;
@property int32_t mefplId;
@property int32_t rewardId;
@property int32_t tierLvl;
@end

@implementation MiniEventTierRewardProto

- (BOOL) hasMetrId {
  return !!hasMetrId_;
}
- (void) setHasMetrId:(BOOL) value_ {
  hasMetrId_ = !!value_;
}
@synthesize metrId;
- (BOOL) hasMefplId {
  return !!hasMefplId_;
}
- (void) setHasMefplId:(BOOL) value_ {
  hasMefplId_ = !!value_;
}
@synthesize mefplId;
- (BOOL) hasRewardId {
  return !!hasRewardId_;
}
- (void) setHasRewardId:(BOOL) value_ {
  hasRewardId_ = !!value_;
}
@synthesize rewardId;
- (BOOL) hasTierLvl {
  return !!hasTierLvl_;
}
- (void) setHasTierLvl:(BOOL) value_ {
  hasTierLvl_ = !!value_;
}
@synthesize tierLvl;
- (id) init {
  if ((self = [super init])) {
    self.metrId = 0;
    self.mefplId = 0;
    self.rewardId = 0;
    self.tierLvl = 0;
  }
  return self;
}
static MiniEventTierRewardProto* defaultMiniEventTierRewardProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniEventTierRewardProto class]) {
    defaultMiniEventTierRewardProtoInstance = [[MiniEventTierRewardProto alloc] init];
  }
}
+ (MiniEventTierRewardProto*) defaultInstance {
  return defaultMiniEventTierRewardProtoInstance;
}
- (MiniEventTierRewardProto*) defaultInstance {
  return defaultMiniEventTierRewardProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMetrId) {
    [output writeInt32:1 value:self.metrId];
  }
  if (self.hasMefplId) {
    [output writeInt32:2 value:self.mefplId];
  }
  if (self.hasRewardId) {
    [output writeInt32:3 value:self.rewardId];
  }
  if (self.hasTierLvl) {
    [output writeInt32:4 value:self.tierLvl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMetrId) {
    size_ += computeInt32Size(1, self.metrId);
  }
  if (self.hasMefplId) {
    size_ += computeInt32Size(2, self.mefplId);
  }
  if (self.hasRewardId) {
    size_ += computeInt32Size(3, self.rewardId);
  }
  if (self.hasTierLvl) {
    size_ += computeInt32Size(4, self.tierLvl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MiniEventTierRewardProto*) parseFromData:(NSData*) data {
  return (MiniEventTierRewardProto*)[[[MiniEventTierRewardProto builder] mergeFromData:data] build];
}
+ (MiniEventTierRewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventTierRewardProto*)[[[MiniEventTierRewardProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniEventTierRewardProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniEventTierRewardProto*)[[[MiniEventTierRewardProto builder] mergeFromInputStream:input] build];
}
+ (MiniEventTierRewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventTierRewardProto*)[[[MiniEventTierRewardProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventTierRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniEventTierRewardProto*)[[[MiniEventTierRewardProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniEventTierRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventTierRewardProto*)[[[MiniEventTierRewardProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventTierRewardProto_Builder*) builder {
  return [[MiniEventTierRewardProto_Builder alloc] init];
}
+ (MiniEventTierRewardProto_Builder*) builderWithPrototype:(MiniEventTierRewardProto*) prototype {
  return [[MiniEventTierRewardProto builder] mergeFrom:prototype];
}
- (MiniEventTierRewardProto_Builder*) builder {
  return [MiniEventTierRewardProto builder];
}
- (MiniEventTierRewardProto_Builder*) toBuilder {
  return [MiniEventTierRewardProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMetrId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"metrId", [NSNumber numberWithInteger:self.metrId]];
  }
  if (self.hasMefplId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mefplId", [NSNumber numberWithInteger:self.mefplId]];
  }
  if (self.hasRewardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rewardId", [NSNumber numberWithInteger:self.rewardId]];
  }
  if (self.hasTierLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierLvl", [NSNumber numberWithInteger:self.tierLvl]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MiniEventTierRewardProto class]]) {
    return NO;
  }
  MiniEventTierRewardProto *otherMessage = other;
  return
      self.hasMetrId == otherMessage.hasMetrId &&
      (!self.hasMetrId || self.metrId == otherMessage.metrId) &&
      self.hasMefplId == otherMessage.hasMefplId &&
      (!self.hasMefplId || self.mefplId == otherMessage.mefplId) &&
      self.hasRewardId == otherMessage.hasRewardId &&
      (!self.hasRewardId || self.rewardId == otherMessage.rewardId) &&
      self.hasTierLvl == otherMessage.hasTierLvl &&
      (!self.hasTierLvl || self.tierLvl == otherMessage.tierLvl) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMetrId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.metrId] hash];
  }
  if (self.hasMefplId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.mefplId] hash];
  }
  if (self.hasRewardId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rewardId] hash];
  }
  if (self.hasTierLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.tierLvl] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MiniEventTierRewardProto_Builder()
@property (strong) MiniEventTierRewardProto* result;
@end

@implementation MiniEventTierRewardProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MiniEventTierRewardProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniEventTierRewardProto_Builder*) clear {
  self.result = [[MiniEventTierRewardProto alloc] init];
  return self;
}
- (MiniEventTierRewardProto_Builder*) clone {
  return [MiniEventTierRewardProto builderWithPrototype:result];
}
- (MiniEventTierRewardProto*) defaultInstance {
  return [MiniEventTierRewardProto defaultInstance];
}
- (MiniEventTierRewardProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniEventTierRewardProto*) buildPartial {
  MiniEventTierRewardProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MiniEventTierRewardProto_Builder*) mergeFrom:(MiniEventTierRewardProto*) other {
  if (other == [MiniEventTierRewardProto defaultInstance]) {
    return self;
  }
  if (other.hasMetrId) {
    [self setMetrId:other.metrId];
  }
  if (other.hasMefplId) {
    [self setMefplId:other.mefplId];
  }
  if (other.hasRewardId) {
    [self setRewardId:other.rewardId];
  }
  if (other.hasTierLvl) {
    [self setTierLvl:other.tierLvl];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniEventTierRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniEventTierRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMetrId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMefplId:[input readInt32]];
        break;
      }
      case 24: {
        [self setRewardId:[input readInt32]];
        break;
      }
      case 32: {
        [self setTierLvl:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMetrId {
  return result.hasMetrId;
}
- (int32_t) metrId {
  return result.metrId;
}
- (MiniEventTierRewardProto_Builder*) setMetrId:(int32_t) value {
  result.hasMetrId = YES;
  result.metrId = value;
  return self;
}
- (MiniEventTierRewardProto_Builder*) clearMetrId {
  result.hasMetrId = NO;
  result.metrId = 0;
  return self;
}
- (BOOL) hasMefplId {
  return result.hasMefplId;
}
- (int32_t) mefplId {
  return result.mefplId;
}
- (MiniEventTierRewardProto_Builder*) setMefplId:(int32_t) value {
  result.hasMefplId = YES;
  result.mefplId = value;
  return self;
}
- (MiniEventTierRewardProto_Builder*) clearMefplId {
  result.hasMefplId = NO;
  result.mefplId = 0;
  return self;
}
- (BOOL) hasRewardId {
  return result.hasRewardId;
}
- (int32_t) rewardId {
  return result.rewardId;
}
- (MiniEventTierRewardProto_Builder*) setRewardId:(int32_t) value {
  result.hasRewardId = YES;
  result.rewardId = value;
  return self;
}
- (MiniEventTierRewardProto_Builder*) clearRewardId {
  result.hasRewardId = NO;
  result.rewardId = 0;
  return self;
}
- (BOOL) hasTierLvl {
  return result.hasTierLvl;
}
- (int32_t) tierLvl {
  return result.tierLvl;
}
- (MiniEventTierRewardProto_Builder*) setTierLvl:(int32_t) value {
  result.hasTierLvl = YES;
  result.tierLvl = value;
  return self;
}
- (MiniEventTierRewardProto_Builder*) clearTierLvl {
  result.hasTierLvl = NO;
  result.tierLvl = 0;
  return self;
}
@end

@interface MiniEventLeaderboardRewardProto ()
@property int32_t melrId;
@property int32_t miniEventId;
@property int32_t rewardId;
@property int32_t leaderboardMinPos;
@end

@implementation MiniEventLeaderboardRewardProto

- (BOOL) hasMelrId {
  return !!hasMelrId_;
}
- (void) setHasMelrId:(BOOL) value_ {
  hasMelrId_ = !!value_;
}
@synthesize melrId;
- (BOOL) hasMiniEventId {
  return !!hasMiniEventId_;
}
- (void) setHasMiniEventId:(BOOL) value_ {
  hasMiniEventId_ = !!value_;
}
@synthesize miniEventId;
- (BOOL) hasRewardId {
  return !!hasRewardId_;
}
- (void) setHasRewardId:(BOOL) value_ {
  hasRewardId_ = !!value_;
}
@synthesize rewardId;
- (BOOL) hasLeaderboardMinPos {
  return !!hasLeaderboardMinPos_;
}
- (void) setHasLeaderboardMinPos:(BOOL) value_ {
  hasLeaderboardMinPos_ = !!value_;
}
@synthesize leaderboardMinPos;
- (id) init {
  if ((self = [super init])) {
    self.melrId = 0;
    self.miniEventId = 0;
    self.rewardId = 0;
    self.leaderboardMinPos = 0;
  }
  return self;
}
static MiniEventLeaderboardRewardProto* defaultMiniEventLeaderboardRewardProtoInstance = nil;
+ (void) initialize {
  if (self == [MiniEventLeaderboardRewardProto class]) {
    defaultMiniEventLeaderboardRewardProtoInstance = [[MiniEventLeaderboardRewardProto alloc] init];
  }
}
+ (MiniEventLeaderboardRewardProto*) defaultInstance {
  return defaultMiniEventLeaderboardRewardProtoInstance;
}
- (MiniEventLeaderboardRewardProto*) defaultInstance {
  return defaultMiniEventLeaderboardRewardProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMelrId) {
    [output writeInt32:1 value:self.melrId];
  }
  if (self.hasMiniEventId) {
    [output writeInt32:2 value:self.miniEventId];
  }
  if (self.hasRewardId) {
    [output writeInt32:3 value:self.rewardId];
  }
  if (self.hasLeaderboardMinPos) {
    [output writeInt32:4 value:self.leaderboardMinPos];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMelrId) {
    size_ += computeInt32Size(1, self.melrId);
  }
  if (self.hasMiniEventId) {
    size_ += computeInt32Size(2, self.miniEventId);
  }
  if (self.hasRewardId) {
    size_ += computeInt32Size(3, self.rewardId);
  }
  if (self.hasLeaderboardMinPos) {
    size_ += computeInt32Size(4, self.leaderboardMinPos);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MiniEventLeaderboardRewardProto*) parseFromData:(NSData*) data {
  return (MiniEventLeaderboardRewardProto*)[[[MiniEventLeaderboardRewardProto builder] mergeFromData:data] build];
}
+ (MiniEventLeaderboardRewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventLeaderboardRewardProto*)[[[MiniEventLeaderboardRewardProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MiniEventLeaderboardRewardProto*) parseFromInputStream:(NSInputStream*) input {
  return (MiniEventLeaderboardRewardProto*)[[[MiniEventLeaderboardRewardProto builder] mergeFromInputStream:input] build];
}
+ (MiniEventLeaderboardRewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventLeaderboardRewardProto*)[[[MiniEventLeaderboardRewardProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventLeaderboardRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MiniEventLeaderboardRewardProto*)[[[MiniEventLeaderboardRewardProto builder] mergeFromCodedInputStream:input] build];
}
+ (MiniEventLeaderboardRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MiniEventLeaderboardRewardProto*)[[[MiniEventLeaderboardRewardProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MiniEventLeaderboardRewardProto_Builder*) builder {
  return [[MiniEventLeaderboardRewardProto_Builder alloc] init];
}
+ (MiniEventLeaderboardRewardProto_Builder*) builderWithPrototype:(MiniEventLeaderboardRewardProto*) prototype {
  return [[MiniEventLeaderboardRewardProto builder] mergeFrom:prototype];
}
- (MiniEventLeaderboardRewardProto_Builder*) builder {
  return [MiniEventLeaderboardRewardProto builder];
}
- (MiniEventLeaderboardRewardProto_Builder*) toBuilder {
  return [MiniEventLeaderboardRewardProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMelrId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"melrId", [NSNumber numberWithInteger:self.melrId]];
  }
  if (self.hasMiniEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventId", [NSNumber numberWithInteger:self.miniEventId]];
  }
  if (self.hasRewardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rewardId", [NSNumber numberWithInteger:self.rewardId]];
  }
  if (self.hasLeaderboardMinPos) {
    [output appendFormat:@"%@%@: %@\n", indent, @"leaderboardMinPos", [NSNumber numberWithInteger:self.leaderboardMinPos]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MiniEventLeaderboardRewardProto class]]) {
    return NO;
  }
  MiniEventLeaderboardRewardProto *otherMessage = other;
  return
      self.hasMelrId == otherMessage.hasMelrId &&
      (!self.hasMelrId || self.melrId == otherMessage.melrId) &&
      self.hasMiniEventId == otherMessage.hasMiniEventId &&
      (!self.hasMiniEventId || self.miniEventId == otherMessage.miniEventId) &&
      self.hasRewardId == otherMessage.hasRewardId &&
      (!self.hasRewardId || self.rewardId == otherMessage.rewardId) &&
      self.hasLeaderboardMinPos == otherMessage.hasLeaderboardMinPos &&
      (!self.hasLeaderboardMinPos || self.leaderboardMinPos == otherMessage.leaderboardMinPos) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMelrId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.melrId] hash];
  }
  if (self.hasMiniEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventId] hash];
  }
  if (self.hasRewardId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rewardId] hash];
  }
  if (self.hasLeaderboardMinPos) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.leaderboardMinPos] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MiniEventLeaderboardRewardProto_Builder()
@property (strong) MiniEventLeaderboardRewardProto* result;
@end

@implementation MiniEventLeaderboardRewardProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MiniEventLeaderboardRewardProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MiniEventLeaderboardRewardProto_Builder*) clear {
  self.result = [[MiniEventLeaderboardRewardProto alloc] init];
  return self;
}
- (MiniEventLeaderboardRewardProto_Builder*) clone {
  return [MiniEventLeaderboardRewardProto builderWithPrototype:result];
}
- (MiniEventLeaderboardRewardProto*) defaultInstance {
  return [MiniEventLeaderboardRewardProto defaultInstance];
}
- (MiniEventLeaderboardRewardProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MiniEventLeaderboardRewardProto*) buildPartial {
  MiniEventLeaderboardRewardProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MiniEventLeaderboardRewardProto_Builder*) mergeFrom:(MiniEventLeaderboardRewardProto*) other {
  if (other == [MiniEventLeaderboardRewardProto defaultInstance]) {
    return self;
  }
  if (other.hasMelrId) {
    [self setMelrId:other.melrId];
  }
  if (other.hasMiniEventId) {
    [self setMiniEventId:other.miniEventId];
  }
  if (other.hasRewardId) {
    [self setRewardId:other.rewardId];
  }
  if (other.hasLeaderboardMinPos) {
    [self setLeaderboardMinPos:other.leaderboardMinPos];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MiniEventLeaderboardRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MiniEventLeaderboardRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMelrId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMiniEventId:[input readInt32]];
        break;
      }
      case 24: {
        [self setRewardId:[input readInt32]];
        break;
      }
      case 32: {
        [self setLeaderboardMinPos:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMelrId {
  return result.hasMelrId;
}
- (int32_t) melrId {
  return result.melrId;
}
- (MiniEventLeaderboardRewardProto_Builder*) setMelrId:(int32_t) value {
  result.hasMelrId = YES;
  result.melrId = value;
  return self;
}
- (MiniEventLeaderboardRewardProto_Builder*) clearMelrId {
  result.hasMelrId = NO;
  result.melrId = 0;
  return self;
}
- (BOOL) hasMiniEventId {
  return result.hasMiniEventId;
}
- (int32_t) miniEventId {
  return result.miniEventId;
}
- (MiniEventLeaderboardRewardProto_Builder*) setMiniEventId:(int32_t) value {
  result.hasMiniEventId = YES;
  result.miniEventId = value;
  return self;
}
- (MiniEventLeaderboardRewardProto_Builder*) clearMiniEventId {
  result.hasMiniEventId = NO;
  result.miniEventId = 0;
  return self;
}
- (BOOL) hasRewardId {
  return result.hasRewardId;
}
- (int32_t) rewardId {
  return result.rewardId;
}
- (MiniEventLeaderboardRewardProto_Builder*) setRewardId:(int32_t) value {
  result.hasRewardId = YES;
  result.rewardId = value;
  return self;
}
- (MiniEventLeaderboardRewardProto_Builder*) clearRewardId {
  result.hasRewardId = NO;
  result.rewardId = 0;
  return self;
}
- (BOOL) hasLeaderboardMinPos {
  return result.hasLeaderboardMinPos;
}
- (int32_t) leaderboardMinPos {
  return result.leaderboardMinPos;
}
- (MiniEventLeaderboardRewardProto_Builder*) setLeaderboardMinPos:(int32_t) value {
  result.hasLeaderboardMinPos = YES;
  result.leaderboardMinPos = value;
  return self;
}
- (MiniEventLeaderboardRewardProto_Builder*) clearLeaderboardMinPos {
  result.hasLeaderboardMinPos = NO;
  result.leaderboardMinPos = 0;
  return self;
}
@end

@interface UserMiniEventProto ()
@property int32_t miniEventId;
@property (strong) NSString* userUuid;
@property int32_t userLvl;
@property BOOL tierOneRedeemed;
@property BOOL tierTwoRedeemed;
@property BOOL tierThreeRedeemed;
@property (strong) MiniEventProto* miniEvent;
@property (strong) NSMutableArray * mutableGoalsList;
@end

@implementation UserMiniEventProto

- (BOOL) hasMiniEventId {
  return !!hasMiniEventId_;
}
- (void) setHasMiniEventId:(BOOL) value_ {
  hasMiniEventId_ = !!value_;
}
@synthesize miniEventId;
- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasUserLvl {
  return !!hasUserLvl_;
}
- (void) setHasUserLvl:(BOOL) value_ {
  hasUserLvl_ = !!value_;
}
@synthesize userLvl;
- (BOOL) hasTierOneRedeemed {
  return !!hasTierOneRedeemed_;
}
- (void) setHasTierOneRedeemed:(BOOL) value_ {
  hasTierOneRedeemed_ = !!value_;
}
- (BOOL) tierOneRedeemed {
  return !!tierOneRedeemed_;
}
- (void) setTierOneRedeemed:(BOOL) value_ {
  tierOneRedeemed_ = !!value_;
}
- (BOOL) hasTierTwoRedeemed {
  return !!hasTierTwoRedeemed_;
}
- (void) setHasTierTwoRedeemed:(BOOL) value_ {
  hasTierTwoRedeemed_ = !!value_;
}
- (BOOL) tierTwoRedeemed {
  return !!tierTwoRedeemed_;
}
- (void) setTierTwoRedeemed:(BOOL) value_ {
  tierTwoRedeemed_ = !!value_;
}
- (BOOL) hasTierThreeRedeemed {
  return !!hasTierThreeRedeemed_;
}
- (void) setHasTierThreeRedeemed:(BOOL) value_ {
  hasTierThreeRedeemed_ = !!value_;
}
- (BOOL) tierThreeRedeemed {
  return !!tierThreeRedeemed_;
}
- (void) setTierThreeRedeemed:(BOOL) value_ {
  tierThreeRedeemed_ = !!value_;
}
- (BOOL) hasMiniEvent {
  return !!hasMiniEvent_;
}
- (void) setHasMiniEvent:(BOOL) value_ {
  hasMiniEvent_ = !!value_;
}
@synthesize miniEvent;
@synthesize mutableGoalsList;
@dynamic goalsList;
- (id) init {
  if ((self = [super init])) {
    self.miniEventId = 0;
    self.userUuid = @"";
    self.userLvl = 0;
    self.tierOneRedeemed = NO;
    self.tierTwoRedeemed = NO;
    self.tierThreeRedeemed = NO;
    self.miniEvent = [MiniEventProto defaultInstance];
  }
  return self;
}
static UserMiniEventProto* defaultUserMiniEventProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMiniEventProto class]) {
    defaultUserMiniEventProtoInstance = [[UserMiniEventProto alloc] init];
  }
}
+ (UserMiniEventProto*) defaultInstance {
  return defaultUserMiniEventProtoInstance;
}
- (UserMiniEventProto*) defaultInstance {
  return defaultUserMiniEventProtoInstance;
}
- (NSArray *)goalsList {
  return mutableGoalsList;
}
- (UserMiniEventGoalProto*)goalsAtIndex:(NSUInteger)index {
  return [mutableGoalsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMiniEventId) {
    [output writeInt32:1 value:self.miniEventId];
  }
  if (self.hasUserUuid) {
    [output writeString:2 value:self.userUuid];
  }
  if (self.hasUserLvl) {
    [output writeInt32:3 value:self.userLvl];
  }
  if (self.hasTierOneRedeemed) {
    [output writeBool:4 value:self.tierOneRedeemed];
  }
  if (self.hasTierTwoRedeemed) {
    [output writeBool:5 value:self.tierTwoRedeemed];
  }
  if (self.hasTierThreeRedeemed) {
    [output writeBool:6 value:self.tierThreeRedeemed];
  }
  if (self.hasMiniEvent) {
    [output writeMessage:7 value:self.miniEvent];
  }
  [self.goalsList enumerateObjectsUsingBlock:^(UserMiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMiniEventId) {
    size_ += computeInt32Size(1, self.miniEventId);
  }
  if (self.hasUserUuid) {
    size_ += computeStringSize(2, self.userUuid);
  }
  if (self.hasUserLvl) {
    size_ += computeInt32Size(3, self.userLvl);
  }
  if (self.hasTierOneRedeemed) {
    size_ += computeBoolSize(4, self.tierOneRedeemed);
  }
  if (self.hasTierTwoRedeemed) {
    size_ += computeBoolSize(5, self.tierTwoRedeemed);
  }
  if (self.hasTierThreeRedeemed) {
    size_ += computeBoolSize(6, self.tierThreeRedeemed);
  }
  if (self.hasMiniEvent) {
    size_ += computeMessageSize(7, self.miniEvent);
  }
  [self.goalsList enumerateObjectsUsingBlock:^(UserMiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMiniEventProto*) parseFromData:(NSData*) data {
  return (UserMiniEventProto*)[[[UserMiniEventProto builder] mergeFromData:data] build];
}
+ (UserMiniEventProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniEventProto*)[[[UserMiniEventProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMiniEventProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMiniEventProto*)[[[UserMiniEventProto builder] mergeFromInputStream:input] build];
}
+ (UserMiniEventProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniEventProto*)[[[UserMiniEventProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMiniEventProto*)[[[UserMiniEventProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMiniEventProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniEventProto*)[[[UserMiniEventProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniEventProto_Builder*) builder {
  return [[UserMiniEventProto_Builder alloc] init];
}
+ (UserMiniEventProto_Builder*) builderWithPrototype:(UserMiniEventProto*) prototype {
  return [[UserMiniEventProto builder] mergeFrom:prototype];
}
- (UserMiniEventProto_Builder*) builder {
  return [UserMiniEventProto builder];
}
- (UserMiniEventProto_Builder*) toBuilder {
  return [UserMiniEventProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMiniEventId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventId", [NSNumber numberWithInteger:self.miniEventId]];
  }
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasUserLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userLvl", [NSNumber numberWithInteger:self.userLvl]];
  }
  if (self.hasTierOneRedeemed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierOneRedeemed", [NSNumber numberWithBool:self.tierOneRedeemed]];
  }
  if (self.hasTierTwoRedeemed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierTwoRedeemed", [NSNumber numberWithBool:self.tierTwoRedeemed]];
  }
  if (self.hasTierThreeRedeemed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tierThreeRedeemed", [NSNumber numberWithBool:self.tierThreeRedeemed]];
  }
  if (self.hasMiniEvent) {
    [output appendFormat:@"%@%@ {\n", indent, @"miniEvent"];
    [self.miniEvent writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.goalsList enumerateObjectsUsingBlock:^(UserMiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"goals"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMiniEventProto class]]) {
    return NO;
  }
  UserMiniEventProto *otherMessage = other;
  return
      self.hasMiniEventId == otherMessage.hasMiniEventId &&
      (!self.hasMiniEventId || self.miniEventId == otherMessage.miniEventId) &&
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasUserLvl == otherMessage.hasUserLvl &&
      (!self.hasUserLvl || self.userLvl == otherMessage.userLvl) &&
      self.hasTierOneRedeemed == otherMessage.hasTierOneRedeemed &&
      (!self.hasTierOneRedeemed || self.tierOneRedeemed == otherMessage.tierOneRedeemed) &&
      self.hasTierTwoRedeemed == otherMessage.hasTierTwoRedeemed &&
      (!self.hasTierTwoRedeemed || self.tierTwoRedeemed == otherMessage.tierTwoRedeemed) &&
      self.hasTierThreeRedeemed == otherMessage.hasTierThreeRedeemed &&
      (!self.hasTierThreeRedeemed || self.tierThreeRedeemed == otherMessage.tierThreeRedeemed) &&
      self.hasMiniEvent == otherMessage.hasMiniEvent &&
      (!self.hasMiniEvent || [self.miniEvent isEqual:otherMessage.miniEvent]) &&
      [self.goalsList isEqualToArray:otherMessage.goalsList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMiniEventId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventId] hash];
  }
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasUserLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.userLvl] hash];
  }
  if (self.hasTierOneRedeemed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tierOneRedeemed] hash];
  }
  if (self.hasTierTwoRedeemed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tierTwoRedeemed] hash];
  }
  if (self.hasTierThreeRedeemed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.tierThreeRedeemed] hash];
  }
  if (self.hasMiniEvent) {
    hashCode = hashCode * 31 + [self.miniEvent hash];
  }
  [self.goalsList enumerateObjectsUsingBlock:^(UserMiniEventGoalProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMiniEventProto_Builder()
@property (strong) UserMiniEventProto* result;
@end

@implementation UserMiniEventProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMiniEventProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMiniEventProto_Builder*) clear {
  self.result = [[UserMiniEventProto alloc] init];
  return self;
}
- (UserMiniEventProto_Builder*) clone {
  return [UserMiniEventProto builderWithPrototype:result];
}
- (UserMiniEventProto*) defaultInstance {
  return [UserMiniEventProto defaultInstance];
}
- (UserMiniEventProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMiniEventProto*) buildPartial {
  UserMiniEventProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMiniEventProto_Builder*) mergeFrom:(UserMiniEventProto*) other {
  if (other == [UserMiniEventProto defaultInstance]) {
    return self;
  }
  if (other.hasMiniEventId) {
    [self setMiniEventId:other.miniEventId];
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasUserLvl) {
    [self setUserLvl:other.userLvl];
  }
  if (other.hasTierOneRedeemed) {
    [self setTierOneRedeemed:other.tierOneRedeemed];
  }
  if (other.hasTierTwoRedeemed) {
    [self setTierTwoRedeemed:other.tierTwoRedeemed];
  }
  if (other.hasTierThreeRedeemed) {
    [self setTierThreeRedeemed:other.tierThreeRedeemed];
  }
  if (other.hasMiniEvent) {
    [self mergeMiniEvent:other.miniEvent];
  }
  if (other.mutableGoalsList.count > 0) {
    if (result.mutableGoalsList == nil) {
      result.mutableGoalsList = [[NSMutableArray alloc] initWithArray:other.mutableGoalsList];
    } else {
      [result.mutableGoalsList addObjectsFromArray:other.mutableGoalsList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMiniEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMiniEventProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMiniEventId:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 24: {
        [self setUserLvl:[input readInt32]];
        break;
      }
      case 32: {
        [self setTierOneRedeemed:[input readBool]];
        break;
      }
      case 40: {
        [self setTierTwoRedeemed:[input readBool]];
        break;
      }
      case 48: {
        [self setTierThreeRedeemed:[input readBool]];
        break;
      }
      case 58: {
        MiniEventProto_Builder* subBuilder = [MiniEventProto builder];
        if (self.hasMiniEvent) {
          [subBuilder mergeFrom:self.miniEvent];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMiniEvent:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        UserMiniEventGoalProto_Builder* subBuilder = [UserMiniEventGoalProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addGoals:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasMiniEventId {
  return result.hasMiniEventId;
}
- (int32_t) miniEventId {
  return result.miniEventId;
}
- (UserMiniEventProto_Builder*) setMiniEventId:(int32_t) value {
  result.hasMiniEventId = YES;
  result.miniEventId = value;
  return self;
}
- (UserMiniEventProto_Builder*) clearMiniEventId {
  result.hasMiniEventId = NO;
  result.miniEventId = 0;
  return self;
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (UserMiniEventProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (UserMiniEventProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasUserLvl {
  return result.hasUserLvl;
}
- (int32_t) userLvl {
  return result.userLvl;
}
- (UserMiniEventProto_Builder*) setUserLvl:(int32_t) value {
  result.hasUserLvl = YES;
  result.userLvl = value;
  return self;
}
- (UserMiniEventProto_Builder*) clearUserLvl {
  result.hasUserLvl = NO;
  result.userLvl = 0;
  return self;
}
- (BOOL) hasTierOneRedeemed {
  return result.hasTierOneRedeemed;
}
- (BOOL) tierOneRedeemed {
  return result.tierOneRedeemed;
}
- (UserMiniEventProto_Builder*) setTierOneRedeemed:(BOOL) value {
  result.hasTierOneRedeemed = YES;
  result.tierOneRedeemed = value;
  return self;
}
- (UserMiniEventProto_Builder*) clearTierOneRedeemed {
  result.hasTierOneRedeemed = NO;
  result.tierOneRedeemed = NO;
  return self;
}
- (BOOL) hasTierTwoRedeemed {
  return result.hasTierTwoRedeemed;
}
- (BOOL) tierTwoRedeemed {
  return result.tierTwoRedeemed;
}
- (UserMiniEventProto_Builder*) setTierTwoRedeemed:(BOOL) value {
  result.hasTierTwoRedeemed = YES;
  result.tierTwoRedeemed = value;
  return self;
}
- (UserMiniEventProto_Builder*) clearTierTwoRedeemed {
  result.hasTierTwoRedeemed = NO;
  result.tierTwoRedeemed = NO;
  return self;
}
- (BOOL) hasTierThreeRedeemed {
  return result.hasTierThreeRedeemed;
}
- (BOOL) tierThreeRedeemed {
  return result.tierThreeRedeemed;
}
- (UserMiniEventProto_Builder*) setTierThreeRedeemed:(BOOL) value {
  result.hasTierThreeRedeemed = YES;
  result.tierThreeRedeemed = value;
  return self;
}
- (UserMiniEventProto_Builder*) clearTierThreeRedeemed {
  result.hasTierThreeRedeemed = NO;
  result.tierThreeRedeemed = NO;
  return self;
}
- (BOOL) hasMiniEvent {
  return result.hasMiniEvent;
}
- (MiniEventProto*) miniEvent {
  return result.miniEvent;
}
- (UserMiniEventProto_Builder*) setMiniEvent:(MiniEventProto*) value {
  result.hasMiniEvent = YES;
  result.miniEvent = value;
  return self;
}
- (UserMiniEventProto_Builder*) setMiniEvent_Builder:(MiniEventProto_Builder*) builderForValue {
  return [self setMiniEvent:[builderForValue build]];
}
- (UserMiniEventProto_Builder*) mergeMiniEvent:(MiniEventProto*) value {
  if (result.hasMiniEvent &&
      result.miniEvent != [MiniEventProto defaultInstance]) {
    result.miniEvent =
      [[[MiniEventProto builderWithPrototype:result.miniEvent] mergeFrom:value] buildPartial];
  } else {
    result.miniEvent = value;
  }
  result.hasMiniEvent = YES;
  return self;
}
- (UserMiniEventProto_Builder*) clearMiniEvent {
  result.hasMiniEvent = NO;
  result.miniEvent = [MiniEventProto defaultInstance];
  return self;
}
- (NSMutableArray *)goalsList {
  return result.mutableGoalsList;
}
- (UserMiniEventGoalProto*)goalsAtIndex:(NSUInteger)index {
  return [result goalsAtIndex:index];
}
- (UserMiniEventProto_Builder *)addGoals:(UserMiniEventGoalProto*)value {
  if (result.mutableGoalsList == nil) {
    result.mutableGoalsList = [[NSMutableArray alloc]init];
  }
  [result.mutableGoalsList addObject:value];
  return self;
}
- (UserMiniEventProto_Builder *)addAllGoals:(NSArray *)array {
  if (result.mutableGoalsList == nil) {
    result.mutableGoalsList = [NSMutableArray array];
  }
  [result.mutableGoalsList addObjectsFromArray:array];
  return self;
}
- (UserMiniEventProto_Builder *)clearGoals {
  result.mutableGoalsList = nil;
  return self;
}
@end

@interface UserMiniEventGoalProto ()
@property (strong) NSString* userUuid;
@property int32_t miniEventGoalId;
@property int32_t progress;
@end

@implementation UserMiniEventGoalProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasMiniEventGoalId {
  return !!hasMiniEventGoalId_;
}
- (void) setHasMiniEventGoalId:(BOOL) value_ {
  hasMiniEventGoalId_ = !!value_;
}
@synthesize miniEventGoalId;
- (BOOL) hasProgress {
  return !!hasProgress_;
}
- (void) setHasProgress:(BOOL) value_ {
  hasProgress_ = !!value_;
}
@synthesize progress;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.miniEventGoalId = 0;
    self.progress = 0;
  }
  return self;
}
static UserMiniEventGoalProto* defaultUserMiniEventGoalProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMiniEventGoalProto class]) {
    defaultUserMiniEventGoalProtoInstance = [[UserMiniEventGoalProto alloc] init];
  }
}
+ (UserMiniEventGoalProto*) defaultInstance {
  return defaultUserMiniEventGoalProtoInstance;
}
- (UserMiniEventGoalProto*) defaultInstance {
  return defaultUserMiniEventGoalProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasMiniEventGoalId) {
    [output writeInt32:2 value:self.miniEventGoalId];
  }
  if (self.hasProgress) {
    [output writeInt32:3 value:self.progress];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasMiniEventGoalId) {
    size_ += computeInt32Size(2, self.miniEventGoalId);
  }
  if (self.hasProgress) {
    size_ += computeInt32Size(3, self.progress);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMiniEventGoalProto*) parseFromData:(NSData*) data {
  return (UserMiniEventGoalProto*)[[[UserMiniEventGoalProto builder] mergeFromData:data] build];
}
+ (UserMiniEventGoalProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniEventGoalProto*)[[[UserMiniEventGoalProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMiniEventGoalProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMiniEventGoalProto*)[[[UserMiniEventGoalProto builder] mergeFromInputStream:input] build];
}
+ (UserMiniEventGoalProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniEventGoalProto*)[[[UserMiniEventGoalProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniEventGoalProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMiniEventGoalProto*)[[[UserMiniEventGoalProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMiniEventGoalProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMiniEventGoalProto*)[[[UserMiniEventGoalProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMiniEventGoalProto_Builder*) builder {
  return [[UserMiniEventGoalProto_Builder alloc] init];
}
+ (UserMiniEventGoalProto_Builder*) builderWithPrototype:(UserMiniEventGoalProto*) prototype {
  return [[UserMiniEventGoalProto builder] mergeFrom:prototype];
}
- (UserMiniEventGoalProto_Builder*) builder {
  return [UserMiniEventGoalProto builder];
}
- (UserMiniEventGoalProto_Builder*) toBuilder {
  return [UserMiniEventGoalProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasMiniEventGoalId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"miniEventGoalId", [NSNumber numberWithInteger:self.miniEventGoalId]];
  }
  if (self.hasProgress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"progress", [NSNumber numberWithInteger:self.progress]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMiniEventGoalProto class]]) {
    return NO;
  }
  UserMiniEventGoalProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasMiniEventGoalId == otherMessage.hasMiniEventGoalId &&
      (!self.hasMiniEventGoalId || self.miniEventGoalId == otherMessage.miniEventGoalId) &&
      self.hasProgress == otherMessage.hasProgress &&
      (!self.hasProgress || self.progress == otherMessage.progress) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasMiniEventGoalId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.miniEventGoalId] hash];
  }
  if (self.hasProgress) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.progress] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMiniEventGoalProto_Builder()
@property (strong) UserMiniEventGoalProto* result;
@end

@implementation UserMiniEventGoalProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMiniEventGoalProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMiniEventGoalProto_Builder*) clear {
  self.result = [[UserMiniEventGoalProto alloc] init];
  return self;
}
- (UserMiniEventGoalProto_Builder*) clone {
  return [UserMiniEventGoalProto builderWithPrototype:result];
}
- (UserMiniEventGoalProto*) defaultInstance {
  return [UserMiniEventGoalProto defaultInstance];
}
- (UserMiniEventGoalProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMiniEventGoalProto*) buildPartial {
  UserMiniEventGoalProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMiniEventGoalProto_Builder*) mergeFrom:(UserMiniEventGoalProto*) other {
  if (other == [UserMiniEventGoalProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasMiniEventGoalId) {
    [self setMiniEventGoalId:other.miniEventGoalId];
  }
  if (other.hasProgress) {
    [self setProgress:other.progress];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMiniEventGoalProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMiniEventGoalProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 16: {
        [self setMiniEventGoalId:[input readInt32]];
        break;
      }
      case 24: {
        [self setProgress:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (UserMiniEventGoalProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (UserMiniEventGoalProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasMiniEventGoalId {
  return result.hasMiniEventGoalId;
}
- (int32_t) miniEventGoalId {
  return result.miniEventGoalId;
}
- (UserMiniEventGoalProto_Builder*) setMiniEventGoalId:(int32_t) value {
  result.hasMiniEventGoalId = YES;
  result.miniEventGoalId = value;
  return self;
}
- (UserMiniEventGoalProto_Builder*) clearMiniEventGoalId {
  result.hasMiniEventGoalId = NO;
  result.miniEventGoalId = 0;
  return self;
}
- (BOOL) hasProgress {
  return result.hasProgress;
}
- (int32_t) progress {
  return result.progress;
}
- (UserMiniEventGoalProto_Builder*) setProgress:(int32_t) value {
  result.hasProgress = YES;
  result.progress = value;
  return self;
}
- (UserMiniEventGoalProto_Builder*) clearProgress {
  result.hasProgress = NO;
  result.progress = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
