// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "MonsterStuff.pb.h"
// @@protoc_insertion_point(imports)

@implementation MonsterStuffRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MonsterStuffRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [SharedEnumConfigRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface MonsterProto ()
@property int32_t monsterId;
@property (strong) NSString* evolutionGroup;
@property (strong) NSString* shorterName;
@property (strong) NSString* monsterGroup;
@property Quality quality;
@property int32_t evolutionLevel;
@property (strong) NSString* displayName;
@property Element monsterElement;
@property (strong) NSString* imagePrefix;
@property int32_t numPuzzlePieces;
@property int32_t minutesToCombinePieces;
@property int32_t maxLevel;
@property int32_t evolutionMonsterId;
@property int32_t evolutionCatalystMonsterId;
@property int32_t minutesToEvolve;
@property int32_t numCatalystMonstersRequired;
@property (strong) NSString* carrotRecruited;
@property (strong) NSString* carrotDefeated;
@property (strong) NSString* carrotEvolved;
@property (strong) NSString* description;
@property (strong) NSMutableArray * mutableLvlInfoList;
@property int32_t evolutionCost;
@property MonsterProto_AnimationType attackAnimationType;
@property int32_t verticalPixelOffset;
@property (strong) NSString* atkSoundFile;
@property int32_t atkSoundAnimationFrame;
@property int32_t atkAnimationRepeatedFramesStart;
@property int32_t atkAnimationRepeatedFramesEnd;
@property Float32 shadowScaleFactor;
@property int32_t baseOffensiveSkillId;
@property int32_t baseDefensiveSkillId;
@end

@implementation MonsterProto

- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasEvolutionGroup {
  return !!hasEvolutionGroup_;
}
- (void) setHasEvolutionGroup:(BOOL) value_ {
  hasEvolutionGroup_ = !!value_;
}
@synthesize evolutionGroup;
- (BOOL) hasShorterName {
  return !!hasShorterName_;
}
- (void) setHasShorterName:(BOOL) value_ {
  hasShorterName_ = !!value_;
}
@synthesize shorterName;
- (BOOL) hasMonsterGroup {
  return !!hasMonsterGroup_;
}
- (void) setHasMonsterGroup:(BOOL) value_ {
  hasMonsterGroup_ = !!value_;
}
@synthesize monsterGroup;
- (BOOL) hasQuality {
  return !!hasQuality_;
}
- (void) setHasQuality:(BOOL) value_ {
  hasQuality_ = !!value_;
}
@synthesize quality;
- (BOOL) hasEvolutionLevel {
  return !!hasEvolutionLevel_;
}
- (void) setHasEvolutionLevel:(BOOL) value_ {
  hasEvolutionLevel_ = !!value_;
}
@synthesize evolutionLevel;
- (BOOL) hasDisplayName {
  return !!hasDisplayName_;
}
- (void) setHasDisplayName:(BOOL) value_ {
  hasDisplayName_ = !!value_;
}
@synthesize displayName;
- (BOOL) hasMonsterElement {
  return !!hasMonsterElement_;
}
- (void) setHasMonsterElement:(BOOL) value_ {
  hasMonsterElement_ = !!value_;
}
@synthesize monsterElement;
- (BOOL) hasImagePrefix {
  return !!hasImagePrefix_;
}
- (void) setHasImagePrefix:(BOOL) value_ {
  hasImagePrefix_ = !!value_;
}
@synthesize imagePrefix;
- (BOOL) hasNumPuzzlePieces {
  return !!hasNumPuzzlePieces_;
}
- (void) setHasNumPuzzlePieces:(BOOL) value_ {
  hasNumPuzzlePieces_ = !!value_;
}
@synthesize numPuzzlePieces;
- (BOOL) hasMinutesToCombinePieces {
  return !!hasMinutesToCombinePieces_;
}
- (void) setHasMinutesToCombinePieces:(BOOL) value_ {
  hasMinutesToCombinePieces_ = !!value_;
}
@synthesize minutesToCombinePieces;
- (BOOL) hasMaxLevel {
  return !!hasMaxLevel_;
}
- (void) setHasMaxLevel:(BOOL) value_ {
  hasMaxLevel_ = !!value_;
}
@synthesize maxLevel;
- (BOOL) hasEvolutionMonsterId {
  return !!hasEvolutionMonsterId_;
}
- (void) setHasEvolutionMonsterId:(BOOL) value_ {
  hasEvolutionMonsterId_ = !!value_;
}
@synthesize evolutionMonsterId;
- (BOOL) hasEvolutionCatalystMonsterId {
  return !!hasEvolutionCatalystMonsterId_;
}
- (void) setHasEvolutionCatalystMonsterId:(BOOL) value_ {
  hasEvolutionCatalystMonsterId_ = !!value_;
}
@synthesize evolutionCatalystMonsterId;
- (BOOL) hasMinutesToEvolve {
  return !!hasMinutesToEvolve_;
}
- (void) setHasMinutesToEvolve:(BOOL) value_ {
  hasMinutesToEvolve_ = !!value_;
}
@synthesize minutesToEvolve;
- (BOOL) hasNumCatalystMonstersRequired {
  return !!hasNumCatalystMonstersRequired_;
}
- (void) setHasNumCatalystMonstersRequired:(BOOL) value_ {
  hasNumCatalystMonstersRequired_ = !!value_;
}
@synthesize numCatalystMonstersRequired;
- (BOOL) hasCarrotRecruited {
  return !!hasCarrotRecruited_;
}
- (void) setHasCarrotRecruited:(BOOL) value_ {
  hasCarrotRecruited_ = !!value_;
}
@synthesize carrotRecruited;
- (BOOL) hasCarrotDefeated {
  return !!hasCarrotDefeated_;
}
- (void) setHasCarrotDefeated:(BOOL) value_ {
  hasCarrotDefeated_ = !!value_;
}
@synthesize carrotDefeated;
- (BOOL) hasCarrotEvolved {
  return !!hasCarrotEvolved_;
}
- (void) setHasCarrotEvolved:(BOOL) value_ {
  hasCarrotEvolved_ = !!value_;
}
@synthesize carrotEvolved;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value_ {
  hasDescription_ = !!value_;
}
@synthesize description;
@synthesize mutableLvlInfoList;
@dynamic lvlInfoList;
- (BOOL) hasEvolutionCost {
  return !!hasEvolutionCost_;
}
- (void) setHasEvolutionCost:(BOOL) value_ {
  hasEvolutionCost_ = !!value_;
}
@synthesize evolutionCost;
- (BOOL) hasAttackAnimationType {
  return !!hasAttackAnimationType_;
}
- (void) setHasAttackAnimationType:(BOOL) value_ {
  hasAttackAnimationType_ = !!value_;
}
@synthesize attackAnimationType;
- (BOOL) hasVerticalPixelOffset {
  return !!hasVerticalPixelOffset_;
}
- (void) setHasVerticalPixelOffset:(BOOL) value_ {
  hasVerticalPixelOffset_ = !!value_;
}
@synthesize verticalPixelOffset;
- (BOOL) hasAtkSoundFile {
  return !!hasAtkSoundFile_;
}
- (void) setHasAtkSoundFile:(BOOL) value_ {
  hasAtkSoundFile_ = !!value_;
}
@synthesize atkSoundFile;
- (BOOL) hasAtkSoundAnimationFrame {
  return !!hasAtkSoundAnimationFrame_;
}
- (void) setHasAtkSoundAnimationFrame:(BOOL) value_ {
  hasAtkSoundAnimationFrame_ = !!value_;
}
@synthesize atkSoundAnimationFrame;
- (BOOL) hasAtkAnimationRepeatedFramesStart {
  return !!hasAtkAnimationRepeatedFramesStart_;
}
- (void) setHasAtkAnimationRepeatedFramesStart:(BOOL) value_ {
  hasAtkAnimationRepeatedFramesStart_ = !!value_;
}
@synthesize atkAnimationRepeatedFramesStart;
- (BOOL) hasAtkAnimationRepeatedFramesEnd {
  return !!hasAtkAnimationRepeatedFramesEnd_;
}
- (void) setHasAtkAnimationRepeatedFramesEnd:(BOOL) value_ {
  hasAtkAnimationRepeatedFramesEnd_ = !!value_;
}
@synthesize atkAnimationRepeatedFramesEnd;
- (BOOL) hasShadowScaleFactor {
  return !!hasShadowScaleFactor_;
}
- (void) setHasShadowScaleFactor:(BOOL) value_ {
  hasShadowScaleFactor_ = !!value_;
}
@synthesize shadowScaleFactor;
- (BOOL) hasBaseOffensiveSkillId {
  return !!hasBaseOffensiveSkillId_;
}
- (void) setHasBaseOffensiveSkillId:(BOOL) value_ {
  hasBaseOffensiveSkillId_ = !!value_;
}
@synthesize baseOffensiveSkillId;
- (BOOL) hasBaseDefensiveSkillId {
  return !!hasBaseDefensiveSkillId_;
}
- (void) setHasBaseDefensiveSkillId:(BOOL) value_ {
  hasBaseDefensiveSkillId_ = !!value_;
}
@synthesize baseDefensiveSkillId;
- (id) init {
  if ((self = [super init])) {
    self.monsterId = 0;
    self.evolutionGroup = @"";
    self.shorterName = @"";
    self.monsterGroup = @"";
    self.quality = QualityNoQuality;
    self.evolutionLevel = 0;
    self.displayName = @"";
    self.monsterElement = ElementNoElement;
    self.imagePrefix = @"";
    self.numPuzzlePieces = 0;
    self.minutesToCombinePieces = 0;
    self.maxLevel = 0;
    self.evolutionMonsterId = 0;
    self.evolutionCatalystMonsterId = 0;
    self.minutesToEvolve = 0;
    self.numCatalystMonstersRequired = 0;
    self.carrotRecruited = @"";
    self.carrotDefeated = @"";
    self.carrotEvolved = @"";
    self.description = @"";
    self.evolutionCost = 0;
    self.attackAnimationType = MonsterProto_AnimationTypeNoAnimation;
    self.verticalPixelOffset = 0;
    self.atkSoundFile = @"";
    self.atkSoundAnimationFrame = 0;
    self.atkAnimationRepeatedFramesStart = 0;
    self.atkAnimationRepeatedFramesEnd = 0;
    self.shadowScaleFactor = 0;
    self.baseOffensiveSkillId = 0;
    self.baseDefensiveSkillId = 0;
  }
  return self;
}
static MonsterProto* defaultMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [MonsterProto class]) {
    defaultMonsterProtoInstance = [[MonsterProto alloc] init];
  }
}
+ (MonsterProto*) defaultInstance {
  return defaultMonsterProtoInstance;
}
- (MonsterProto*) defaultInstance {
  return defaultMonsterProtoInstance;
}
- (NSArray *)lvlInfoList {
  return mutableLvlInfoList;
}
- (MonsterLevelInfoProto*)lvlInfoAtIndex:(NSUInteger)index {
  return [mutableLvlInfoList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasEvolutionGroup) {
    [output writeString:2 value:self.evolutionGroup];
  }
  if (self.hasMonsterGroup) {
    [output writeString:3 value:self.monsterGroup];
  }
  if (self.hasQuality) {
    [output writeEnum:4 value:self.quality];
  }
  if (self.hasEvolutionLevel) {
    [output writeInt32:5 value:self.evolutionLevel];
  }
  if (self.hasDisplayName) {
    [output writeString:6 value:self.displayName];
  }
  if (self.hasMonsterElement) {
    [output writeEnum:7 value:self.monsterElement];
  }
  if (self.hasImagePrefix) {
    [output writeString:8 value:self.imagePrefix];
  }
  if (self.hasNumPuzzlePieces) {
    [output writeInt32:9 value:self.numPuzzlePieces];
  }
  if (self.hasMinutesToCombinePieces) {
    [output writeInt32:10 value:self.minutesToCombinePieces];
  }
  if (self.hasMaxLevel) {
    [output writeInt32:11 value:self.maxLevel];
  }
  if (self.hasEvolutionMonsterId) {
    [output writeInt32:12 value:self.evolutionMonsterId];
  }
  if (self.hasEvolutionCatalystMonsterId) {
    [output writeInt32:13 value:self.evolutionCatalystMonsterId];
  }
  if (self.hasMinutesToEvolve) {
    [output writeInt32:14 value:self.minutesToEvolve];
  }
  if (self.hasNumCatalystMonstersRequired) {
    [output writeInt32:15 value:self.numCatalystMonstersRequired];
  }
  if (self.hasCarrotRecruited) {
    [output writeString:16 value:self.carrotRecruited];
  }
  if (self.hasCarrotDefeated) {
    [output writeString:17 value:self.carrotDefeated];
  }
  if (self.hasCarrotEvolved) {
    [output writeString:18 value:self.carrotEvolved];
  }
  if (self.hasDescription) {
    [output writeString:19 value:self.description];
  }
  [self.lvlInfoList enumerateObjectsUsingBlock:^(MonsterLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:20 value:element];
  }];
  if (self.hasEvolutionCost) {
    [output writeInt32:21 value:self.evolutionCost];
  }
  if (self.hasAttackAnimationType) {
    [output writeEnum:22 value:self.attackAnimationType];
  }
  if (self.hasVerticalPixelOffset) {
    [output writeInt32:23 value:self.verticalPixelOffset];
  }
  if (self.hasAtkSoundFile) {
    [output writeString:24 value:self.atkSoundFile];
  }
  if (self.hasAtkSoundAnimationFrame) {
    [output writeInt32:25 value:self.atkSoundAnimationFrame];
  }
  if (self.hasAtkAnimationRepeatedFramesStart) {
    [output writeInt32:26 value:self.atkAnimationRepeatedFramesStart];
  }
  if (self.hasAtkAnimationRepeatedFramesEnd) {
    [output writeInt32:27 value:self.atkAnimationRepeatedFramesEnd];
  }
  if (self.hasShorterName) {
    [output writeString:28 value:self.shorterName];
  }
  if (self.hasShadowScaleFactor) {
    [output writeFloat:29 value:self.shadowScaleFactor];
  }
  if (self.hasBaseOffensiveSkillId) {
    [output writeInt32:30 value:self.baseOffensiveSkillId];
  }
  if (self.hasBaseDefensiveSkillId) {
    [output writeInt32:31 value:self.baseDefensiveSkillId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMonsterId) {
    size_ += computeInt32Size(1, self.monsterId);
  }
  if (self.hasEvolutionGroup) {
    size_ += computeStringSize(2, self.evolutionGroup);
  }
  if (self.hasMonsterGroup) {
    size_ += computeStringSize(3, self.monsterGroup);
  }
  if (self.hasQuality) {
    size_ += computeEnumSize(4, self.quality);
  }
  if (self.hasEvolutionLevel) {
    size_ += computeInt32Size(5, self.evolutionLevel);
  }
  if (self.hasDisplayName) {
    size_ += computeStringSize(6, self.displayName);
  }
  if (self.hasMonsterElement) {
    size_ += computeEnumSize(7, self.monsterElement);
  }
  if (self.hasImagePrefix) {
    size_ += computeStringSize(8, self.imagePrefix);
  }
  if (self.hasNumPuzzlePieces) {
    size_ += computeInt32Size(9, self.numPuzzlePieces);
  }
  if (self.hasMinutesToCombinePieces) {
    size_ += computeInt32Size(10, self.minutesToCombinePieces);
  }
  if (self.hasMaxLevel) {
    size_ += computeInt32Size(11, self.maxLevel);
  }
  if (self.hasEvolutionMonsterId) {
    size_ += computeInt32Size(12, self.evolutionMonsterId);
  }
  if (self.hasEvolutionCatalystMonsterId) {
    size_ += computeInt32Size(13, self.evolutionCatalystMonsterId);
  }
  if (self.hasMinutesToEvolve) {
    size_ += computeInt32Size(14, self.minutesToEvolve);
  }
  if (self.hasNumCatalystMonstersRequired) {
    size_ += computeInt32Size(15, self.numCatalystMonstersRequired);
  }
  if (self.hasCarrotRecruited) {
    size_ += computeStringSize(16, self.carrotRecruited);
  }
  if (self.hasCarrotDefeated) {
    size_ += computeStringSize(17, self.carrotDefeated);
  }
  if (self.hasCarrotEvolved) {
    size_ += computeStringSize(18, self.carrotEvolved);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(19, self.description);
  }
  [self.lvlInfoList enumerateObjectsUsingBlock:^(MonsterLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(20, element);
  }];
  if (self.hasEvolutionCost) {
    size_ += computeInt32Size(21, self.evolutionCost);
  }
  if (self.hasAttackAnimationType) {
    size_ += computeEnumSize(22, self.attackAnimationType);
  }
  if (self.hasVerticalPixelOffset) {
    size_ += computeInt32Size(23, self.verticalPixelOffset);
  }
  if (self.hasAtkSoundFile) {
    size_ += computeStringSize(24, self.atkSoundFile);
  }
  if (self.hasAtkSoundAnimationFrame) {
    size_ += computeInt32Size(25, self.atkSoundAnimationFrame);
  }
  if (self.hasAtkAnimationRepeatedFramesStart) {
    size_ += computeInt32Size(26, self.atkAnimationRepeatedFramesStart);
  }
  if (self.hasAtkAnimationRepeatedFramesEnd) {
    size_ += computeInt32Size(27, self.atkAnimationRepeatedFramesEnd);
  }
  if (self.hasShorterName) {
    size_ += computeStringSize(28, self.shorterName);
  }
  if (self.hasShadowScaleFactor) {
    size_ += computeFloatSize(29, self.shadowScaleFactor);
  }
  if (self.hasBaseOffensiveSkillId) {
    size_ += computeInt32Size(30, self.baseOffensiveSkillId);
  }
  if (self.hasBaseDefensiveSkillId) {
    size_ += computeInt32Size(31, self.baseDefensiveSkillId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MonsterProto*) parseFromData:(NSData*) data {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromData:data] build];
}
+ (MonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromInputStream:input] build];
}
+ (MonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (MonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterProto*)[[[MonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterProto_Builder*) builder {
  return [[MonsterProto_Builder alloc] init];
}
+ (MonsterProto_Builder*) builderWithPrototype:(MonsterProto*) prototype {
  return [[MonsterProto builder] mergeFrom:prototype];
}
- (MonsterProto_Builder*) builder {
  return [MonsterProto builder];
}
- (MonsterProto_Builder*) toBuilder {
  return [MonsterProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasEvolutionGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evolutionGroup", self.evolutionGroup];
  }
  if (self.hasMonsterGroup) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterGroup", self.monsterGroup];
  }
  if (self.hasQuality) {
    [output appendFormat:@"%@%@: %@\n", indent, @"quality", [NSNumber numberWithInteger:self.quality]];
  }
  if (self.hasEvolutionLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evolutionLevel", [NSNumber numberWithInteger:self.evolutionLevel]];
  }
  if (self.hasDisplayName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"displayName", self.displayName];
  }
  if (self.hasMonsterElement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterElement", [NSNumber numberWithInteger:self.monsterElement]];
  }
  if (self.hasImagePrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imagePrefix", self.imagePrefix];
  }
  if (self.hasNumPuzzlePieces) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numPuzzlePieces", [NSNumber numberWithInteger:self.numPuzzlePieces]];
  }
  if (self.hasMinutesToCombinePieces) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minutesToCombinePieces", [NSNumber numberWithInteger:self.minutesToCombinePieces]];
  }
  if (self.hasMaxLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxLevel", [NSNumber numberWithInteger:self.maxLevel]];
  }
  if (self.hasEvolutionMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evolutionMonsterId", [NSNumber numberWithInteger:self.evolutionMonsterId]];
  }
  if (self.hasEvolutionCatalystMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evolutionCatalystMonsterId", [NSNumber numberWithInteger:self.evolutionCatalystMonsterId]];
  }
  if (self.hasMinutesToEvolve) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minutesToEvolve", [NSNumber numberWithInteger:self.minutesToEvolve]];
  }
  if (self.hasNumCatalystMonstersRequired) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numCatalystMonstersRequired", [NSNumber numberWithInteger:self.numCatalystMonstersRequired]];
  }
  if (self.hasCarrotRecruited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"carrotRecruited", self.carrotRecruited];
  }
  if (self.hasCarrotDefeated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"carrotDefeated", self.carrotDefeated];
  }
  if (self.hasCarrotEvolved) {
    [output appendFormat:@"%@%@: %@\n", indent, @"carrotEvolved", self.carrotEvolved];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"description", self.description];
  }
  [self.lvlInfoList enumerateObjectsUsingBlock:^(MonsterLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"lvlInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasEvolutionCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evolutionCost", [NSNumber numberWithInteger:self.evolutionCost]];
  }
  if (self.hasAttackAnimationType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"attackAnimationType", [NSNumber numberWithInteger:self.attackAnimationType]];
  }
  if (self.hasVerticalPixelOffset) {
    [output appendFormat:@"%@%@: %@\n", indent, @"verticalPixelOffset", [NSNumber numberWithInteger:self.verticalPixelOffset]];
  }
  if (self.hasAtkSoundFile) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atkSoundFile", self.atkSoundFile];
  }
  if (self.hasAtkSoundAnimationFrame) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atkSoundAnimationFrame", [NSNumber numberWithInteger:self.atkSoundAnimationFrame]];
  }
  if (self.hasAtkAnimationRepeatedFramesStart) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atkAnimationRepeatedFramesStart", [NSNumber numberWithInteger:self.atkAnimationRepeatedFramesStart]];
  }
  if (self.hasAtkAnimationRepeatedFramesEnd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"atkAnimationRepeatedFramesEnd", [NSNumber numberWithInteger:self.atkAnimationRepeatedFramesEnd]];
  }
  if (self.hasShorterName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shorterName", self.shorterName];
  }
  if (self.hasShadowScaleFactor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"shadowScaleFactor", [NSNumber numberWithFloat:self.shadowScaleFactor]];
  }
  if (self.hasBaseOffensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseOffensiveSkillId", [NSNumber numberWithInteger:self.baseOffensiveSkillId]];
  }
  if (self.hasBaseDefensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"baseDefensiveSkillId", [NSNumber numberWithInteger:self.baseDefensiveSkillId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MonsterProto class]]) {
    return NO;
  }
  MonsterProto *otherMessage = other;
  return
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasEvolutionGroup == otherMessage.hasEvolutionGroup &&
      (!self.hasEvolutionGroup || [self.evolutionGroup isEqual:otherMessage.evolutionGroup]) &&
      self.hasMonsterGroup == otherMessage.hasMonsterGroup &&
      (!self.hasMonsterGroup || [self.monsterGroup isEqual:otherMessage.monsterGroup]) &&
      self.hasQuality == otherMessage.hasQuality &&
      (!self.hasQuality || self.quality == otherMessage.quality) &&
      self.hasEvolutionLevel == otherMessage.hasEvolutionLevel &&
      (!self.hasEvolutionLevel || self.evolutionLevel == otherMessage.evolutionLevel) &&
      self.hasDisplayName == otherMessage.hasDisplayName &&
      (!self.hasDisplayName || [self.displayName isEqual:otherMessage.displayName]) &&
      self.hasMonsterElement == otherMessage.hasMonsterElement &&
      (!self.hasMonsterElement || self.monsterElement == otherMessage.monsterElement) &&
      self.hasImagePrefix == otherMessage.hasImagePrefix &&
      (!self.hasImagePrefix || [self.imagePrefix isEqual:otherMessage.imagePrefix]) &&
      self.hasNumPuzzlePieces == otherMessage.hasNumPuzzlePieces &&
      (!self.hasNumPuzzlePieces || self.numPuzzlePieces == otherMessage.numPuzzlePieces) &&
      self.hasMinutesToCombinePieces == otherMessage.hasMinutesToCombinePieces &&
      (!self.hasMinutesToCombinePieces || self.minutesToCombinePieces == otherMessage.minutesToCombinePieces) &&
      self.hasMaxLevel == otherMessage.hasMaxLevel &&
      (!self.hasMaxLevel || self.maxLevel == otherMessage.maxLevel) &&
      self.hasEvolutionMonsterId == otherMessage.hasEvolutionMonsterId &&
      (!self.hasEvolutionMonsterId || self.evolutionMonsterId == otherMessage.evolutionMonsterId) &&
      self.hasEvolutionCatalystMonsterId == otherMessage.hasEvolutionCatalystMonsterId &&
      (!self.hasEvolutionCatalystMonsterId || self.evolutionCatalystMonsterId == otherMessage.evolutionCatalystMonsterId) &&
      self.hasMinutesToEvolve == otherMessage.hasMinutesToEvolve &&
      (!self.hasMinutesToEvolve || self.minutesToEvolve == otherMessage.minutesToEvolve) &&
      self.hasNumCatalystMonstersRequired == otherMessage.hasNumCatalystMonstersRequired &&
      (!self.hasNumCatalystMonstersRequired || self.numCatalystMonstersRequired == otherMessage.numCatalystMonstersRequired) &&
      self.hasCarrotRecruited == otherMessage.hasCarrotRecruited &&
      (!self.hasCarrotRecruited || [self.carrotRecruited isEqual:otherMessage.carrotRecruited]) &&
      self.hasCarrotDefeated == otherMessage.hasCarrotDefeated &&
      (!self.hasCarrotDefeated || [self.carrotDefeated isEqual:otherMessage.carrotDefeated]) &&
      self.hasCarrotEvolved == otherMessage.hasCarrotEvolved &&
      (!self.hasCarrotEvolved || [self.carrotEvolved isEqual:otherMessage.carrotEvolved]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.description isEqual:otherMessage.description]) &&
      [self.lvlInfoList isEqualToArray:otherMessage.lvlInfoList] &&
      self.hasEvolutionCost == otherMessage.hasEvolutionCost &&
      (!self.hasEvolutionCost || self.evolutionCost == otherMessage.evolutionCost) &&
      self.hasAttackAnimationType == otherMessage.hasAttackAnimationType &&
      (!self.hasAttackAnimationType || self.attackAnimationType == otherMessage.attackAnimationType) &&
      self.hasVerticalPixelOffset == otherMessage.hasVerticalPixelOffset &&
      (!self.hasVerticalPixelOffset || self.verticalPixelOffset == otherMessage.verticalPixelOffset) &&
      self.hasAtkSoundFile == otherMessage.hasAtkSoundFile &&
      (!self.hasAtkSoundFile || [self.atkSoundFile isEqual:otherMessage.atkSoundFile]) &&
      self.hasAtkSoundAnimationFrame == otherMessage.hasAtkSoundAnimationFrame &&
      (!self.hasAtkSoundAnimationFrame || self.atkSoundAnimationFrame == otherMessage.atkSoundAnimationFrame) &&
      self.hasAtkAnimationRepeatedFramesStart == otherMessage.hasAtkAnimationRepeatedFramesStart &&
      (!self.hasAtkAnimationRepeatedFramesStart || self.atkAnimationRepeatedFramesStart == otherMessage.atkAnimationRepeatedFramesStart) &&
      self.hasAtkAnimationRepeatedFramesEnd == otherMessage.hasAtkAnimationRepeatedFramesEnd &&
      (!self.hasAtkAnimationRepeatedFramesEnd || self.atkAnimationRepeatedFramesEnd == otherMessage.atkAnimationRepeatedFramesEnd) &&
      self.hasShorterName == otherMessage.hasShorterName &&
      (!self.hasShorterName || [self.shorterName isEqual:otherMessage.shorterName]) &&
      self.hasShadowScaleFactor == otherMessage.hasShadowScaleFactor &&
      (!self.hasShadowScaleFactor || self.shadowScaleFactor == otherMessage.shadowScaleFactor) &&
      self.hasBaseOffensiveSkillId == otherMessage.hasBaseOffensiveSkillId &&
      (!self.hasBaseOffensiveSkillId || self.baseOffensiveSkillId == otherMessage.baseOffensiveSkillId) &&
      self.hasBaseDefensiveSkillId == otherMessage.hasBaseDefensiveSkillId &&
      (!self.hasBaseDefensiveSkillId || self.baseDefensiveSkillId == otherMessage.baseDefensiveSkillId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasEvolutionGroup) {
    hashCode = hashCode * 31 + [self.evolutionGroup hash];
  }
  if (self.hasMonsterGroup) {
    hashCode = hashCode * 31 + [self.monsterGroup hash];
  }
  if (self.hasQuality) {
    hashCode = hashCode * 31 + self.quality;
  }
  if (self.hasEvolutionLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.evolutionLevel] hash];
  }
  if (self.hasDisplayName) {
    hashCode = hashCode * 31 + [self.displayName hash];
  }
  if (self.hasMonsterElement) {
    hashCode = hashCode * 31 + self.monsterElement;
  }
  if (self.hasImagePrefix) {
    hashCode = hashCode * 31 + [self.imagePrefix hash];
  }
  if (self.hasNumPuzzlePieces) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numPuzzlePieces] hash];
  }
  if (self.hasMinutesToCombinePieces) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.minutesToCombinePieces] hash];
  }
  if (self.hasMaxLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxLevel] hash];
  }
  if (self.hasEvolutionMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.evolutionMonsterId] hash];
  }
  if (self.hasEvolutionCatalystMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.evolutionCatalystMonsterId] hash];
  }
  if (self.hasMinutesToEvolve) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.minutesToEvolve] hash];
  }
  if (self.hasNumCatalystMonstersRequired) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numCatalystMonstersRequired] hash];
  }
  if (self.hasCarrotRecruited) {
    hashCode = hashCode * 31 + [self.carrotRecruited hash];
  }
  if (self.hasCarrotDefeated) {
    hashCode = hashCode * 31 + [self.carrotDefeated hash];
  }
  if (self.hasCarrotEvolved) {
    hashCode = hashCode * 31 + [self.carrotEvolved hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.description hash];
  }
  [self.lvlInfoList enumerateObjectsUsingBlock:^(MonsterLevelInfoProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasEvolutionCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.evolutionCost] hash];
  }
  if (self.hasAttackAnimationType) {
    hashCode = hashCode * 31 + self.attackAnimationType;
  }
  if (self.hasVerticalPixelOffset) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.verticalPixelOffset] hash];
  }
  if (self.hasAtkSoundFile) {
    hashCode = hashCode * 31 + [self.atkSoundFile hash];
  }
  if (self.hasAtkSoundAnimationFrame) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.atkSoundAnimationFrame] hash];
  }
  if (self.hasAtkAnimationRepeatedFramesStart) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.atkAnimationRepeatedFramesStart] hash];
  }
  if (self.hasAtkAnimationRepeatedFramesEnd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.atkAnimationRepeatedFramesEnd] hash];
  }
  if (self.hasShorterName) {
    hashCode = hashCode * 31 + [self.shorterName hash];
  }
  if (self.hasShadowScaleFactor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.shadowScaleFactor] hash];
  }
  if (self.hasBaseOffensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.baseOffensiveSkillId] hash];
  }
  if (self.hasBaseDefensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.baseDefensiveSkillId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MonsterProto_AnimationTypeIsValidValue(MonsterProto_AnimationType value) {
  switch (value) {
    case MonsterProto_AnimationTypeNoAnimation:
    case MonsterProto_AnimationTypeMelee:
    case MonsterProto_AnimationTypeRanged:
      return YES;
    default:
      return NO;
  }
}
@interface MonsterProto_Builder()
@property (strong) MonsterProto* result;
@end

@implementation MonsterProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MonsterProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MonsterProto_Builder*) clear {
  self.result = [[MonsterProto alloc] init];
  return self;
}
- (MonsterProto_Builder*) clone {
  return [MonsterProto builderWithPrototype:result];
}
- (MonsterProto*) defaultInstance {
  return [MonsterProto defaultInstance];
}
- (MonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MonsterProto*) buildPartial {
  MonsterProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MonsterProto_Builder*) mergeFrom:(MonsterProto*) other {
  if (other == [MonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasEvolutionGroup) {
    [self setEvolutionGroup:other.evolutionGroup];
  }
  if (other.hasShorterName) {
    [self setShorterName:other.shorterName];
  }
  if (other.hasMonsterGroup) {
    [self setMonsterGroup:other.monsterGroup];
  }
  if (other.hasQuality) {
    [self setQuality:other.quality];
  }
  if (other.hasEvolutionLevel) {
    [self setEvolutionLevel:other.evolutionLevel];
  }
  if (other.hasDisplayName) {
    [self setDisplayName:other.displayName];
  }
  if (other.hasMonsterElement) {
    [self setMonsterElement:other.monsterElement];
  }
  if (other.hasImagePrefix) {
    [self setImagePrefix:other.imagePrefix];
  }
  if (other.hasNumPuzzlePieces) {
    [self setNumPuzzlePieces:other.numPuzzlePieces];
  }
  if (other.hasMinutesToCombinePieces) {
    [self setMinutesToCombinePieces:other.minutesToCombinePieces];
  }
  if (other.hasMaxLevel) {
    [self setMaxLevel:other.maxLevel];
  }
  if (other.hasEvolutionMonsterId) {
    [self setEvolutionMonsterId:other.evolutionMonsterId];
  }
  if (other.hasEvolutionCatalystMonsterId) {
    [self setEvolutionCatalystMonsterId:other.evolutionCatalystMonsterId];
  }
  if (other.hasMinutesToEvolve) {
    [self setMinutesToEvolve:other.minutesToEvolve];
  }
  if (other.hasNumCatalystMonstersRequired) {
    [self setNumCatalystMonstersRequired:other.numCatalystMonstersRequired];
  }
  if (other.hasCarrotRecruited) {
    [self setCarrotRecruited:other.carrotRecruited];
  }
  if (other.hasCarrotDefeated) {
    [self setCarrotDefeated:other.carrotDefeated];
  }
  if (other.hasCarrotEvolved) {
    [self setCarrotEvolved:other.carrotEvolved];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.mutableLvlInfoList.count > 0) {
    if (result.mutableLvlInfoList == nil) {
      result.mutableLvlInfoList = [[NSMutableArray alloc] initWithArray:other.mutableLvlInfoList];
    } else {
      [result.mutableLvlInfoList addObjectsFromArray:other.mutableLvlInfoList];
    }
  }
  if (other.hasEvolutionCost) {
    [self setEvolutionCost:other.evolutionCost];
  }
  if (other.hasAttackAnimationType) {
    [self setAttackAnimationType:other.attackAnimationType];
  }
  if (other.hasVerticalPixelOffset) {
    [self setVerticalPixelOffset:other.verticalPixelOffset];
  }
  if (other.hasAtkSoundFile) {
    [self setAtkSoundFile:other.atkSoundFile];
  }
  if (other.hasAtkSoundAnimationFrame) {
    [self setAtkSoundAnimationFrame:other.atkSoundAnimationFrame];
  }
  if (other.hasAtkAnimationRepeatedFramesStart) {
    [self setAtkAnimationRepeatedFramesStart:other.atkAnimationRepeatedFramesStart];
  }
  if (other.hasAtkAnimationRepeatedFramesEnd) {
    [self setAtkAnimationRepeatedFramesEnd:other.atkAnimationRepeatedFramesEnd];
  }
  if (other.hasShadowScaleFactor) {
    [self setShadowScaleFactor:other.shadowScaleFactor];
  }
  if (other.hasBaseOffensiveSkillId) {
    [self setBaseOffensiveSkillId:other.baseOffensiveSkillId];
  }
  if (other.hasBaseDefensiveSkillId) {
    [self setBaseDefensiveSkillId:other.baseDefensiveSkillId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 18: {
        [self setEvolutionGroup:[input readString]];
        break;
      }
      case 26: {
        [self setMonsterGroup:[input readString]];
        break;
      }
      case 32: {
        Quality value = (Quality)[input readEnum];
        if (QualityIsValidValue(value)) {
          [self setQuality:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
      case 40: {
        [self setEvolutionLevel:[input readInt32]];
        break;
      }
      case 50: {
        [self setDisplayName:[input readString]];
        break;
      }
      case 56: {
        Element value = (Element)[input readEnum];
        if (ElementIsValidValue(value)) {
          [self setMonsterElement:value];
        } else {
          [unknownFields mergeVarintField:7 value:value];
        }
        break;
      }
      case 66: {
        [self setImagePrefix:[input readString]];
        break;
      }
      case 72: {
        [self setNumPuzzlePieces:[input readInt32]];
        break;
      }
      case 80: {
        [self setMinutesToCombinePieces:[input readInt32]];
        break;
      }
      case 88: {
        [self setMaxLevel:[input readInt32]];
        break;
      }
      case 96: {
        [self setEvolutionMonsterId:[input readInt32]];
        break;
      }
      case 104: {
        [self setEvolutionCatalystMonsterId:[input readInt32]];
        break;
      }
      case 112: {
        [self setMinutesToEvolve:[input readInt32]];
        break;
      }
      case 120: {
        [self setNumCatalystMonstersRequired:[input readInt32]];
        break;
      }
      case 130: {
        [self setCarrotRecruited:[input readString]];
        break;
      }
      case 138: {
        [self setCarrotDefeated:[input readString]];
        break;
      }
      case 146: {
        [self setCarrotEvolved:[input readString]];
        break;
      }
      case 154: {
        [self setDescription:[input readString]];
        break;
      }
      case 162: {
        MonsterLevelInfoProto_Builder* subBuilder = [MonsterLevelInfoProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLvlInfo:[subBuilder buildPartial]];
        break;
      }
      case 168: {
        [self setEvolutionCost:[input readInt32]];
        break;
      }
      case 176: {
        MonsterProto_AnimationType value = (MonsterProto_AnimationType)[input readEnum];
        if (MonsterProto_AnimationTypeIsValidValue(value)) {
          [self setAttackAnimationType:value];
        } else {
          [unknownFields mergeVarintField:22 value:value];
        }
        break;
      }
      case 184: {
        [self setVerticalPixelOffset:[input readInt32]];
        break;
      }
      case 194: {
        [self setAtkSoundFile:[input readString]];
        break;
      }
      case 200: {
        [self setAtkSoundAnimationFrame:[input readInt32]];
        break;
      }
      case 208: {
        [self setAtkAnimationRepeatedFramesStart:[input readInt32]];
        break;
      }
      case 216: {
        [self setAtkAnimationRepeatedFramesEnd:[input readInt32]];
        break;
      }
      case 226: {
        [self setShorterName:[input readString]];
        break;
      }
      case 237: {
        [self setShadowScaleFactor:[input readFloat]];
        break;
      }
      case 240: {
        [self setBaseOffensiveSkillId:[input readInt32]];
        break;
      }
      case 248: {
        [self setBaseDefensiveSkillId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (MonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasEvolutionGroup {
  return result.hasEvolutionGroup;
}
- (NSString*) evolutionGroup {
  return result.evolutionGroup;
}
- (MonsterProto_Builder*) setEvolutionGroup:(NSString*) value {
  result.hasEvolutionGroup = YES;
  result.evolutionGroup = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionGroup {
  result.hasEvolutionGroup = NO;
  result.evolutionGroup = @"";
  return self;
}
- (BOOL) hasShorterName {
  return result.hasShorterName;
}
- (NSString*) shorterName {
  return result.shorterName;
}
- (MonsterProto_Builder*) setShorterName:(NSString*) value {
  result.hasShorterName = YES;
  result.shorterName = value;
  return self;
}
- (MonsterProto_Builder*) clearShorterName {
  result.hasShorterName = NO;
  result.shorterName = @"";
  return self;
}
- (BOOL) hasMonsterGroup {
  return result.hasMonsterGroup;
}
- (NSString*) monsterGroup {
  return result.monsterGroup;
}
- (MonsterProto_Builder*) setMonsterGroup:(NSString*) value {
  result.hasMonsterGroup = YES;
  result.monsterGroup = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterGroup {
  result.hasMonsterGroup = NO;
  result.monsterGroup = @"";
  return self;
}
- (BOOL) hasQuality {
  return result.hasQuality;
}
- (Quality) quality {
  return result.quality;
}
- (MonsterProto_Builder*) setQuality:(Quality) value {
  result.hasQuality = YES;
  result.quality = value;
  return self;
}
- (MonsterProto_Builder*) clearQualityList {
  result.hasQuality = NO;
  result.quality = QualityNoQuality;
  return self;
}
- (BOOL) hasEvolutionLevel {
  return result.hasEvolutionLevel;
}
- (int32_t) evolutionLevel {
  return result.evolutionLevel;
}
- (MonsterProto_Builder*) setEvolutionLevel:(int32_t) value {
  result.hasEvolutionLevel = YES;
  result.evolutionLevel = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionLevel {
  result.hasEvolutionLevel = NO;
  result.evolutionLevel = 0;
  return self;
}
- (BOOL) hasDisplayName {
  return result.hasDisplayName;
}
- (NSString*) displayName {
  return result.displayName;
}
- (MonsterProto_Builder*) setDisplayName:(NSString*) value {
  result.hasDisplayName = YES;
  result.displayName = value;
  return self;
}
- (MonsterProto_Builder*) clearDisplayName {
  result.hasDisplayName = NO;
  result.displayName = @"";
  return self;
}
- (BOOL) hasMonsterElement {
  return result.hasMonsterElement;
}
- (Element) monsterElement {
  return result.monsterElement;
}
- (MonsterProto_Builder*) setMonsterElement:(Element) value {
  result.hasMonsterElement = YES;
  result.monsterElement = value;
  return self;
}
- (MonsterProto_Builder*) clearMonsterElementList {
  result.hasMonsterElement = NO;
  result.monsterElement = ElementNoElement;
  return self;
}
- (BOOL) hasImagePrefix {
  return result.hasImagePrefix;
}
- (NSString*) imagePrefix {
  return result.imagePrefix;
}
- (MonsterProto_Builder*) setImagePrefix:(NSString*) value {
  result.hasImagePrefix = YES;
  result.imagePrefix = value;
  return self;
}
- (MonsterProto_Builder*) clearImagePrefix {
  result.hasImagePrefix = NO;
  result.imagePrefix = @"";
  return self;
}
- (BOOL) hasNumPuzzlePieces {
  return result.hasNumPuzzlePieces;
}
- (int32_t) numPuzzlePieces {
  return result.numPuzzlePieces;
}
- (MonsterProto_Builder*) setNumPuzzlePieces:(int32_t) value {
  result.hasNumPuzzlePieces = YES;
  result.numPuzzlePieces = value;
  return self;
}
- (MonsterProto_Builder*) clearNumPuzzlePieces {
  result.hasNumPuzzlePieces = NO;
  result.numPuzzlePieces = 0;
  return self;
}
- (BOOL) hasMinutesToCombinePieces {
  return result.hasMinutesToCombinePieces;
}
- (int32_t) minutesToCombinePieces {
  return result.minutesToCombinePieces;
}
- (MonsterProto_Builder*) setMinutesToCombinePieces:(int32_t) value {
  result.hasMinutesToCombinePieces = YES;
  result.minutesToCombinePieces = value;
  return self;
}
- (MonsterProto_Builder*) clearMinutesToCombinePieces {
  result.hasMinutesToCombinePieces = NO;
  result.minutesToCombinePieces = 0;
  return self;
}
- (BOOL) hasMaxLevel {
  return result.hasMaxLevel;
}
- (int32_t) maxLevel {
  return result.maxLevel;
}
- (MonsterProto_Builder*) setMaxLevel:(int32_t) value {
  result.hasMaxLevel = YES;
  result.maxLevel = value;
  return self;
}
- (MonsterProto_Builder*) clearMaxLevel {
  result.hasMaxLevel = NO;
  result.maxLevel = 0;
  return self;
}
- (BOOL) hasEvolutionMonsterId {
  return result.hasEvolutionMonsterId;
}
- (int32_t) evolutionMonsterId {
  return result.evolutionMonsterId;
}
- (MonsterProto_Builder*) setEvolutionMonsterId:(int32_t) value {
  result.hasEvolutionMonsterId = YES;
  result.evolutionMonsterId = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionMonsterId {
  result.hasEvolutionMonsterId = NO;
  result.evolutionMonsterId = 0;
  return self;
}
- (BOOL) hasEvolutionCatalystMonsterId {
  return result.hasEvolutionCatalystMonsterId;
}
- (int32_t) evolutionCatalystMonsterId {
  return result.evolutionCatalystMonsterId;
}
- (MonsterProto_Builder*) setEvolutionCatalystMonsterId:(int32_t) value {
  result.hasEvolutionCatalystMonsterId = YES;
  result.evolutionCatalystMonsterId = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionCatalystMonsterId {
  result.hasEvolutionCatalystMonsterId = NO;
  result.evolutionCatalystMonsterId = 0;
  return self;
}
- (BOOL) hasMinutesToEvolve {
  return result.hasMinutesToEvolve;
}
- (int32_t) minutesToEvolve {
  return result.minutesToEvolve;
}
- (MonsterProto_Builder*) setMinutesToEvolve:(int32_t) value {
  result.hasMinutesToEvolve = YES;
  result.minutesToEvolve = value;
  return self;
}
- (MonsterProto_Builder*) clearMinutesToEvolve {
  result.hasMinutesToEvolve = NO;
  result.minutesToEvolve = 0;
  return self;
}
- (BOOL) hasNumCatalystMonstersRequired {
  return result.hasNumCatalystMonstersRequired;
}
- (int32_t) numCatalystMonstersRequired {
  return result.numCatalystMonstersRequired;
}
- (MonsterProto_Builder*) setNumCatalystMonstersRequired:(int32_t) value {
  result.hasNumCatalystMonstersRequired = YES;
  result.numCatalystMonstersRequired = value;
  return self;
}
- (MonsterProto_Builder*) clearNumCatalystMonstersRequired {
  result.hasNumCatalystMonstersRequired = NO;
  result.numCatalystMonstersRequired = 0;
  return self;
}
- (BOOL) hasCarrotRecruited {
  return result.hasCarrotRecruited;
}
- (NSString*) carrotRecruited {
  return result.carrotRecruited;
}
- (MonsterProto_Builder*) setCarrotRecruited:(NSString*) value {
  result.hasCarrotRecruited = YES;
  result.carrotRecruited = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotRecruited {
  result.hasCarrotRecruited = NO;
  result.carrotRecruited = @"";
  return self;
}
- (BOOL) hasCarrotDefeated {
  return result.hasCarrotDefeated;
}
- (NSString*) carrotDefeated {
  return result.carrotDefeated;
}
- (MonsterProto_Builder*) setCarrotDefeated:(NSString*) value {
  result.hasCarrotDefeated = YES;
  result.carrotDefeated = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotDefeated {
  result.hasCarrotDefeated = NO;
  result.carrotDefeated = @"";
  return self;
}
- (BOOL) hasCarrotEvolved {
  return result.hasCarrotEvolved;
}
- (NSString*) carrotEvolved {
  return result.carrotEvolved;
}
- (MonsterProto_Builder*) setCarrotEvolved:(NSString*) value {
  result.hasCarrotEvolved = YES;
  result.carrotEvolved = value;
  return self;
}
- (MonsterProto_Builder*) clearCarrotEvolved {
  result.hasCarrotEvolved = NO;
  result.carrotEvolved = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (MonsterProto_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (MonsterProto_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (NSMutableArray *)lvlInfoList {
  return result.mutableLvlInfoList;
}
- (MonsterLevelInfoProto*)lvlInfoAtIndex:(NSUInteger)index {
  return [result lvlInfoAtIndex:index];
}
- (MonsterProto_Builder *)addLvlInfo:(MonsterLevelInfoProto*)value {
  if (result.mutableLvlInfoList == nil) {
    result.mutableLvlInfoList = [[NSMutableArray alloc]init];
  }
  [result.mutableLvlInfoList addObject:value];
  return self;
}
- (MonsterProto_Builder *)addAllLvlInfo:(NSArray *)array {
  if (result.mutableLvlInfoList == nil) {
    result.mutableLvlInfoList = [NSMutableArray array];
  }
  [result.mutableLvlInfoList addObjectsFromArray:array];
  return self;
}
- (MonsterProto_Builder *)clearLvlInfo {
  result.mutableLvlInfoList = nil;
  return self;
}
- (BOOL) hasEvolutionCost {
  return result.hasEvolutionCost;
}
- (int32_t) evolutionCost {
  return result.evolutionCost;
}
- (MonsterProto_Builder*) setEvolutionCost:(int32_t) value {
  result.hasEvolutionCost = YES;
  result.evolutionCost = value;
  return self;
}
- (MonsterProto_Builder*) clearEvolutionCost {
  result.hasEvolutionCost = NO;
  result.evolutionCost = 0;
  return self;
}
- (BOOL) hasAttackAnimationType {
  return result.hasAttackAnimationType;
}
- (MonsterProto_AnimationType) attackAnimationType {
  return result.attackAnimationType;
}
- (MonsterProto_Builder*) setAttackAnimationType:(MonsterProto_AnimationType) value {
  result.hasAttackAnimationType = YES;
  result.attackAnimationType = value;
  return self;
}
- (MonsterProto_Builder*) clearAttackAnimationTypeList {
  result.hasAttackAnimationType = NO;
  result.attackAnimationType = MonsterProto_AnimationTypeNoAnimation;
  return self;
}
- (BOOL) hasVerticalPixelOffset {
  return result.hasVerticalPixelOffset;
}
- (int32_t) verticalPixelOffset {
  return result.verticalPixelOffset;
}
- (MonsterProto_Builder*) setVerticalPixelOffset:(int32_t) value {
  result.hasVerticalPixelOffset = YES;
  result.verticalPixelOffset = value;
  return self;
}
- (MonsterProto_Builder*) clearVerticalPixelOffset {
  result.hasVerticalPixelOffset = NO;
  result.verticalPixelOffset = 0;
  return self;
}
- (BOOL) hasAtkSoundFile {
  return result.hasAtkSoundFile;
}
- (NSString*) atkSoundFile {
  return result.atkSoundFile;
}
- (MonsterProto_Builder*) setAtkSoundFile:(NSString*) value {
  result.hasAtkSoundFile = YES;
  result.atkSoundFile = value;
  return self;
}
- (MonsterProto_Builder*) clearAtkSoundFile {
  result.hasAtkSoundFile = NO;
  result.atkSoundFile = @"";
  return self;
}
- (BOOL) hasAtkSoundAnimationFrame {
  return result.hasAtkSoundAnimationFrame;
}
- (int32_t) atkSoundAnimationFrame {
  return result.atkSoundAnimationFrame;
}
- (MonsterProto_Builder*) setAtkSoundAnimationFrame:(int32_t) value {
  result.hasAtkSoundAnimationFrame = YES;
  result.atkSoundAnimationFrame = value;
  return self;
}
- (MonsterProto_Builder*) clearAtkSoundAnimationFrame {
  result.hasAtkSoundAnimationFrame = NO;
  result.atkSoundAnimationFrame = 0;
  return self;
}
- (BOOL) hasAtkAnimationRepeatedFramesStart {
  return result.hasAtkAnimationRepeatedFramesStart;
}
- (int32_t) atkAnimationRepeatedFramesStart {
  return result.atkAnimationRepeatedFramesStart;
}
- (MonsterProto_Builder*) setAtkAnimationRepeatedFramesStart:(int32_t) value {
  result.hasAtkAnimationRepeatedFramesStart = YES;
  result.atkAnimationRepeatedFramesStart = value;
  return self;
}
- (MonsterProto_Builder*) clearAtkAnimationRepeatedFramesStart {
  result.hasAtkAnimationRepeatedFramesStart = NO;
  result.atkAnimationRepeatedFramesStart = 0;
  return self;
}
- (BOOL) hasAtkAnimationRepeatedFramesEnd {
  return result.hasAtkAnimationRepeatedFramesEnd;
}
- (int32_t) atkAnimationRepeatedFramesEnd {
  return result.atkAnimationRepeatedFramesEnd;
}
- (MonsterProto_Builder*) setAtkAnimationRepeatedFramesEnd:(int32_t) value {
  result.hasAtkAnimationRepeatedFramesEnd = YES;
  result.atkAnimationRepeatedFramesEnd = value;
  return self;
}
- (MonsterProto_Builder*) clearAtkAnimationRepeatedFramesEnd {
  result.hasAtkAnimationRepeatedFramesEnd = NO;
  result.atkAnimationRepeatedFramesEnd = 0;
  return self;
}
- (BOOL) hasShadowScaleFactor {
  return result.hasShadowScaleFactor;
}
- (Float32) shadowScaleFactor {
  return result.shadowScaleFactor;
}
- (MonsterProto_Builder*) setShadowScaleFactor:(Float32) value {
  result.hasShadowScaleFactor = YES;
  result.shadowScaleFactor = value;
  return self;
}
- (MonsterProto_Builder*) clearShadowScaleFactor {
  result.hasShadowScaleFactor = NO;
  result.shadowScaleFactor = 0;
  return self;
}
- (BOOL) hasBaseOffensiveSkillId {
  return result.hasBaseOffensiveSkillId;
}
- (int32_t) baseOffensiveSkillId {
  return result.baseOffensiveSkillId;
}
- (MonsterProto_Builder*) setBaseOffensiveSkillId:(int32_t) value {
  result.hasBaseOffensiveSkillId = YES;
  result.baseOffensiveSkillId = value;
  return self;
}
- (MonsterProto_Builder*) clearBaseOffensiveSkillId {
  result.hasBaseOffensiveSkillId = NO;
  result.baseOffensiveSkillId = 0;
  return self;
}
- (BOOL) hasBaseDefensiveSkillId {
  return result.hasBaseDefensiveSkillId;
}
- (int32_t) baseDefensiveSkillId {
  return result.baseDefensiveSkillId;
}
- (MonsterProto_Builder*) setBaseDefensiveSkillId:(int32_t) value {
  result.hasBaseDefensiveSkillId = YES;
  result.baseDefensiveSkillId = value;
  return self;
}
- (MonsterProto_Builder*) clearBaseDefensiveSkillId {
  result.hasBaseDefensiveSkillId = NO;
  result.baseDefensiveSkillId = 0;
  return self;
}
@end

@interface MonsterLevelInfoProto ()
@property int32_t lvl;
@property int32_t hp;
@property int32_t curLvlRequiredExp;
@property int32_t feederExp;
@property int32_t fireDmg;
@property int32_t grassDmg;
@property int32_t waterDmg;
@property int32_t lightningDmg;
@property int32_t darknessDmg;
@property int32_t rockDmg;
@property int32_t speed;
@property Float32 hpExponentBase;
@property Float32 dmgExponentBase;
@property Float32 expLvlDivisor;
@property Float32 expLvlExponent;
@property int32_t sellAmount;
@property int32_t teamCost;
@property int32_t costToFullyHeal;
@property Float32 costToFullyHealExponent;
@property int32_t secsToFullyHeal;
@property Float32 secsToFullyHealExponent;
@property int32_t enhanceCostPerFeeder;
@property Float32 enhanceCostExponent;
@property Float32 secsToEnhancePerFeeder;
@property Float32 secsToEnhancePerFeederExponent;
@property int32_t strength;
@property Float32 strengthExponent;
@end

@implementation MonsterLevelInfoProto

- (BOOL) hasLvl {
  return !!hasLvl_;
}
- (void) setHasLvl:(BOOL) value_ {
  hasLvl_ = !!value_;
}
@synthesize lvl;
- (BOOL) hasHp {
  return !!hasHp_;
}
- (void) setHasHp:(BOOL) value_ {
  hasHp_ = !!value_;
}
@synthesize hp;
- (BOOL) hasCurLvlRequiredExp {
  return !!hasCurLvlRequiredExp_;
}
- (void) setHasCurLvlRequiredExp:(BOOL) value_ {
  hasCurLvlRequiredExp_ = !!value_;
}
@synthesize curLvlRequiredExp;
- (BOOL) hasFeederExp {
  return !!hasFeederExp_;
}
- (void) setHasFeederExp:(BOOL) value_ {
  hasFeederExp_ = !!value_;
}
@synthesize feederExp;
- (BOOL) hasFireDmg {
  return !!hasFireDmg_;
}
- (void) setHasFireDmg:(BOOL) value_ {
  hasFireDmg_ = !!value_;
}
@synthesize fireDmg;
- (BOOL) hasGrassDmg {
  return !!hasGrassDmg_;
}
- (void) setHasGrassDmg:(BOOL) value_ {
  hasGrassDmg_ = !!value_;
}
@synthesize grassDmg;
- (BOOL) hasWaterDmg {
  return !!hasWaterDmg_;
}
- (void) setHasWaterDmg:(BOOL) value_ {
  hasWaterDmg_ = !!value_;
}
@synthesize waterDmg;
- (BOOL) hasLightningDmg {
  return !!hasLightningDmg_;
}
- (void) setHasLightningDmg:(BOOL) value_ {
  hasLightningDmg_ = !!value_;
}
@synthesize lightningDmg;
- (BOOL) hasDarknessDmg {
  return !!hasDarknessDmg_;
}
- (void) setHasDarknessDmg:(BOOL) value_ {
  hasDarknessDmg_ = !!value_;
}
@synthesize darknessDmg;
- (BOOL) hasRockDmg {
  return !!hasRockDmg_;
}
- (void) setHasRockDmg:(BOOL) value_ {
  hasRockDmg_ = !!value_;
}
@synthesize rockDmg;
- (BOOL) hasSpeed {
  return !!hasSpeed_;
}
- (void) setHasSpeed:(BOOL) value_ {
  hasSpeed_ = !!value_;
}
@synthesize speed;
- (BOOL) hasHpExponentBase {
  return !!hasHpExponentBase_;
}
- (void) setHasHpExponentBase:(BOOL) value_ {
  hasHpExponentBase_ = !!value_;
}
@synthesize hpExponentBase;
- (BOOL) hasDmgExponentBase {
  return !!hasDmgExponentBase_;
}
- (void) setHasDmgExponentBase:(BOOL) value_ {
  hasDmgExponentBase_ = !!value_;
}
@synthesize dmgExponentBase;
- (BOOL) hasExpLvlDivisor {
  return !!hasExpLvlDivisor_;
}
- (void) setHasExpLvlDivisor:(BOOL) value_ {
  hasExpLvlDivisor_ = !!value_;
}
@synthesize expLvlDivisor;
- (BOOL) hasExpLvlExponent {
  return !!hasExpLvlExponent_;
}
- (void) setHasExpLvlExponent:(BOOL) value_ {
  hasExpLvlExponent_ = !!value_;
}
@synthesize expLvlExponent;
- (BOOL) hasSellAmount {
  return !!hasSellAmount_;
}
- (void) setHasSellAmount:(BOOL) value_ {
  hasSellAmount_ = !!value_;
}
@synthesize sellAmount;
- (BOOL) hasTeamCost {
  return !!hasTeamCost_;
}
- (void) setHasTeamCost:(BOOL) value_ {
  hasTeamCost_ = !!value_;
}
@synthesize teamCost;
- (BOOL) hasCostToFullyHeal {
  return !!hasCostToFullyHeal_;
}
- (void) setHasCostToFullyHeal:(BOOL) value_ {
  hasCostToFullyHeal_ = !!value_;
}
@synthesize costToFullyHeal;
- (BOOL) hasCostToFullyHealExponent {
  return !!hasCostToFullyHealExponent_;
}
- (void) setHasCostToFullyHealExponent:(BOOL) value_ {
  hasCostToFullyHealExponent_ = !!value_;
}
@synthesize costToFullyHealExponent;
- (BOOL) hasSecsToFullyHeal {
  return !!hasSecsToFullyHeal_;
}
- (void) setHasSecsToFullyHeal:(BOOL) value_ {
  hasSecsToFullyHeal_ = !!value_;
}
@synthesize secsToFullyHeal;
- (BOOL) hasSecsToFullyHealExponent {
  return !!hasSecsToFullyHealExponent_;
}
- (void) setHasSecsToFullyHealExponent:(BOOL) value_ {
  hasSecsToFullyHealExponent_ = !!value_;
}
@synthesize secsToFullyHealExponent;
- (BOOL) hasEnhanceCostPerFeeder {
  return !!hasEnhanceCostPerFeeder_;
}
- (void) setHasEnhanceCostPerFeeder:(BOOL) value_ {
  hasEnhanceCostPerFeeder_ = !!value_;
}
@synthesize enhanceCostPerFeeder;
- (BOOL) hasEnhanceCostExponent {
  return !!hasEnhanceCostExponent_;
}
- (void) setHasEnhanceCostExponent:(BOOL) value_ {
  hasEnhanceCostExponent_ = !!value_;
}
@synthesize enhanceCostExponent;
- (BOOL) hasSecsToEnhancePerFeeder {
  return !!hasSecsToEnhancePerFeeder_;
}
- (void) setHasSecsToEnhancePerFeeder:(BOOL) value_ {
  hasSecsToEnhancePerFeeder_ = !!value_;
}
@synthesize secsToEnhancePerFeeder;
- (BOOL) hasSecsToEnhancePerFeederExponent {
  return !!hasSecsToEnhancePerFeederExponent_;
}
- (void) setHasSecsToEnhancePerFeederExponent:(BOOL) value_ {
  hasSecsToEnhancePerFeederExponent_ = !!value_;
}
@synthesize secsToEnhancePerFeederExponent;
- (BOOL) hasStrength {
  return !!hasStrength_;
}
- (void) setHasStrength:(BOOL) value_ {
  hasStrength_ = !!value_;
}
@synthesize strength;
- (BOOL) hasStrengthExponent {
  return !!hasStrengthExponent_;
}
- (void) setHasStrengthExponent:(BOOL) value_ {
  hasStrengthExponent_ = !!value_;
}
@synthesize strengthExponent;
- (id) init {
  if ((self = [super init])) {
    self.lvl = 0;
    self.hp = 0;
    self.curLvlRequiredExp = 0;
    self.feederExp = 0;
    self.fireDmg = 0;
    self.grassDmg = 0;
    self.waterDmg = 0;
    self.lightningDmg = 0;
    self.darknessDmg = 0;
    self.rockDmg = 0;
    self.speed = 0;
    self.hpExponentBase = 0;
    self.dmgExponentBase = 0;
    self.expLvlDivisor = 0;
    self.expLvlExponent = 0;
    self.sellAmount = 0;
    self.teamCost = 0;
    self.costToFullyHeal = 0;
    self.costToFullyHealExponent = 0;
    self.secsToFullyHeal = 0;
    self.secsToFullyHealExponent = 0;
    self.enhanceCostPerFeeder = 0;
    self.enhanceCostExponent = 0;
    self.secsToEnhancePerFeeder = 0;
    self.secsToEnhancePerFeederExponent = 0;
    self.strength = 0;
    self.strengthExponent = 0;
  }
  return self;
}
static MonsterLevelInfoProto* defaultMonsterLevelInfoProtoInstance = nil;
+ (void) initialize {
  if (self == [MonsterLevelInfoProto class]) {
    defaultMonsterLevelInfoProtoInstance = [[MonsterLevelInfoProto alloc] init];
  }
}
+ (MonsterLevelInfoProto*) defaultInstance {
  return defaultMonsterLevelInfoProtoInstance;
}
- (MonsterLevelInfoProto*) defaultInstance {
  return defaultMonsterLevelInfoProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLvl) {
    [output writeInt32:1 value:self.lvl];
  }
  if (self.hasHp) {
    [output writeInt32:2 value:self.hp];
  }
  if (self.hasCurLvlRequiredExp) {
    [output writeInt32:3 value:self.curLvlRequiredExp];
  }
  if (self.hasFeederExp) {
    [output writeInt32:4 value:self.feederExp];
  }
  if (self.hasFireDmg) {
    [output writeSInt32:5 value:self.fireDmg];
  }
  if (self.hasGrassDmg) {
    [output writeSInt32:6 value:self.grassDmg];
  }
  if (self.hasWaterDmg) {
    [output writeSInt32:7 value:self.waterDmg];
  }
  if (self.hasLightningDmg) {
    [output writeSInt32:8 value:self.lightningDmg];
  }
  if (self.hasDarknessDmg) {
    [output writeSInt32:9 value:self.darknessDmg];
  }
  if (self.hasRockDmg) {
    [output writeSInt32:10 value:self.rockDmg];
  }
  if (self.hasSpeed) {
    [output writeInt32:11 value:self.speed];
  }
  if (self.hasHpExponentBase) {
    [output writeFloat:12 value:self.hpExponentBase];
  }
  if (self.hasDmgExponentBase) {
    [output writeFloat:13 value:self.dmgExponentBase];
  }
  if (self.hasExpLvlDivisor) {
    [output writeFloat:14 value:self.expLvlDivisor];
  }
  if (self.hasExpLvlExponent) {
    [output writeFloat:15 value:self.expLvlExponent];
  }
  if (self.hasSellAmount) {
    [output writeInt32:16 value:self.sellAmount];
  }
  if (self.hasTeamCost) {
    [output writeInt32:17 value:self.teamCost];
  }
  if (self.hasCostToFullyHeal) {
    [output writeInt32:18 value:self.costToFullyHeal];
  }
  if (self.hasSecsToFullyHeal) {
    [output writeInt32:19 value:self.secsToFullyHeal];
  }
  if (self.hasEnhanceCostPerFeeder) {
    [output writeInt32:20 value:self.enhanceCostPerFeeder];
  }
  if (self.hasEnhanceCostExponent) {
    [output writeFloat:21 value:self.enhanceCostExponent];
  }
  if (self.hasSecsToEnhancePerFeeder) {
    [output writeFloat:22 value:self.secsToEnhancePerFeeder];
  }
  if (self.hasSecsToEnhancePerFeederExponent) {
    [output writeFloat:23 value:self.secsToEnhancePerFeederExponent];
  }
  if (self.hasCostToFullyHealExponent) {
    [output writeFloat:24 value:self.costToFullyHealExponent];
  }
  if (self.hasSecsToFullyHealExponent) {
    [output writeFloat:25 value:self.secsToFullyHealExponent];
  }
  if (self.hasStrength) {
    [output writeInt32:26 value:self.strength];
  }
  if (self.hasStrengthExponent) {
    [output writeFloat:27 value:self.strengthExponent];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLvl) {
    size_ += computeInt32Size(1, self.lvl);
  }
  if (self.hasHp) {
    size_ += computeInt32Size(2, self.hp);
  }
  if (self.hasCurLvlRequiredExp) {
    size_ += computeInt32Size(3, self.curLvlRequiredExp);
  }
  if (self.hasFeederExp) {
    size_ += computeInt32Size(4, self.feederExp);
  }
  if (self.hasFireDmg) {
    size_ += computeSInt32Size(5, self.fireDmg);
  }
  if (self.hasGrassDmg) {
    size_ += computeSInt32Size(6, self.grassDmg);
  }
  if (self.hasWaterDmg) {
    size_ += computeSInt32Size(7, self.waterDmg);
  }
  if (self.hasLightningDmg) {
    size_ += computeSInt32Size(8, self.lightningDmg);
  }
  if (self.hasDarknessDmg) {
    size_ += computeSInt32Size(9, self.darknessDmg);
  }
  if (self.hasRockDmg) {
    size_ += computeSInt32Size(10, self.rockDmg);
  }
  if (self.hasSpeed) {
    size_ += computeInt32Size(11, self.speed);
  }
  if (self.hasHpExponentBase) {
    size_ += computeFloatSize(12, self.hpExponentBase);
  }
  if (self.hasDmgExponentBase) {
    size_ += computeFloatSize(13, self.dmgExponentBase);
  }
  if (self.hasExpLvlDivisor) {
    size_ += computeFloatSize(14, self.expLvlDivisor);
  }
  if (self.hasExpLvlExponent) {
    size_ += computeFloatSize(15, self.expLvlExponent);
  }
  if (self.hasSellAmount) {
    size_ += computeInt32Size(16, self.sellAmount);
  }
  if (self.hasTeamCost) {
    size_ += computeInt32Size(17, self.teamCost);
  }
  if (self.hasCostToFullyHeal) {
    size_ += computeInt32Size(18, self.costToFullyHeal);
  }
  if (self.hasSecsToFullyHeal) {
    size_ += computeInt32Size(19, self.secsToFullyHeal);
  }
  if (self.hasEnhanceCostPerFeeder) {
    size_ += computeInt32Size(20, self.enhanceCostPerFeeder);
  }
  if (self.hasEnhanceCostExponent) {
    size_ += computeFloatSize(21, self.enhanceCostExponent);
  }
  if (self.hasSecsToEnhancePerFeeder) {
    size_ += computeFloatSize(22, self.secsToEnhancePerFeeder);
  }
  if (self.hasSecsToEnhancePerFeederExponent) {
    size_ += computeFloatSize(23, self.secsToEnhancePerFeederExponent);
  }
  if (self.hasCostToFullyHealExponent) {
    size_ += computeFloatSize(24, self.costToFullyHealExponent);
  }
  if (self.hasSecsToFullyHealExponent) {
    size_ += computeFloatSize(25, self.secsToFullyHealExponent);
  }
  if (self.hasStrength) {
    size_ += computeInt32Size(26, self.strength);
  }
  if (self.hasStrengthExponent) {
    size_ += computeFloatSize(27, self.strengthExponent);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MonsterLevelInfoProto*) parseFromData:(NSData*) data {
  return (MonsterLevelInfoProto*)[[[MonsterLevelInfoProto builder] mergeFromData:data] build];
}
+ (MonsterLevelInfoProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterLevelInfoProto*)[[[MonsterLevelInfoProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MonsterLevelInfoProto*) parseFromInputStream:(NSInputStream*) input {
  return (MonsterLevelInfoProto*)[[[MonsterLevelInfoProto builder] mergeFromInputStream:input] build];
}
+ (MonsterLevelInfoProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterLevelInfoProto*)[[[MonsterLevelInfoProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterLevelInfoProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MonsterLevelInfoProto*)[[[MonsterLevelInfoProto builder] mergeFromCodedInputStream:input] build];
}
+ (MonsterLevelInfoProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterLevelInfoProto*)[[[MonsterLevelInfoProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterLevelInfoProto_Builder*) builder {
  return [[MonsterLevelInfoProto_Builder alloc] init];
}
+ (MonsterLevelInfoProto_Builder*) builderWithPrototype:(MonsterLevelInfoProto*) prototype {
  return [[MonsterLevelInfoProto builder] mergeFrom:prototype];
}
- (MonsterLevelInfoProto_Builder*) builder {
  return [MonsterLevelInfoProto builder];
}
- (MonsterLevelInfoProto_Builder*) toBuilder {
  return [MonsterLevelInfoProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lvl", [NSNumber numberWithInteger:self.lvl]];
  }
  if (self.hasHp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hp", [NSNumber numberWithInteger:self.hp]];
  }
  if (self.hasCurLvlRequiredExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"curLvlRequiredExp", [NSNumber numberWithInteger:self.curLvlRequiredExp]];
  }
  if (self.hasFeederExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"feederExp", [NSNumber numberWithInteger:self.feederExp]];
  }
  if (self.hasFireDmg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fireDmg", [NSNumber numberWithInteger:self.fireDmg]];
  }
  if (self.hasGrassDmg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"grassDmg", [NSNumber numberWithInteger:self.grassDmg]];
  }
  if (self.hasWaterDmg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waterDmg", [NSNumber numberWithInteger:self.waterDmg]];
  }
  if (self.hasLightningDmg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lightningDmg", [NSNumber numberWithInteger:self.lightningDmg]];
  }
  if (self.hasDarknessDmg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"darknessDmg", [NSNumber numberWithInteger:self.darknessDmg]];
  }
  if (self.hasRockDmg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rockDmg", [NSNumber numberWithInteger:self.rockDmg]];
  }
  if (self.hasSpeed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"speed", [NSNumber numberWithInteger:self.speed]];
  }
  if (self.hasHpExponentBase) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hpExponentBase", [NSNumber numberWithFloat:self.hpExponentBase]];
  }
  if (self.hasDmgExponentBase) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dmgExponentBase", [NSNumber numberWithFloat:self.dmgExponentBase]];
  }
  if (self.hasExpLvlDivisor) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expLvlDivisor", [NSNumber numberWithFloat:self.expLvlDivisor]];
  }
  if (self.hasExpLvlExponent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expLvlExponent", [NSNumber numberWithFloat:self.expLvlExponent]];
  }
  if (self.hasSellAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sellAmount", [NSNumber numberWithInteger:self.sellAmount]];
  }
  if (self.hasTeamCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamCost", [NSNumber numberWithInteger:self.teamCost]];
  }
  if (self.hasCostToFullyHeal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"costToFullyHeal", [NSNumber numberWithInteger:self.costToFullyHeal]];
  }
  if (self.hasSecsToFullyHeal) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secsToFullyHeal", [NSNumber numberWithInteger:self.secsToFullyHeal]];
  }
  if (self.hasEnhanceCostPerFeeder) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enhanceCostPerFeeder", [NSNumber numberWithInteger:self.enhanceCostPerFeeder]];
  }
  if (self.hasEnhanceCostExponent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enhanceCostExponent", [NSNumber numberWithFloat:self.enhanceCostExponent]];
  }
  if (self.hasSecsToEnhancePerFeeder) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secsToEnhancePerFeeder", [NSNumber numberWithFloat:self.secsToEnhancePerFeeder]];
  }
  if (self.hasSecsToEnhancePerFeederExponent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secsToEnhancePerFeederExponent", [NSNumber numberWithFloat:self.secsToEnhancePerFeederExponent]];
  }
  if (self.hasCostToFullyHealExponent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"costToFullyHealExponent", [NSNumber numberWithFloat:self.costToFullyHealExponent]];
  }
  if (self.hasSecsToFullyHealExponent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"secsToFullyHealExponent", [NSNumber numberWithFloat:self.secsToFullyHealExponent]];
  }
  if (self.hasStrength) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strength", [NSNumber numberWithInteger:self.strength]];
  }
  if (self.hasStrengthExponent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strengthExponent", [NSNumber numberWithFloat:self.strengthExponent]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MonsterLevelInfoProto class]]) {
    return NO;
  }
  MonsterLevelInfoProto *otherMessage = other;
  return
      self.hasLvl == otherMessage.hasLvl &&
      (!self.hasLvl || self.lvl == otherMessage.lvl) &&
      self.hasHp == otherMessage.hasHp &&
      (!self.hasHp || self.hp == otherMessage.hp) &&
      self.hasCurLvlRequiredExp == otherMessage.hasCurLvlRequiredExp &&
      (!self.hasCurLvlRequiredExp || self.curLvlRequiredExp == otherMessage.curLvlRequiredExp) &&
      self.hasFeederExp == otherMessage.hasFeederExp &&
      (!self.hasFeederExp || self.feederExp == otherMessage.feederExp) &&
      self.hasFireDmg == otherMessage.hasFireDmg &&
      (!self.hasFireDmg || self.fireDmg == otherMessage.fireDmg) &&
      self.hasGrassDmg == otherMessage.hasGrassDmg &&
      (!self.hasGrassDmg || self.grassDmg == otherMessage.grassDmg) &&
      self.hasWaterDmg == otherMessage.hasWaterDmg &&
      (!self.hasWaterDmg || self.waterDmg == otherMessage.waterDmg) &&
      self.hasLightningDmg == otherMessage.hasLightningDmg &&
      (!self.hasLightningDmg || self.lightningDmg == otherMessage.lightningDmg) &&
      self.hasDarknessDmg == otherMessage.hasDarknessDmg &&
      (!self.hasDarknessDmg || self.darknessDmg == otherMessage.darknessDmg) &&
      self.hasRockDmg == otherMessage.hasRockDmg &&
      (!self.hasRockDmg || self.rockDmg == otherMessage.rockDmg) &&
      self.hasSpeed == otherMessage.hasSpeed &&
      (!self.hasSpeed || self.speed == otherMessage.speed) &&
      self.hasHpExponentBase == otherMessage.hasHpExponentBase &&
      (!self.hasHpExponentBase || self.hpExponentBase == otherMessage.hpExponentBase) &&
      self.hasDmgExponentBase == otherMessage.hasDmgExponentBase &&
      (!self.hasDmgExponentBase || self.dmgExponentBase == otherMessage.dmgExponentBase) &&
      self.hasExpLvlDivisor == otherMessage.hasExpLvlDivisor &&
      (!self.hasExpLvlDivisor || self.expLvlDivisor == otherMessage.expLvlDivisor) &&
      self.hasExpLvlExponent == otherMessage.hasExpLvlExponent &&
      (!self.hasExpLvlExponent || self.expLvlExponent == otherMessage.expLvlExponent) &&
      self.hasSellAmount == otherMessage.hasSellAmount &&
      (!self.hasSellAmount || self.sellAmount == otherMessage.sellAmount) &&
      self.hasTeamCost == otherMessage.hasTeamCost &&
      (!self.hasTeamCost || self.teamCost == otherMessage.teamCost) &&
      self.hasCostToFullyHeal == otherMessage.hasCostToFullyHeal &&
      (!self.hasCostToFullyHeal || self.costToFullyHeal == otherMessage.costToFullyHeal) &&
      self.hasSecsToFullyHeal == otherMessage.hasSecsToFullyHeal &&
      (!self.hasSecsToFullyHeal || self.secsToFullyHeal == otherMessage.secsToFullyHeal) &&
      self.hasEnhanceCostPerFeeder == otherMessage.hasEnhanceCostPerFeeder &&
      (!self.hasEnhanceCostPerFeeder || self.enhanceCostPerFeeder == otherMessage.enhanceCostPerFeeder) &&
      self.hasEnhanceCostExponent == otherMessage.hasEnhanceCostExponent &&
      (!self.hasEnhanceCostExponent || self.enhanceCostExponent == otherMessage.enhanceCostExponent) &&
      self.hasSecsToEnhancePerFeeder == otherMessage.hasSecsToEnhancePerFeeder &&
      (!self.hasSecsToEnhancePerFeeder || self.secsToEnhancePerFeeder == otherMessage.secsToEnhancePerFeeder) &&
      self.hasSecsToEnhancePerFeederExponent == otherMessage.hasSecsToEnhancePerFeederExponent &&
      (!self.hasSecsToEnhancePerFeederExponent || self.secsToEnhancePerFeederExponent == otherMessage.secsToEnhancePerFeederExponent) &&
      self.hasCostToFullyHealExponent == otherMessage.hasCostToFullyHealExponent &&
      (!self.hasCostToFullyHealExponent || self.costToFullyHealExponent == otherMessage.costToFullyHealExponent) &&
      self.hasSecsToFullyHealExponent == otherMessage.hasSecsToFullyHealExponent &&
      (!self.hasSecsToFullyHealExponent || self.secsToFullyHealExponent == otherMessage.secsToFullyHealExponent) &&
      self.hasStrength == otherMessage.hasStrength &&
      (!self.hasStrength || self.strength == otherMessage.strength) &&
      self.hasStrengthExponent == otherMessage.hasStrengthExponent &&
      (!self.hasStrengthExponent || self.strengthExponent == otherMessage.strengthExponent) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lvl] hash];
  }
  if (self.hasHp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.hp] hash];
  }
  if (self.hasCurLvlRequiredExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.curLvlRequiredExp] hash];
  }
  if (self.hasFeederExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.feederExp] hash];
  }
  if (self.hasFireDmg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.fireDmg] hash];
  }
  if (self.hasGrassDmg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.grassDmg] hash];
  }
  if (self.hasWaterDmg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.waterDmg] hash];
  }
  if (self.hasLightningDmg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lightningDmg] hash];
  }
  if (self.hasDarknessDmg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.darknessDmg] hash];
  }
  if (self.hasRockDmg) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rockDmg] hash];
  }
  if (self.hasSpeed) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.speed] hash];
  }
  if (self.hasHpExponentBase) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.hpExponentBase] hash];
  }
  if (self.hasDmgExponentBase) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.dmgExponentBase] hash];
  }
  if (self.hasExpLvlDivisor) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.expLvlDivisor] hash];
  }
  if (self.hasExpLvlExponent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.expLvlExponent] hash];
  }
  if (self.hasSellAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.sellAmount] hash];
  }
  if (self.hasTeamCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.teamCost] hash];
  }
  if (self.hasCostToFullyHeal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.costToFullyHeal] hash];
  }
  if (self.hasSecsToFullyHeal) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.secsToFullyHeal] hash];
  }
  if (self.hasEnhanceCostPerFeeder) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.enhanceCostPerFeeder] hash];
  }
  if (self.hasEnhanceCostExponent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.enhanceCostExponent] hash];
  }
  if (self.hasSecsToEnhancePerFeeder) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.secsToEnhancePerFeeder] hash];
  }
  if (self.hasSecsToEnhancePerFeederExponent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.secsToEnhancePerFeederExponent] hash];
  }
  if (self.hasCostToFullyHealExponent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.costToFullyHealExponent] hash];
  }
  if (self.hasSecsToFullyHealExponent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.secsToFullyHealExponent] hash];
  }
  if (self.hasStrength) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.strength] hash];
  }
  if (self.hasStrengthExponent) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.strengthExponent] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MonsterLevelInfoProto_Builder()
@property (strong) MonsterLevelInfoProto* result;
@end

@implementation MonsterLevelInfoProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MonsterLevelInfoProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MonsterLevelInfoProto_Builder*) clear {
  self.result = [[MonsterLevelInfoProto alloc] init];
  return self;
}
- (MonsterLevelInfoProto_Builder*) clone {
  return [MonsterLevelInfoProto builderWithPrototype:result];
}
- (MonsterLevelInfoProto*) defaultInstance {
  return [MonsterLevelInfoProto defaultInstance];
}
- (MonsterLevelInfoProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MonsterLevelInfoProto*) buildPartial {
  MonsterLevelInfoProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MonsterLevelInfoProto_Builder*) mergeFrom:(MonsterLevelInfoProto*) other {
  if (other == [MonsterLevelInfoProto defaultInstance]) {
    return self;
  }
  if (other.hasLvl) {
    [self setLvl:other.lvl];
  }
  if (other.hasHp) {
    [self setHp:other.hp];
  }
  if (other.hasCurLvlRequiredExp) {
    [self setCurLvlRequiredExp:other.curLvlRequiredExp];
  }
  if (other.hasFeederExp) {
    [self setFeederExp:other.feederExp];
  }
  if (other.hasFireDmg) {
    [self setFireDmg:other.fireDmg];
  }
  if (other.hasGrassDmg) {
    [self setGrassDmg:other.grassDmg];
  }
  if (other.hasWaterDmg) {
    [self setWaterDmg:other.waterDmg];
  }
  if (other.hasLightningDmg) {
    [self setLightningDmg:other.lightningDmg];
  }
  if (other.hasDarknessDmg) {
    [self setDarknessDmg:other.darknessDmg];
  }
  if (other.hasRockDmg) {
    [self setRockDmg:other.rockDmg];
  }
  if (other.hasSpeed) {
    [self setSpeed:other.speed];
  }
  if (other.hasHpExponentBase) {
    [self setHpExponentBase:other.hpExponentBase];
  }
  if (other.hasDmgExponentBase) {
    [self setDmgExponentBase:other.dmgExponentBase];
  }
  if (other.hasExpLvlDivisor) {
    [self setExpLvlDivisor:other.expLvlDivisor];
  }
  if (other.hasExpLvlExponent) {
    [self setExpLvlExponent:other.expLvlExponent];
  }
  if (other.hasSellAmount) {
    [self setSellAmount:other.sellAmount];
  }
  if (other.hasTeamCost) {
    [self setTeamCost:other.teamCost];
  }
  if (other.hasCostToFullyHeal) {
    [self setCostToFullyHeal:other.costToFullyHeal];
  }
  if (other.hasCostToFullyHealExponent) {
    [self setCostToFullyHealExponent:other.costToFullyHealExponent];
  }
  if (other.hasSecsToFullyHeal) {
    [self setSecsToFullyHeal:other.secsToFullyHeal];
  }
  if (other.hasSecsToFullyHealExponent) {
    [self setSecsToFullyHealExponent:other.secsToFullyHealExponent];
  }
  if (other.hasEnhanceCostPerFeeder) {
    [self setEnhanceCostPerFeeder:other.enhanceCostPerFeeder];
  }
  if (other.hasEnhanceCostExponent) {
    [self setEnhanceCostExponent:other.enhanceCostExponent];
  }
  if (other.hasSecsToEnhancePerFeeder) {
    [self setSecsToEnhancePerFeeder:other.secsToEnhancePerFeeder];
  }
  if (other.hasSecsToEnhancePerFeederExponent) {
    [self setSecsToEnhancePerFeederExponent:other.secsToEnhancePerFeederExponent];
  }
  if (other.hasStrength) {
    [self setStrength:other.strength];
  }
  if (other.hasStrengthExponent) {
    [self setStrengthExponent:other.strengthExponent];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MonsterLevelInfoProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MonsterLevelInfoProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLvl:[input readInt32]];
        break;
      }
      case 16: {
        [self setHp:[input readInt32]];
        break;
      }
      case 24: {
        [self setCurLvlRequiredExp:[input readInt32]];
        break;
      }
      case 32: {
        [self setFeederExp:[input readInt32]];
        break;
      }
      case 40: {
        [self setFireDmg:[input readSInt32]];
        break;
      }
      case 48: {
        [self setGrassDmg:[input readSInt32]];
        break;
      }
      case 56: {
        [self setWaterDmg:[input readSInt32]];
        break;
      }
      case 64: {
        [self setLightningDmg:[input readSInt32]];
        break;
      }
      case 72: {
        [self setDarknessDmg:[input readSInt32]];
        break;
      }
      case 80: {
        [self setRockDmg:[input readSInt32]];
        break;
      }
      case 88: {
        [self setSpeed:[input readInt32]];
        break;
      }
      case 101: {
        [self setHpExponentBase:[input readFloat]];
        break;
      }
      case 109: {
        [self setDmgExponentBase:[input readFloat]];
        break;
      }
      case 117: {
        [self setExpLvlDivisor:[input readFloat]];
        break;
      }
      case 125: {
        [self setExpLvlExponent:[input readFloat]];
        break;
      }
      case 128: {
        [self setSellAmount:[input readInt32]];
        break;
      }
      case 136: {
        [self setTeamCost:[input readInt32]];
        break;
      }
      case 144: {
        [self setCostToFullyHeal:[input readInt32]];
        break;
      }
      case 152: {
        [self setSecsToFullyHeal:[input readInt32]];
        break;
      }
      case 160: {
        [self setEnhanceCostPerFeeder:[input readInt32]];
        break;
      }
      case 173: {
        [self setEnhanceCostExponent:[input readFloat]];
        break;
      }
      case 181: {
        [self setSecsToEnhancePerFeeder:[input readFloat]];
        break;
      }
      case 189: {
        [self setSecsToEnhancePerFeederExponent:[input readFloat]];
        break;
      }
      case 197: {
        [self setCostToFullyHealExponent:[input readFloat]];
        break;
      }
      case 205: {
        [self setSecsToFullyHealExponent:[input readFloat]];
        break;
      }
      case 208: {
        [self setStrength:[input readInt32]];
        break;
      }
      case 221: {
        [self setStrengthExponent:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasLvl {
  return result.hasLvl;
}
- (int32_t) lvl {
  return result.lvl;
}
- (MonsterLevelInfoProto_Builder*) setLvl:(int32_t) value {
  result.hasLvl = YES;
  result.lvl = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearLvl {
  result.hasLvl = NO;
  result.lvl = 0;
  return self;
}
- (BOOL) hasHp {
  return result.hasHp;
}
- (int32_t) hp {
  return result.hp;
}
- (MonsterLevelInfoProto_Builder*) setHp:(int32_t) value {
  result.hasHp = YES;
  result.hp = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearHp {
  result.hasHp = NO;
  result.hp = 0;
  return self;
}
- (BOOL) hasCurLvlRequiredExp {
  return result.hasCurLvlRequiredExp;
}
- (int32_t) curLvlRequiredExp {
  return result.curLvlRequiredExp;
}
- (MonsterLevelInfoProto_Builder*) setCurLvlRequiredExp:(int32_t) value {
  result.hasCurLvlRequiredExp = YES;
  result.curLvlRequiredExp = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearCurLvlRequiredExp {
  result.hasCurLvlRequiredExp = NO;
  result.curLvlRequiredExp = 0;
  return self;
}
- (BOOL) hasFeederExp {
  return result.hasFeederExp;
}
- (int32_t) feederExp {
  return result.feederExp;
}
- (MonsterLevelInfoProto_Builder*) setFeederExp:(int32_t) value {
  result.hasFeederExp = YES;
  result.feederExp = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearFeederExp {
  result.hasFeederExp = NO;
  result.feederExp = 0;
  return self;
}
- (BOOL) hasFireDmg {
  return result.hasFireDmg;
}
- (int32_t) fireDmg {
  return result.fireDmg;
}
- (MonsterLevelInfoProto_Builder*) setFireDmg:(int32_t) value {
  result.hasFireDmg = YES;
  result.fireDmg = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearFireDmg {
  result.hasFireDmg = NO;
  result.fireDmg = 0;
  return self;
}
- (BOOL) hasGrassDmg {
  return result.hasGrassDmg;
}
- (int32_t) grassDmg {
  return result.grassDmg;
}
- (MonsterLevelInfoProto_Builder*) setGrassDmg:(int32_t) value {
  result.hasGrassDmg = YES;
  result.grassDmg = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearGrassDmg {
  result.hasGrassDmg = NO;
  result.grassDmg = 0;
  return self;
}
- (BOOL) hasWaterDmg {
  return result.hasWaterDmg;
}
- (int32_t) waterDmg {
  return result.waterDmg;
}
- (MonsterLevelInfoProto_Builder*) setWaterDmg:(int32_t) value {
  result.hasWaterDmg = YES;
  result.waterDmg = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearWaterDmg {
  result.hasWaterDmg = NO;
  result.waterDmg = 0;
  return self;
}
- (BOOL) hasLightningDmg {
  return result.hasLightningDmg;
}
- (int32_t) lightningDmg {
  return result.lightningDmg;
}
- (MonsterLevelInfoProto_Builder*) setLightningDmg:(int32_t) value {
  result.hasLightningDmg = YES;
  result.lightningDmg = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearLightningDmg {
  result.hasLightningDmg = NO;
  result.lightningDmg = 0;
  return self;
}
- (BOOL) hasDarknessDmg {
  return result.hasDarknessDmg;
}
- (int32_t) darknessDmg {
  return result.darknessDmg;
}
- (MonsterLevelInfoProto_Builder*) setDarknessDmg:(int32_t) value {
  result.hasDarknessDmg = YES;
  result.darknessDmg = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearDarknessDmg {
  result.hasDarknessDmg = NO;
  result.darknessDmg = 0;
  return self;
}
- (BOOL) hasRockDmg {
  return result.hasRockDmg;
}
- (int32_t) rockDmg {
  return result.rockDmg;
}
- (MonsterLevelInfoProto_Builder*) setRockDmg:(int32_t) value {
  result.hasRockDmg = YES;
  result.rockDmg = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearRockDmg {
  result.hasRockDmg = NO;
  result.rockDmg = 0;
  return self;
}
- (BOOL) hasSpeed {
  return result.hasSpeed;
}
- (int32_t) speed {
  return result.speed;
}
- (MonsterLevelInfoProto_Builder*) setSpeed:(int32_t) value {
  result.hasSpeed = YES;
  result.speed = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearSpeed {
  result.hasSpeed = NO;
  result.speed = 0;
  return self;
}
- (BOOL) hasHpExponentBase {
  return result.hasHpExponentBase;
}
- (Float32) hpExponentBase {
  return result.hpExponentBase;
}
- (MonsterLevelInfoProto_Builder*) setHpExponentBase:(Float32) value {
  result.hasHpExponentBase = YES;
  result.hpExponentBase = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearHpExponentBase {
  result.hasHpExponentBase = NO;
  result.hpExponentBase = 0;
  return self;
}
- (BOOL) hasDmgExponentBase {
  return result.hasDmgExponentBase;
}
- (Float32) dmgExponentBase {
  return result.dmgExponentBase;
}
- (MonsterLevelInfoProto_Builder*) setDmgExponentBase:(Float32) value {
  result.hasDmgExponentBase = YES;
  result.dmgExponentBase = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearDmgExponentBase {
  result.hasDmgExponentBase = NO;
  result.dmgExponentBase = 0;
  return self;
}
- (BOOL) hasExpLvlDivisor {
  return result.hasExpLvlDivisor;
}
- (Float32) expLvlDivisor {
  return result.expLvlDivisor;
}
- (MonsterLevelInfoProto_Builder*) setExpLvlDivisor:(Float32) value {
  result.hasExpLvlDivisor = YES;
  result.expLvlDivisor = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearExpLvlDivisor {
  result.hasExpLvlDivisor = NO;
  result.expLvlDivisor = 0;
  return self;
}
- (BOOL) hasExpLvlExponent {
  return result.hasExpLvlExponent;
}
- (Float32) expLvlExponent {
  return result.expLvlExponent;
}
- (MonsterLevelInfoProto_Builder*) setExpLvlExponent:(Float32) value {
  result.hasExpLvlExponent = YES;
  result.expLvlExponent = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearExpLvlExponent {
  result.hasExpLvlExponent = NO;
  result.expLvlExponent = 0;
  return self;
}
- (BOOL) hasSellAmount {
  return result.hasSellAmount;
}
- (int32_t) sellAmount {
  return result.sellAmount;
}
- (MonsterLevelInfoProto_Builder*) setSellAmount:(int32_t) value {
  result.hasSellAmount = YES;
  result.sellAmount = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearSellAmount {
  result.hasSellAmount = NO;
  result.sellAmount = 0;
  return self;
}
- (BOOL) hasTeamCost {
  return result.hasTeamCost;
}
- (int32_t) teamCost {
  return result.teamCost;
}
- (MonsterLevelInfoProto_Builder*) setTeamCost:(int32_t) value {
  result.hasTeamCost = YES;
  result.teamCost = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearTeamCost {
  result.hasTeamCost = NO;
  result.teamCost = 0;
  return self;
}
- (BOOL) hasCostToFullyHeal {
  return result.hasCostToFullyHeal;
}
- (int32_t) costToFullyHeal {
  return result.costToFullyHeal;
}
- (MonsterLevelInfoProto_Builder*) setCostToFullyHeal:(int32_t) value {
  result.hasCostToFullyHeal = YES;
  result.costToFullyHeal = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearCostToFullyHeal {
  result.hasCostToFullyHeal = NO;
  result.costToFullyHeal = 0;
  return self;
}
- (BOOL) hasCostToFullyHealExponent {
  return result.hasCostToFullyHealExponent;
}
- (Float32) costToFullyHealExponent {
  return result.costToFullyHealExponent;
}
- (MonsterLevelInfoProto_Builder*) setCostToFullyHealExponent:(Float32) value {
  result.hasCostToFullyHealExponent = YES;
  result.costToFullyHealExponent = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearCostToFullyHealExponent {
  result.hasCostToFullyHealExponent = NO;
  result.costToFullyHealExponent = 0;
  return self;
}
- (BOOL) hasSecsToFullyHeal {
  return result.hasSecsToFullyHeal;
}
- (int32_t) secsToFullyHeal {
  return result.secsToFullyHeal;
}
- (MonsterLevelInfoProto_Builder*) setSecsToFullyHeal:(int32_t) value {
  result.hasSecsToFullyHeal = YES;
  result.secsToFullyHeal = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearSecsToFullyHeal {
  result.hasSecsToFullyHeal = NO;
  result.secsToFullyHeal = 0;
  return self;
}
- (BOOL) hasSecsToFullyHealExponent {
  return result.hasSecsToFullyHealExponent;
}
- (Float32) secsToFullyHealExponent {
  return result.secsToFullyHealExponent;
}
- (MonsterLevelInfoProto_Builder*) setSecsToFullyHealExponent:(Float32) value {
  result.hasSecsToFullyHealExponent = YES;
  result.secsToFullyHealExponent = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearSecsToFullyHealExponent {
  result.hasSecsToFullyHealExponent = NO;
  result.secsToFullyHealExponent = 0;
  return self;
}
- (BOOL) hasEnhanceCostPerFeeder {
  return result.hasEnhanceCostPerFeeder;
}
- (int32_t) enhanceCostPerFeeder {
  return result.enhanceCostPerFeeder;
}
- (MonsterLevelInfoProto_Builder*) setEnhanceCostPerFeeder:(int32_t) value {
  result.hasEnhanceCostPerFeeder = YES;
  result.enhanceCostPerFeeder = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearEnhanceCostPerFeeder {
  result.hasEnhanceCostPerFeeder = NO;
  result.enhanceCostPerFeeder = 0;
  return self;
}
- (BOOL) hasEnhanceCostExponent {
  return result.hasEnhanceCostExponent;
}
- (Float32) enhanceCostExponent {
  return result.enhanceCostExponent;
}
- (MonsterLevelInfoProto_Builder*) setEnhanceCostExponent:(Float32) value {
  result.hasEnhanceCostExponent = YES;
  result.enhanceCostExponent = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearEnhanceCostExponent {
  result.hasEnhanceCostExponent = NO;
  result.enhanceCostExponent = 0;
  return self;
}
- (BOOL) hasSecsToEnhancePerFeeder {
  return result.hasSecsToEnhancePerFeeder;
}
- (Float32) secsToEnhancePerFeeder {
  return result.secsToEnhancePerFeeder;
}
- (MonsterLevelInfoProto_Builder*) setSecsToEnhancePerFeeder:(Float32) value {
  result.hasSecsToEnhancePerFeeder = YES;
  result.secsToEnhancePerFeeder = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearSecsToEnhancePerFeeder {
  result.hasSecsToEnhancePerFeeder = NO;
  result.secsToEnhancePerFeeder = 0;
  return self;
}
- (BOOL) hasSecsToEnhancePerFeederExponent {
  return result.hasSecsToEnhancePerFeederExponent;
}
- (Float32) secsToEnhancePerFeederExponent {
  return result.secsToEnhancePerFeederExponent;
}
- (MonsterLevelInfoProto_Builder*) setSecsToEnhancePerFeederExponent:(Float32) value {
  result.hasSecsToEnhancePerFeederExponent = YES;
  result.secsToEnhancePerFeederExponent = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearSecsToEnhancePerFeederExponent {
  result.hasSecsToEnhancePerFeederExponent = NO;
  result.secsToEnhancePerFeederExponent = 0;
  return self;
}
- (BOOL) hasStrength {
  return result.hasStrength;
}
- (int32_t) strength {
  return result.strength;
}
- (MonsterLevelInfoProto_Builder*) setStrength:(int32_t) value {
  result.hasStrength = YES;
  result.strength = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearStrength {
  result.hasStrength = NO;
  result.strength = 0;
  return self;
}
- (BOOL) hasStrengthExponent {
  return result.hasStrengthExponent;
}
- (Float32) strengthExponent {
  return result.strengthExponent;
}
- (MonsterLevelInfoProto_Builder*) setStrengthExponent:(Float32) value {
  result.hasStrengthExponent = YES;
  result.strengthExponent = value;
  return self;
}
- (MonsterLevelInfoProto_Builder*) clearStrengthExponent {
  result.hasStrengthExponent = NO;
  result.strengthExponent = 0;
  return self;
}
@end

@interface FullUserMonsterProto ()
@property (strong) NSString* userMonsterUuid;
@property (strong) NSString* userUuid;
@property int32_t monsterId;
@property int32_t currentExp;
@property int32_t currentLvl;
@property int32_t currentHealth;
@property int32_t numPieces;
@property BOOL isComplete;
@property int64_t combineStartTime;
@property int32_t teamSlotNum;
@property BOOL isRestrictd;
@property int32_t offensiveSkillId;
@property int32_t defensiveSkillId;
@end

@implementation FullUserMonsterProto

- (BOOL) hasUserMonsterUuid {
  return !!hasUserMonsterUuid_;
}
- (void) setHasUserMonsterUuid:(BOOL) value_ {
  hasUserMonsterUuid_ = !!value_;
}
@synthesize userMonsterUuid;
- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasCurrentExp {
  return !!hasCurrentExp_;
}
- (void) setHasCurrentExp:(BOOL) value_ {
  hasCurrentExp_ = !!value_;
}
@synthesize currentExp;
- (BOOL) hasCurrentLvl {
  return !!hasCurrentLvl_;
}
- (void) setHasCurrentLvl:(BOOL) value_ {
  hasCurrentLvl_ = !!value_;
}
@synthesize currentLvl;
- (BOOL) hasCurrentHealth {
  return !!hasCurrentHealth_;
}
- (void) setHasCurrentHealth:(BOOL) value_ {
  hasCurrentHealth_ = !!value_;
}
@synthesize currentHealth;
- (BOOL) hasNumPieces {
  return !!hasNumPieces_;
}
- (void) setHasNumPieces:(BOOL) value_ {
  hasNumPieces_ = !!value_;
}
@synthesize numPieces;
- (BOOL) hasIsComplete {
  return !!hasIsComplete_;
}
- (void) setHasIsComplete:(BOOL) value_ {
  hasIsComplete_ = !!value_;
}
- (BOOL) isComplete {
  return !!isComplete_;
}
- (void) setIsComplete:(BOOL) value_ {
  isComplete_ = !!value_;
}
- (BOOL) hasCombineStartTime {
  return !!hasCombineStartTime_;
}
- (void) setHasCombineStartTime:(BOOL) value_ {
  hasCombineStartTime_ = !!value_;
}
@synthesize combineStartTime;
- (BOOL) hasTeamSlotNum {
  return !!hasTeamSlotNum_;
}
- (void) setHasTeamSlotNum:(BOOL) value_ {
  hasTeamSlotNum_ = !!value_;
}
@synthesize teamSlotNum;
- (BOOL) hasIsRestrictd {
  return !!hasIsRestrictd_;
}
- (void) setHasIsRestrictd:(BOOL) value_ {
  hasIsRestrictd_ = !!value_;
}
- (BOOL) isRestrictd {
  return !!isRestrictd_;
}
- (void) setIsRestrictd:(BOOL) value_ {
  isRestrictd_ = !!value_;
}
- (BOOL) hasOffensiveSkillId {
  return !!hasOffensiveSkillId_;
}
- (void) setHasOffensiveSkillId:(BOOL) value_ {
  hasOffensiveSkillId_ = !!value_;
}
@synthesize offensiveSkillId;
- (BOOL) hasDefensiveSkillId {
  return !!hasDefensiveSkillId_;
}
- (void) setHasDefensiveSkillId:(BOOL) value_ {
  hasDefensiveSkillId_ = !!value_;
}
@synthesize defensiveSkillId;
- (id) init {
  if ((self = [super init])) {
    self.userMonsterUuid = @"";
    self.userUuid = @"";
    self.monsterId = 0;
    self.currentExp = 0;
    self.currentLvl = 0;
    self.currentHealth = 0;
    self.numPieces = 0;
    self.isComplete = NO;
    self.combineStartTime = 0L;
    self.teamSlotNum = 0;
    self.isRestrictd = NO;
    self.offensiveSkillId = 0;
    self.defensiveSkillId = 0;
  }
  return self;
}
static FullUserMonsterProto* defaultFullUserMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [FullUserMonsterProto class]) {
    defaultFullUserMonsterProtoInstance = [[FullUserMonsterProto alloc] init];
  }
}
+ (FullUserMonsterProto*) defaultInstance {
  return defaultFullUserMonsterProtoInstance;
}
- (FullUserMonsterProto*) defaultInstance {
  return defaultFullUserMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterUuid) {
    [output writeString:1 value:self.userMonsterUuid];
  }
  if (self.hasUserUuid) {
    [output writeString:2 value:self.userUuid];
  }
  if (self.hasMonsterId) {
    [output writeInt32:3 value:self.monsterId];
  }
  if (self.hasCurrentExp) {
    [output writeInt32:4 value:self.currentExp];
  }
  if (self.hasCurrentLvl) {
    [output writeInt32:5 value:self.currentLvl];
  }
  if (self.hasCurrentHealth) {
    [output writeInt32:6 value:self.currentHealth];
  }
  if (self.hasNumPieces) {
    [output writeInt32:7 value:self.numPieces];
  }
  if (self.hasIsComplete) {
    [output writeBool:8 value:self.isComplete];
  }
  if (self.hasCombineStartTime) {
    [output writeInt64:9 value:self.combineStartTime];
  }
  if (self.hasTeamSlotNum) {
    [output writeInt32:10 value:self.teamSlotNum];
  }
  if (self.hasIsRestrictd) {
    [output writeBool:12 value:self.isRestrictd];
  }
  if (self.hasOffensiveSkillId) {
    [output writeInt32:13 value:self.offensiveSkillId];
  }
  if (self.hasDefensiveSkillId) {
    [output writeInt32:14 value:self.defensiveSkillId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMonsterUuid) {
    size_ += computeStringSize(1, self.userMonsterUuid);
  }
  if (self.hasUserUuid) {
    size_ += computeStringSize(2, self.userUuid);
  }
  if (self.hasMonsterId) {
    size_ += computeInt32Size(3, self.monsterId);
  }
  if (self.hasCurrentExp) {
    size_ += computeInt32Size(4, self.currentExp);
  }
  if (self.hasCurrentLvl) {
    size_ += computeInt32Size(5, self.currentLvl);
  }
  if (self.hasCurrentHealth) {
    size_ += computeInt32Size(6, self.currentHealth);
  }
  if (self.hasNumPieces) {
    size_ += computeInt32Size(7, self.numPieces);
  }
  if (self.hasIsComplete) {
    size_ += computeBoolSize(8, self.isComplete);
  }
  if (self.hasCombineStartTime) {
    size_ += computeInt64Size(9, self.combineStartTime);
  }
  if (self.hasTeamSlotNum) {
    size_ += computeInt32Size(10, self.teamSlotNum);
  }
  if (self.hasIsRestrictd) {
    size_ += computeBoolSize(12, self.isRestrictd);
  }
  if (self.hasOffensiveSkillId) {
    size_ += computeInt32Size(13, self.offensiveSkillId);
  }
  if (self.hasDefensiveSkillId) {
    size_ += computeInt32Size(14, self.defensiveSkillId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FullUserMonsterProto*) parseFromData:(NSData*) data {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromData:data] build];
}
+ (FullUserMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromInputStream:input] build];
}
+ (FullUserMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (FullUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FullUserMonsterProto*)[[[FullUserMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FullUserMonsterProto_Builder*) builder {
  return [[FullUserMonsterProto_Builder alloc] init];
}
+ (FullUserMonsterProto_Builder*) builderWithPrototype:(FullUserMonsterProto*) prototype {
  return [[FullUserMonsterProto builder] mergeFrom:prototype];
}
- (FullUserMonsterProto_Builder*) builder {
  return [FullUserMonsterProto builder];
}
- (FullUserMonsterProto_Builder*) toBuilder {
  return [FullUserMonsterProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuid", self.userMonsterUuid];
  }
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasCurrentExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentExp", [NSNumber numberWithInteger:self.currentExp]];
  }
  if (self.hasCurrentLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentLvl", [NSNumber numberWithInteger:self.currentLvl]];
  }
  if (self.hasCurrentHealth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentHealth", [NSNumber numberWithInteger:self.currentHealth]];
  }
  if (self.hasNumPieces) {
    [output appendFormat:@"%@%@: %@\n", indent, @"numPieces", [NSNumber numberWithInteger:self.numPieces]];
  }
  if (self.hasIsComplete) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isComplete", [NSNumber numberWithBool:self.isComplete]];
  }
  if (self.hasCombineStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"combineStartTime", [NSNumber numberWithLongLong:self.combineStartTime]];
  }
  if (self.hasTeamSlotNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamSlotNum", [NSNumber numberWithInteger:self.teamSlotNum]];
  }
  if (self.hasIsRestrictd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isRestrictd", [NSNumber numberWithBool:self.isRestrictd]];
  }
  if (self.hasOffensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offensiveSkillId", [NSNumber numberWithInteger:self.offensiveSkillId]];
  }
  if (self.hasDefensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defensiveSkillId", [NSNumber numberWithInteger:self.defensiveSkillId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FullUserMonsterProto class]]) {
    return NO;
  }
  FullUserMonsterProto *otherMessage = other;
  return
      self.hasUserMonsterUuid == otherMessage.hasUserMonsterUuid &&
      (!self.hasUserMonsterUuid || [self.userMonsterUuid isEqual:otherMessage.userMonsterUuid]) &&
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasCurrentExp == otherMessage.hasCurrentExp &&
      (!self.hasCurrentExp || self.currentExp == otherMessage.currentExp) &&
      self.hasCurrentLvl == otherMessage.hasCurrentLvl &&
      (!self.hasCurrentLvl || self.currentLvl == otherMessage.currentLvl) &&
      self.hasCurrentHealth == otherMessage.hasCurrentHealth &&
      (!self.hasCurrentHealth || self.currentHealth == otherMessage.currentHealth) &&
      self.hasNumPieces == otherMessage.hasNumPieces &&
      (!self.hasNumPieces || self.numPieces == otherMessage.numPieces) &&
      self.hasIsComplete == otherMessage.hasIsComplete &&
      (!self.hasIsComplete || self.isComplete == otherMessage.isComplete) &&
      self.hasCombineStartTime == otherMessage.hasCombineStartTime &&
      (!self.hasCombineStartTime || self.combineStartTime == otherMessage.combineStartTime) &&
      self.hasTeamSlotNum == otherMessage.hasTeamSlotNum &&
      (!self.hasTeamSlotNum || self.teamSlotNum == otherMessage.teamSlotNum) &&
      self.hasIsRestrictd == otherMessage.hasIsRestrictd &&
      (!self.hasIsRestrictd || self.isRestrictd == otherMessage.isRestrictd) &&
      self.hasOffensiveSkillId == otherMessage.hasOffensiveSkillId &&
      (!self.hasOffensiveSkillId || self.offensiveSkillId == otherMessage.offensiveSkillId) &&
      self.hasDefensiveSkillId == otherMessage.hasDefensiveSkillId &&
      (!self.hasDefensiveSkillId || self.defensiveSkillId == otherMessage.defensiveSkillId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.userMonsterUuid hash];
  }
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasCurrentExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentExp] hash];
  }
  if (self.hasCurrentLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentLvl] hash];
  }
  if (self.hasCurrentHealth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentHealth] hash];
  }
  if (self.hasNumPieces) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.numPieces] hash];
  }
  if (self.hasIsComplete) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isComplete] hash];
  }
  if (self.hasCombineStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.combineStartTime] hash];
  }
  if (self.hasTeamSlotNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.teamSlotNum] hash];
  }
  if (self.hasIsRestrictd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isRestrictd] hash];
  }
  if (self.hasOffensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offensiveSkillId] hash];
  }
  if (self.hasDefensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defensiveSkillId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FullUserMonsterProto_Builder()
@property (strong) FullUserMonsterProto* result;
@end

@implementation FullUserMonsterProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[FullUserMonsterProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (FullUserMonsterProto_Builder*) clear {
  self.result = [[FullUserMonsterProto alloc] init];
  return self;
}
- (FullUserMonsterProto_Builder*) clone {
  return [FullUserMonsterProto builderWithPrototype:result];
}
- (FullUserMonsterProto*) defaultInstance {
  return [FullUserMonsterProto defaultInstance];
}
- (FullUserMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FullUserMonsterProto*) buildPartial {
  FullUserMonsterProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (FullUserMonsterProto_Builder*) mergeFrom:(FullUserMonsterProto*) other {
  if (other == [FullUserMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterUuid) {
    [self setUserMonsterUuid:other.userMonsterUuid];
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasCurrentExp) {
    [self setCurrentExp:other.currentExp];
  }
  if (other.hasCurrentLvl) {
    [self setCurrentLvl:other.currentLvl];
  }
  if (other.hasCurrentHealth) {
    [self setCurrentHealth:other.currentHealth];
  }
  if (other.hasNumPieces) {
    [self setNumPieces:other.numPieces];
  }
  if (other.hasIsComplete) {
    [self setIsComplete:other.isComplete];
  }
  if (other.hasCombineStartTime) {
    [self setCombineStartTime:other.combineStartTime];
  }
  if (other.hasTeamSlotNum) {
    [self setTeamSlotNum:other.teamSlotNum];
  }
  if (other.hasIsRestrictd) {
    [self setIsRestrictd:other.isRestrictd];
  }
  if (other.hasOffensiveSkillId) {
    [self setOffensiveSkillId:other.offensiveSkillId];
  }
  if (other.hasDefensiveSkillId) {
    [self setDefensiveSkillId:other.defensiveSkillId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FullUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FullUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMonsterUuid:[input readString]];
        break;
      }
      case 18: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 24: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 32: {
        [self setCurrentExp:[input readInt32]];
        break;
      }
      case 40: {
        [self setCurrentLvl:[input readInt32]];
        break;
      }
      case 48: {
        [self setCurrentHealth:[input readInt32]];
        break;
      }
      case 56: {
        [self setNumPieces:[input readInt32]];
        break;
      }
      case 64: {
        [self setIsComplete:[input readBool]];
        break;
      }
      case 72: {
        [self setCombineStartTime:[input readInt64]];
        break;
      }
      case 80: {
        [self setTeamSlotNum:[input readInt32]];
        break;
      }
      case 96: {
        [self setIsRestrictd:[input readBool]];
        break;
      }
      case 104: {
        [self setOffensiveSkillId:[input readInt32]];
        break;
      }
      case 112: {
        [self setDefensiveSkillId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterUuid {
  return result.hasUserMonsterUuid;
}
- (NSString*) userMonsterUuid {
  return result.userMonsterUuid;
}
- (FullUserMonsterProto_Builder*) setUserMonsterUuid:(NSString*) value {
  result.hasUserMonsterUuid = YES;
  result.userMonsterUuid = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearUserMonsterUuid {
  result.hasUserMonsterUuid = NO;
  result.userMonsterUuid = @"";
  return self;
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (FullUserMonsterProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (FullUserMonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasCurrentExp {
  return result.hasCurrentExp;
}
- (int32_t) currentExp {
  return result.currentExp;
}
- (FullUserMonsterProto_Builder*) setCurrentExp:(int32_t) value {
  result.hasCurrentExp = YES;
  result.currentExp = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentExp {
  result.hasCurrentExp = NO;
  result.currentExp = 0;
  return self;
}
- (BOOL) hasCurrentLvl {
  return result.hasCurrentLvl;
}
- (int32_t) currentLvl {
  return result.currentLvl;
}
- (FullUserMonsterProto_Builder*) setCurrentLvl:(int32_t) value {
  result.hasCurrentLvl = YES;
  result.currentLvl = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentLvl {
  result.hasCurrentLvl = NO;
  result.currentLvl = 0;
  return self;
}
- (BOOL) hasCurrentHealth {
  return result.hasCurrentHealth;
}
- (int32_t) currentHealth {
  return result.currentHealth;
}
- (FullUserMonsterProto_Builder*) setCurrentHealth:(int32_t) value {
  result.hasCurrentHealth = YES;
  result.currentHealth = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCurrentHealth {
  result.hasCurrentHealth = NO;
  result.currentHealth = 0;
  return self;
}
- (BOOL) hasNumPieces {
  return result.hasNumPieces;
}
- (int32_t) numPieces {
  return result.numPieces;
}
- (FullUserMonsterProto_Builder*) setNumPieces:(int32_t) value {
  result.hasNumPieces = YES;
  result.numPieces = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearNumPieces {
  result.hasNumPieces = NO;
  result.numPieces = 0;
  return self;
}
- (BOOL) hasIsComplete {
  return result.hasIsComplete;
}
- (BOOL) isComplete {
  return result.isComplete;
}
- (FullUserMonsterProto_Builder*) setIsComplete:(BOOL) value {
  result.hasIsComplete = YES;
  result.isComplete = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearIsComplete {
  result.hasIsComplete = NO;
  result.isComplete = NO;
  return self;
}
- (BOOL) hasCombineStartTime {
  return result.hasCombineStartTime;
}
- (int64_t) combineStartTime {
  return result.combineStartTime;
}
- (FullUserMonsterProto_Builder*) setCombineStartTime:(int64_t) value {
  result.hasCombineStartTime = YES;
  result.combineStartTime = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearCombineStartTime {
  result.hasCombineStartTime = NO;
  result.combineStartTime = 0L;
  return self;
}
- (BOOL) hasTeamSlotNum {
  return result.hasTeamSlotNum;
}
- (int32_t) teamSlotNum {
  return result.teamSlotNum;
}
- (FullUserMonsterProto_Builder*) setTeamSlotNum:(int32_t) value {
  result.hasTeamSlotNum = YES;
  result.teamSlotNum = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearTeamSlotNum {
  result.hasTeamSlotNum = NO;
  result.teamSlotNum = 0;
  return self;
}
- (BOOL) hasIsRestrictd {
  return result.hasIsRestrictd;
}
- (BOOL) isRestrictd {
  return result.isRestrictd;
}
- (FullUserMonsterProto_Builder*) setIsRestrictd:(BOOL) value {
  result.hasIsRestrictd = YES;
  result.isRestrictd = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearIsRestrictd {
  result.hasIsRestrictd = NO;
  result.isRestrictd = NO;
  return self;
}
- (BOOL) hasOffensiveSkillId {
  return result.hasOffensiveSkillId;
}
- (int32_t) offensiveSkillId {
  return result.offensiveSkillId;
}
- (FullUserMonsterProto_Builder*) setOffensiveSkillId:(int32_t) value {
  result.hasOffensiveSkillId = YES;
  result.offensiveSkillId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearOffensiveSkillId {
  result.hasOffensiveSkillId = NO;
  result.offensiveSkillId = 0;
  return self;
}
- (BOOL) hasDefensiveSkillId {
  return result.hasDefensiveSkillId;
}
- (int32_t) defensiveSkillId {
  return result.defensiveSkillId;
}
- (FullUserMonsterProto_Builder*) setDefensiveSkillId:(int32_t) value {
  result.hasDefensiveSkillId = YES;
  result.defensiveSkillId = value;
  return self;
}
- (FullUserMonsterProto_Builder*) clearDefensiveSkillId {
  result.hasDefensiveSkillId = NO;
  result.defensiveSkillId = 0;
  return self;
}
@end

@interface MinimumUserMonsterProto ()
@property int32_t monsterId;
@property int32_t monsterLvl;
@property int32_t offensiveSkillId;
@property int32_t defensiveSkillId;
@property int32_t teamSlotNum;
@end

@implementation MinimumUserMonsterProto

- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasMonsterLvl {
  return !!hasMonsterLvl_;
}
- (void) setHasMonsterLvl:(BOOL) value_ {
  hasMonsterLvl_ = !!value_;
}
@synthesize monsterLvl;
- (BOOL) hasOffensiveSkillId {
  return !!hasOffensiveSkillId_;
}
- (void) setHasOffensiveSkillId:(BOOL) value_ {
  hasOffensiveSkillId_ = !!value_;
}
@synthesize offensiveSkillId;
- (BOOL) hasDefensiveSkillId {
  return !!hasDefensiveSkillId_;
}
- (void) setHasDefensiveSkillId:(BOOL) value_ {
  hasDefensiveSkillId_ = !!value_;
}
@synthesize defensiveSkillId;
- (BOOL) hasTeamSlotNum {
  return !!hasTeamSlotNum_;
}
- (void) setHasTeamSlotNum:(BOOL) value_ {
  hasTeamSlotNum_ = !!value_;
}
@synthesize teamSlotNum;
- (id) init {
  if ((self = [super init])) {
    self.monsterId = 0;
    self.monsterLvl = 0;
    self.offensiveSkillId = 0;
    self.defensiveSkillId = 0;
    self.teamSlotNum = 0;
  }
  return self;
}
static MinimumUserMonsterProto* defaultMinimumUserMonsterProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserMonsterProto class]) {
    defaultMinimumUserMonsterProtoInstance = [[MinimumUserMonsterProto alloc] init];
  }
}
+ (MinimumUserMonsterProto*) defaultInstance {
  return defaultMinimumUserMonsterProtoInstance;
}
- (MinimumUserMonsterProto*) defaultInstance {
  return defaultMinimumUserMonsterProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasMonsterLvl) {
    [output writeInt32:2 value:self.monsterLvl];
  }
  if (self.hasOffensiveSkillId) {
    [output writeInt32:3 value:self.offensiveSkillId];
  }
  if (self.hasDefensiveSkillId) {
    [output writeInt32:4 value:self.defensiveSkillId];
  }
  if (self.hasTeamSlotNum) {
    [output writeInt32:5 value:self.teamSlotNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMonsterId) {
    size_ += computeInt32Size(1, self.monsterId);
  }
  if (self.hasMonsterLvl) {
    size_ += computeInt32Size(2, self.monsterLvl);
  }
  if (self.hasOffensiveSkillId) {
    size_ += computeInt32Size(3, self.offensiveSkillId);
  }
  if (self.hasDefensiveSkillId) {
    size_ += computeInt32Size(4, self.defensiveSkillId);
  }
  if (self.hasTeamSlotNum) {
    size_ += computeInt32Size(5, self.teamSlotNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserMonsterProto*) parseFromData:(NSData*) data {
  return (MinimumUserMonsterProto*)[[[MinimumUserMonsterProto builder] mergeFromData:data] build];
}
+ (MinimumUserMonsterProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterProto*)[[[MinimumUserMonsterProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserMonsterProto*)[[[MinimumUserMonsterProto builder] mergeFromInputStream:input] build];
}
+ (MinimumUserMonsterProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterProto*)[[[MinimumUserMonsterProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserMonsterProto*)[[[MinimumUserMonsterProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserMonsterProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterProto*)[[[MinimumUserMonsterProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterProto_Builder*) builder {
  return [[MinimumUserMonsterProto_Builder alloc] init];
}
+ (MinimumUserMonsterProto_Builder*) builderWithPrototype:(MinimumUserMonsterProto*) prototype {
  return [[MinimumUserMonsterProto builder] mergeFrom:prototype];
}
- (MinimumUserMonsterProto_Builder*) builder {
  return [MinimumUserMonsterProto builder];
}
- (MinimumUserMonsterProto_Builder*) toBuilder {
  return [MinimumUserMonsterProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasMonsterLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterLvl", [NSNumber numberWithInteger:self.monsterLvl]];
  }
  if (self.hasOffensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offensiveSkillId", [NSNumber numberWithInteger:self.offensiveSkillId]];
  }
  if (self.hasDefensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defensiveSkillId", [NSNumber numberWithInteger:self.defensiveSkillId]];
  }
  if (self.hasTeamSlotNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamSlotNum", [NSNumber numberWithInteger:self.teamSlotNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserMonsterProto class]]) {
    return NO;
  }
  MinimumUserMonsterProto *otherMessage = other;
  return
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasMonsterLvl == otherMessage.hasMonsterLvl &&
      (!self.hasMonsterLvl || self.monsterLvl == otherMessage.monsterLvl) &&
      self.hasOffensiveSkillId == otherMessage.hasOffensiveSkillId &&
      (!self.hasOffensiveSkillId || self.offensiveSkillId == otherMessage.offensiveSkillId) &&
      self.hasDefensiveSkillId == otherMessage.hasDefensiveSkillId &&
      (!self.hasDefensiveSkillId || self.defensiveSkillId == otherMessage.defensiveSkillId) &&
      self.hasTeamSlotNum == otherMessage.hasTeamSlotNum &&
      (!self.hasTeamSlotNum || self.teamSlotNum == otherMessage.teamSlotNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasMonsterLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterLvl] hash];
  }
  if (self.hasOffensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offensiveSkillId] hash];
  }
  if (self.hasDefensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defensiveSkillId] hash];
  }
  if (self.hasTeamSlotNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.teamSlotNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserMonsterProto_Builder()
@property (strong) MinimumUserMonsterProto* result;
@end

@implementation MinimumUserMonsterProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserMonsterProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserMonsterProto_Builder*) clear {
  self.result = [[MinimumUserMonsterProto alloc] init];
  return self;
}
- (MinimumUserMonsterProto_Builder*) clone {
  return [MinimumUserMonsterProto builderWithPrototype:result];
}
- (MinimumUserMonsterProto*) defaultInstance {
  return [MinimumUserMonsterProto defaultInstance];
}
- (MinimumUserMonsterProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserMonsterProto*) buildPartial {
  MinimumUserMonsterProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserMonsterProto_Builder*) mergeFrom:(MinimumUserMonsterProto*) other {
  if (other == [MinimumUserMonsterProto defaultInstance]) {
    return self;
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasMonsterLvl) {
    [self setMonsterLvl:other.monsterLvl];
  }
  if (other.hasOffensiveSkillId) {
    [self setOffensiveSkillId:other.offensiveSkillId];
  }
  if (other.hasDefensiveSkillId) {
    [self setDefensiveSkillId:other.defensiveSkillId];
  }
  if (other.hasTeamSlotNum) {
    [self setTeamSlotNum:other.teamSlotNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserMonsterProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 16: {
        [self setMonsterLvl:[input readInt32]];
        break;
      }
      case 24: {
        [self setOffensiveSkillId:[input readInt32]];
        break;
      }
      case 32: {
        [self setDefensiveSkillId:[input readInt32]];
        break;
      }
      case 40: {
        [self setTeamSlotNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (MinimumUserMonsterProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (MinimumUserMonsterProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasMonsterLvl {
  return result.hasMonsterLvl;
}
- (int32_t) monsterLvl {
  return result.monsterLvl;
}
- (MinimumUserMonsterProto_Builder*) setMonsterLvl:(int32_t) value {
  result.hasMonsterLvl = YES;
  result.monsterLvl = value;
  return self;
}
- (MinimumUserMonsterProto_Builder*) clearMonsterLvl {
  result.hasMonsterLvl = NO;
  result.monsterLvl = 0;
  return self;
}
- (BOOL) hasOffensiveSkillId {
  return result.hasOffensiveSkillId;
}
- (int32_t) offensiveSkillId {
  return result.offensiveSkillId;
}
- (MinimumUserMonsterProto_Builder*) setOffensiveSkillId:(int32_t) value {
  result.hasOffensiveSkillId = YES;
  result.offensiveSkillId = value;
  return self;
}
- (MinimumUserMonsterProto_Builder*) clearOffensiveSkillId {
  result.hasOffensiveSkillId = NO;
  result.offensiveSkillId = 0;
  return self;
}
- (BOOL) hasDefensiveSkillId {
  return result.hasDefensiveSkillId;
}
- (int32_t) defensiveSkillId {
  return result.defensiveSkillId;
}
- (MinimumUserMonsterProto_Builder*) setDefensiveSkillId:(int32_t) value {
  result.hasDefensiveSkillId = YES;
  result.defensiveSkillId = value;
  return self;
}
- (MinimumUserMonsterProto_Builder*) clearDefensiveSkillId {
  result.hasDefensiveSkillId = NO;
  result.defensiveSkillId = 0;
  return self;
}
- (BOOL) hasTeamSlotNum {
  return result.hasTeamSlotNum;
}
- (int32_t) teamSlotNum {
  return result.teamSlotNum;
}
- (MinimumUserMonsterProto_Builder*) setTeamSlotNum:(int32_t) value {
  result.hasTeamSlotNum = YES;
  result.teamSlotNum = value;
  return self;
}
- (MinimumUserMonsterProto_Builder*) clearTeamSlotNum {
  result.hasTeamSlotNum = NO;
  result.teamSlotNum = 0;
  return self;
}
@end

@interface UserMonsterHealingProto ()
@property (strong) NSString* userUuid;
@property (strong) NSString* userMonsterUuid;
@property int64_t queuedTimeMillis;
@property (strong) NSString* userHospitalStructUuid;
@property Float32 healthProgress;
@property int32_t priority;
@property Float32 elapsedSeconds;
@end

@implementation UserMonsterHealingProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasUserMonsterUuid {
  return !!hasUserMonsterUuid_;
}
- (void) setHasUserMonsterUuid:(BOOL) value_ {
  hasUserMonsterUuid_ = !!value_;
}
@synthesize userMonsterUuid;
- (BOOL) hasQueuedTimeMillis {
  return !!hasQueuedTimeMillis_;
}
- (void) setHasQueuedTimeMillis:(BOOL) value_ {
  hasQueuedTimeMillis_ = !!value_;
}
@synthesize queuedTimeMillis;
- (BOOL) hasUserHospitalStructUuid {
  return !!hasUserHospitalStructUuid_;
}
- (void) setHasUserHospitalStructUuid:(BOOL) value_ {
  hasUserHospitalStructUuid_ = !!value_;
}
@synthesize userHospitalStructUuid;
- (BOOL) hasHealthProgress {
  return !!hasHealthProgress_;
}
- (void) setHasHealthProgress:(BOOL) value_ {
  hasHealthProgress_ = !!value_;
}
@synthesize healthProgress;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) value_ {
  hasPriority_ = !!value_;
}
@synthesize priority;
- (BOOL) hasElapsedSeconds {
  return !!hasElapsedSeconds_;
}
- (void) setHasElapsedSeconds:(BOOL) value_ {
  hasElapsedSeconds_ = !!value_;
}
@synthesize elapsedSeconds;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.userMonsterUuid = @"";
    self.queuedTimeMillis = 0L;
    self.userHospitalStructUuid = @"";
    self.healthProgress = 0;
    self.priority = 0;
    self.elapsedSeconds = 0;
  }
  return self;
}
static UserMonsterHealingProto* defaultUserMonsterHealingProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterHealingProto class]) {
    defaultUserMonsterHealingProtoInstance = [[UserMonsterHealingProto alloc] init];
  }
}
+ (UserMonsterHealingProto*) defaultInstance {
  return defaultUserMonsterHealingProtoInstance;
}
- (UserMonsterHealingProto*) defaultInstance {
  return defaultUserMonsterHealingProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasUserMonsterUuid) {
    [output writeString:2 value:self.userMonsterUuid];
  }
  if (self.hasQueuedTimeMillis) {
    [output writeInt64:3 value:self.queuedTimeMillis];
  }
  if (self.hasUserHospitalStructUuid) {
    [output writeString:4 value:self.userHospitalStructUuid];
  }
  if (self.hasHealthProgress) {
    [output writeFloat:5 value:self.healthProgress];
  }
  if (self.hasPriority) {
    [output writeInt32:6 value:self.priority];
  }
  if (self.hasElapsedSeconds) {
    [output writeFloat:7 value:self.elapsedSeconds];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasUserMonsterUuid) {
    size_ += computeStringSize(2, self.userMonsterUuid);
  }
  if (self.hasQueuedTimeMillis) {
    size_ += computeInt64Size(3, self.queuedTimeMillis);
  }
  if (self.hasUserHospitalStructUuid) {
    size_ += computeStringSize(4, self.userHospitalStructUuid);
  }
  if (self.hasHealthProgress) {
    size_ += computeFloatSize(5, self.healthProgress);
  }
  if (self.hasPriority) {
    size_ += computeInt32Size(6, self.priority);
  }
  if (self.hasElapsedSeconds) {
    size_ += computeFloatSize(7, self.elapsedSeconds);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMonsterHealingProto*) parseFromData:(NSData*) data {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromData:data] build];
}
+ (UserMonsterHealingProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterHealingProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterHealingProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterHealingProto*)[[[UserMonsterHealingProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterHealingProto_Builder*) builder {
  return [[UserMonsterHealingProto_Builder alloc] init];
}
+ (UserMonsterHealingProto_Builder*) builderWithPrototype:(UserMonsterHealingProto*) prototype {
  return [[UserMonsterHealingProto builder] mergeFrom:prototype];
}
- (UserMonsterHealingProto_Builder*) builder {
  return [UserMonsterHealingProto builder];
}
- (UserMonsterHealingProto_Builder*) toBuilder {
  return [UserMonsterHealingProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuid", self.userMonsterUuid];
  }
  if (self.hasQueuedTimeMillis) {
    [output appendFormat:@"%@%@: %@\n", indent, @"queuedTimeMillis", [NSNumber numberWithLongLong:self.queuedTimeMillis]];
  }
  if (self.hasUserHospitalStructUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userHospitalStructUuid", self.userHospitalStructUuid];
  }
  if (self.hasHealthProgress) {
    [output appendFormat:@"%@%@: %@\n", indent, @"healthProgress", [NSNumber numberWithFloat:self.healthProgress]];
  }
  if (self.hasPriority) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priority", [NSNumber numberWithInteger:self.priority]];
  }
  if (self.hasElapsedSeconds) {
    [output appendFormat:@"%@%@: %@\n", indent, @"elapsedSeconds", [NSNumber numberWithFloat:self.elapsedSeconds]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMonsterHealingProto class]]) {
    return NO;
  }
  UserMonsterHealingProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasUserMonsterUuid == otherMessage.hasUserMonsterUuid &&
      (!self.hasUserMonsterUuid || [self.userMonsterUuid isEqual:otherMessage.userMonsterUuid]) &&
      self.hasQueuedTimeMillis == otherMessage.hasQueuedTimeMillis &&
      (!self.hasQueuedTimeMillis || self.queuedTimeMillis == otherMessage.queuedTimeMillis) &&
      self.hasUserHospitalStructUuid == otherMessage.hasUserHospitalStructUuid &&
      (!self.hasUserHospitalStructUuid || [self.userHospitalStructUuid isEqual:otherMessage.userHospitalStructUuid]) &&
      self.hasHealthProgress == otherMessage.hasHealthProgress &&
      (!self.hasHealthProgress || self.healthProgress == otherMessage.healthProgress) &&
      self.hasPriority == otherMessage.hasPriority &&
      (!self.hasPriority || self.priority == otherMessage.priority) &&
      self.hasElapsedSeconds == otherMessage.hasElapsedSeconds &&
      (!self.hasElapsedSeconds || self.elapsedSeconds == otherMessage.elapsedSeconds) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.userMonsterUuid hash];
  }
  if (self.hasQueuedTimeMillis) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.queuedTimeMillis] hash];
  }
  if (self.hasUserHospitalStructUuid) {
    hashCode = hashCode * 31 + [self.userHospitalStructUuid hash];
  }
  if (self.hasHealthProgress) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.healthProgress] hash];
  }
  if (self.hasPriority) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.priority] hash];
  }
  if (self.hasElapsedSeconds) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.elapsedSeconds] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMonsterHealingProto_Builder()
@property (strong) UserMonsterHealingProto* result;
@end

@implementation UserMonsterHealingProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMonsterHealingProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterHealingProto_Builder*) clear {
  self.result = [[UserMonsterHealingProto alloc] init];
  return self;
}
- (UserMonsterHealingProto_Builder*) clone {
  return [UserMonsterHealingProto builderWithPrototype:result];
}
- (UserMonsterHealingProto*) defaultInstance {
  return [UserMonsterHealingProto defaultInstance];
}
- (UserMonsterHealingProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterHealingProto*) buildPartial {
  UserMonsterHealingProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMonsterHealingProto_Builder*) mergeFrom:(UserMonsterHealingProto*) other {
  if (other == [UserMonsterHealingProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasUserMonsterUuid) {
    [self setUserMonsterUuid:other.userMonsterUuid];
  }
  if (other.hasQueuedTimeMillis) {
    [self setQueuedTimeMillis:other.queuedTimeMillis];
  }
  if (other.hasUserHospitalStructUuid) {
    [self setUserHospitalStructUuid:other.userHospitalStructUuid];
  }
  if (other.hasHealthProgress) {
    [self setHealthProgress:other.healthProgress];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  if (other.hasElapsedSeconds) {
    [self setElapsedSeconds:other.elapsedSeconds];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterHealingProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterHealingProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 18: {
        [self setUserMonsterUuid:[input readString]];
        break;
      }
      case 24: {
        [self setQueuedTimeMillis:[input readInt64]];
        break;
      }
      case 34: {
        [self setUserHospitalStructUuid:[input readString]];
        break;
      }
      case 45: {
        [self setHealthProgress:[input readFloat]];
        break;
      }
      case 48: {
        [self setPriority:[input readInt32]];
        break;
      }
      case 61: {
        [self setElapsedSeconds:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (UserMonsterHealingProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasUserMonsterUuid {
  return result.hasUserMonsterUuid;
}
- (NSString*) userMonsterUuid {
  return result.userMonsterUuid;
}
- (UserMonsterHealingProto_Builder*) setUserMonsterUuid:(NSString*) value {
  result.hasUserMonsterUuid = YES;
  result.userMonsterUuid = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserMonsterUuid {
  result.hasUserMonsterUuid = NO;
  result.userMonsterUuid = @"";
  return self;
}
- (BOOL) hasQueuedTimeMillis {
  return result.hasQueuedTimeMillis;
}
- (int64_t) queuedTimeMillis {
  return result.queuedTimeMillis;
}
- (UserMonsterHealingProto_Builder*) setQueuedTimeMillis:(int64_t) value {
  result.hasQueuedTimeMillis = YES;
  result.queuedTimeMillis = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearQueuedTimeMillis {
  result.hasQueuedTimeMillis = NO;
  result.queuedTimeMillis = 0L;
  return self;
}
- (BOOL) hasUserHospitalStructUuid {
  return result.hasUserHospitalStructUuid;
}
- (NSString*) userHospitalStructUuid {
  return result.userHospitalStructUuid;
}
- (UserMonsterHealingProto_Builder*) setUserHospitalStructUuid:(NSString*) value {
  result.hasUserHospitalStructUuid = YES;
  result.userHospitalStructUuid = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearUserHospitalStructUuid {
  result.hasUserHospitalStructUuid = NO;
  result.userHospitalStructUuid = @"";
  return self;
}
- (BOOL) hasHealthProgress {
  return result.hasHealthProgress;
}
- (Float32) healthProgress {
  return result.healthProgress;
}
- (UserMonsterHealingProto_Builder*) setHealthProgress:(Float32) value {
  result.hasHealthProgress = YES;
  result.healthProgress = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearHealthProgress {
  result.hasHealthProgress = NO;
  result.healthProgress = 0;
  return self;
}
- (BOOL) hasPriority {
  return result.hasPriority;
}
- (int32_t) priority {
  return result.priority;
}
- (UserMonsterHealingProto_Builder*) setPriority:(int32_t) value {
  result.hasPriority = YES;
  result.priority = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearPriority {
  result.hasPriority = NO;
  result.priority = 0;
  return self;
}
- (BOOL) hasElapsedSeconds {
  return result.hasElapsedSeconds;
}
- (Float32) elapsedSeconds {
  return result.elapsedSeconds;
}
- (UserMonsterHealingProto_Builder*) setElapsedSeconds:(Float32) value {
  result.hasElapsedSeconds = YES;
  result.elapsedSeconds = value;
  return self;
}
- (UserMonsterHealingProto_Builder*) clearElapsedSeconds {
  result.hasElapsedSeconds = NO;
  result.elapsedSeconds = 0;
  return self;
}
@end

@interface UserMonsterCurrentHealthProto ()
@property (strong) NSString* userMonsterUuid;
@property int32_t currentHealth;
@end

@implementation UserMonsterCurrentHealthProto

- (BOOL) hasUserMonsterUuid {
  return !!hasUserMonsterUuid_;
}
- (void) setHasUserMonsterUuid:(BOOL) value_ {
  hasUserMonsterUuid_ = !!value_;
}
@synthesize userMonsterUuid;
- (BOOL) hasCurrentHealth {
  return !!hasCurrentHealth_;
}
- (void) setHasCurrentHealth:(BOOL) value_ {
  hasCurrentHealth_ = !!value_;
}
@synthesize currentHealth;
- (id) init {
  if ((self = [super init])) {
    self.userMonsterUuid = @"";
    self.currentHealth = 0;
  }
  return self;
}
static UserMonsterCurrentHealthProto* defaultUserMonsterCurrentHealthProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterCurrentHealthProto class]) {
    defaultUserMonsterCurrentHealthProtoInstance = [[UserMonsterCurrentHealthProto alloc] init];
  }
}
+ (UserMonsterCurrentHealthProto*) defaultInstance {
  return defaultUserMonsterCurrentHealthProtoInstance;
}
- (UserMonsterCurrentHealthProto*) defaultInstance {
  return defaultUserMonsterCurrentHealthProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterUuid) {
    [output writeString:1 value:self.userMonsterUuid];
  }
  if (self.hasCurrentHealth) {
    [output writeInt32:2 value:self.currentHealth];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMonsterUuid) {
    size_ += computeStringSize(1, self.userMonsterUuid);
  }
  if (self.hasCurrentHealth) {
    size_ += computeInt32Size(2, self.currentHealth);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMonsterCurrentHealthProto*) parseFromData:(NSData*) data {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromData:data] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterCurrentHealthProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentHealthProto*)[[[UserMonsterCurrentHealthProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentHealthProto_Builder*) builder {
  return [[UserMonsterCurrentHealthProto_Builder alloc] init];
}
+ (UserMonsterCurrentHealthProto_Builder*) builderWithPrototype:(UserMonsterCurrentHealthProto*) prototype {
  return [[UserMonsterCurrentHealthProto builder] mergeFrom:prototype];
}
- (UserMonsterCurrentHealthProto_Builder*) builder {
  return [UserMonsterCurrentHealthProto builder];
}
- (UserMonsterCurrentHealthProto_Builder*) toBuilder {
  return [UserMonsterCurrentHealthProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuid", self.userMonsterUuid];
  }
  if (self.hasCurrentHealth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentHealth", [NSNumber numberWithInteger:self.currentHealth]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMonsterCurrentHealthProto class]]) {
    return NO;
  }
  UserMonsterCurrentHealthProto *otherMessage = other;
  return
      self.hasUserMonsterUuid == otherMessage.hasUserMonsterUuid &&
      (!self.hasUserMonsterUuid || [self.userMonsterUuid isEqual:otherMessage.userMonsterUuid]) &&
      self.hasCurrentHealth == otherMessage.hasCurrentHealth &&
      (!self.hasCurrentHealth || self.currentHealth == otherMessage.currentHealth) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.userMonsterUuid hash];
  }
  if (self.hasCurrentHealth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentHealth] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMonsterCurrentHealthProto_Builder()
@property (strong) UserMonsterCurrentHealthProto* result;
@end

@implementation UserMonsterCurrentHealthProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMonsterCurrentHealthProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterCurrentHealthProto_Builder*) clear {
  self.result = [[UserMonsterCurrentHealthProto alloc] init];
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) clone {
  return [UserMonsterCurrentHealthProto builderWithPrototype:result];
}
- (UserMonsterCurrentHealthProto*) defaultInstance {
  return [UserMonsterCurrentHealthProto defaultInstance];
}
- (UserMonsterCurrentHealthProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterCurrentHealthProto*) buildPartial {
  UserMonsterCurrentHealthProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMonsterCurrentHealthProto_Builder*) mergeFrom:(UserMonsterCurrentHealthProto*) other {
  if (other == [UserMonsterCurrentHealthProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterUuid) {
    [self setUserMonsterUuid:other.userMonsterUuid];
  }
  if (other.hasCurrentHealth) {
    [self setCurrentHealth:other.currentHealth];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterCurrentHealthProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMonsterUuid:[input readString]];
        break;
      }
      case 16: {
        [self setCurrentHealth:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterUuid {
  return result.hasUserMonsterUuid;
}
- (NSString*) userMonsterUuid {
  return result.userMonsterUuid;
}
- (UserMonsterCurrentHealthProto_Builder*) setUserMonsterUuid:(NSString*) value {
  result.hasUserMonsterUuid = YES;
  result.userMonsterUuid = value;
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) clearUserMonsterUuid {
  result.hasUserMonsterUuid = NO;
  result.userMonsterUuid = @"";
  return self;
}
- (BOOL) hasCurrentHealth {
  return result.hasCurrentHealth;
}
- (int32_t) currentHealth {
  return result.currentHealth;
}
- (UserMonsterCurrentHealthProto_Builder*) setCurrentHealth:(int32_t) value {
  result.hasCurrentHealth = YES;
  result.currentHealth = value;
  return self;
}
- (UserMonsterCurrentHealthProto_Builder*) clearCurrentHealth {
  result.hasCurrentHealth = NO;
  result.currentHealth = 0;
  return self;
}
@end

@interface UserEnhancementProto ()
@property (strong) NSString* userUuid;
@property (strong) UserEnhancementItemProto* baseMonster;
@property (strong) NSMutableArray * mutableFeedersList;
@end

@implementation UserEnhancementProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
- (BOOL) hasBaseMonster {
  return !!hasBaseMonster_;
}
- (void) setHasBaseMonster:(BOOL) value_ {
  hasBaseMonster_ = !!value_;
}
@synthesize baseMonster;
@synthesize mutableFeedersList;
@dynamic feedersList;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
    self.baseMonster = [UserEnhancementItemProto defaultInstance];
  }
  return self;
}
static UserEnhancementProto* defaultUserEnhancementProtoInstance = nil;
+ (void) initialize {
  if (self == [UserEnhancementProto class]) {
    defaultUserEnhancementProtoInstance = [[UserEnhancementProto alloc] init];
  }
}
+ (UserEnhancementProto*) defaultInstance {
  return defaultUserEnhancementProtoInstance;
}
- (UserEnhancementProto*) defaultInstance {
  return defaultUserEnhancementProtoInstance;
}
- (NSArray *)feedersList {
  return mutableFeedersList;
}
- (UserEnhancementItemProto*)feedersAtIndex:(NSUInteger)index {
  return [mutableFeedersList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  if (self.hasBaseMonster) {
    [output writeMessage:2 value:self.baseMonster];
  }
  [self.feedersList enumerateObjectsUsingBlock:^(UserEnhancementItemProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  if (self.hasBaseMonster) {
    size_ += computeMessageSize(2, self.baseMonster);
  }
  [self.feedersList enumerateObjectsUsingBlock:^(UserEnhancementItemProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserEnhancementProto*) parseFromData:(NSData*) data {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromData:data] build];
}
+ (UserEnhancementProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromInputStream:input] build];
}
+ (UserEnhancementProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserEnhancementProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementProto*)[[[UserEnhancementProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementProto_Builder*) builder {
  return [[UserEnhancementProto_Builder alloc] init];
}
+ (UserEnhancementProto_Builder*) builderWithPrototype:(UserEnhancementProto*) prototype {
  return [[UserEnhancementProto builder] mergeFrom:prototype];
}
- (UserEnhancementProto_Builder*) builder {
  return [UserEnhancementProto builder];
}
- (UserEnhancementProto_Builder*) toBuilder {
  return [UserEnhancementProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  if (self.hasBaseMonster) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseMonster"];
    [self.baseMonster writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.feedersList enumerateObjectsUsingBlock:^(UserEnhancementItemProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"feeders"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserEnhancementProto class]]) {
    return NO;
  }
  UserEnhancementProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      self.hasBaseMonster == otherMessage.hasBaseMonster &&
      (!self.hasBaseMonster || [self.baseMonster isEqual:otherMessage.baseMonster]) &&
      [self.feedersList isEqualToArray:otherMessage.feedersList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  if (self.hasBaseMonster) {
    hashCode = hashCode * 31 + [self.baseMonster hash];
  }
  [self.feedersList enumerateObjectsUsingBlock:^(UserEnhancementItemProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserEnhancementProto_Builder()
@property (strong) UserEnhancementProto* result;
@end

@implementation UserEnhancementProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserEnhancementProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserEnhancementProto_Builder*) clear {
  self.result = [[UserEnhancementProto alloc] init];
  return self;
}
- (UserEnhancementProto_Builder*) clone {
  return [UserEnhancementProto builderWithPrototype:result];
}
- (UserEnhancementProto*) defaultInstance {
  return [UserEnhancementProto defaultInstance];
}
- (UserEnhancementProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserEnhancementProto*) buildPartial {
  UserEnhancementProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserEnhancementProto_Builder*) mergeFrom:(UserEnhancementProto*) other {
  if (other == [UserEnhancementProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.hasBaseMonster) {
    [self mergeBaseMonster:other.baseMonster];
  }
  if (other.mutableFeedersList.count > 0) {
    if (result.mutableFeedersList == nil) {
      result.mutableFeedersList = [[NSMutableArray alloc] initWithArray:other.mutableFeedersList];
    } else {
      [result.mutableFeedersList addObjectsFromArray:other.mutableFeedersList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserEnhancementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserEnhancementProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 18: {
        UserEnhancementItemProto_Builder* subBuilder = [UserEnhancementItemProto builder];
        if (self.hasBaseMonster) {
          [subBuilder mergeFrom:self.baseMonster];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBaseMonster:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        UserEnhancementItemProto_Builder* subBuilder = [UserEnhancementItemProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addFeeders:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (UserEnhancementProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (UserEnhancementProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (BOOL) hasBaseMonster {
  return result.hasBaseMonster;
}
- (UserEnhancementItemProto*) baseMonster {
  return result.baseMonster;
}
- (UserEnhancementProto_Builder*) setBaseMonster:(UserEnhancementItemProto*) value {
  result.hasBaseMonster = YES;
  result.baseMonster = value;
  return self;
}
- (UserEnhancementProto_Builder*) setBaseMonster_Builder:(UserEnhancementItemProto_Builder*) builderForValue {
  return [self setBaseMonster:[builderForValue build]];
}
- (UserEnhancementProto_Builder*) mergeBaseMonster:(UserEnhancementItemProto*) value {
  if (result.hasBaseMonster &&
      result.baseMonster != [UserEnhancementItemProto defaultInstance]) {
    result.baseMonster =
      [[[UserEnhancementItemProto builderWithPrototype:result.baseMonster] mergeFrom:value] buildPartial];
  } else {
    result.baseMonster = value;
  }
  result.hasBaseMonster = YES;
  return self;
}
- (UserEnhancementProto_Builder*) clearBaseMonster {
  result.hasBaseMonster = NO;
  result.baseMonster = [UserEnhancementItemProto defaultInstance];
  return self;
}
- (NSMutableArray *)feedersList {
  return result.mutableFeedersList;
}
- (UserEnhancementItemProto*)feedersAtIndex:(NSUInteger)index {
  return [result feedersAtIndex:index];
}
- (UserEnhancementProto_Builder *)addFeeders:(UserEnhancementItemProto*)value {
  if (result.mutableFeedersList == nil) {
    result.mutableFeedersList = [[NSMutableArray alloc]init];
  }
  [result.mutableFeedersList addObject:value];
  return self;
}
- (UserEnhancementProto_Builder *)addAllFeeders:(NSArray *)array {
  if (result.mutableFeedersList == nil) {
    result.mutableFeedersList = [NSMutableArray array];
  }
  [result.mutableFeedersList addObjectsFromArray:array];
  return self;
}
- (UserEnhancementProto_Builder *)clearFeeders {
  result.mutableFeedersList = nil;
  return self;
}
@end

@interface UserEnhancementItemProto ()
@property (strong) NSString* userMonsterUuid;
@property int64_t expectedStartTimeMillis;
@property int32_t enhancingCost;
@property BOOL enhancingComplete;
@end

@implementation UserEnhancementItemProto

- (BOOL) hasUserMonsterUuid {
  return !!hasUserMonsterUuid_;
}
- (void) setHasUserMonsterUuid:(BOOL) value_ {
  hasUserMonsterUuid_ = !!value_;
}
@synthesize userMonsterUuid;
- (BOOL) hasExpectedStartTimeMillis {
  return !!hasExpectedStartTimeMillis_;
}
- (void) setHasExpectedStartTimeMillis:(BOOL) value_ {
  hasExpectedStartTimeMillis_ = !!value_;
}
@synthesize expectedStartTimeMillis;
- (BOOL) hasEnhancingCost {
  return !!hasEnhancingCost_;
}
- (void) setHasEnhancingCost:(BOOL) value_ {
  hasEnhancingCost_ = !!value_;
}
@synthesize enhancingCost;
- (BOOL) hasEnhancingComplete {
  return !!hasEnhancingComplete_;
}
- (void) setHasEnhancingComplete:(BOOL) value_ {
  hasEnhancingComplete_ = !!value_;
}
- (BOOL) enhancingComplete {
  return !!enhancingComplete_;
}
- (void) setEnhancingComplete:(BOOL) value_ {
  enhancingComplete_ = !!value_;
}
- (id) init {
  if ((self = [super init])) {
    self.userMonsterUuid = @"";
    self.expectedStartTimeMillis = 0L;
    self.enhancingCost = 0;
    self.enhancingComplete = NO;
  }
  return self;
}
static UserEnhancementItemProto* defaultUserEnhancementItemProtoInstance = nil;
+ (void) initialize {
  if (self == [UserEnhancementItemProto class]) {
    defaultUserEnhancementItemProtoInstance = [[UserEnhancementItemProto alloc] init];
  }
}
+ (UserEnhancementItemProto*) defaultInstance {
  return defaultUserEnhancementItemProtoInstance;
}
- (UserEnhancementItemProto*) defaultInstance {
  return defaultUserEnhancementItemProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterUuid) {
    [output writeString:1 value:self.userMonsterUuid];
  }
  if (self.hasExpectedStartTimeMillis) {
    [output writeInt64:2 value:self.expectedStartTimeMillis];
  }
  if (self.hasEnhancingCost) {
    [output writeInt32:3 value:self.enhancingCost];
  }
  if (self.hasEnhancingComplete) {
    [output writeBool:4 value:self.enhancingComplete];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMonsterUuid) {
    size_ += computeStringSize(1, self.userMonsterUuid);
  }
  if (self.hasExpectedStartTimeMillis) {
    size_ += computeInt64Size(2, self.expectedStartTimeMillis);
  }
  if (self.hasEnhancingCost) {
    size_ += computeInt32Size(3, self.enhancingCost);
  }
  if (self.hasEnhancingComplete) {
    size_ += computeBoolSize(4, self.enhancingComplete);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserEnhancementItemProto*) parseFromData:(NSData*) data {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromData:data] build];
}
+ (UserEnhancementItemProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementItemProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromInputStream:input] build];
}
+ (UserEnhancementItemProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementItemProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserEnhancementItemProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserEnhancementItemProto*)[[[UserEnhancementItemProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserEnhancementItemProto_Builder*) builder {
  return [[UserEnhancementItemProto_Builder alloc] init];
}
+ (UserEnhancementItemProto_Builder*) builderWithPrototype:(UserEnhancementItemProto*) prototype {
  return [[UserEnhancementItemProto builder] mergeFrom:prototype];
}
- (UserEnhancementItemProto_Builder*) builder {
  return [UserEnhancementItemProto builder];
}
- (UserEnhancementItemProto_Builder*) toBuilder {
  return [UserEnhancementItemProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuid", self.userMonsterUuid];
  }
  if (self.hasExpectedStartTimeMillis) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expectedStartTimeMillis", [NSNumber numberWithLongLong:self.expectedStartTimeMillis]];
  }
  if (self.hasEnhancingCost) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enhancingCost", [NSNumber numberWithInteger:self.enhancingCost]];
  }
  if (self.hasEnhancingComplete) {
    [output appendFormat:@"%@%@: %@\n", indent, @"enhancingComplete", [NSNumber numberWithBool:self.enhancingComplete]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserEnhancementItemProto class]]) {
    return NO;
  }
  UserEnhancementItemProto *otherMessage = other;
  return
      self.hasUserMonsterUuid == otherMessage.hasUserMonsterUuid &&
      (!self.hasUserMonsterUuid || [self.userMonsterUuid isEqual:otherMessage.userMonsterUuid]) &&
      self.hasExpectedStartTimeMillis == otherMessage.hasExpectedStartTimeMillis &&
      (!self.hasExpectedStartTimeMillis || self.expectedStartTimeMillis == otherMessage.expectedStartTimeMillis) &&
      self.hasEnhancingCost == otherMessage.hasEnhancingCost &&
      (!self.hasEnhancingCost || self.enhancingCost == otherMessage.enhancingCost) &&
      self.hasEnhancingComplete == otherMessage.hasEnhancingComplete &&
      (!self.hasEnhancingComplete || self.enhancingComplete == otherMessage.enhancingComplete) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.userMonsterUuid hash];
  }
  if (self.hasExpectedStartTimeMillis) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.expectedStartTimeMillis] hash];
  }
  if (self.hasEnhancingCost) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.enhancingCost] hash];
  }
  if (self.hasEnhancingComplete) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.enhancingComplete] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserEnhancementItemProto_Builder()
@property (strong) UserEnhancementItemProto* result;
@end

@implementation UserEnhancementItemProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserEnhancementItemProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserEnhancementItemProto_Builder*) clear {
  self.result = [[UserEnhancementItemProto alloc] init];
  return self;
}
- (UserEnhancementItemProto_Builder*) clone {
  return [UserEnhancementItemProto builderWithPrototype:result];
}
- (UserEnhancementItemProto*) defaultInstance {
  return [UserEnhancementItemProto defaultInstance];
}
- (UserEnhancementItemProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserEnhancementItemProto*) buildPartial {
  UserEnhancementItemProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserEnhancementItemProto_Builder*) mergeFrom:(UserEnhancementItemProto*) other {
  if (other == [UserEnhancementItemProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterUuid) {
    [self setUserMonsterUuid:other.userMonsterUuid];
  }
  if (other.hasExpectedStartTimeMillis) {
    [self setExpectedStartTimeMillis:other.expectedStartTimeMillis];
  }
  if (other.hasEnhancingCost) {
    [self setEnhancingCost:other.enhancingCost];
  }
  if (other.hasEnhancingComplete) {
    [self setEnhancingComplete:other.enhancingComplete];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserEnhancementItemProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserEnhancementItemProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMonsterUuid:[input readString]];
        break;
      }
      case 16: {
        [self setExpectedStartTimeMillis:[input readInt64]];
        break;
      }
      case 24: {
        [self setEnhancingCost:[input readInt32]];
        break;
      }
      case 32: {
        [self setEnhancingComplete:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterUuid {
  return result.hasUserMonsterUuid;
}
- (NSString*) userMonsterUuid {
  return result.userMonsterUuid;
}
- (UserEnhancementItemProto_Builder*) setUserMonsterUuid:(NSString*) value {
  result.hasUserMonsterUuid = YES;
  result.userMonsterUuid = value;
  return self;
}
- (UserEnhancementItemProto_Builder*) clearUserMonsterUuid {
  result.hasUserMonsterUuid = NO;
  result.userMonsterUuid = @"";
  return self;
}
- (BOOL) hasExpectedStartTimeMillis {
  return result.hasExpectedStartTimeMillis;
}
- (int64_t) expectedStartTimeMillis {
  return result.expectedStartTimeMillis;
}
- (UserEnhancementItemProto_Builder*) setExpectedStartTimeMillis:(int64_t) value {
  result.hasExpectedStartTimeMillis = YES;
  result.expectedStartTimeMillis = value;
  return self;
}
- (UserEnhancementItemProto_Builder*) clearExpectedStartTimeMillis {
  result.hasExpectedStartTimeMillis = NO;
  result.expectedStartTimeMillis = 0L;
  return self;
}
- (BOOL) hasEnhancingCost {
  return result.hasEnhancingCost;
}
- (int32_t) enhancingCost {
  return result.enhancingCost;
}
- (UserEnhancementItemProto_Builder*) setEnhancingCost:(int32_t) value {
  result.hasEnhancingCost = YES;
  result.enhancingCost = value;
  return self;
}
- (UserEnhancementItemProto_Builder*) clearEnhancingCost {
  result.hasEnhancingCost = NO;
  result.enhancingCost = 0;
  return self;
}
- (BOOL) hasEnhancingComplete {
  return result.hasEnhancingComplete;
}
- (BOOL) enhancingComplete {
  return result.enhancingComplete;
}
- (UserEnhancementItemProto_Builder*) setEnhancingComplete:(BOOL) value {
  result.hasEnhancingComplete = YES;
  result.enhancingComplete = value;
  return self;
}
- (UserEnhancementItemProto_Builder*) clearEnhancingComplete {
  result.hasEnhancingComplete = NO;
  result.enhancingComplete = NO;
  return self;
}
@end

@interface UserMonsterCurrentExpProto ()
@property (strong) NSString* userMonsterUuid;
@property int32_t expectedExperience;
@property int32_t expectedLevel;
@property int32_t expectedHp;
@end

@implementation UserMonsterCurrentExpProto

- (BOOL) hasUserMonsterUuid {
  return !!hasUserMonsterUuid_;
}
- (void) setHasUserMonsterUuid:(BOOL) value_ {
  hasUserMonsterUuid_ = !!value_;
}
@synthesize userMonsterUuid;
- (BOOL) hasExpectedExperience {
  return !!hasExpectedExperience_;
}
- (void) setHasExpectedExperience:(BOOL) value_ {
  hasExpectedExperience_ = !!value_;
}
@synthesize expectedExperience;
- (BOOL) hasExpectedLevel {
  return !!hasExpectedLevel_;
}
- (void) setHasExpectedLevel:(BOOL) value_ {
  hasExpectedLevel_ = !!value_;
}
@synthesize expectedLevel;
- (BOOL) hasExpectedHp {
  return !!hasExpectedHp_;
}
- (void) setHasExpectedHp:(BOOL) value_ {
  hasExpectedHp_ = !!value_;
}
@synthesize expectedHp;
- (id) init {
  if ((self = [super init])) {
    self.userMonsterUuid = @"";
    self.expectedExperience = 0;
    self.expectedLevel = 0;
    self.expectedHp = 0;
  }
  return self;
}
static UserMonsterCurrentExpProto* defaultUserMonsterCurrentExpProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterCurrentExpProto class]) {
    defaultUserMonsterCurrentExpProtoInstance = [[UserMonsterCurrentExpProto alloc] init];
  }
}
+ (UserMonsterCurrentExpProto*) defaultInstance {
  return defaultUserMonsterCurrentExpProtoInstance;
}
- (UserMonsterCurrentExpProto*) defaultInstance {
  return defaultUserMonsterCurrentExpProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterUuid) {
    [output writeString:1 value:self.userMonsterUuid];
  }
  if (self.hasExpectedExperience) {
    [output writeInt32:2 value:self.expectedExperience];
  }
  if (self.hasExpectedLevel) {
    [output writeInt32:3 value:self.expectedLevel];
  }
  if (self.hasExpectedHp) {
    [output writeInt32:4 value:self.expectedHp];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMonsterUuid) {
    size_ += computeStringSize(1, self.userMonsterUuid);
  }
  if (self.hasExpectedExperience) {
    size_ += computeInt32Size(2, self.expectedExperience);
  }
  if (self.hasExpectedLevel) {
    size_ += computeInt32Size(3, self.expectedLevel);
  }
  if (self.hasExpectedHp) {
    size_ += computeInt32Size(4, self.expectedHp);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMonsterCurrentExpProto*) parseFromData:(NSData*) data {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromData:data] build];
}
+ (UserMonsterCurrentExpProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentExpProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterCurrentExpProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentExpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterCurrentExpProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterCurrentExpProto*)[[[UserMonsterCurrentExpProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterCurrentExpProto_Builder*) builder {
  return [[UserMonsterCurrentExpProto_Builder alloc] init];
}
+ (UserMonsterCurrentExpProto_Builder*) builderWithPrototype:(UserMonsterCurrentExpProto*) prototype {
  return [[UserMonsterCurrentExpProto builder] mergeFrom:prototype];
}
- (UserMonsterCurrentExpProto_Builder*) builder {
  return [UserMonsterCurrentExpProto builder];
}
- (UserMonsterCurrentExpProto_Builder*) toBuilder {
  return [UserMonsterCurrentExpProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuid", self.userMonsterUuid];
  }
  if (self.hasExpectedExperience) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expectedExperience", [NSNumber numberWithInteger:self.expectedExperience]];
  }
  if (self.hasExpectedLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expectedLevel", [NSNumber numberWithInteger:self.expectedLevel]];
  }
  if (self.hasExpectedHp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"expectedHp", [NSNumber numberWithInteger:self.expectedHp]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMonsterCurrentExpProto class]]) {
    return NO;
  }
  UserMonsterCurrentExpProto *otherMessage = other;
  return
      self.hasUserMonsterUuid == otherMessage.hasUserMonsterUuid &&
      (!self.hasUserMonsterUuid || [self.userMonsterUuid isEqual:otherMessage.userMonsterUuid]) &&
      self.hasExpectedExperience == otherMessage.hasExpectedExperience &&
      (!self.hasExpectedExperience || self.expectedExperience == otherMessage.expectedExperience) &&
      self.hasExpectedLevel == otherMessage.hasExpectedLevel &&
      (!self.hasExpectedLevel || self.expectedLevel == otherMessage.expectedLevel) &&
      self.hasExpectedHp == otherMessage.hasExpectedHp &&
      (!self.hasExpectedHp || self.expectedHp == otherMessage.expectedHp) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.userMonsterUuid hash];
  }
  if (self.hasExpectedExperience) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expectedExperience] hash];
  }
  if (self.hasExpectedLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expectedLevel] hash];
  }
  if (self.hasExpectedHp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.expectedHp] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMonsterCurrentExpProto_Builder()
@property (strong) UserMonsterCurrentExpProto* result;
@end

@implementation UserMonsterCurrentExpProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMonsterCurrentExpProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterCurrentExpProto_Builder*) clear {
  self.result = [[UserMonsterCurrentExpProto alloc] init];
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clone {
  return [UserMonsterCurrentExpProto builderWithPrototype:result];
}
- (UserMonsterCurrentExpProto*) defaultInstance {
  return [UserMonsterCurrentExpProto defaultInstance];
}
- (UserMonsterCurrentExpProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterCurrentExpProto*) buildPartial {
  UserMonsterCurrentExpProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMonsterCurrentExpProto_Builder*) mergeFrom:(UserMonsterCurrentExpProto*) other {
  if (other == [UserMonsterCurrentExpProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterUuid) {
    [self setUserMonsterUuid:other.userMonsterUuid];
  }
  if (other.hasExpectedExperience) {
    [self setExpectedExperience:other.expectedExperience];
  }
  if (other.hasExpectedLevel) {
    [self setExpectedLevel:other.expectedLevel];
  }
  if (other.hasExpectedHp) {
    [self setExpectedHp:other.expectedHp];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterCurrentExpProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMonsterUuid:[input readString]];
        break;
      }
      case 16: {
        [self setExpectedExperience:[input readInt32]];
        break;
      }
      case 24: {
        [self setExpectedLevel:[input readInt32]];
        break;
      }
      case 32: {
        [self setExpectedHp:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterUuid {
  return result.hasUserMonsterUuid;
}
- (NSString*) userMonsterUuid {
  return result.userMonsterUuid;
}
- (UserMonsterCurrentExpProto_Builder*) setUserMonsterUuid:(NSString*) value {
  result.hasUserMonsterUuid = YES;
  result.userMonsterUuid = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearUserMonsterUuid {
  result.hasUserMonsterUuid = NO;
  result.userMonsterUuid = @"";
  return self;
}
- (BOOL) hasExpectedExperience {
  return result.hasExpectedExperience;
}
- (int32_t) expectedExperience {
  return result.expectedExperience;
}
- (UserMonsterCurrentExpProto_Builder*) setExpectedExperience:(int32_t) value {
  result.hasExpectedExperience = YES;
  result.expectedExperience = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearExpectedExperience {
  result.hasExpectedExperience = NO;
  result.expectedExperience = 0;
  return self;
}
- (BOOL) hasExpectedLevel {
  return result.hasExpectedLevel;
}
- (int32_t) expectedLevel {
  return result.expectedLevel;
}
- (UserMonsterCurrentExpProto_Builder*) setExpectedLevel:(int32_t) value {
  result.hasExpectedLevel = YES;
  result.expectedLevel = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearExpectedLevel {
  result.hasExpectedLevel = NO;
  result.expectedLevel = 0;
  return self;
}
- (BOOL) hasExpectedHp {
  return result.hasExpectedHp;
}
- (int32_t) expectedHp {
  return result.expectedHp;
}
- (UserMonsterCurrentExpProto_Builder*) setExpectedHp:(int32_t) value {
  result.hasExpectedHp = YES;
  result.expectedHp = value;
  return self;
}
- (UserMonsterCurrentExpProto_Builder*) clearExpectedHp {
  result.hasExpectedHp = NO;
  result.expectedHp = 0;
  return self;
}
@end

@interface MinimumUserMonsterSellProto ()
@property (strong) NSString* userMonsterUuid;
@property int32_t cashAmount;
@end

@implementation MinimumUserMonsterSellProto

- (BOOL) hasUserMonsterUuid {
  return !!hasUserMonsterUuid_;
}
- (void) setHasUserMonsterUuid:(BOOL) value_ {
  hasUserMonsterUuid_ = !!value_;
}
@synthesize userMonsterUuid;
- (BOOL) hasCashAmount {
  return !!hasCashAmount_;
}
- (void) setHasCashAmount:(BOOL) value_ {
  hasCashAmount_ = !!value_;
}
@synthesize cashAmount;
- (id) init {
  if ((self = [super init])) {
    self.userMonsterUuid = @"";
    self.cashAmount = 0;
  }
  return self;
}
static MinimumUserMonsterSellProto* defaultMinimumUserMonsterSellProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumUserMonsterSellProto class]) {
    defaultMinimumUserMonsterSellProtoInstance = [[MinimumUserMonsterSellProto alloc] init];
  }
}
+ (MinimumUserMonsterSellProto*) defaultInstance {
  return defaultMinimumUserMonsterSellProtoInstance;
}
- (MinimumUserMonsterSellProto*) defaultInstance {
  return defaultMinimumUserMonsterSellProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserMonsterUuid) {
    [output writeString:1 value:self.userMonsterUuid];
  }
  if (self.hasCashAmount) {
    [output writeInt32:2 value:self.cashAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserMonsterUuid) {
    size_ += computeStringSize(1, self.userMonsterUuid);
  }
  if (self.hasCashAmount) {
    size_ += computeInt32Size(2, self.cashAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumUserMonsterSellProto*) parseFromData:(NSData*) data {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromData:data] build];
}
+ (MinimumUserMonsterSellProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterSellProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromInputStream:input] build];
}
+ (MinimumUserMonsterSellProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterSellProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumUserMonsterSellProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumUserMonsterSellProto*)[[[MinimumUserMonsterSellProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumUserMonsterSellProto_Builder*) builder {
  return [[MinimumUserMonsterSellProto_Builder alloc] init];
}
+ (MinimumUserMonsterSellProto_Builder*) builderWithPrototype:(MinimumUserMonsterSellProto*) prototype {
  return [[MinimumUserMonsterSellProto builder] mergeFrom:prototype];
}
- (MinimumUserMonsterSellProto_Builder*) builder {
  return [MinimumUserMonsterSellProto builder];
}
- (MinimumUserMonsterSellProto_Builder*) toBuilder {
  return [MinimumUserMonsterSellProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuid", self.userMonsterUuid];
  }
  if (self.hasCashAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cashAmount", [NSNumber numberWithInteger:self.cashAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumUserMonsterSellProto class]]) {
    return NO;
  }
  MinimumUserMonsterSellProto *otherMessage = other;
  return
      self.hasUserMonsterUuid == otherMessage.hasUserMonsterUuid &&
      (!self.hasUserMonsterUuid || [self.userMonsterUuid isEqual:otherMessage.userMonsterUuid]) &&
      self.hasCashAmount == otherMessage.hasCashAmount &&
      (!self.hasCashAmount || self.cashAmount == otherMessage.cashAmount) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.userMonsterUuid hash];
  }
  if (self.hasCashAmount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cashAmount] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumUserMonsterSellProto_Builder()
@property (strong) MinimumUserMonsterSellProto* result;
@end

@implementation MinimumUserMonsterSellProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumUserMonsterSellProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumUserMonsterSellProto_Builder*) clear {
  self.result = [[MinimumUserMonsterSellProto alloc] init];
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) clone {
  return [MinimumUserMonsterSellProto builderWithPrototype:result];
}
- (MinimumUserMonsterSellProto*) defaultInstance {
  return [MinimumUserMonsterSellProto defaultInstance];
}
- (MinimumUserMonsterSellProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumUserMonsterSellProto*) buildPartial {
  MinimumUserMonsterSellProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumUserMonsterSellProto_Builder*) mergeFrom:(MinimumUserMonsterSellProto*) other {
  if (other == [MinimumUserMonsterSellProto defaultInstance]) {
    return self;
  }
  if (other.hasUserMonsterUuid) {
    [self setUserMonsterUuid:other.userMonsterUuid];
  }
  if (other.hasCashAmount) {
    [self setCashAmount:other.cashAmount];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumUserMonsterSellProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserMonsterUuid:[input readString]];
        break;
      }
      case 16: {
        [self setCashAmount:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasUserMonsterUuid {
  return result.hasUserMonsterUuid;
}
- (NSString*) userMonsterUuid {
  return result.userMonsterUuid;
}
- (MinimumUserMonsterSellProto_Builder*) setUserMonsterUuid:(NSString*) value {
  result.hasUserMonsterUuid = YES;
  result.userMonsterUuid = value;
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) clearUserMonsterUuid {
  result.hasUserMonsterUuid = NO;
  result.userMonsterUuid = @"";
  return self;
}
- (BOOL) hasCashAmount {
  return result.hasCashAmount;
}
- (int32_t) cashAmount {
  return result.cashAmount;
}
- (MinimumUserMonsterSellProto_Builder*) setCashAmount:(int32_t) value {
  result.hasCashAmount = YES;
  result.cashAmount = value;
  return self;
}
- (MinimumUserMonsterSellProto_Builder*) clearCashAmount {
  result.hasCashAmount = NO;
  result.cashAmount = 0;
  return self;
}
@end

@interface UserCurrentMonsterTeamProto ()
@property (strong) NSString* userUuid;
@property (strong) NSMutableArray * mutableCurrentTeamList;
@end

@implementation UserCurrentMonsterTeamProto

- (BOOL) hasUserUuid {
  return !!hasUserUuid_;
}
- (void) setHasUserUuid:(BOOL) value_ {
  hasUserUuid_ = !!value_;
}
@synthesize userUuid;
@synthesize mutableCurrentTeamList;
@dynamic currentTeamList;
- (id) init {
  if ((self = [super init])) {
    self.userUuid = @"";
  }
  return self;
}
static UserCurrentMonsterTeamProto* defaultUserCurrentMonsterTeamProtoInstance = nil;
+ (void) initialize {
  if (self == [UserCurrentMonsterTeamProto class]) {
    defaultUserCurrentMonsterTeamProtoInstance = [[UserCurrentMonsterTeamProto alloc] init];
  }
}
+ (UserCurrentMonsterTeamProto*) defaultInstance {
  return defaultUserCurrentMonsterTeamProtoInstance;
}
- (UserCurrentMonsterTeamProto*) defaultInstance {
  return defaultUserCurrentMonsterTeamProtoInstance;
}
- (NSArray *)currentTeamList {
  return mutableCurrentTeamList;
}
- (FullUserMonsterProto*)currentTeamAtIndex:(NSUInteger)index {
  return [mutableCurrentTeamList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserUuid) {
    [output writeString:1 value:self.userUuid];
  }
  [self.currentTeamList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserUuid) {
    size_ += computeStringSize(1, self.userUuid);
  }
  [self.currentTeamList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserCurrentMonsterTeamProto*) parseFromData:(NSData*) data {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromData:data] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromInputStream:input] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserCurrentMonsterTeamProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserCurrentMonsterTeamProto*)[[[UserCurrentMonsterTeamProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserCurrentMonsterTeamProto_Builder*) builder {
  return [[UserCurrentMonsterTeamProto_Builder alloc] init];
}
+ (UserCurrentMonsterTeamProto_Builder*) builderWithPrototype:(UserCurrentMonsterTeamProto*) prototype {
  return [[UserCurrentMonsterTeamProto builder] mergeFrom:prototype];
}
- (UserCurrentMonsterTeamProto_Builder*) builder {
  return [UserCurrentMonsterTeamProto builder];
}
- (UserCurrentMonsterTeamProto_Builder*) toBuilder {
  return [UserCurrentMonsterTeamProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userUuid", self.userUuid];
  }
  [self.currentTeamList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"currentTeam"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserCurrentMonsterTeamProto class]]) {
    return NO;
  }
  UserCurrentMonsterTeamProto *otherMessage = other;
  return
      self.hasUserUuid == otherMessage.hasUserUuid &&
      (!self.hasUserUuid || [self.userUuid isEqual:otherMessage.userUuid]) &&
      [self.currentTeamList isEqualToArray:otherMessage.currentTeamList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserUuid) {
    hashCode = hashCode * 31 + [self.userUuid hash];
  }
  [self.currentTeamList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserCurrentMonsterTeamProto_Builder()
@property (strong) UserCurrentMonsterTeamProto* result;
@end

@implementation UserCurrentMonsterTeamProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserCurrentMonsterTeamProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserCurrentMonsterTeamProto_Builder*) clear {
  self.result = [[UserCurrentMonsterTeamProto alloc] init];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) clone {
  return [UserCurrentMonsterTeamProto builderWithPrototype:result];
}
- (UserCurrentMonsterTeamProto*) defaultInstance {
  return [UserCurrentMonsterTeamProto defaultInstance];
}
- (UserCurrentMonsterTeamProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserCurrentMonsterTeamProto*) buildPartial {
  UserCurrentMonsterTeamProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserCurrentMonsterTeamProto_Builder*) mergeFrom:(UserCurrentMonsterTeamProto*) other {
  if (other == [UserCurrentMonsterTeamProto defaultInstance]) {
    return self;
  }
  if (other.hasUserUuid) {
    [self setUserUuid:other.userUuid];
  }
  if (other.mutableCurrentTeamList.count > 0) {
    if (result.mutableCurrentTeamList == nil) {
      result.mutableCurrentTeamList = [[NSMutableArray alloc] initWithArray:other.mutableCurrentTeamList];
    } else {
      [result.mutableCurrentTeamList addObjectsFromArray:other.mutableCurrentTeamList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserCurrentMonsterTeamProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUserUuid:[input readString]];
        break;
      }
      case 18: {
        FullUserMonsterProto_Builder* subBuilder = [FullUserMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCurrentTeam:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserUuid {
  return result.hasUserUuid;
}
- (NSString*) userUuid {
  return result.userUuid;
}
- (UserCurrentMonsterTeamProto_Builder*) setUserUuid:(NSString*) value {
  result.hasUserUuid = YES;
  result.userUuid = value;
  return self;
}
- (UserCurrentMonsterTeamProto_Builder*) clearUserUuid {
  result.hasUserUuid = NO;
  result.userUuid = @"";
  return self;
}
- (NSMutableArray *)currentTeamList {
  return result.mutableCurrentTeamList;
}
- (FullUserMonsterProto*)currentTeamAtIndex:(NSUInteger)index {
  return [result currentTeamAtIndex:index];
}
- (UserCurrentMonsterTeamProto_Builder *)addCurrentTeam:(FullUserMonsterProto*)value {
  if (result.mutableCurrentTeamList == nil) {
    result.mutableCurrentTeamList = [[NSMutableArray alloc]init];
  }
  [result.mutableCurrentTeamList addObject:value];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder *)addAllCurrentTeam:(NSArray *)array {
  if (result.mutableCurrentTeamList == nil) {
    result.mutableCurrentTeamList = [NSMutableArray array];
  }
  [result.mutableCurrentTeamList addObjectsFromArray:array];
  return self;
}
- (UserCurrentMonsterTeamProto_Builder *)clearCurrentTeam {
  result.mutableCurrentTeamList = nil;
  return self;
}
@end

@interface UserMonsterEvolutionProto ()
@property (strong) NSString* catalystUserMonsterUuid;
@property (strong) NSMutableArray * mutableUserMonsterUuidsList;
@property int64_t startTime;
@end

@implementation UserMonsterEvolutionProto

- (BOOL) hasCatalystUserMonsterUuid {
  return !!hasCatalystUserMonsterUuid_;
}
- (void) setHasCatalystUserMonsterUuid:(BOOL) value_ {
  hasCatalystUserMonsterUuid_ = !!value_;
}
@synthesize catalystUserMonsterUuid;
@synthesize mutableUserMonsterUuidsList;
@dynamic userMonsterUuidsList;
- (BOOL) hasStartTime {
  return !!hasStartTime_;
}
- (void) setHasStartTime:(BOOL) value_ {
  hasStartTime_ = !!value_;
}
@synthesize startTime;
- (id) init {
  if ((self = [super init])) {
    self.catalystUserMonsterUuid = @"";
    self.startTime = 0L;
  }
  return self;
}
static UserMonsterEvolutionProto* defaultUserMonsterEvolutionProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterEvolutionProto class]) {
    defaultUserMonsterEvolutionProtoInstance = [[UserMonsterEvolutionProto alloc] init];
  }
}
+ (UserMonsterEvolutionProto*) defaultInstance {
  return defaultUserMonsterEvolutionProtoInstance;
}
- (UserMonsterEvolutionProto*) defaultInstance {
  return defaultUserMonsterEvolutionProtoInstance;
}
- (NSArray *)userMonsterUuidsList {
  return mutableUserMonsterUuidsList;
}
- (NSString*)userMonsterUuidsAtIndex:(NSUInteger)index {
  return [mutableUserMonsterUuidsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCatalystUserMonsterUuid) {
    [output writeString:1 value:self.catalystUserMonsterUuid];
  }
  [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  if (self.hasStartTime) {
    [output writeInt64:3 value:self.startTime];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCatalystUserMonsterUuid) {
    size_ += computeStringSize(1, self.catalystUserMonsterUuid);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.userMonsterUuidsList.count;
    [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasStartTime) {
    size_ += computeInt64Size(3, self.startTime);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMonsterEvolutionProto*) parseFromData:(NSData*) data {
  return (UserMonsterEvolutionProto*)[[[UserMonsterEvolutionProto builder] mergeFromData:data] build];
}
+ (UserMonsterEvolutionProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterEvolutionProto*)[[[UserMonsterEvolutionProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterEvolutionProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterEvolutionProto*)[[[UserMonsterEvolutionProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterEvolutionProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterEvolutionProto*)[[[UserMonsterEvolutionProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterEvolutionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterEvolutionProto*)[[[UserMonsterEvolutionProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterEvolutionProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterEvolutionProto*)[[[UserMonsterEvolutionProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterEvolutionProto_Builder*) builder {
  return [[UserMonsterEvolutionProto_Builder alloc] init];
}
+ (UserMonsterEvolutionProto_Builder*) builderWithPrototype:(UserMonsterEvolutionProto*) prototype {
  return [[UserMonsterEvolutionProto builder] mergeFrom:prototype];
}
- (UserMonsterEvolutionProto_Builder*) builder {
  return [UserMonsterEvolutionProto builder];
}
- (UserMonsterEvolutionProto_Builder*) toBuilder {
  return [UserMonsterEvolutionProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCatalystUserMonsterUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"catalystUserMonsterUuid", self.catalystUserMonsterUuid];
  }
  [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMonsterUuids", obj];
  }];
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithLongLong:self.startTime]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMonsterEvolutionProto class]]) {
    return NO;
  }
  UserMonsterEvolutionProto *otherMessage = other;
  return
      self.hasCatalystUserMonsterUuid == otherMessage.hasCatalystUserMonsterUuid &&
      (!self.hasCatalystUserMonsterUuid || [self.catalystUserMonsterUuid isEqual:otherMessage.catalystUserMonsterUuid]) &&
      [self.userMonsterUuidsList isEqualToArray:otherMessage.userMonsterUuidsList] &&
      self.hasStartTime == otherMessage.hasStartTime &&
      (!self.hasStartTime || self.startTime == otherMessage.startTime) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCatalystUserMonsterUuid) {
    hashCode = hashCode * 31 + [self.catalystUserMonsterUuid hash];
  }
  [self.userMonsterUuidsList enumerateObjectsUsingBlock:^(id element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasStartTime) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.startTime] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserMonsterEvolutionProto_Builder()
@property (strong) UserMonsterEvolutionProto* result;
@end

@implementation UserMonsterEvolutionProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMonsterEvolutionProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterEvolutionProto_Builder*) clear {
  self.result = [[UserMonsterEvolutionProto alloc] init];
  return self;
}
- (UserMonsterEvolutionProto_Builder*) clone {
  return [UserMonsterEvolutionProto builderWithPrototype:result];
}
- (UserMonsterEvolutionProto*) defaultInstance {
  return [UserMonsterEvolutionProto defaultInstance];
}
- (UserMonsterEvolutionProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterEvolutionProto*) buildPartial {
  UserMonsterEvolutionProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMonsterEvolutionProto_Builder*) mergeFrom:(UserMonsterEvolutionProto*) other {
  if (other == [UserMonsterEvolutionProto defaultInstance]) {
    return self;
  }
  if (other.hasCatalystUserMonsterUuid) {
    [self setCatalystUserMonsterUuid:other.catalystUserMonsterUuid];
  }
  if (other.mutableUserMonsterUuidsList.count > 0) {
    if (result.mutableUserMonsterUuidsList == nil) {
      result.mutableUserMonsterUuidsList = [[NSMutableArray alloc] initWithArray:other.mutableUserMonsterUuidsList];
    } else {
      [result.mutableUserMonsterUuidsList addObjectsFromArray:other.mutableUserMonsterUuidsList];
    }
  }
  if (other.hasStartTime) {
    [self setStartTime:other.startTime];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterEvolutionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterEvolutionProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCatalystUserMonsterUuid:[input readString]];
        break;
      }
      case 18: {
        [self addUserMonsterUuids:[input readString]];
        break;
      }
      case 24: {
        [self setStartTime:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasCatalystUserMonsterUuid {
  return result.hasCatalystUserMonsterUuid;
}
- (NSString*) catalystUserMonsterUuid {
  return result.catalystUserMonsterUuid;
}
- (UserMonsterEvolutionProto_Builder*) setCatalystUserMonsterUuid:(NSString*) value {
  result.hasCatalystUserMonsterUuid = YES;
  result.catalystUserMonsterUuid = value;
  return self;
}
- (UserMonsterEvolutionProto_Builder*) clearCatalystUserMonsterUuid {
  result.hasCatalystUserMonsterUuid = NO;
  result.catalystUserMonsterUuid = @"";
  return self;
}
- (NSMutableArray *)userMonsterUuidsList {
  return result.mutableUserMonsterUuidsList;
}
- (NSString*)userMonsterUuidsAtIndex:(NSUInteger)index {
  return [result userMonsterUuidsAtIndex:index];
}
- (UserMonsterEvolutionProto_Builder *)addUserMonsterUuids:(NSString*)value {
  if (result.mutableUserMonsterUuidsList == nil) {
    result.mutableUserMonsterUuidsList = [[NSMutableArray alloc]init];
  }
  [result.mutableUserMonsterUuidsList addObject:value];
  return self;
}
- (UserMonsterEvolutionProto_Builder *)addAllUserMonsterUuids:(NSArray *)array {
  if (result.mutableUserMonsterUuidsList == nil) {
    result.mutableUserMonsterUuidsList = [NSMutableArray array];
  }
  [result.mutableUserMonsterUuidsList addObjectsFromArray:array];
  return self;
}
- (UserMonsterEvolutionProto_Builder *)clearUserMonsterUuids {
  result.mutableUserMonsterUuidsList = nil;
  return self;
}
- (BOOL) hasStartTime {
  return result.hasStartTime;
}
- (int64_t) startTime {
  return result.startTime;
}
- (UserMonsterEvolutionProto_Builder*) setStartTime:(int64_t) value {
  result.hasStartTime = YES;
  result.startTime = value;
  return self;
}
- (UserMonsterEvolutionProto_Builder*) clearStartTime {
  result.hasStartTime = NO;
  result.startTime = 0L;
  return self;
}
@end

@interface MonsterBattleDialogueProto ()
@property int32_t monsterId;
@property MonsterBattleDialogueProto_DialogueType dialogueType;
@property (strong) NSString* dialogue;
@property Float32 probabilityUttered;
@end

@implementation MonsterBattleDialogueProto

- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasDialogueType {
  return !!hasDialogueType_;
}
- (void) setHasDialogueType:(BOOL) value_ {
  hasDialogueType_ = !!value_;
}
@synthesize dialogueType;
- (BOOL) hasDialogue {
  return !!hasDialogue_;
}
- (void) setHasDialogue:(BOOL) value_ {
  hasDialogue_ = !!value_;
}
@synthesize dialogue;
- (BOOL) hasProbabilityUttered {
  return !!hasProbabilityUttered_;
}
- (void) setHasProbabilityUttered:(BOOL) value_ {
  hasProbabilityUttered_ = !!value_;
}
@synthesize probabilityUttered;
- (id) init {
  if ((self = [super init])) {
    self.monsterId = 0;
    self.dialogueType = MonsterBattleDialogueProto_DialogueTypeNoDialogue;
    self.dialogue = @"";
    self.probabilityUttered = 0;
  }
  return self;
}
static MonsterBattleDialogueProto* defaultMonsterBattleDialogueProtoInstance = nil;
+ (void) initialize {
  if (self == [MonsterBattleDialogueProto class]) {
    defaultMonsterBattleDialogueProtoInstance = [[MonsterBattleDialogueProto alloc] init];
  }
}
+ (MonsterBattleDialogueProto*) defaultInstance {
  return defaultMonsterBattleDialogueProtoInstance;
}
- (MonsterBattleDialogueProto*) defaultInstance {
  return defaultMonsterBattleDialogueProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasDialogue) {
    [output writeString:2 value:self.dialogue];
  }
  if (self.hasDialogueType) {
    [output writeEnum:3 value:self.dialogueType];
  }
  if (self.hasProbabilityUttered) {
    [output writeFloat:4 value:self.probabilityUttered];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMonsterId) {
    size_ += computeInt32Size(1, self.monsterId);
  }
  if (self.hasDialogue) {
    size_ += computeStringSize(2, self.dialogue);
  }
  if (self.hasDialogueType) {
    size_ += computeEnumSize(3, self.dialogueType);
  }
  if (self.hasProbabilityUttered) {
    size_ += computeFloatSize(4, self.probabilityUttered);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MonsterBattleDialogueProto*) parseFromData:(NSData*) data {
  return (MonsterBattleDialogueProto*)[[[MonsterBattleDialogueProto builder] mergeFromData:data] build];
}
+ (MonsterBattleDialogueProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterBattleDialogueProto*)[[[MonsterBattleDialogueProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MonsterBattleDialogueProto*) parseFromInputStream:(NSInputStream*) input {
  return (MonsterBattleDialogueProto*)[[[MonsterBattleDialogueProto builder] mergeFromInputStream:input] build];
}
+ (MonsterBattleDialogueProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterBattleDialogueProto*)[[[MonsterBattleDialogueProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterBattleDialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MonsterBattleDialogueProto*)[[[MonsterBattleDialogueProto builder] mergeFromCodedInputStream:input] build];
}
+ (MonsterBattleDialogueProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MonsterBattleDialogueProto*)[[[MonsterBattleDialogueProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MonsterBattleDialogueProto_Builder*) builder {
  return [[MonsterBattleDialogueProto_Builder alloc] init];
}
+ (MonsterBattleDialogueProto_Builder*) builderWithPrototype:(MonsterBattleDialogueProto*) prototype {
  return [[MonsterBattleDialogueProto builder] mergeFrom:prototype];
}
- (MonsterBattleDialogueProto_Builder*) builder {
  return [MonsterBattleDialogueProto builder];
}
- (MonsterBattleDialogueProto_Builder*) toBuilder {
  return [MonsterBattleDialogueProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasDialogue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dialogue", self.dialogue];
  }
  if (self.hasDialogueType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dialogueType", [NSNumber numberWithInteger:self.dialogueType]];
  }
  if (self.hasProbabilityUttered) {
    [output appendFormat:@"%@%@: %@\n", indent, @"probabilityUttered", [NSNumber numberWithFloat:self.probabilityUttered]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MonsterBattleDialogueProto class]]) {
    return NO;
  }
  MonsterBattleDialogueProto *otherMessage = other;
  return
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasDialogue == otherMessage.hasDialogue &&
      (!self.hasDialogue || [self.dialogue isEqual:otherMessage.dialogue]) &&
      self.hasDialogueType == otherMessage.hasDialogueType &&
      (!self.hasDialogueType || self.dialogueType == otherMessage.dialogueType) &&
      self.hasProbabilityUttered == otherMessage.hasProbabilityUttered &&
      (!self.hasProbabilityUttered || self.probabilityUttered == otherMessage.probabilityUttered) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasDialogue) {
    hashCode = hashCode * 31 + [self.dialogue hash];
  }
  if (self.hasDialogueType) {
    hashCode = hashCode * 31 + self.dialogueType;
  }
  if (self.hasProbabilityUttered) {
    hashCode = hashCode * 31 + [[NSNumber numberWithFloat:self.probabilityUttered] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL MonsterBattleDialogueProto_DialogueTypeIsValidValue(MonsterBattleDialogueProto_DialogueType value) {
  switch (value) {
    case MonsterBattleDialogueProto_DialogueTypeNoDialogue:
    case MonsterBattleDialogueProto_DialogueTypeEnterBattle:
      return YES;
    default:
      return NO;
  }
}
@interface MonsterBattleDialogueProto_Builder()
@property (strong) MonsterBattleDialogueProto* result;
@end

@implementation MonsterBattleDialogueProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MonsterBattleDialogueProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MonsterBattleDialogueProto_Builder*) clear {
  self.result = [[MonsterBattleDialogueProto alloc] init];
  return self;
}
- (MonsterBattleDialogueProto_Builder*) clone {
  return [MonsterBattleDialogueProto builderWithPrototype:result];
}
- (MonsterBattleDialogueProto*) defaultInstance {
  return [MonsterBattleDialogueProto defaultInstance];
}
- (MonsterBattleDialogueProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MonsterBattleDialogueProto*) buildPartial {
  MonsterBattleDialogueProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MonsterBattleDialogueProto_Builder*) mergeFrom:(MonsterBattleDialogueProto*) other {
  if (other == [MonsterBattleDialogueProto defaultInstance]) {
    return self;
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasDialogueType) {
    [self setDialogueType:other.dialogueType];
  }
  if (other.hasDialogue) {
    [self setDialogue:other.dialogue];
  }
  if (other.hasProbabilityUttered) {
    [self setProbabilityUttered:other.probabilityUttered];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MonsterBattleDialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MonsterBattleDialogueProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 18: {
        [self setDialogue:[input readString]];
        break;
      }
      case 24: {
        MonsterBattleDialogueProto_DialogueType value = (MonsterBattleDialogueProto_DialogueType)[input readEnum];
        if (MonsterBattleDialogueProto_DialogueTypeIsValidValue(value)) {
          [self setDialogueType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 37: {
        [self setProbabilityUttered:[input readFloat]];
        break;
      }
    }
  }
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (MonsterBattleDialogueProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (MonsterBattleDialogueProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasDialogueType {
  return result.hasDialogueType;
}
- (MonsterBattleDialogueProto_DialogueType) dialogueType {
  return result.dialogueType;
}
- (MonsterBattleDialogueProto_Builder*) setDialogueType:(MonsterBattleDialogueProto_DialogueType) value {
  result.hasDialogueType = YES;
  result.dialogueType = value;
  return self;
}
- (MonsterBattleDialogueProto_Builder*) clearDialogueTypeList {
  result.hasDialogueType = NO;
  result.dialogueType = MonsterBattleDialogueProto_DialogueTypeNoDialogue;
  return self;
}
- (BOOL) hasDialogue {
  return result.hasDialogue;
}
- (NSString*) dialogue {
  return result.dialogue;
}
- (MonsterBattleDialogueProto_Builder*) setDialogue:(NSString*) value {
  result.hasDialogue = YES;
  result.dialogue = value;
  return self;
}
- (MonsterBattleDialogueProto_Builder*) clearDialogue {
  result.hasDialogue = NO;
  result.dialogue = @"";
  return self;
}
- (BOOL) hasProbabilityUttered {
  return result.hasProbabilityUttered;
}
- (Float32) probabilityUttered {
  return result.probabilityUttered;
}
- (MonsterBattleDialogueProto_Builder*) setProbabilityUttered:(Float32) value {
  result.hasProbabilityUttered = YES;
  result.probabilityUttered = value;
  return self;
}
- (MonsterBattleDialogueProto_Builder*) clearProbabilityUttered {
  result.hasProbabilityUttered = NO;
  result.probabilityUttered = 0;
  return self;
}
@end

@interface UserMonsterSnapshotProto ()
@property (strong) NSString* snapshotUuid;
@property int64_t timeOfCreation;
@property UserMonsterSnapshotProto_SnapshotType type;
@property (strong) NSString* relevantTableUuid;
@property (strong) NSString* monsterForUserUuid;
@property (strong) MinimumUserProto* user;
@property int32_t monsterId;
@property int32_t currentExp;
@property int32_t currentLvl;
@property int32_t currentHp;
@property int32_t teamSlotNum;
@property int32_t offensiveSkillId;
@property int32_t defensiveSkillId;
@end

@implementation UserMonsterSnapshotProto

- (BOOL) hasSnapshotUuid {
  return !!hasSnapshotUuid_;
}
- (void) setHasSnapshotUuid:(BOOL) value_ {
  hasSnapshotUuid_ = !!value_;
}
@synthesize snapshotUuid;
- (BOOL) hasTimeOfCreation {
  return !!hasTimeOfCreation_;
}
- (void) setHasTimeOfCreation:(BOOL) value_ {
  hasTimeOfCreation_ = !!value_;
}
@synthesize timeOfCreation;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasRelevantTableUuid {
  return !!hasRelevantTableUuid_;
}
- (void) setHasRelevantTableUuid:(BOOL) value_ {
  hasRelevantTableUuid_ = !!value_;
}
@synthesize relevantTableUuid;
- (BOOL) hasMonsterForUserUuid {
  return !!hasMonsterForUserUuid_;
}
- (void) setHasMonsterForUserUuid:(BOOL) value_ {
  hasMonsterForUserUuid_ = !!value_;
}
@synthesize monsterForUserUuid;
- (BOOL) hasUser {
  return !!hasUser_;
}
- (void) setHasUser:(BOOL) value_ {
  hasUser_ = !!value_;
}
@synthesize user;
- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasCurrentExp {
  return !!hasCurrentExp_;
}
- (void) setHasCurrentExp:(BOOL) value_ {
  hasCurrentExp_ = !!value_;
}
@synthesize currentExp;
- (BOOL) hasCurrentLvl {
  return !!hasCurrentLvl_;
}
- (void) setHasCurrentLvl:(BOOL) value_ {
  hasCurrentLvl_ = !!value_;
}
@synthesize currentLvl;
- (BOOL) hasCurrentHp {
  return !!hasCurrentHp_;
}
- (void) setHasCurrentHp:(BOOL) value_ {
  hasCurrentHp_ = !!value_;
}
@synthesize currentHp;
- (BOOL) hasTeamSlotNum {
  return !!hasTeamSlotNum_;
}
- (void) setHasTeamSlotNum:(BOOL) value_ {
  hasTeamSlotNum_ = !!value_;
}
@synthesize teamSlotNum;
- (BOOL) hasOffensiveSkillId {
  return !!hasOffensiveSkillId_;
}
- (void) setHasOffensiveSkillId:(BOOL) value_ {
  hasOffensiveSkillId_ = !!value_;
}
@synthesize offensiveSkillId;
- (BOOL) hasDefensiveSkillId {
  return !!hasDefensiveSkillId_;
}
- (void) setHasDefensiveSkillId:(BOOL) value_ {
  hasDefensiveSkillId_ = !!value_;
}
@synthesize defensiveSkillId;
- (id) init {
  if ((self = [super init])) {
    self.snapshotUuid = @"";
    self.timeOfCreation = 0L;
    self.type = UserMonsterSnapshotProto_SnapshotTypeNoDonateType;
    self.relevantTableUuid = @"";
    self.monsterForUserUuid = @"";
    self.user = [MinimumUserProto defaultInstance];
    self.monsterId = 0;
    self.currentExp = 0;
    self.currentLvl = 0;
    self.currentHp = 0;
    self.teamSlotNum = 0;
    self.offensiveSkillId = 0;
    self.defensiveSkillId = 0;
  }
  return self;
}
static UserMonsterSnapshotProto* defaultUserMonsterSnapshotProtoInstance = nil;
+ (void) initialize {
  if (self == [UserMonsterSnapshotProto class]) {
    defaultUserMonsterSnapshotProtoInstance = [[UserMonsterSnapshotProto alloc] init];
  }
}
+ (UserMonsterSnapshotProto*) defaultInstance {
  return defaultUserMonsterSnapshotProtoInstance;
}
- (UserMonsterSnapshotProto*) defaultInstance {
  return defaultUserMonsterSnapshotProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSnapshotUuid) {
    [output writeString:1 value:self.snapshotUuid];
  }
  if (self.hasTimeOfCreation) {
    [output writeInt64:2 value:self.timeOfCreation];
  }
  if (self.hasType) {
    [output writeEnum:3 value:self.type];
  }
  if (self.hasRelevantTableUuid) {
    [output writeString:4 value:self.relevantTableUuid];
  }
  if (self.hasMonsterForUserUuid) {
    [output writeString:5 value:self.monsterForUserUuid];
  }
  if (self.hasUser) {
    [output writeMessage:6 value:self.user];
  }
  if (self.hasMonsterId) {
    [output writeInt32:7 value:self.monsterId];
  }
  if (self.hasCurrentExp) {
    [output writeInt32:8 value:self.currentExp];
  }
  if (self.hasCurrentLvl) {
    [output writeInt32:9 value:self.currentLvl];
  }
  if (self.hasCurrentHp) {
    [output writeInt32:10 value:self.currentHp];
  }
  if (self.hasTeamSlotNum) {
    [output writeInt32:11 value:self.teamSlotNum];
  }
  if (self.hasOffensiveSkillId) {
    [output writeInt32:12 value:self.offensiveSkillId];
  }
  if (self.hasDefensiveSkillId) {
    [output writeInt32:13 value:self.defensiveSkillId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSnapshotUuid) {
    size_ += computeStringSize(1, self.snapshotUuid);
  }
  if (self.hasTimeOfCreation) {
    size_ += computeInt64Size(2, self.timeOfCreation);
  }
  if (self.hasType) {
    size_ += computeEnumSize(3, self.type);
  }
  if (self.hasRelevantTableUuid) {
    size_ += computeStringSize(4, self.relevantTableUuid);
  }
  if (self.hasMonsterForUserUuid) {
    size_ += computeStringSize(5, self.monsterForUserUuid);
  }
  if (self.hasUser) {
    size_ += computeMessageSize(6, self.user);
  }
  if (self.hasMonsterId) {
    size_ += computeInt32Size(7, self.monsterId);
  }
  if (self.hasCurrentExp) {
    size_ += computeInt32Size(8, self.currentExp);
  }
  if (self.hasCurrentLvl) {
    size_ += computeInt32Size(9, self.currentLvl);
  }
  if (self.hasCurrentHp) {
    size_ += computeInt32Size(10, self.currentHp);
  }
  if (self.hasTeamSlotNum) {
    size_ += computeInt32Size(11, self.teamSlotNum);
  }
  if (self.hasOffensiveSkillId) {
    size_ += computeInt32Size(12, self.offensiveSkillId);
  }
  if (self.hasDefensiveSkillId) {
    size_ += computeInt32Size(13, self.defensiveSkillId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserMonsterSnapshotProto*) parseFromData:(NSData*) data {
  return (UserMonsterSnapshotProto*)[[[UserMonsterSnapshotProto builder] mergeFromData:data] build];
}
+ (UserMonsterSnapshotProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterSnapshotProto*)[[[UserMonsterSnapshotProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterSnapshotProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserMonsterSnapshotProto*)[[[UserMonsterSnapshotProto builder] mergeFromInputStream:input] build];
}
+ (UserMonsterSnapshotProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterSnapshotProto*)[[[UserMonsterSnapshotProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterSnapshotProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserMonsterSnapshotProto*)[[[UserMonsterSnapshotProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserMonsterSnapshotProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserMonsterSnapshotProto*)[[[UserMonsterSnapshotProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserMonsterSnapshotProto_Builder*) builder {
  return [[UserMonsterSnapshotProto_Builder alloc] init];
}
+ (UserMonsterSnapshotProto_Builder*) builderWithPrototype:(UserMonsterSnapshotProto*) prototype {
  return [[UserMonsterSnapshotProto builder] mergeFrom:prototype];
}
- (UserMonsterSnapshotProto_Builder*) builder {
  return [UserMonsterSnapshotProto builder];
}
- (UserMonsterSnapshotProto_Builder*) toBuilder {
  return [UserMonsterSnapshotProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSnapshotUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"snapshotUuid", self.snapshotUuid];
  }
  if (self.hasTimeOfCreation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeOfCreation", [NSNumber numberWithLongLong:self.timeOfCreation]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasRelevantTableUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"relevantTableUuid", self.relevantTableUuid];
  }
  if (self.hasMonsterForUserUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterForUserUuid", self.monsterForUserUuid];
  }
  if (self.hasUser) {
    [output appendFormat:@"%@%@ {\n", indent, @"user"];
    [self.user writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasCurrentExp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentExp", [NSNumber numberWithInteger:self.currentExp]];
  }
  if (self.hasCurrentLvl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentLvl", [NSNumber numberWithInteger:self.currentLvl]];
  }
  if (self.hasCurrentHp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"currentHp", [NSNumber numberWithInteger:self.currentHp]];
  }
  if (self.hasTeamSlotNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"teamSlotNum", [NSNumber numberWithInteger:self.teamSlotNum]];
  }
  if (self.hasOffensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offensiveSkillId", [NSNumber numberWithInteger:self.offensiveSkillId]];
  }
  if (self.hasDefensiveSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"defensiveSkillId", [NSNumber numberWithInteger:self.defensiveSkillId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserMonsterSnapshotProto class]]) {
    return NO;
  }
  UserMonsterSnapshotProto *otherMessage = other;
  return
      self.hasSnapshotUuid == otherMessage.hasSnapshotUuid &&
      (!self.hasSnapshotUuid || [self.snapshotUuid isEqual:otherMessage.snapshotUuid]) &&
      self.hasTimeOfCreation == otherMessage.hasTimeOfCreation &&
      (!self.hasTimeOfCreation || self.timeOfCreation == otherMessage.timeOfCreation) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasRelevantTableUuid == otherMessage.hasRelevantTableUuid &&
      (!self.hasRelevantTableUuid || [self.relevantTableUuid isEqual:otherMessage.relevantTableUuid]) &&
      self.hasMonsterForUserUuid == otherMessage.hasMonsterForUserUuid &&
      (!self.hasMonsterForUserUuid || [self.monsterForUserUuid isEqual:otherMessage.monsterForUserUuid]) &&
      self.hasUser == otherMessage.hasUser &&
      (!self.hasUser || [self.user isEqual:otherMessage.user]) &&
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasCurrentExp == otherMessage.hasCurrentExp &&
      (!self.hasCurrentExp || self.currentExp == otherMessage.currentExp) &&
      self.hasCurrentLvl == otherMessage.hasCurrentLvl &&
      (!self.hasCurrentLvl || self.currentLvl == otherMessage.currentLvl) &&
      self.hasCurrentHp == otherMessage.hasCurrentHp &&
      (!self.hasCurrentHp || self.currentHp == otherMessage.currentHp) &&
      self.hasTeamSlotNum == otherMessage.hasTeamSlotNum &&
      (!self.hasTeamSlotNum || self.teamSlotNum == otherMessage.teamSlotNum) &&
      self.hasOffensiveSkillId == otherMessage.hasOffensiveSkillId &&
      (!self.hasOffensiveSkillId || self.offensiveSkillId == otherMessage.offensiveSkillId) &&
      self.hasDefensiveSkillId == otherMessage.hasDefensiveSkillId &&
      (!self.hasDefensiveSkillId || self.defensiveSkillId == otherMessage.defensiveSkillId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSnapshotUuid) {
    hashCode = hashCode * 31 + [self.snapshotUuid hash];
  }
  if (self.hasTimeOfCreation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeOfCreation] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasRelevantTableUuid) {
    hashCode = hashCode * 31 + [self.relevantTableUuid hash];
  }
  if (self.hasMonsterForUserUuid) {
    hashCode = hashCode * 31 + [self.monsterForUserUuid hash];
  }
  if (self.hasUser) {
    hashCode = hashCode * 31 + [self.user hash];
  }
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasCurrentExp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentExp] hash];
  }
  if (self.hasCurrentLvl) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentLvl] hash];
  }
  if (self.hasCurrentHp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.currentHp] hash];
  }
  if (self.hasTeamSlotNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.teamSlotNum] hash];
  }
  if (self.hasOffensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.offensiveSkillId] hash];
  }
  if (self.hasDefensiveSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.defensiveSkillId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL UserMonsterSnapshotProto_SnapshotTypeIsValidValue(UserMonsterSnapshotProto_SnapshotType value) {
  switch (value) {
    case UserMonsterSnapshotProto_SnapshotTypeNoDonateType:
    case UserMonsterSnapshotProto_SnapshotTypeTeamDonate:
    case UserMonsterSnapshotProto_SnapshotTypeEnhanceDonate:
      return YES;
    default:
      return NO;
  }
}
@interface UserMonsterSnapshotProto_Builder()
@property (strong) UserMonsterSnapshotProto* result;
@end

@implementation UserMonsterSnapshotProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserMonsterSnapshotProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserMonsterSnapshotProto_Builder*) clear {
  self.result = [[UserMonsterSnapshotProto alloc] init];
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clone {
  return [UserMonsterSnapshotProto builderWithPrototype:result];
}
- (UserMonsterSnapshotProto*) defaultInstance {
  return [UserMonsterSnapshotProto defaultInstance];
}
- (UserMonsterSnapshotProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserMonsterSnapshotProto*) buildPartial {
  UserMonsterSnapshotProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserMonsterSnapshotProto_Builder*) mergeFrom:(UserMonsterSnapshotProto*) other {
  if (other == [UserMonsterSnapshotProto defaultInstance]) {
    return self;
  }
  if (other.hasSnapshotUuid) {
    [self setSnapshotUuid:other.snapshotUuid];
  }
  if (other.hasTimeOfCreation) {
    [self setTimeOfCreation:other.timeOfCreation];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasRelevantTableUuid) {
    [self setRelevantTableUuid:other.relevantTableUuid];
  }
  if (other.hasMonsterForUserUuid) {
    [self setMonsterForUserUuid:other.monsterForUserUuid];
  }
  if (other.hasUser) {
    [self mergeUser:other.user];
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasCurrentExp) {
    [self setCurrentExp:other.currentExp];
  }
  if (other.hasCurrentLvl) {
    [self setCurrentLvl:other.currentLvl];
  }
  if (other.hasCurrentHp) {
    [self setCurrentHp:other.currentHp];
  }
  if (other.hasTeamSlotNum) {
    [self setTeamSlotNum:other.teamSlotNum];
  }
  if (other.hasOffensiveSkillId) {
    [self setOffensiveSkillId:other.offensiveSkillId];
  }
  if (other.hasDefensiveSkillId) {
    [self setDefensiveSkillId:other.defensiveSkillId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserMonsterSnapshotProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserMonsterSnapshotProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSnapshotUuid:[input readString]];
        break;
      }
      case 16: {
        [self setTimeOfCreation:[input readInt64]];
        break;
      }
      case 24: {
        UserMonsterSnapshotProto_SnapshotType value = (UserMonsterSnapshotProto_SnapshotType)[input readEnum];
        if (UserMonsterSnapshotProto_SnapshotTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 34: {
        [self setRelevantTableUuid:[input readString]];
        break;
      }
      case 42: {
        [self setMonsterForUserUuid:[input readString]];
        break;
      }
      case 50: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasUser) {
          [subBuilder mergeFrom:self.user];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUser:[subBuilder buildPartial]];
        break;
      }
      case 56: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 64: {
        [self setCurrentExp:[input readInt32]];
        break;
      }
      case 72: {
        [self setCurrentLvl:[input readInt32]];
        break;
      }
      case 80: {
        [self setCurrentHp:[input readInt32]];
        break;
      }
      case 88: {
        [self setTeamSlotNum:[input readInt32]];
        break;
      }
      case 96: {
        [self setOffensiveSkillId:[input readInt32]];
        break;
      }
      case 104: {
        [self setDefensiveSkillId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSnapshotUuid {
  return result.hasSnapshotUuid;
}
- (NSString*) snapshotUuid {
  return result.snapshotUuid;
}
- (UserMonsterSnapshotProto_Builder*) setSnapshotUuid:(NSString*) value {
  result.hasSnapshotUuid = YES;
  result.snapshotUuid = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearSnapshotUuid {
  result.hasSnapshotUuid = NO;
  result.snapshotUuid = @"";
  return self;
}
- (BOOL) hasTimeOfCreation {
  return result.hasTimeOfCreation;
}
- (int64_t) timeOfCreation {
  return result.timeOfCreation;
}
- (UserMonsterSnapshotProto_Builder*) setTimeOfCreation:(int64_t) value {
  result.hasTimeOfCreation = YES;
  result.timeOfCreation = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearTimeOfCreation {
  result.hasTimeOfCreation = NO;
  result.timeOfCreation = 0L;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (UserMonsterSnapshotProto_SnapshotType) type {
  return result.type;
}
- (UserMonsterSnapshotProto_Builder*) setType:(UserMonsterSnapshotProto_SnapshotType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearTypeList {
  result.hasType = NO;
  result.type = UserMonsterSnapshotProto_SnapshotTypeNoDonateType;
  return self;
}
- (BOOL) hasRelevantTableUuid {
  return result.hasRelevantTableUuid;
}
- (NSString*) relevantTableUuid {
  return result.relevantTableUuid;
}
- (UserMonsterSnapshotProto_Builder*) setRelevantTableUuid:(NSString*) value {
  result.hasRelevantTableUuid = YES;
  result.relevantTableUuid = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearRelevantTableUuid {
  result.hasRelevantTableUuid = NO;
  result.relevantTableUuid = @"";
  return self;
}
- (BOOL) hasMonsterForUserUuid {
  return result.hasMonsterForUserUuid;
}
- (NSString*) monsterForUserUuid {
  return result.monsterForUserUuid;
}
- (UserMonsterSnapshotProto_Builder*) setMonsterForUserUuid:(NSString*) value {
  result.hasMonsterForUserUuid = YES;
  result.monsterForUserUuid = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearMonsterForUserUuid {
  result.hasMonsterForUserUuid = NO;
  result.monsterForUserUuid = @"";
  return self;
}
- (BOOL) hasUser {
  return result.hasUser;
}
- (MinimumUserProto*) user {
  return result.user;
}
- (UserMonsterSnapshotProto_Builder*) setUser:(MinimumUserProto*) value {
  result.hasUser = YES;
  result.user = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) setUser_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setUser:[builderForValue build]];
}
- (UserMonsterSnapshotProto_Builder*) mergeUser:(MinimumUserProto*) value {
  if (result.hasUser &&
      result.user != [MinimumUserProto defaultInstance]) {
    result.user =
      [[[MinimumUserProto builderWithPrototype:result.user] mergeFrom:value] buildPartial];
  } else {
    result.user = value;
  }
  result.hasUser = YES;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearUser {
  result.hasUser = NO;
  result.user = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (UserMonsterSnapshotProto_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasCurrentExp {
  return result.hasCurrentExp;
}
- (int32_t) currentExp {
  return result.currentExp;
}
- (UserMonsterSnapshotProto_Builder*) setCurrentExp:(int32_t) value {
  result.hasCurrentExp = YES;
  result.currentExp = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearCurrentExp {
  result.hasCurrentExp = NO;
  result.currentExp = 0;
  return self;
}
- (BOOL) hasCurrentLvl {
  return result.hasCurrentLvl;
}
- (int32_t) currentLvl {
  return result.currentLvl;
}
- (UserMonsterSnapshotProto_Builder*) setCurrentLvl:(int32_t) value {
  result.hasCurrentLvl = YES;
  result.currentLvl = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearCurrentLvl {
  result.hasCurrentLvl = NO;
  result.currentLvl = 0;
  return self;
}
- (BOOL) hasCurrentHp {
  return result.hasCurrentHp;
}
- (int32_t) currentHp {
  return result.currentHp;
}
- (UserMonsterSnapshotProto_Builder*) setCurrentHp:(int32_t) value {
  result.hasCurrentHp = YES;
  result.currentHp = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearCurrentHp {
  result.hasCurrentHp = NO;
  result.currentHp = 0;
  return self;
}
- (BOOL) hasTeamSlotNum {
  return result.hasTeamSlotNum;
}
- (int32_t) teamSlotNum {
  return result.teamSlotNum;
}
- (UserMonsterSnapshotProto_Builder*) setTeamSlotNum:(int32_t) value {
  result.hasTeamSlotNum = YES;
  result.teamSlotNum = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearTeamSlotNum {
  result.hasTeamSlotNum = NO;
  result.teamSlotNum = 0;
  return self;
}
- (BOOL) hasOffensiveSkillId {
  return result.hasOffensiveSkillId;
}
- (int32_t) offensiveSkillId {
  return result.offensiveSkillId;
}
- (UserMonsterSnapshotProto_Builder*) setOffensiveSkillId:(int32_t) value {
  result.hasOffensiveSkillId = YES;
  result.offensiveSkillId = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearOffensiveSkillId {
  result.hasOffensiveSkillId = NO;
  result.offensiveSkillId = 0;
  return self;
}
- (BOOL) hasDefensiveSkillId {
  return result.hasDefensiveSkillId;
}
- (int32_t) defensiveSkillId {
  return result.defensiveSkillId;
}
- (UserMonsterSnapshotProto_Builder*) setDefensiveSkillId:(int32_t) value {
  result.hasDefensiveSkillId = YES;
  result.defensiveSkillId = value;
  return self;
}
- (UserMonsterSnapshotProto_Builder*) clearDefensiveSkillId {
  result.hasDefensiveSkillId = NO;
  result.defensiveSkillId = 0;
  return self;
}
@end

@interface ClanMemberTeamDonationProto ()
@property (strong) NSString* donationUuid;
@property (strong) MinimumUserProto* solicitor;
@property (strong) NSString* clanUuid;
@property int32_t powerAvailability;
@property BOOL isFulfilled;
@property (strong) NSString* msg;
@property int64_t timeOfSolicitation;
@property (strong) NSMutableArray * mutableDonationsList;
@end

@implementation ClanMemberTeamDonationProto

- (BOOL) hasDonationUuid {
  return !!hasDonationUuid_;
}
- (void) setHasDonationUuid:(BOOL) value_ {
  hasDonationUuid_ = !!value_;
}
@synthesize donationUuid;
- (BOOL) hasSolicitor {
  return !!hasSolicitor_;
}
- (void) setHasSolicitor:(BOOL) value_ {
  hasSolicitor_ = !!value_;
}
@synthesize solicitor;
- (BOOL) hasClanUuid {
  return !!hasClanUuid_;
}
- (void) setHasClanUuid:(BOOL) value_ {
  hasClanUuid_ = !!value_;
}
@synthesize clanUuid;
- (BOOL) hasPowerAvailability {
  return !!hasPowerAvailability_;
}
- (void) setHasPowerAvailability:(BOOL) value_ {
  hasPowerAvailability_ = !!value_;
}
@synthesize powerAvailability;
- (BOOL) hasIsFulfilled {
  return !!hasIsFulfilled_;
}
- (void) setHasIsFulfilled:(BOOL) value_ {
  hasIsFulfilled_ = !!value_;
}
- (BOOL) isFulfilled {
  return !!isFulfilled_;
}
- (void) setIsFulfilled:(BOOL) value_ {
  isFulfilled_ = !!value_;
}
- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) value_ {
  hasMsg_ = !!value_;
}
@synthesize msg;
- (BOOL) hasTimeOfSolicitation {
  return !!hasTimeOfSolicitation_;
}
- (void) setHasTimeOfSolicitation:(BOOL) value_ {
  hasTimeOfSolicitation_ = !!value_;
}
@synthesize timeOfSolicitation;
@synthesize mutableDonationsList;
@dynamic donationsList;
- (id) init {
  if ((self = [super init])) {
    self.donationUuid = @"";
    self.solicitor = [MinimumUserProto defaultInstance];
    self.clanUuid = @"";
    self.powerAvailability = 0;
    self.isFulfilled = NO;
    self.msg = @"";
    self.timeOfSolicitation = 0L;
  }
  return self;
}
static ClanMemberTeamDonationProto* defaultClanMemberTeamDonationProtoInstance = nil;
+ (void) initialize {
  if (self == [ClanMemberTeamDonationProto class]) {
    defaultClanMemberTeamDonationProtoInstance = [[ClanMemberTeamDonationProto alloc] init];
  }
}
+ (ClanMemberTeamDonationProto*) defaultInstance {
  return defaultClanMemberTeamDonationProtoInstance;
}
- (ClanMemberTeamDonationProto*) defaultInstance {
  return defaultClanMemberTeamDonationProtoInstance;
}
- (NSArray *)donationsList {
  return mutableDonationsList;
}
- (UserMonsterSnapshotProto*)donationsAtIndex:(NSUInteger)index {
  return [mutableDonationsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasDonationUuid) {
    [output writeString:1 value:self.donationUuid];
  }
  if (self.hasSolicitor) {
    [output writeMessage:2 value:self.solicitor];
  }
  if (self.hasClanUuid) {
    [output writeString:3 value:self.clanUuid];
  }
  if (self.hasPowerAvailability) {
    [output writeInt32:4 value:self.powerAvailability];
  }
  if (self.hasIsFulfilled) {
    [output writeBool:5 value:self.isFulfilled];
  }
  if (self.hasMsg) {
    [output writeString:6 value:self.msg];
  }
  if (self.hasTimeOfSolicitation) {
    [output writeInt64:7 value:self.timeOfSolicitation];
  }
  [self.donationsList enumerateObjectsUsingBlock:^(UserMonsterSnapshotProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasDonationUuid) {
    size_ += computeStringSize(1, self.donationUuid);
  }
  if (self.hasSolicitor) {
    size_ += computeMessageSize(2, self.solicitor);
  }
  if (self.hasClanUuid) {
    size_ += computeStringSize(3, self.clanUuid);
  }
  if (self.hasPowerAvailability) {
    size_ += computeInt32Size(4, self.powerAvailability);
  }
  if (self.hasIsFulfilled) {
    size_ += computeBoolSize(5, self.isFulfilled);
  }
  if (self.hasMsg) {
    size_ += computeStringSize(6, self.msg);
  }
  if (self.hasTimeOfSolicitation) {
    size_ += computeInt64Size(7, self.timeOfSolicitation);
  }
  [self.donationsList enumerateObjectsUsingBlock:^(UserMonsterSnapshotProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ClanMemberTeamDonationProto*) parseFromData:(NSData*) data {
  return (ClanMemberTeamDonationProto*)[[[ClanMemberTeamDonationProto builder] mergeFromData:data] build];
}
+ (ClanMemberTeamDonationProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClanMemberTeamDonationProto*)[[[ClanMemberTeamDonationProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ClanMemberTeamDonationProto*) parseFromInputStream:(NSInputStream*) input {
  return (ClanMemberTeamDonationProto*)[[[ClanMemberTeamDonationProto builder] mergeFromInputStream:input] build];
}
+ (ClanMemberTeamDonationProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClanMemberTeamDonationProto*)[[[ClanMemberTeamDonationProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClanMemberTeamDonationProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ClanMemberTeamDonationProto*)[[[ClanMemberTeamDonationProto builder] mergeFromCodedInputStream:input] build];
}
+ (ClanMemberTeamDonationProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ClanMemberTeamDonationProto*)[[[ClanMemberTeamDonationProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ClanMemberTeamDonationProto_Builder*) builder {
  return [[ClanMemberTeamDonationProto_Builder alloc] init];
}
+ (ClanMemberTeamDonationProto_Builder*) builderWithPrototype:(ClanMemberTeamDonationProto*) prototype {
  return [[ClanMemberTeamDonationProto builder] mergeFrom:prototype];
}
- (ClanMemberTeamDonationProto_Builder*) builder {
  return [ClanMemberTeamDonationProto builder];
}
- (ClanMemberTeamDonationProto_Builder*) toBuilder {
  return [ClanMemberTeamDonationProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasDonationUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"donationUuid", self.donationUuid];
  }
  if (self.hasSolicitor) {
    [output appendFormat:@"%@%@ {\n", indent, @"solicitor"];
    [self.solicitor writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasClanUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clanUuid", self.clanUuid];
  }
  if (self.hasPowerAvailability) {
    [output appendFormat:@"%@%@: %@\n", indent, @"powerAvailability", [NSNumber numberWithInteger:self.powerAvailability]];
  }
  if (self.hasIsFulfilled) {
    [output appendFormat:@"%@%@: %@\n", indent, @"isFulfilled", [NSNumber numberWithBool:self.isFulfilled]];
  }
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasTimeOfSolicitation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeOfSolicitation", [NSNumber numberWithLongLong:self.timeOfSolicitation]];
  }
  [self.donationsList enumerateObjectsUsingBlock:^(UserMonsterSnapshotProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"donations"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ClanMemberTeamDonationProto class]]) {
    return NO;
  }
  ClanMemberTeamDonationProto *otherMessage = other;
  return
      self.hasDonationUuid == otherMessage.hasDonationUuid &&
      (!self.hasDonationUuid || [self.donationUuid isEqual:otherMessage.donationUuid]) &&
      self.hasSolicitor == otherMessage.hasSolicitor &&
      (!self.hasSolicitor || [self.solicitor isEqual:otherMessage.solicitor]) &&
      self.hasClanUuid == otherMessage.hasClanUuid &&
      (!self.hasClanUuid || [self.clanUuid isEqual:otherMessage.clanUuid]) &&
      self.hasPowerAvailability == otherMessage.hasPowerAvailability &&
      (!self.hasPowerAvailability || self.powerAvailability == otherMessage.powerAvailability) &&
      self.hasIsFulfilled == otherMessage.hasIsFulfilled &&
      (!self.hasIsFulfilled || self.isFulfilled == otherMessage.isFulfilled) &&
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasTimeOfSolicitation == otherMessage.hasTimeOfSolicitation &&
      (!self.hasTimeOfSolicitation || self.timeOfSolicitation == otherMessage.timeOfSolicitation) &&
      [self.donationsList isEqualToArray:otherMessage.donationsList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasDonationUuid) {
    hashCode = hashCode * 31 + [self.donationUuid hash];
  }
  if (self.hasSolicitor) {
    hashCode = hashCode * 31 + [self.solicitor hash];
  }
  if (self.hasClanUuid) {
    hashCode = hashCode * 31 + [self.clanUuid hash];
  }
  if (self.hasPowerAvailability) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.powerAvailability] hash];
  }
  if (self.hasIsFulfilled) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.isFulfilled] hash];
  }
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasTimeOfSolicitation) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timeOfSolicitation] hash];
  }
  [self.donationsList enumerateObjectsUsingBlock:^(UserMonsterSnapshotProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ClanMemberTeamDonationProto_Builder()
@property (strong) ClanMemberTeamDonationProto* result;
@end

@implementation ClanMemberTeamDonationProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[ClanMemberTeamDonationProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (ClanMemberTeamDonationProto_Builder*) clear {
  self.result = [[ClanMemberTeamDonationProto alloc] init];
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clone {
  return [ClanMemberTeamDonationProto builderWithPrototype:result];
}
- (ClanMemberTeamDonationProto*) defaultInstance {
  return [ClanMemberTeamDonationProto defaultInstance];
}
- (ClanMemberTeamDonationProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ClanMemberTeamDonationProto*) buildPartial {
  ClanMemberTeamDonationProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (ClanMemberTeamDonationProto_Builder*) mergeFrom:(ClanMemberTeamDonationProto*) other {
  if (other == [ClanMemberTeamDonationProto defaultInstance]) {
    return self;
  }
  if (other.hasDonationUuid) {
    [self setDonationUuid:other.donationUuid];
  }
  if (other.hasSolicitor) {
    [self mergeSolicitor:other.solicitor];
  }
  if (other.hasClanUuid) {
    [self setClanUuid:other.clanUuid];
  }
  if (other.hasPowerAvailability) {
    [self setPowerAvailability:other.powerAvailability];
  }
  if (other.hasIsFulfilled) {
    [self setIsFulfilled:other.isFulfilled];
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasTimeOfSolicitation) {
    [self setTimeOfSolicitation:other.timeOfSolicitation];
  }
  if (other.mutableDonationsList.count > 0) {
    if (result.mutableDonationsList == nil) {
      result.mutableDonationsList = [[NSMutableArray alloc] initWithArray:other.mutableDonationsList];
    } else {
      [result.mutableDonationsList addObjectsFromArray:other.mutableDonationsList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ClanMemberTeamDonationProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setDonationUuid:[input readString]];
        break;
      }
      case 18: {
        MinimumUserProto_Builder* subBuilder = [MinimumUserProto builder];
        if (self.hasSolicitor) {
          [subBuilder mergeFrom:self.solicitor];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSolicitor:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        [self setClanUuid:[input readString]];
        break;
      }
      case 32: {
        [self setPowerAvailability:[input readInt32]];
        break;
      }
      case 40: {
        [self setIsFulfilled:[input readBool]];
        break;
      }
      case 50: {
        [self setMsg:[input readString]];
        break;
      }
      case 56: {
        [self setTimeOfSolicitation:[input readInt64]];
        break;
      }
      case 66: {
        UserMonsterSnapshotProto_Builder* subBuilder = [UserMonsterSnapshotProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addDonations:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasDonationUuid {
  return result.hasDonationUuid;
}
- (NSString*) donationUuid {
  return result.donationUuid;
}
- (ClanMemberTeamDonationProto_Builder*) setDonationUuid:(NSString*) value {
  result.hasDonationUuid = YES;
  result.donationUuid = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearDonationUuid {
  result.hasDonationUuid = NO;
  result.donationUuid = @"";
  return self;
}
- (BOOL) hasSolicitor {
  return result.hasSolicitor;
}
- (MinimumUserProto*) solicitor {
  return result.solicitor;
}
- (ClanMemberTeamDonationProto_Builder*) setSolicitor:(MinimumUserProto*) value {
  result.hasSolicitor = YES;
  result.solicitor = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) setSolicitor_Builder:(MinimumUserProto_Builder*) builderForValue {
  return [self setSolicitor:[builderForValue build]];
}
- (ClanMemberTeamDonationProto_Builder*) mergeSolicitor:(MinimumUserProto*) value {
  if (result.hasSolicitor &&
      result.solicitor != [MinimumUserProto defaultInstance]) {
    result.solicitor =
      [[[MinimumUserProto builderWithPrototype:result.solicitor] mergeFrom:value] buildPartial];
  } else {
    result.solicitor = value;
  }
  result.hasSolicitor = YES;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearSolicitor {
  result.hasSolicitor = NO;
  result.solicitor = [MinimumUserProto defaultInstance];
  return self;
}
- (BOOL) hasClanUuid {
  return result.hasClanUuid;
}
- (NSString*) clanUuid {
  return result.clanUuid;
}
- (ClanMemberTeamDonationProto_Builder*) setClanUuid:(NSString*) value {
  result.hasClanUuid = YES;
  result.clanUuid = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearClanUuid {
  result.hasClanUuid = NO;
  result.clanUuid = @"";
  return self;
}
- (BOOL) hasPowerAvailability {
  return result.hasPowerAvailability;
}
- (int32_t) powerAvailability {
  return result.powerAvailability;
}
- (ClanMemberTeamDonationProto_Builder*) setPowerAvailability:(int32_t) value {
  result.hasPowerAvailability = YES;
  result.powerAvailability = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearPowerAvailability {
  result.hasPowerAvailability = NO;
  result.powerAvailability = 0;
  return self;
}
- (BOOL) hasIsFulfilled {
  return result.hasIsFulfilled;
}
- (BOOL) isFulfilled {
  return result.isFulfilled;
}
- (ClanMemberTeamDonationProto_Builder*) setIsFulfilled:(BOOL) value {
  result.hasIsFulfilled = YES;
  result.isFulfilled = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearIsFulfilled {
  result.hasIsFulfilled = NO;
  result.isFulfilled = NO;
  return self;
}
- (BOOL) hasMsg {
  return result.hasMsg;
}
- (NSString*) msg {
  return result.msg;
}
- (ClanMemberTeamDonationProto_Builder*) setMsg:(NSString*) value {
  result.hasMsg = YES;
  result.msg = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearMsg {
  result.hasMsg = NO;
  result.msg = @"";
  return self;
}
- (BOOL) hasTimeOfSolicitation {
  return result.hasTimeOfSolicitation;
}
- (int64_t) timeOfSolicitation {
  return result.timeOfSolicitation;
}
- (ClanMemberTeamDonationProto_Builder*) setTimeOfSolicitation:(int64_t) value {
  result.hasTimeOfSolicitation = YES;
  result.timeOfSolicitation = value;
  return self;
}
- (ClanMemberTeamDonationProto_Builder*) clearTimeOfSolicitation {
  result.hasTimeOfSolicitation = NO;
  result.timeOfSolicitation = 0L;
  return self;
}
- (NSMutableArray *)donationsList {
  return result.mutableDonationsList;
}
- (UserMonsterSnapshotProto*)donationsAtIndex:(NSUInteger)index {
  return [result donationsAtIndex:index];
}
- (ClanMemberTeamDonationProto_Builder *)addDonations:(UserMonsterSnapshotProto*)value {
  if (result.mutableDonationsList == nil) {
    result.mutableDonationsList = [[NSMutableArray alloc]init];
  }
  [result.mutableDonationsList addObject:value];
  return self;
}
- (ClanMemberTeamDonationProto_Builder *)addAllDonations:(NSArray *)array {
  if (result.mutableDonationsList == nil) {
    result.mutableDonationsList = [NSMutableArray array];
  }
  [result.mutableDonationsList addObjectsFromArray:array];
  return self;
}
- (ClanMemberTeamDonationProto_Builder *)clearDonations {
  result.mutableDonationsList = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
