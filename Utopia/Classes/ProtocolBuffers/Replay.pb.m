// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Replay.pb.h"
// @@protoc_insertion_point(imports)

@implementation ReplayRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ReplayRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [BoardRoot registerAllExtensions:registry];
    [SharedEnumConfigRoot registerAllExtensions:registry];
    [SkillRoot registerAllExtensions:registry];
    [StructureRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL CombatReplayStepTypeIsValidValue(CombatReplayStepType value) {
  switch (value) {
    case CombatReplayStepTypeBattleInitialization:
    case CombatReplayStepTypeSpawnEnemy:
    case CombatReplayStepTypeNextTurn:
    case CombatReplayStepTypePlayerTurn:
    case CombatReplayStepTypePlayerMove:
    case CombatReplayStepTypePlayerAttack:
    case CombatReplayStepTypeEnemyTurn:
    case CombatReplayStepTypePlayerSwap:
    case CombatReplayStepTypePlayerDeath:
    case CombatReplayStepTypePlayerRevive:
    case CombatReplayStepTypeEnemyDeath:
    case CombatReplayStepTypePlayerVictory:
    case CombatReplayStepTypePlayerRun:
    case CombatReplayStepTypePlayerLose:
      return YES;
    default:
      return NO;
  }
}
@interface CombatReplayProto ()
@property (strong) NSString* replayUuid;
@property (strong) NSString* groundImgPrefix;
@property int32_t firstAttackerMonsterId;
@property (strong) NSMutableArray * mutablePlayerTeamList;
@property (strong) NSMutableArray * mutableEnemyTeamList;
@property (strong) NSMutableArray * mutableStepsList;
@property (strong) BoardLayoutProto* board;
@property (strong) NSMutableArray * mutableOrbsList;
@property int32_t boardWidth;
@property int32_t boardHeight;
@property (strong) NSMutableArray * mutablePvpObstaclesList;
@property (strong) NSMutableArray * mutableBoardPropertiesList;
@end

@implementation CombatReplayProto

- (BOOL) hasReplayUuid {
  return !!hasReplayUuid_;
}
- (void) setHasReplayUuid:(BOOL) value_ {
  hasReplayUuid_ = !!value_;
}
@synthesize replayUuid;
- (BOOL) hasGroundImgPrefix {
  return !!hasGroundImgPrefix_;
}
- (void) setHasGroundImgPrefix:(BOOL) value_ {
  hasGroundImgPrefix_ = !!value_;
}
@synthesize groundImgPrefix;
- (BOOL) hasFirstAttackerMonsterId {
  return !!hasFirstAttackerMonsterId_;
}
- (void) setHasFirstAttackerMonsterId:(BOOL) value_ {
  hasFirstAttackerMonsterId_ = !!value_;
}
@synthesize firstAttackerMonsterId;
@synthesize mutablePlayerTeamList;
@dynamic playerTeamList;
@synthesize mutableEnemyTeamList;
@dynamic enemyTeamList;
@synthesize mutableStepsList;
@dynamic stepsList;
- (BOOL) hasBoard {
  return !!hasBoard_;
}
- (void) setHasBoard:(BOOL) value_ {
  hasBoard_ = !!value_;
}
@synthesize board;
@synthesize mutableOrbsList;
@dynamic orbsList;
- (BOOL) hasBoardWidth {
  return !!hasBoardWidth_;
}
- (void) setHasBoardWidth:(BOOL) value_ {
  hasBoardWidth_ = !!value_;
}
@synthesize boardWidth;
- (BOOL) hasBoardHeight {
  return !!hasBoardHeight_;
}
- (void) setHasBoardHeight:(BOOL) value_ {
  hasBoardHeight_ = !!value_;
}
@synthesize boardHeight;
@synthesize mutablePvpObstaclesList;
@dynamic pvpObstaclesList;
@synthesize mutableBoardPropertiesList;
@dynamic boardPropertiesList;
- (id) init {
  if ((self = [super init])) {
    self.replayUuid = @"";
    self.groundImgPrefix = @"";
    self.firstAttackerMonsterId = 0;
    self.board = [BoardLayoutProto defaultInstance];
    self.boardWidth = 0;
    self.boardHeight = 0;
  }
  return self;
}
static CombatReplayProto* defaultCombatReplayProtoInstance = nil;
+ (void) initialize {
  if (self == [CombatReplayProto class]) {
    defaultCombatReplayProtoInstance = [[CombatReplayProto alloc] init];
  }
}
+ (CombatReplayProto*) defaultInstance {
  return defaultCombatReplayProtoInstance;
}
- (CombatReplayProto*) defaultInstance {
  return defaultCombatReplayProtoInstance;
}
- (NSArray *)playerTeamList {
  return mutablePlayerTeamList;
}
- (CombatReplayMonsterSnapshot*)playerTeamAtIndex:(NSUInteger)index {
  return [mutablePlayerTeamList objectAtIndex:index];
}
- (NSArray *)enemyTeamList {
  return mutableEnemyTeamList;
}
- (CombatReplayMonsterSnapshot*)enemyTeamAtIndex:(NSUInteger)index {
  return [mutableEnemyTeamList objectAtIndex:index];
}
- (NSArray *)stepsList {
  return mutableStepsList;
}
- (CombatReplayStepProto*)stepsAtIndex:(NSUInteger)index {
  return [mutableStepsList objectAtIndex:index];
}
- (NSArray *)orbsList {
  return mutableOrbsList;
}
- (CombatReplayOrbProto*)orbsAtIndex:(NSUInteger)index {
  return [mutableOrbsList objectAtIndex:index];
}
- (NSArray *)pvpObstaclesList {
  return mutablePvpObstaclesList;
}
- (PvpBoardObstacleProto*)pvpObstaclesAtIndex:(NSUInteger)index {
  return [mutablePvpObstaclesList objectAtIndex:index];
}
- (NSArray *)boardPropertiesList {
  return mutableBoardPropertiesList;
}
- (BoardPropertyProto*)boardPropertiesAtIndex:(NSUInteger)index {
  return [mutableBoardPropertiesList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReplayUuid) {
    [output writeString:1 value:self.replayUuid];
  }
  if (self.hasGroundImgPrefix) {
    [output writeString:2 value:self.groundImgPrefix];
  }
  if (self.hasFirstAttackerMonsterId) {
    [output writeInt32:3 value:self.firstAttackerMonsterId];
  }
  [self.playerTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.enemyTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.stepsList enumerateObjectsUsingBlock:^(CombatReplayStepProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  if (self.hasBoard) {
    [output writeMessage:7 value:self.board];
  }
  [self.orbsList enumerateObjectsUsingBlock:^(CombatReplayOrbProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  if (self.hasBoardWidth) {
    [output writeInt32:9 value:self.boardWidth];
  }
  if (self.hasBoardHeight) {
    [output writeInt32:10 value:self.boardHeight];
  }
  [self.pvpObstaclesList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.boardPropertiesList enumerateObjectsUsingBlock:^(BoardPropertyProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:12 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReplayUuid) {
    size_ += computeStringSize(1, self.replayUuid);
  }
  if (self.hasGroundImgPrefix) {
    size_ += computeStringSize(2, self.groundImgPrefix);
  }
  if (self.hasFirstAttackerMonsterId) {
    size_ += computeInt32Size(3, self.firstAttackerMonsterId);
  }
  [self.playerTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.enemyTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.stepsList enumerateObjectsUsingBlock:^(CombatReplayStepProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  if (self.hasBoard) {
    size_ += computeMessageSize(7, self.board);
  }
  [self.orbsList enumerateObjectsUsingBlock:^(CombatReplayOrbProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  if (self.hasBoardWidth) {
    size_ += computeInt32Size(9, self.boardWidth);
  }
  if (self.hasBoardHeight) {
    size_ += computeInt32Size(10, self.boardHeight);
  }
  [self.pvpObstaclesList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  [self.boardPropertiesList enumerateObjectsUsingBlock:^(BoardPropertyProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(12, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CombatReplayProto*) parseFromData:(NSData*) data {
  return (CombatReplayProto*)[[[CombatReplayProto builder] mergeFromData:data] build];
}
+ (CombatReplayProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayProto*)[[[CombatReplayProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayProto*) parseFromInputStream:(NSInputStream*) input {
  return (CombatReplayProto*)[[[CombatReplayProto builder] mergeFromInputStream:input] build];
}
+ (CombatReplayProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayProto*)[[[CombatReplayProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CombatReplayProto*)[[[CombatReplayProto builder] mergeFromCodedInputStream:input] build];
}
+ (CombatReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayProto*)[[[CombatReplayProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayProto_Builder*) builder {
  return [[CombatReplayProto_Builder alloc] init];
}
+ (CombatReplayProto_Builder*) builderWithPrototype:(CombatReplayProto*) prototype {
  return [[CombatReplayProto builder] mergeFrom:prototype];
}
- (CombatReplayProto_Builder*) builder {
  return [CombatReplayProto builder];
}
- (CombatReplayProto_Builder*) toBuilder {
  return [CombatReplayProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReplayUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replayUuid", self.replayUuid];
  }
  if (self.hasGroundImgPrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groundImgPrefix", self.groundImgPrefix];
  }
  if (self.hasFirstAttackerMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"firstAttackerMonsterId", [NSNumber numberWithInteger:self.firstAttackerMonsterId]];
  }
  [self.playerTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"playerTeam"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.enemyTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"enemyTeam"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.stepsList enumerateObjectsUsingBlock:^(CombatReplayStepProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"steps"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBoard) {
    [output appendFormat:@"%@%@ {\n", indent, @"board"];
    [self.board writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.orbsList enumerateObjectsUsingBlock:^(CombatReplayOrbProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"orbs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasBoardWidth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardWidth", [NSNumber numberWithInteger:self.boardWidth]];
  }
  if (self.hasBoardHeight) {
    [output appendFormat:@"%@%@: %@\n", indent, @"boardHeight", [NSNumber numberWithInteger:self.boardHeight]];
  }
  [self.pvpObstaclesList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"pvpObstacles"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.boardPropertiesList enumerateObjectsUsingBlock:^(BoardPropertyProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"boardProperties"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CombatReplayProto class]]) {
    return NO;
  }
  CombatReplayProto *otherMessage = other;
  return
      self.hasReplayUuid == otherMessage.hasReplayUuid &&
      (!self.hasReplayUuid || [self.replayUuid isEqual:otherMessage.replayUuid]) &&
      self.hasGroundImgPrefix == otherMessage.hasGroundImgPrefix &&
      (!self.hasGroundImgPrefix || [self.groundImgPrefix isEqual:otherMessage.groundImgPrefix]) &&
      self.hasFirstAttackerMonsterId == otherMessage.hasFirstAttackerMonsterId &&
      (!self.hasFirstAttackerMonsterId || self.firstAttackerMonsterId == otherMessage.firstAttackerMonsterId) &&
      [self.playerTeamList isEqualToArray:otherMessage.playerTeamList] &&
      [self.enemyTeamList isEqualToArray:otherMessage.enemyTeamList] &&
      [self.stepsList isEqualToArray:otherMessage.stepsList] &&
      self.hasBoard == otherMessage.hasBoard &&
      (!self.hasBoard || [self.board isEqual:otherMessage.board]) &&
      [self.orbsList isEqualToArray:otherMessage.orbsList] &&
      self.hasBoardWidth == otherMessage.hasBoardWidth &&
      (!self.hasBoardWidth || self.boardWidth == otherMessage.boardWidth) &&
      self.hasBoardHeight == otherMessage.hasBoardHeight &&
      (!self.hasBoardHeight || self.boardHeight == otherMessage.boardHeight) &&
      [self.pvpObstaclesList isEqualToArray:otherMessage.pvpObstaclesList] &&
      [self.boardPropertiesList isEqualToArray:otherMessage.boardPropertiesList] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReplayUuid) {
    hashCode = hashCode * 31 + [self.replayUuid hash];
  }
  if (self.hasGroundImgPrefix) {
    hashCode = hashCode * 31 + [self.groundImgPrefix hash];
  }
  if (self.hasFirstAttackerMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.firstAttackerMonsterId] hash];
  }
  [self.playerTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.enemyTeamList enumerateObjectsUsingBlock:^(CombatReplayMonsterSnapshot *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.stepsList enumerateObjectsUsingBlock:^(CombatReplayStepProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBoard) {
    hashCode = hashCode * 31 + [self.board hash];
  }
  [self.orbsList enumerateObjectsUsingBlock:^(CombatReplayOrbProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasBoardWidth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.boardWidth] hash];
  }
  if (self.hasBoardHeight) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.boardHeight] hash];
  }
  [self.pvpObstaclesList enumerateObjectsUsingBlock:^(PvpBoardObstacleProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.boardPropertiesList enumerateObjectsUsingBlock:^(BoardPropertyProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CombatReplayProto_Builder()
@property (strong) CombatReplayProto* result;
@end

@implementation CombatReplayProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CombatReplayProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CombatReplayProto_Builder*) clear {
  self.result = [[CombatReplayProto alloc] init];
  return self;
}
- (CombatReplayProto_Builder*) clone {
  return [CombatReplayProto builderWithPrototype:result];
}
- (CombatReplayProto*) defaultInstance {
  return [CombatReplayProto defaultInstance];
}
- (CombatReplayProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CombatReplayProto*) buildPartial {
  CombatReplayProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CombatReplayProto_Builder*) mergeFrom:(CombatReplayProto*) other {
  if (other == [CombatReplayProto defaultInstance]) {
    return self;
  }
  if (other.hasReplayUuid) {
    [self setReplayUuid:other.replayUuid];
  }
  if (other.hasGroundImgPrefix) {
    [self setGroundImgPrefix:other.groundImgPrefix];
  }
  if (other.hasFirstAttackerMonsterId) {
    [self setFirstAttackerMonsterId:other.firstAttackerMonsterId];
  }
  if (other.mutablePlayerTeamList.count > 0) {
    if (result.mutablePlayerTeamList == nil) {
      result.mutablePlayerTeamList = [[NSMutableArray alloc] initWithArray:other.mutablePlayerTeamList];
    } else {
      [result.mutablePlayerTeamList addObjectsFromArray:other.mutablePlayerTeamList];
    }
  }
  if (other.mutableEnemyTeamList.count > 0) {
    if (result.mutableEnemyTeamList == nil) {
      result.mutableEnemyTeamList = [[NSMutableArray alloc] initWithArray:other.mutableEnemyTeamList];
    } else {
      [result.mutableEnemyTeamList addObjectsFromArray:other.mutableEnemyTeamList];
    }
  }
  if (other.mutableStepsList.count > 0) {
    if (result.mutableStepsList == nil) {
      result.mutableStepsList = [[NSMutableArray alloc] initWithArray:other.mutableStepsList];
    } else {
      [result.mutableStepsList addObjectsFromArray:other.mutableStepsList];
    }
  }
  if (other.hasBoard) {
    [self mergeBoard:other.board];
  }
  if (other.mutableOrbsList.count > 0) {
    if (result.mutableOrbsList == nil) {
      result.mutableOrbsList = [[NSMutableArray alloc] initWithArray:other.mutableOrbsList];
    } else {
      [result.mutableOrbsList addObjectsFromArray:other.mutableOrbsList];
    }
  }
  if (other.hasBoardWidth) {
    [self setBoardWidth:other.boardWidth];
  }
  if (other.hasBoardHeight) {
    [self setBoardHeight:other.boardHeight];
  }
  if (other.mutablePvpObstaclesList.count > 0) {
    if (result.mutablePvpObstaclesList == nil) {
      result.mutablePvpObstaclesList = [[NSMutableArray alloc] initWithArray:other.mutablePvpObstaclesList];
    } else {
      [result.mutablePvpObstaclesList addObjectsFromArray:other.mutablePvpObstaclesList];
    }
  }
  if (other.mutableBoardPropertiesList.count > 0) {
    if (result.mutableBoardPropertiesList == nil) {
      result.mutableBoardPropertiesList = [[NSMutableArray alloc] initWithArray:other.mutableBoardPropertiesList];
    } else {
      [result.mutableBoardPropertiesList addObjectsFromArray:other.mutableBoardPropertiesList];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CombatReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CombatReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setReplayUuid:[input readString]];
        break;
      }
      case 18: {
        [self setGroundImgPrefix:[input readString]];
        break;
      }
      case 24: {
        [self setFirstAttackerMonsterId:[input readInt32]];
        break;
      }
      case 34: {
        CombatReplayMonsterSnapshot_Builder* subBuilder = [CombatReplayMonsterSnapshot builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPlayerTeam:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        CombatReplayMonsterSnapshot_Builder* subBuilder = [CombatReplayMonsterSnapshot builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addEnemyTeam:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        CombatReplayStepProto_Builder* subBuilder = [CombatReplayStepProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSteps:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        BoardLayoutProto_Builder* subBuilder = [BoardLayoutProto builder];
        if (self.hasBoard) {
          [subBuilder mergeFrom:self.board];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBoard:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        CombatReplayOrbProto_Builder* subBuilder = [CombatReplayOrbProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addOrbs:[subBuilder buildPartial]];
        break;
      }
      case 72: {
        [self setBoardWidth:[input readInt32]];
        break;
      }
      case 80: {
        [self setBoardHeight:[input readInt32]];
        break;
      }
      case 90: {
        PvpBoardObstacleProto_Builder* subBuilder = [PvpBoardObstacleProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPvpObstacles:[subBuilder buildPartial]];
        break;
      }
      case 98: {
        BoardPropertyProto_Builder* subBuilder = [BoardPropertyProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addBoardProperties:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasReplayUuid {
  return result.hasReplayUuid;
}
- (NSString*) replayUuid {
  return result.replayUuid;
}
- (CombatReplayProto_Builder*) setReplayUuid:(NSString*) value {
  result.hasReplayUuid = YES;
  result.replayUuid = value;
  return self;
}
- (CombatReplayProto_Builder*) clearReplayUuid {
  result.hasReplayUuid = NO;
  result.replayUuid = @"";
  return self;
}
- (BOOL) hasGroundImgPrefix {
  return result.hasGroundImgPrefix;
}
- (NSString*) groundImgPrefix {
  return result.groundImgPrefix;
}
- (CombatReplayProto_Builder*) setGroundImgPrefix:(NSString*) value {
  result.hasGroundImgPrefix = YES;
  result.groundImgPrefix = value;
  return self;
}
- (CombatReplayProto_Builder*) clearGroundImgPrefix {
  result.hasGroundImgPrefix = NO;
  result.groundImgPrefix = @"";
  return self;
}
- (BOOL) hasFirstAttackerMonsterId {
  return result.hasFirstAttackerMonsterId;
}
- (int32_t) firstAttackerMonsterId {
  return result.firstAttackerMonsterId;
}
- (CombatReplayProto_Builder*) setFirstAttackerMonsterId:(int32_t) value {
  result.hasFirstAttackerMonsterId = YES;
  result.firstAttackerMonsterId = value;
  return self;
}
- (CombatReplayProto_Builder*) clearFirstAttackerMonsterId {
  result.hasFirstAttackerMonsterId = NO;
  result.firstAttackerMonsterId = 0;
  return self;
}
- (NSMutableArray *)playerTeamList {
  return result.mutablePlayerTeamList;
}
- (CombatReplayMonsterSnapshot*)playerTeamAtIndex:(NSUInteger)index {
  return [result playerTeamAtIndex:index];
}
- (CombatReplayProto_Builder *)addPlayerTeam:(CombatReplayMonsterSnapshot*)value {
  if (result.mutablePlayerTeamList == nil) {
    result.mutablePlayerTeamList = [[NSMutableArray alloc]init];
  }
  [result.mutablePlayerTeamList addObject:value];
  return self;
}
- (CombatReplayProto_Builder *)addAllPlayerTeam:(NSArray *)array {
  if (result.mutablePlayerTeamList == nil) {
    result.mutablePlayerTeamList = [NSMutableArray array];
  }
  [result.mutablePlayerTeamList addObjectsFromArray:array];
  return self;
}
- (CombatReplayProto_Builder *)clearPlayerTeam {
  result.mutablePlayerTeamList = nil;
  return self;
}
- (NSMutableArray *)enemyTeamList {
  return result.mutableEnemyTeamList;
}
- (CombatReplayMonsterSnapshot*)enemyTeamAtIndex:(NSUInteger)index {
  return [result enemyTeamAtIndex:index];
}
- (CombatReplayProto_Builder *)addEnemyTeam:(CombatReplayMonsterSnapshot*)value {
  if (result.mutableEnemyTeamList == nil) {
    result.mutableEnemyTeamList = [[NSMutableArray alloc]init];
  }
  [result.mutableEnemyTeamList addObject:value];
  return self;
}
- (CombatReplayProto_Builder *)addAllEnemyTeam:(NSArray *)array {
  if (result.mutableEnemyTeamList == nil) {
    result.mutableEnemyTeamList = [NSMutableArray array];
  }
  [result.mutableEnemyTeamList addObjectsFromArray:array];
  return self;
}
- (CombatReplayProto_Builder *)clearEnemyTeam {
  result.mutableEnemyTeamList = nil;
  return self;
}
- (NSMutableArray *)stepsList {
  return result.mutableStepsList;
}
- (CombatReplayStepProto*)stepsAtIndex:(NSUInteger)index {
  return [result stepsAtIndex:index];
}
- (CombatReplayProto_Builder *)addSteps:(CombatReplayStepProto*)value {
  if (result.mutableStepsList == nil) {
    result.mutableStepsList = [[NSMutableArray alloc]init];
  }
  [result.mutableStepsList addObject:value];
  return self;
}
- (CombatReplayProto_Builder *)addAllSteps:(NSArray *)array {
  if (result.mutableStepsList == nil) {
    result.mutableStepsList = [NSMutableArray array];
  }
  [result.mutableStepsList addObjectsFromArray:array];
  return self;
}
- (CombatReplayProto_Builder *)clearSteps {
  result.mutableStepsList = nil;
  return self;
}
- (BOOL) hasBoard {
  return result.hasBoard;
}
- (BoardLayoutProto*) board {
  return result.board;
}
- (CombatReplayProto_Builder*) setBoard:(BoardLayoutProto*) value {
  result.hasBoard = YES;
  result.board = value;
  return self;
}
- (CombatReplayProto_Builder*) setBoard_Builder:(BoardLayoutProto_Builder*) builderForValue {
  return [self setBoard:[builderForValue build]];
}
- (CombatReplayProto_Builder*) mergeBoard:(BoardLayoutProto*) value {
  if (result.hasBoard &&
      result.board != [BoardLayoutProto defaultInstance]) {
    result.board =
      [[[BoardLayoutProto builderWithPrototype:result.board] mergeFrom:value] buildPartial];
  } else {
    result.board = value;
  }
  result.hasBoard = YES;
  return self;
}
- (CombatReplayProto_Builder*) clearBoard {
  result.hasBoard = NO;
  result.board = [BoardLayoutProto defaultInstance];
  return self;
}
- (NSMutableArray *)orbsList {
  return result.mutableOrbsList;
}
- (CombatReplayOrbProto*)orbsAtIndex:(NSUInteger)index {
  return [result orbsAtIndex:index];
}
- (CombatReplayProto_Builder *)addOrbs:(CombatReplayOrbProto*)value {
  if (result.mutableOrbsList == nil) {
    result.mutableOrbsList = [[NSMutableArray alloc]init];
  }
  [result.mutableOrbsList addObject:value];
  return self;
}
- (CombatReplayProto_Builder *)addAllOrbs:(NSArray *)array {
  if (result.mutableOrbsList == nil) {
    result.mutableOrbsList = [NSMutableArray array];
  }
  [result.mutableOrbsList addObjectsFromArray:array];
  return self;
}
- (CombatReplayProto_Builder *)clearOrbs {
  result.mutableOrbsList = nil;
  return self;
}
- (BOOL) hasBoardWidth {
  return result.hasBoardWidth;
}
- (int32_t) boardWidth {
  return result.boardWidth;
}
- (CombatReplayProto_Builder*) setBoardWidth:(int32_t) value {
  result.hasBoardWidth = YES;
  result.boardWidth = value;
  return self;
}
- (CombatReplayProto_Builder*) clearBoardWidth {
  result.hasBoardWidth = NO;
  result.boardWidth = 0;
  return self;
}
- (BOOL) hasBoardHeight {
  return result.hasBoardHeight;
}
- (int32_t) boardHeight {
  return result.boardHeight;
}
- (CombatReplayProto_Builder*) setBoardHeight:(int32_t) value {
  result.hasBoardHeight = YES;
  result.boardHeight = value;
  return self;
}
- (CombatReplayProto_Builder*) clearBoardHeight {
  result.hasBoardHeight = NO;
  result.boardHeight = 0;
  return self;
}
- (NSMutableArray *)pvpObstaclesList {
  return result.mutablePvpObstaclesList;
}
- (PvpBoardObstacleProto*)pvpObstaclesAtIndex:(NSUInteger)index {
  return [result pvpObstaclesAtIndex:index];
}
- (CombatReplayProto_Builder *)addPvpObstacles:(PvpBoardObstacleProto*)value {
  if (result.mutablePvpObstaclesList == nil) {
    result.mutablePvpObstaclesList = [[NSMutableArray alloc]init];
  }
  [result.mutablePvpObstaclesList addObject:value];
  return self;
}
- (CombatReplayProto_Builder *)addAllPvpObstacles:(NSArray *)array {
  if (result.mutablePvpObstaclesList == nil) {
    result.mutablePvpObstaclesList = [NSMutableArray array];
  }
  [result.mutablePvpObstaclesList addObjectsFromArray:array];
  return self;
}
- (CombatReplayProto_Builder *)clearPvpObstacles {
  result.mutablePvpObstaclesList = nil;
  return self;
}
- (NSMutableArray *)boardPropertiesList {
  return result.mutableBoardPropertiesList;
}
- (BoardPropertyProto*)boardPropertiesAtIndex:(NSUInteger)index {
  return [result boardPropertiesAtIndex:index];
}
- (CombatReplayProto_Builder *)addBoardProperties:(BoardPropertyProto*)value {
  if (result.mutableBoardPropertiesList == nil) {
    result.mutableBoardPropertiesList = [[NSMutableArray alloc]init];
  }
  [result.mutableBoardPropertiesList addObject:value];
  return self;
}
- (CombatReplayProto_Builder *)addAllBoardProperties:(NSArray *)array {
  if (result.mutableBoardPropertiesList == nil) {
    result.mutableBoardPropertiesList = [NSMutableArray array];
  }
  [result.mutableBoardPropertiesList addObjectsFromArray:array];
  return self;
}
- (CombatReplayProto_Builder *)clearBoardProperties {
  result.mutableBoardPropertiesList = nil;
  return self;
}
@end

@interface MinimumCombatReplayProto ()
@property (strong) NSString* replayUuid;
@property (strong) NSString* groundImgPrefix;
@property int32_t firstAttackerMonsterId;
@end

@implementation MinimumCombatReplayProto

- (BOOL) hasReplayUuid {
  return !!hasReplayUuid_;
}
- (void) setHasReplayUuid:(BOOL) value_ {
  hasReplayUuid_ = !!value_;
}
@synthesize replayUuid;
- (BOOL) hasGroundImgPrefix {
  return !!hasGroundImgPrefix_;
}
- (void) setHasGroundImgPrefix:(BOOL) value_ {
  hasGroundImgPrefix_ = !!value_;
}
@synthesize groundImgPrefix;
- (BOOL) hasFirstAttackerMonsterId {
  return !!hasFirstAttackerMonsterId_;
}
- (void) setHasFirstAttackerMonsterId:(BOOL) value_ {
  hasFirstAttackerMonsterId_ = !!value_;
}
@synthesize firstAttackerMonsterId;
- (id) init {
  if ((self = [super init])) {
    self.replayUuid = @"";
    self.groundImgPrefix = @"";
    self.firstAttackerMonsterId = 0;
  }
  return self;
}
static MinimumCombatReplayProto* defaultMinimumCombatReplayProtoInstance = nil;
+ (void) initialize {
  if (self == [MinimumCombatReplayProto class]) {
    defaultMinimumCombatReplayProtoInstance = [[MinimumCombatReplayProto alloc] init];
  }
}
+ (MinimumCombatReplayProto*) defaultInstance {
  return defaultMinimumCombatReplayProtoInstance;
}
- (MinimumCombatReplayProto*) defaultInstance {
  return defaultMinimumCombatReplayProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReplayUuid) {
    [output writeString:1 value:self.replayUuid];
  }
  if (self.hasGroundImgPrefix) {
    [output writeString:2 value:self.groundImgPrefix];
  }
  if (self.hasFirstAttackerMonsterId) {
    [output writeInt32:3 value:self.firstAttackerMonsterId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasReplayUuid) {
    size_ += computeStringSize(1, self.replayUuid);
  }
  if (self.hasGroundImgPrefix) {
    size_ += computeStringSize(2, self.groundImgPrefix);
  }
  if (self.hasFirstAttackerMonsterId) {
    size_ += computeInt32Size(3, self.firstAttackerMonsterId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (MinimumCombatReplayProto*) parseFromData:(NSData*) data {
  return (MinimumCombatReplayProto*)[[[MinimumCombatReplayProto builder] mergeFromData:data] build];
}
+ (MinimumCombatReplayProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumCombatReplayProto*)[[[MinimumCombatReplayProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (MinimumCombatReplayProto*) parseFromInputStream:(NSInputStream*) input {
  return (MinimumCombatReplayProto*)[[[MinimumCombatReplayProto builder] mergeFromInputStream:input] build];
}
+ (MinimumCombatReplayProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumCombatReplayProto*)[[[MinimumCombatReplayProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumCombatReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (MinimumCombatReplayProto*)[[[MinimumCombatReplayProto builder] mergeFromCodedInputStream:input] build];
}
+ (MinimumCombatReplayProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (MinimumCombatReplayProto*)[[[MinimumCombatReplayProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (MinimumCombatReplayProto_Builder*) builder {
  return [[MinimumCombatReplayProto_Builder alloc] init];
}
+ (MinimumCombatReplayProto_Builder*) builderWithPrototype:(MinimumCombatReplayProto*) prototype {
  return [[MinimumCombatReplayProto builder] mergeFrom:prototype];
}
- (MinimumCombatReplayProto_Builder*) builder {
  return [MinimumCombatReplayProto builder];
}
- (MinimumCombatReplayProto_Builder*) toBuilder {
  return [MinimumCombatReplayProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReplayUuid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replayUuid", self.replayUuid];
  }
  if (self.hasGroundImgPrefix) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groundImgPrefix", self.groundImgPrefix];
  }
  if (self.hasFirstAttackerMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"firstAttackerMonsterId", [NSNumber numberWithInteger:self.firstAttackerMonsterId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[MinimumCombatReplayProto class]]) {
    return NO;
  }
  MinimumCombatReplayProto *otherMessage = other;
  return
      self.hasReplayUuid == otherMessage.hasReplayUuid &&
      (!self.hasReplayUuid || [self.replayUuid isEqual:otherMessage.replayUuid]) &&
      self.hasGroundImgPrefix == otherMessage.hasGroundImgPrefix &&
      (!self.hasGroundImgPrefix || [self.groundImgPrefix isEqual:otherMessage.groundImgPrefix]) &&
      self.hasFirstAttackerMonsterId == otherMessage.hasFirstAttackerMonsterId &&
      (!self.hasFirstAttackerMonsterId || self.firstAttackerMonsterId == otherMessage.firstAttackerMonsterId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasReplayUuid) {
    hashCode = hashCode * 31 + [self.replayUuid hash];
  }
  if (self.hasGroundImgPrefix) {
    hashCode = hashCode * 31 + [self.groundImgPrefix hash];
  }
  if (self.hasFirstAttackerMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.firstAttackerMonsterId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface MinimumCombatReplayProto_Builder()
@property (strong) MinimumCombatReplayProto* result;
@end

@implementation MinimumCombatReplayProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[MinimumCombatReplayProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (MinimumCombatReplayProto_Builder*) clear {
  self.result = [[MinimumCombatReplayProto alloc] init];
  return self;
}
- (MinimumCombatReplayProto_Builder*) clone {
  return [MinimumCombatReplayProto builderWithPrototype:result];
}
- (MinimumCombatReplayProto*) defaultInstance {
  return [MinimumCombatReplayProto defaultInstance];
}
- (MinimumCombatReplayProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (MinimumCombatReplayProto*) buildPartial {
  MinimumCombatReplayProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (MinimumCombatReplayProto_Builder*) mergeFrom:(MinimumCombatReplayProto*) other {
  if (other == [MinimumCombatReplayProto defaultInstance]) {
    return self;
  }
  if (other.hasReplayUuid) {
    [self setReplayUuid:other.replayUuid];
  }
  if (other.hasGroundImgPrefix) {
    [self setGroundImgPrefix:other.groundImgPrefix];
  }
  if (other.hasFirstAttackerMonsterId) {
    [self setFirstAttackerMonsterId:other.firstAttackerMonsterId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (MinimumCombatReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (MinimumCombatReplayProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setReplayUuid:[input readString]];
        break;
      }
      case 18: {
        [self setGroundImgPrefix:[input readString]];
        break;
      }
      case 24: {
        [self setFirstAttackerMonsterId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasReplayUuid {
  return result.hasReplayUuid;
}
- (NSString*) replayUuid {
  return result.replayUuid;
}
- (MinimumCombatReplayProto_Builder*) setReplayUuid:(NSString*) value {
  result.hasReplayUuid = YES;
  result.replayUuid = value;
  return self;
}
- (MinimumCombatReplayProto_Builder*) clearReplayUuid {
  result.hasReplayUuid = NO;
  result.replayUuid = @"";
  return self;
}
- (BOOL) hasGroundImgPrefix {
  return result.hasGroundImgPrefix;
}
- (NSString*) groundImgPrefix {
  return result.groundImgPrefix;
}
- (MinimumCombatReplayProto_Builder*) setGroundImgPrefix:(NSString*) value {
  result.hasGroundImgPrefix = YES;
  result.groundImgPrefix = value;
  return self;
}
- (MinimumCombatReplayProto_Builder*) clearGroundImgPrefix {
  result.hasGroundImgPrefix = NO;
  result.groundImgPrefix = @"";
  return self;
}
- (BOOL) hasFirstAttackerMonsterId {
  return result.hasFirstAttackerMonsterId;
}
- (int32_t) firstAttackerMonsterId {
  return result.firstAttackerMonsterId;
}
- (MinimumCombatReplayProto_Builder*) setFirstAttackerMonsterId:(int32_t) value {
  result.hasFirstAttackerMonsterId = YES;
  result.firstAttackerMonsterId = value;
  return self;
}
- (MinimumCombatReplayProto_Builder*) clearFirstAttackerMonsterId {
  result.hasFirstAttackerMonsterId = NO;
  result.firstAttackerMonsterId = 0;
  return self;
}
@end

@interface CombatReplayStepProto ()
@property int32_t stepIndex;
@property CombatReplayStepType type;
@property int32_t itemId;
@property uint32_t movePos1;
@property uint32_t movePos2;
@property int32_t modifiedDamage;
@property int32_t unmodifiedDamage;
@property (strong) CombatReplayScheduleProto* schedule;
@property (strong) NSMutableArray * mutableSkillsList;
@property int32_t swapIndex;
@property uint32_t vinePos;
@end

@implementation CombatReplayStepProto

- (BOOL) hasStepIndex {
  return !!hasStepIndex_;
}
- (void) setHasStepIndex:(BOOL) value_ {
  hasStepIndex_ = !!value_;
}
@synthesize stepIndex;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value_ {
  hasType_ = !!value_;
}
@synthesize type;
- (BOOL) hasItemId {
  return !!hasItemId_;
}
- (void) setHasItemId:(BOOL) value_ {
  hasItemId_ = !!value_;
}
@synthesize itemId;
- (BOOL) hasMovePos1 {
  return !!hasMovePos1_;
}
- (void) setHasMovePos1:(BOOL) value_ {
  hasMovePos1_ = !!value_;
}
@synthesize movePos1;
- (BOOL) hasMovePos2 {
  return !!hasMovePos2_;
}
- (void) setHasMovePos2:(BOOL) value_ {
  hasMovePos2_ = !!value_;
}
@synthesize movePos2;
- (BOOL) hasModifiedDamage {
  return !!hasModifiedDamage_;
}
- (void) setHasModifiedDamage:(BOOL) value_ {
  hasModifiedDamage_ = !!value_;
}
@synthesize modifiedDamage;
- (BOOL) hasUnmodifiedDamage {
  return !!hasUnmodifiedDamage_;
}
- (void) setHasUnmodifiedDamage:(BOOL) value_ {
  hasUnmodifiedDamage_ = !!value_;
}
@synthesize unmodifiedDamage;
- (BOOL) hasSchedule {
  return !!hasSchedule_;
}
- (void) setHasSchedule:(BOOL) value_ {
  hasSchedule_ = !!value_;
}
@synthesize schedule;
@synthesize mutableSkillsList;
@dynamic skillsList;
- (BOOL) hasSwapIndex {
  return !!hasSwapIndex_;
}
- (void) setHasSwapIndex:(BOOL) value_ {
  hasSwapIndex_ = !!value_;
}
@synthesize swapIndex;
- (BOOL) hasVinePos {
  return !!hasVinePos_;
}
- (void) setHasVinePos:(BOOL) value_ {
  hasVinePos_ = !!value_;
}
@synthesize vinePos;
- (id) init {
  if ((self = [super init])) {
    self.stepIndex = 0;
    self.type = CombatReplayStepTypeBattleInitialization;
    self.itemId = 0;
    self.movePos1 = 0;
    self.movePos2 = 0;
    self.modifiedDamage = 0;
    self.unmodifiedDamage = 0;
    self.schedule = [CombatReplayScheduleProto defaultInstance];
    self.swapIndex = 0;
    self.vinePos = 0;
  }
  return self;
}
static CombatReplayStepProto* defaultCombatReplayStepProtoInstance = nil;
+ (void) initialize {
  if (self == [CombatReplayStepProto class]) {
    defaultCombatReplayStepProtoInstance = [[CombatReplayStepProto alloc] init];
  }
}
+ (CombatReplayStepProto*) defaultInstance {
  return defaultCombatReplayStepProtoInstance;
}
- (CombatReplayStepProto*) defaultInstance {
  return defaultCombatReplayStepProtoInstance;
}
- (NSArray *)skillsList {
  return mutableSkillsList;
}
- (CombatReplaySkillStepProto*)skillsAtIndex:(NSUInteger)index {
  return [mutableSkillsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStepIndex) {
    [output writeInt32:1 value:self.stepIndex];
  }
  if (self.hasType) {
    [output writeEnum:2 value:self.type];
  }
  if (self.hasItemId) {
    [output writeInt32:3 value:self.itemId];
  }
  if (self.hasMovePos1) {
    [output writeUInt32:4 value:self.movePos1];
  }
  if (self.hasMovePos2) {
    [output writeUInt32:5 value:self.movePos2];
  }
  if (self.hasModifiedDamage) {
    [output writeInt32:6 value:self.modifiedDamage];
  }
  if (self.hasUnmodifiedDamage) {
    [output writeInt32:7 value:self.unmodifiedDamage];
  }
  if (self.hasSchedule) {
    [output writeMessage:8 value:self.schedule];
  }
  [self.skillsList enumerateObjectsUsingBlock:^(CombatReplaySkillStepProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  if (self.hasSwapIndex) {
    [output writeInt32:10 value:self.swapIndex];
  }
  if (self.hasVinePos) {
    [output writeUInt32:11 value:self.vinePos];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasStepIndex) {
    size_ += computeInt32Size(1, self.stepIndex);
  }
  if (self.hasType) {
    size_ += computeEnumSize(2, self.type);
  }
  if (self.hasItemId) {
    size_ += computeInt32Size(3, self.itemId);
  }
  if (self.hasMovePos1) {
    size_ += computeUInt32Size(4, self.movePos1);
  }
  if (self.hasMovePos2) {
    size_ += computeUInt32Size(5, self.movePos2);
  }
  if (self.hasModifiedDamage) {
    size_ += computeInt32Size(6, self.modifiedDamage);
  }
  if (self.hasUnmodifiedDamage) {
    size_ += computeInt32Size(7, self.unmodifiedDamage);
  }
  if (self.hasSchedule) {
    size_ += computeMessageSize(8, self.schedule);
  }
  [self.skillsList enumerateObjectsUsingBlock:^(CombatReplaySkillStepProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  if (self.hasSwapIndex) {
    size_ += computeInt32Size(10, self.swapIndex);
  }
  if (self.hasVinePos) {
    size_ += computeUInt32Size(11, self.vinePos);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CombatReplayStepProto*) parseFromData:(NSData*) data {
  return (CombatReplayStepProto*)[[[CombatReplayStepProto builder] mergeFromData:data] build];
}
+ (CombatReplayStepProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayStepProto*)[[[CombatReplayStepProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayStepProto*) parseFromInputStream:(NSInputStream*) input {
  return (CombatReplayStepProto*)[[[CombatReplayStepProto builder] mergeFromInputStream:input] build];
}
+ (CombatReplayStepProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayStepProto*)[[[CombatReplayStepProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CombatReplayStepProto*)[[[CombatReplayStepProto builder] mergeFromCodedInputStream:input] build];
}
+ (CombatReplayStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayStepProto*)[[[CombatReplayStepProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayStepProto_Builder*) builder {
  return [[CombatReplayStepProto_Builder alloc] init];
}
+ (CombatReplayStepProto_Builder*) builderWithPrototype:(CombatReplayStepProto*) prototype {
  return [[CombatReplayStepProto builder] mergeFrom:prototype];
}
- (CombatReplayStepProto_Builder*) builder {
  return [CombatReplayStepProto builder];
}
- (CombatReplayStepProto_Builder*) toBuilder {
  return [CombatReplayStepProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStepIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stepIndex", [NSNumber numberWithInteger:self.stepIndex]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", [NSNumber numberWithInteger:self.type]];
  }
  if (self.hasItemId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"itemId", [NSNumber numberWithInteger:self.itemId]];
  }
  if (self.hasMovePos1) {
    [output appendFormat:@"%@%@: %@\n", indent, @"movePos1", [NSNumber numberWithInteger:self.movePos1]];
  }
  if (self.hasMovePos2) {
    [output appendFormat:@"%@%@: %@\n", indent, @"movePos2", [NSNumber numberWithInteger:self.movePos2]];
  }
  if (self.hasModifiedDamage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"modifiedDamage", [NSNumber numberWithInteger:self.modifiedDamage]];
  }
  if (self.hasUnmodifiedDamage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unmodifiedDamage", [NSNumber numberWithInteger:self.unmodifiedDamage]];
  }
  if (self.hasSchedule) {
    [output appendFormat:@"%@%@ {\n", indent, @"schedule"];
    [self.schedule writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.skillsList enumerateObjectsUsingBlock:^(CombatReplaySkillStepProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"skills"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasSwapIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"swapIndex", [NSNumber numberWithInteger:self.swapIndex]];
  }
  if (self.hasVinePos) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vinePos", [NSNumber numberWithInteger:self.vinePos]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CombatReplayStepProto class]]) {
    return NO;
  }
  CombatReplayStepProto *otherMessage = other;
  return
      self.hasStepIndex == otherMessage.hasStepIndex &&
      (!self.hasStepIndex || self.stepIndex == otherMessage.stepIndex) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || self.type == otherMessage.type) &&
      self.hasItemId == otherMessage.hasItemId &&
      (!self.hasItemId || self.itemId == otherMessage.itemId) &&
      self.hasMovePos1 == otherMessage.hasMovePos1 &&
      (!self.hasMovePos1 || self.movePos1 == otherMessage.movePos1) &&
      self.hasMovePos2 == otherMessage.hasMovePos2 &&
      (!self.hasMovePos2 || self.movePos2 == otherMessage.movePos2) &&
      self.hasModifiedDamage == otherMessage.hasModifiedDamage &&
      (!self.hasModifiedDamage || self.modifiedDamage == otherMessage.modifiedDamage) &&
      self.hasUnmodifiedDamage == otherMessage.hasUnmodifiedDamage &&
      (!self.hasUnmodifiedDamage || self.unmodifiedDamage == otherMessage.unmodifiedDamage) &&
      self.hasSchedule == otherMessage.hasSchedule &&
      (!self.hasSchedule || [self.schedule isEqual:otherMessage.schedule]) &&
      [self.skillsList isEqualToArray:otherMessage.skillsList] &&
      self.hasSwapIndex == otherMessage.hasSwapIndex &&
      (!self.hasSwapIndex || self.swapIndex == otherMessage.swapIndex) &&
      self.hasVinePos == otherMessage.hasVinePos &&
      (!self.hasVinePos || self.vinePos == otherMessage.vinePos) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasStepIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.stepIndex] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + self.type;
  }
  if (self.hasItemId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.itemId] hash];
  }
  if (self.hasMovePos1) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.movePos1] hash];
  }
  if (self.hasMovePos2) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.movePos2] hash];
  }
  if (self.hasModifiedDamage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.modifiedDamage] hash];
  }
  if (self.hasUnmodifiedDamage) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unmodifiedDamage] hash];
  }
  if (self.hasSchedule) {
    hashCode = hashCode * 31 + [self.schedule hash];
  }
  [self.skillsList enumerateObjectsUsingBlock:^(CombatReplaySkillStepProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSwapIndex) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.swapIndex] hash];
  }
  if (self.hasVinePos) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.vinePos] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CombatReplayStepProto_Builder()
@property (strong) CombatReplayStepProto* result;
@end

@implementation CombatReplayStepProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CombatReplayStepProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CombatReplayStepProto_Builder*) clear {
  self.result = [[CombatReplayStepProto alloc] init];
  return self;
}
- (CombatReplayStepProto_Builder*) clone {
  return [CombatReplayStepProto builderWithPrototype:result];
}
- (CombatReplayStepProto*) defaultInstance {
  return [CombatReplayStepProto defaultInstance];
}
- (CombatReplayStepProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CombatReplayStepProto*) buildPartial {
  CombatReplayStepProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CombatReplayStepProto_Builder*) mergeFrom:(CombatReplayStepProto*) other {
  if (other == [CombatReplayStepProto defaultInstance]) {
    return self;
  }
  if (other.hasStepIndex) {
    [self setStepIndex:other.stepIndex];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasItemId) {
    [self setItemId:other.itemId];
  }
  if (other.hasMovePos1) {
    [self setMovePos1:other.movePos1];
  }
  if (other.hasMovePos2) {
    [self setMovePos2:other.movePos2];
  }
  if (other.hasModifiedDamage) {
    [self setModifiedDamage:other.modifiedDamage];
  }
  if (other.hasUnmodifiedDamage) {
    [self setUnmodifiedDamage:other.unmodifiedDamage];
  }
  if (other.hasSchedule) {
    [self mergeSchedule:other.schedule];
  }
  if (other.mutableSkillsList.count > 0) {
    if (result.mutableSkillsList == nil) {
      result.mutableSkillsList = [[NSMutableArray alloc] initWithArray:other.mutableSkillsList];
    } else {
      [result.mutableSkillsList addObjectsFromArray:other.mutableSkillsList];
    }
  }
  if (other.hasSwapIndex) {
    [self setSwapIndex:other.swapIndex];
  }
  if (other.hasVinePos) {
    [self setVinePos:other.vinePos];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CombatReplayStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CombatReplayStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setStepIndex:[input readInt32]];
        break;
      }
      case 16: {
        CombatReplayStepType value = (CombatReplayStepType)[input readEnum];
        if (CombatReplayStepTypeIsValidValue(value)) {
          [self setType:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 24: {
        [self setItemId:[input readInt32]];
        break;
      }
      case 32: {
        [self setMovePos1:[input readUInt32]];
        break;
      }
      case 40: {
        [self setMovePos2:[input readUInt32]];
        break;
      }
      case 48: {
        [self setModifiedDamage:[input readInt32]];
        break;
      }
      case 56: {
        [self setUnmodifiedDamage:[input readInt32]];
        break;
      }
      case 66: {
        CombatReplayScheduleProto_Builder* subBuilder = [CombatReplayScheduleProto builder];
        if (self.hasSchedule) {
          [subBuilder mergeFrom:self.schedule];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSchedule:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        CombatReplaySkillStepProto_Builder* subBuilder = [CombatReplaySkillStepProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addSkills:[subBuilder buildPartial]];
        break;
      }
      case 80: {
        [self setSwapIndex:[input readInt32]];
        break;
      }
      case 88: {
        [self setVinePos:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasStepIndex {
  return result.hasStepIndex;
}
- (int32_t) stepIndex {
  return result.stepIndex;
}
- (CombatReplayStepProto_Builder*) setStepIndex:(int32_t) value {
  result.hasStepIndex = YES;
  result.stepIndex = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearStepIndex {
  result.hasStepIndex = NO;
  result.stepIndex = 0;
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (CombatReplayStepType) type {
  return result.type;
}
- (CombatReplayStepProto_Builder*) setType:(CombatReplayStepType) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearTypeList {
  result.hasType = NO;
  result.type = CombatReplayStepTypeBattleInitialization;
  return self;
}
- (BOOL) hasItemId {
  return result.hasItemId;
}
- (int32_t) itemId {
  return result.itemId;
}
- (CombatReplayStepProto_Builder*) setItemId:(int32_t) value {
  result.hasItemId = YES;
  result.itemId = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearItemId {
  result.hasItemId = NO;
  result.itemId = 0;
  return self;
}
- (BOOL) hasMovePos1 {
  return result.hasMovePos1;
}
- (uint32_t) movePos1 {
  return result.movePos1;
}
- (CombatReplayStepProto_Builder*) setMovePos1:(uint32_t) value {
  result.hasMovePos1 = YES;
  result.movePos1 = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearMovePos1 {
  result.hasMovePos1 = NO;
  result.movePos1 = 0;
  return self;
}
- (BOOL) hasMovePos2 {
  return result.hasMovePos2;
}
- (uint32_t) movePos2 {
  return result.movePos2;
}
- (CombatReplayStepProto_Builder*) setMovePos2:(uint32_t) value {
  result.hasMovePos2 = YES;
  result.movePos2 = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearMovePos2 {
  result.hasMovePos2 = NO;
  result.movePos2 = 0;
  return self;
}
- (BOOL) hasModifiedDamage {
  return result.hasModifiedDamage;
}
- (int32_t) modifiedDamage {
  return result.modifiedDamage;
}
- (CombatReplayStepProto_Builder*) setModifiedDamage:(int32_t) value {
  result.hasModifiedDamage = YES;
  result.modifiedDamage = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearModifiedDamage {
  result.hasModifiedDamage = NO;
  result.modifiedDamage = 0;
  return self;
}
- (BOOL) hasUnmodifiedDamage {
  return result.hasUnmodifiedDamage;
}
- (int32_t) unmodifiedDamage {
  return result.unmodifiedDamage;
}
- (CombatReplayStepProto_Builder*) setUnmodifiedDamage:(int32_t) value {
  result.hasUnmodifiedDamage = YES;
  result.unmodifiedDamage = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearUnmodifiedDamage {
  result.hasUnmodifiedDamage = NO;
  result.unmodifiedDamage = 0;
  return self;
}
- (BOOL) hasSchedule {
  return result.hasSchedule;
}
- (CombatReplayScheduleProto*) schedule {
  return result.schedule;
}
- (CombatReplayStepProto_Builder*) setSchedule:(CombatReplayScheduleProto*) value {
  result.hasSchedule = YES;
  result.schedule = value;
  return self;
}
- (CombatReplayStepProto_Builder*) setSchedule_Builder:(CombatReplayScheduleProto_Builder*) builderForValue {
  return [self setSchedule:[builderForValue build]];
}
- (CombatReplayStepProto_Builder*) mergeSchedule:(CombatReplayScheduleProto*) value {
  if (result.hasSchedule &&
      result.schedule != [CombatReplayScheduleProto defaultInstance]) {
    result.schedule =
      [[[CombatReplayScheduleProto builderWithPrototype:result.schedule] mergeFrom:value] buildPartial];
  } else {
    result.schedule = value;
  }
  result.hasSchedule = YES;
  return self;
}
- (CombatReplayStepProto_Builder*) clearSchedule {
  result.hasSchedule = NO;
  result.schedule = [CombatReplayScheduleProto defaultInstance];
  return self;
}
- (NSMutableArray *)skillsList {
  return result.mutableSkillsList;
}
- (CombatReplaySkillStepProto*)skillsAtIndex:(NSUInteger)index {
  return [result skillsAtIndex:index];
}
- (CombatReplayStepProto_Builder *)addSkills:(CombatReplaySkillStepProto*)value {
  if (result.mutableSkillsList == nil) {
    result.mutableSkillsList = [[NSMutableArray alloc]init];
  }
  [result.mutableSkillsList addObject:value];
  return self;
}
- (CombatReplayStepProto_Builder *)addAllSkills:(NSArray *)array {
  if (result.mutableSkillsList == nil) {
    result.mutableSkillsList = [NSMutableArray array];
  }
  [result.mutableSkillsList addObjectsFromArray:array];
  return self;
}
- (CombatReplayStepProto_Builder *)clearSkills {
  result.mutableSkillsList = nil;
  return self;
}
- (BOOL) hasSwapIndex {
  return result.hasSwapIndex;
}
- (int32_t) swapIndex {
  return result.swapIndex;
}
- (CombatReplayStepProto_Builder*) setSwapIndex:(int32_t) value {
  result.hasSwapIndex = YES;
  result.swapIndex = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearSwapIndex {
  result.hasSwapIndex = NO;
  result.swapIndex = 0;
  return self;
}
- (BOOL) hasVinePos {
  return result.hasVinePos;
}
- (uint32_t) vinePos {
  return result.vinePos;
}
- (CombatReplayStepProto_Builder*) setVinePos:(uint32_t) value {
  result.hasVinePos = YES;
  result.vinePos = value;
  return self;
}
- (CombatReplayStepProto_Builder*) clearVinePos {
  result.hasVinePos = NO;
  result.vinePos = 0;
  return self;
}
@end

@interface CombatReplaySkillStepProto ()
@property int32_t skillId;
@property BOOL belongsToPlayer;
@property int32_t ownerMonsterId;
@property SkillTriggerPoint triggerPoint;
@end

@implementation CombatReplaySkillStepProto

- (BOOL) hasSkillId {
  return !!hasSkillId_;
}
- (void) setHasSkillId:(BOOL) value_ {
  hasSkillId_ = !!value_;
}
@synthesize skillId;
- (BOOL) hasBelongsToPlayer {
  return !!hasBelongsToPlayer_;
}
- (void) setHasBelongsToPlayer:(BOOL) value_ {
  hasBelongsToPlayer_ = !!value_;
}
- (BOOL) belongsToPlayer {
  return !!belongsToPlayer_;
}
- (void) setBelongsToPlayer:(BOOL) value_ {
  belongsToPlayer_ = !!value_;
}
- (BOOL) hasOwnerMonsterId {
  return !!hasOwnerMonsterId_;
}
- (void) setHasOwnerMonsterId:(BOOL) value_ {
  hasOwnerMonsterId_ = !!value_;
}
@synthesize ownerMonsterId;
- (BOOL) hasTriggerPoint {
  return !!hasTriggerPoint_;
}
- (void) setHasTriggerPoint:(BOOL) value_ {
  hasTriggerPoint_ = !!value_;
}
@synthesize triggerPoint;
- (id) init {
  if ((self = [super init])) {
    self.skillId = 0;
    self.belongsToPlayer = NO;
    self.ownerMonsterId = 0;
    self.triggerPoint = SkillTriggerPointEnemyInitialized;
  }
  return self;
}
static CombatReplaySkillStepProto* defaultCombatReplaySkillStepProtoInstance = nil;
+ (void) initialize {
  if (self == [CombatReplaySkillStepProto class]) {
    defaultCombatReplaySkillStepProtoInstance = [[CombatReplaySkillStepProto alloc] init];
  }
}
+ (CombatReplaySkillStepProto*) defaultInstance {
  return defaultCombatReplaySkillStepProtoInstance;
}
- (CombatReplaySkillStepProto*) defaultInstance {
  return defaultCombatReplaySkillStepProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSkillId) {
    [output writeInt32:1 value:self.skillId];
  }
  if (self.hasBelongsToPlayer) {
    [output writeBool:2 value:self.belongsToPlayer];
  }
  if (self.hasOwnerMonsterId) {
    [output writeInt32:3 value:self.ownerMonsterId];
  }
  if (self.hasTriggerPoint) {
    [output writeEnum:4 value:self.triggerPoint];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSkillId) {
    size_ += computeInt32Size(1, self.skillId);
  }
  if (self.hasBelongsToPlayer) {
    size_ += computeBoolSize(2, self.belongsToPlayer);
  }
  if (self.hasOwnerMonsterId) {
    size_ += computeInt32Size(3, self.ownerMonsterId);
  }
  if (self.hasTriggerPoint) {
    size_ += computeEnumSize(4, self.triggerPoint);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CombatReplaySkillStepProto*) parseFromData:(NSData*) data {
  return (CombatReplaySkillStepProto*)[[[CombatReplaySkillStepProto builder] mergeFromData:data] build];
}
+ (CombatReplaySkillStepProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplaySkillStepProto*)[[[CombatReplaySkillStepProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CombatReplaySkillStepProto*) parseFromInputStream:(NSInputStream*) input {
  return (CombatReplaySkillStepProto*)[[[CombatReplaySkillStepProto builder] mergeFromInputStream:input] build];
}
+ (CombatReplaySkillStepProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplaySkillStepProto*)[[[CombatReplaySkillStepProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplaySkillStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CombatReplaySkillStepProto*)[[[CombatReplaySkillStepProto builder] mergeFromCodedInputStream:input] build];
}
+ (CombatReplaySkillStepProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplaySkillStepProto*)[[[CombatReplaySkillStepProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplaySkillStepProto_Builder*) builder {
  return [[CombatReplaySkillStepProto_Builder alloc] init];
}
+ (CombatReplaySkillStepProto_Builder*) builderWithPrototype:(CombatReplaySkillStepProto*) prototype {
  return [[CombatReplaySkillStepProto builder] mergeFrom:prototype];
}
- (CombatReplaySkillStepProto_Builder*) builder {
  return [CombatReplaySkillStepProto builder];
}
- (CombatReplaySkillStepProto_Builder*) toBuilder {
  return [CombatReplaySkillStepProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSkillId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skillId", [NSNumber numberWithInteger:self.skillId]];
  }
  if (self.hasBelongsToPlayer) {
    [output appendFormat:@"%@%@: %@\n", indent, @"belongsToPlayer", [NSNumber numberWithBool:self.belongsToPlayer]];
  }
  if (self.hasOwnerMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ownerMonsterId", [NSNumber numberWithInteger:self.ownerMonsterId]];
  }
  if (self.hasTriggerPoint) {
    [output appendFormat:@"%@%@: %@\n", indent, @"triggerPoint", [NSNumber numberWithInteger:self.triggerPoint]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CombatReplaySkillStepProto class]]) {
    return NO;
  }
  CombatReplaySkillStepProto *otherMessage = other;
  return
      self.hasSkillId == otherMessage.hasSkillId &&
      (!self.hasSkillId || self.skillId == otherMessage.skillId) &&
      self.hasBelongsToPlayer == otherMessage.hasBelongsToPlayer &&
      (!self.hasBelongsToPlayer || self.belongsToPlayer == otherMessage.belongsToPlayer) &&
      self.hasOwnerMonsterId == otherMessage.hasOwnerMonsterId &&
      (!self.hasOwnerMonsterId || self.ownerMonsterId == otherMessage.ownerMonsterId) &&
      self.hasTriggerPoint == otherMessage.hasTriggerPoint &&
      (!self.hasTriggerPoint || self.triggerPoint == otherMessage.triggerPoint) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSkillId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skillId] hash];
  }
  if (self.hasBelongsToPlayer) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.belongsToPlayer] hash];
  }
  if (self.hasOwnerMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.ownerMonsterId] hash];
  }
  if (self.hasTriggerPoint) {
    hashCode = hashCode * 31 + self.triggerPoint;
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CombatReplaySkillStepProto_Builder()
@property (strong) CombatReplaySkillStepProto* result;
@end

@implementation CombatReplaySkillStepProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CombatReplaySkillStepProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CombatReplaySkillStepProto_Builder*) clear {
  self.result = [[CombatReplaySkillStepProto alloc] init];
  return self;
}
- (CombatReplaySkillStepProto_Builder*) clone {
  return [CombatReplaySkillStepProto builderWithPrototype:result];
}
- (CombatReplaySkillStepProto*) defaultInstance {
  return [CombatReplaySkillStepProto defaultInstance];
}
- (CombatReplaySkillStepProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CombatReplaySkillStepProto*) buildPartial {
  CombatReplaySkillStepProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CombatReplaySkillStepProto_Builder*) mergeFrom:(CombatReplaySkillStepProto*) other {
  if (other == [CombatReplaySkillStepProto defaultInstance]) {
    return self;
  }
  if (other.hasSkillId) {
    [self setSkillId:other.skillId];
  }
  if (other.hasBelongsToPlayer) {
    [self setBelongsToPlayer:other.belongsToPlayer];
  }
  if (other.hasOwnerMonsterId) {
    [self setOwnerMonsterId:other.ownerMonsterId];
  }
  if (other.hasTriggerPoint) {
    [self setTriggerPoint:other.triggerPoint];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CombatReplaySkillStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CombatReplaySkillStepProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSkillId:[input readInt32]];
        break;
      }
      case 16: {
        [self setBelongsToPlayer:[input readBool]];
        break;
      }
      case 24: {
        [self setOwnerMonsterId:[input readInt32]];
        break;
      }
      case 32: {
        SkillTriggerPoint value = (SkillTriggerPoint)[input readEnum];
        if (SkillTriggerPointIsValidValue(value)) {
          [self setTriggerPoint:value];
        } else {
          [unknownFields mergeVarintField:4 value:value];
        }
        break;
      }
    }
  }
}
- (BOOL) hasSkillId {
  return result.hasSkillId;
}
- (int32_t) skillId {
  return result.skillId;
}
- (CombatReplaySkillStepProto_Builder*) setSkillId:(int32_t) value {
  result.hasSkillId = YES;
  result.skillId = value;
  return self;
}
- (CombatReplaySkillStepProto_Builder*) clearSkillId {
  result.hasSkillId = NO;
  result.skillId = 0;
  return self;
}
- (BOOL) hasBelongsToPlayer {
  return result.hasBelongsToPlayer;
}
- (BOOL) belongsToPlayer {
  return result.belongsToPlayer;
}
- (CombatReplaySkillStepProto_Builder*) setBelongsToPlayer:(BOOL) value {
  result.hasBelongsToPlayer = YES;
  result.belongsToPlayer = value;
  return self;
}
- (CombatReplaySkillStepProto_Builder*) clearBelongsToPlayer {
  result.hasBelongsToPlayer = NO;
  result.belongsToPlayer = NO;
  return self;
}
- (BOOL) hasOwnerMonsterId {
  return result.hasOwnerMonsterId;
}
- (int32_t) ownerMonsterId {
  return result.ownerMonsterId;
}
- (CombatReplaySkillStepProto_Builder*) setOwnerMonsterId:(int32_t) value {
  result.hasOwnerMonsterId = YES;
  result.ownerMonsterId = value;
  return self;
}
- (CombatReplaySkillStepProto_Builder*) clearOwnerMonsterId {
  result.hasOwnerMonsterId = NO;
  result.ownerMonsterId = 0;
  return self;
}
- (BOOL) hasTriggerPoint {
  return result.hasTriggerPoint;
}
- (SkillTriggerPoint) triggerPoint {
  return result.triggerPoint;
}
- (CombatReplaySkillStepProto_Builder*) setTriggerPoint:(SkillTriggerPoint) value {
  result.hasTriggerPoint = YES;
  result.triggerPoint = value;
  return self;
}
- (CombatReplaySkillStepProto_Builder*) clearTriggerPointList {
  result.hasTriggerPoint = NO;
  result.triggerPoint = SkillTriggerPointEnemyInitialized;
  return self;
}
@end

@interface CombatReplayScheduleProto ()
@property int32_t totalTurns;
@property (strong) PBAppendableArray * mutablePlayerTurnsList;
@property int32_t startingTurn;
@end

@implementation CombatReplayScheduleProto

- (BOOL) hasTotalTurns {
  return !!hasTotalTurns_;
}
- (void) setHasTotalTurns:(BOOL) value_ {
  hasTotalTurns_ = !!value_;
}
@synthesize totalTurns;
@synthesize mutablePlayerTurnsList;
@dynamic playerTurnsList;
- (BOOL) hasStartingTurn {
  return !!hasStartingTurn_;
}
- (void) setHasStartingTurn:(BOOL) value_ {
  hasStartingTurn_ = !!value_;
}
@synthesize startingTurn;
- (id) init {
  if ((self = [super init])) {
    self.totalTurns = 0;
    self.startingTurn = 0;
  }
  return self;
}
static CombatReplayScheduleProto* defaultCombatReplayScheduleProtoInstance = nil;
+ (void) initialize {
  if (self == [CombatReplayScheduleProto class]) {
    defaultCombatReplayScheduleProtoInstance = [[CombatReplayScheduleProto alloc] init];
  }
}
+ (CombatReplayScheduleProto*) defaultInstance {
  return defaultCombatReplayScheduleProtoInstance;
}
- (CombatReplayScheduleProto*) defaultInstance {
  return defaultCombatReplayScheduleProtoInstance;
}
- (PBArray *)playerTurnsList {
  return mutablePlayerTurnsList;
}
- (int32_t)playerTurnsAtIndex:(NSUInteger)index {
  return [mutablePlayerTurnsList int32AtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTotalTurns) {
    [output writeInt32:1 value:self.totalTurns];
  }
  const NSUInteger playerTurnsListCount = self.playerTurnsList.count;
  if (playerTurnsListCount > 0) {
    const int32_t *values = (const int32_t *)self.playerTurnsList.data;
    for (NSUInteger i = 0; i < playerTurnsListCount; ++i) {
      [output writeInt32:2 value:values[i]];
    }
  }
  if (self.hasStartingTurn) {
    [output writeInt32:3 value:self.startingTurn];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasTotalTurns) {
    size_ += computeInt32Size(1, self.totalTurns);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.playerTurnsList.count;
    const int32_t *values = (const int32_t *)self.playerTurnsList.data;
    for (NSUInteger i = 0; i < count; ++i) {
      dataSize += computeInt32SizeNoTag(values[i]);
    }
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasStartingTurn) {
    size_ += computeInt32Size(3, self.startingTurn);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CombatReplayScheduleProto*) parseFromData:(NSData*) data {
  return (CombatReplayScheduleProto*)[[[CombatReplayScheduleProto builder] mergeFromData:data] build];
}
+ (CombatReplayScheduleProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayScheduleProto*)[[[CombatReplayScheduleProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayScheduleProto*) parseFromInputStream:(NSInputStream*) input {
  return (CombatReplayScheduleProto*)[[[CombatReplayScheduleProto builder] mergeFromInputStream:input] build];
}
+ (CombatReplayScheduleProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayScheduleProto*)[[[CombatReplayScheduleProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayScheduleProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CombatReplayScheduleProto*)[[[CombatReplayScheduleProto builder] mergeFromCodedInputStream:input] build];
}
+ (CombatReplayScheduleProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayScheduleProto*)[[[CombatReplayScheduleProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayScheduleProto_Builder*) builder {
  return [[CombatReplayScheduleProto_Builder alloc] init];
}
+ (CombatReplayScheduleProto_Builder*) builderWithPrototype:(CombatReplayScheduleProto*) prototype {
  return [[CombatReplayScheduleProto builder] mergeFrom:prototype];
}
- (CombatReplayScheduleProto_Builder*) builder {
  return [CombatReplayScheduleProto builder];
}
- (CombatReplayScheduleProto_Builder*) toBuilder {
  return [CombatReplayScheduleProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTotalTurns) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalTurns", [NSNumber numberWithInteger:self.totalTurns]];
  }
  [self.playerTurnsList enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"playerTurns", obj];
  }];
  if (self.hasStartingTurn) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startingTurn", [NSNumber numberWithInteger:self.startingTurn]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CombatReplayScheduleProto class]]) {
    return NO;
  }
  CombatReplayScheduleProto *otherMessage = other;
  return
      self.hasTotalTurns == otherMessage.hasTotalTurns &&
      (!self.hasTotalTurns || self.totalTurns == otherMessage.totalTurns) &&
      [self.playerTurnsList isEqualToArray:otherMessage.playerTurnsList] &&
      self.hasStartingTurn == otherMessage.hasStartingTurn &&
      (!self.hasStartingTurn || self.startingTurn == otherMessage.startingTurn) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasTotalTurns) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.totalTurns] hash];
  }
  [self.playerTurnsList enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [obj longValue];
  }];
  if (self.hasStartingTurn) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startingTurn] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CombatReplayScheduleProto_Builder()
@property (strong) CombatReplayScheduleProto* result;
@end

@implementation CombatReplayScheduleProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CombatReplayScheduleProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CombatReplayScheduleProto_Builder*) clear {
  self.result = [[CombatReplayScheduleProto alloc] init];
  return self;
}
- (CombatReplayScheduleProto_Builder*) clone {
  return [CombatReplayScheduleProto builderWithPrototype:result];
}
- (CombatReplayScheduleProto*) defaultInstance {
  return [CombatReplayScheduleProto defaultInstance];
}
- (CombatReplayScheduleProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CombatReplayScheduleProto*) buildPartial {
  CombatReplayScheduleProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CombatReplayScheduleProto_Builder*) mergeFrom:(CombatReplayScheduleProto*) other {
  if (other == [CombatReplayScheduleProto defaultInstance]) {
    return self;
  }
  if (other.hasTotalTurns) {
    [self setTotalTurns:other.totalTurns];
  }
  if (other.mutablePlayerTurnsList.count > 0) {
    if (result.mutablePlayerTurnsList == nil) {
      result.mutablePlayerTurnsList = [other.mutablePlayerTurnsList copy];
    } else {
      [result.mutablePlayerTurnsList appendArray:other.mutablePlayerTurnsList];
    }
  }
  if (other.hasStartingTurn) {
    [self setStartingTurn:other.startingTurn];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CombatReplayScheduleProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CombatReplayScheduleProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setTotalTurns:[input readInt32]];
        break;
      }
      case 16: {
        [self addPlayerTurns:[input readInt32]];
        break;
      }
      case 24: {
        [self setStartingTurn:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasTotalTurns {
  return result.hasTotalTurns;
}
- (int32_t) totalTurns {
  return result.totalTurns;
}
- (CombatReplayScheduleProto_Builder*) setTotalTurns:(int32_t) value {
  result.hasTotalTurns = YES;
  result.totalTurns = value;
  return self;
}
- (CombatReplayScheduleProto_Builder*) clearTotalTurns {
  result.hasTotalTurns = NO;
  result.totalTurns = 0;
  return self;
}
- (PBAppendableArray *)playerTurnsList {
  return result.mutablePlayerTurnsList;
}
- (int32_t)playerTurnsAtIndex:(NSUInteger)index {
  return [result playerTurnsAtIndex:index];
}
- (CombatReplayScheduleProto_Builder *)addPlayerTurns:(int32_t)value {
  if (result.mutablePlayerTurnsList == nil) {
    result.mutablePlayerTurnsList = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.mutablePlayerTurnsList addInt32:value];
  return self;
}
- (CombatReplayScheduleProto_Builder *)addAllPlayerTurns:(NSArray *)array {
  if (result.mutablePlayerTurnsList == nil) {
    result.mutablePlayerTurnsList = [PBAppendableArray arrayWithValueType:PBArrayValueTypeInt32];
  }
  [result.mutablePlayerTurnsList appendArray:[PBArray arrayWithArray:array valueType:PBArrayValueTypeInt32]];
  return self;
}
- (CombatReplayScheduleProto_Builder *)setPlayerTurnsValues:(const int32_t *)values count:(NSUInteger)count {
  result.mutablePlayerTurnsList = [PBAppendableArray arrayWithValues:values count:count valueType:PBArrayValueTypeInt32];
  return self;
}
- (CombatReplayScheduleProto_Builder *)clearPlayerTurns {
  result.mutablePlayerTurnsList = nil;
  return self;
}
- (BOOL) hasStartingTurn {
  return result.hasStartingTurn;
}
- (int32_t) startingTurn {
  return result.startingTurn;
}
- (CombatReplayScheduleProto_Builder*) setStartingTurn:(int32_t) value {
  result.hasStartingTurn = YES;
  result.startingTurn = value;
  return self;
}
- (CombatReplayScheduleProto_Builder*) clearStartingTurn {
  result.hasStartingTurn = NO;
  result.startingTurn = 0;
  return self;
}
@end

@interface CombatReplayOrbProto ()
@property int32_t spawnedRow;
@property int32_t spawnedCol;
@property Element spawnedElement;
@property BOOL initialOrb;
@property int32_t special;
@property int32_t power;
@property int32_t orbId;
@end

@implementation CombatReplayOrbProto

- (BOOL) hasSpawnedRow {
  return !!hasSpawnedRow_;
}
- (void) setHasSpawnedRow:(BOOL) value_ {
  hasSpawnedRow_ = !!value_;
}
@synthesize spawnedRow;
- (BOOL) hasSpawnedCol {
  return !!hasSpawnedCol_;
}
- (void) setHasSpawnedCol:(BOOL) value_ {
  hasSpawnedCol_ = !!value_;
}
@synthesize spawnedCol;
- (BOOL) hasSpawnedElement {
  return !!hasSpawnedElement_;
}
- (void) setHasSpawnedElement:(BOOL) value_ {
  hasSpawnedElement_ = !!value_;
}
@synthesize spawnedElement;
- (BOOL) hasInitialOrb {
  return !!hasInitialOrb_;
}
- (void) setHasInitialOrb:(BOOL) value_ {
  hasInitialOrb_ = !!value_;
}
- (BOOL) initialOrb {
  return !!initialOrb_;
}
- (void) setInitialOrb:(BOOL) value_ {
  initialOrb_ = !!value_;
}
- (BOOL) hasSpecial {
  return !!hasSpecial_;
}
- (void) setHasSpecial:(BOOL) value_ {
  hasSpecial_ = !!value_;
}
@synthesize special;
- (BOOL) hasPower {
  return !!hasPower_;
}
- (void) setHasPower:(BOOL) value_ {
  hasPower_ = !!value_;
}
@synthesize power;
- (BOOL) hasOrbId {
  return !!hasOrbId_;
}
- (void) setHasOrbId:(BOOL) value_ {
  hasOrbId_ = !!value_;
}
@synthesize orbId;
- (id) init {
  if ((self = [super init])) {
    self.spawnedRow = 0;
    self.spawnedCol = 0;
    self.spawnedElement = ElementFire;
    self.initialOrb = NO;
    self.special = 0;
    self.power = 0;
    self.orbId = 0;
  }
  return self;
}
static CombatReplayOrbProto* defaultCombatReplayOrbProtoInstance = nil;
+ (void) initialize {
  if (self == [CombatReplayOrbProto class]) {
    defaultCombatReplayOrbProtoInstance = [[CombatReplayOrbProto alloc] init];
  }
}
+ (CombatReplayOrbProto*) defaultInstance {
  return defaultCombatReplayOrbProtoInstance;
}
- (CombatReplayOrbProto*) defaultInstance {
  return defaultCombatReplayOrbProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSpawnedRow) {
    [output writeInt32:1 value:self.spawnedRow];
  }
  if (self.hasSpawnedCol) {
    [output writeInt32:2 value:self.spawnedCol];
  }
  if (self.hasSpawnedElement) {
    [output writeEnum:3 value:self.spawnedElement];
  }
  if (self.hasInitialOrb) {
    [output writeBool:4 value:self.initialOrb];
  }
  if (self.hasSpecial) {
    [output writeInt32:5 value:self.special];
  }
  if (self.hasPower) {
    [output writeInt32:6 value:self.power];
  }
  if (self.hasOrbId) {
    [output writeInt32:7 value:self.orbId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasSpawnedRow) {
    size_ += computeInt32Size(1, self.spawnedRow);
  }
  if (self.hasSpawnedCol) {
    size_ += computeInt32Size(2, self.spawnedCol);
  }
  if (self.hasSpawnedElement) {
    size_ += computeEnumSize(3, self.spawnedElement);
  }
  if (self.hasInitialOrb) {
    size_ += computeBoolSize(4, self.initialOrb);
  }
  if (self.hasSpecial) {
    size_ += computeInt32Size(5, self.special);
  }
  if (self.hasPower) {
    size_ += computeInt32Size(6, self.power);
  }
  if (self.hasOrbId) {
    size_ += computeInt32Size(7, self.orbId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CombatReplayOrbProto*) parseFromData:(NSData*) data {
  return (CombatReplayOrbProto*)[[[CombatReplayOrbProto builder] mergeFromData:data] build];
}
+ (CombatReplayOrbProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayOrbProto*)[[[CombatReplayOrbProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayOrbProto*) parseFromInputStream:(NSInputStream*) input {
  return (CombatReplayOrbProto*)[[[CombatReplayOrbProto builder] mergeFromInputStream:input] build];
}
+ (CombatReplayOrbProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayOrbProto*)[[[CombatReplayOrbProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayOrbProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CombatReplayOrbProto*)[[[CombatReplayOrbProto builder] mergeFromCodedInputStream:input] build];
}
+ (CombatReplayOrbProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayOrbProto*)[[[CombatReplayOrbProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayOrbProto_Builder*) builder {
  return [[CombatReplayOrbProto_Builder alloc] init];
}
+ (CombatReplayOrbProto_Builder*) builderWithPrototype:(CombatReplayOrbProto*) prototype {
  return [[CombatReplayOrbProto builder] mergeFrom:prototype];
}
- (CombatReplayOrbProto_Builder*) builder {
  return [CombatReplayOrbProto builder];
}
- (CombatReplayOrbProto_Builder*) toBuilder {
  return [CombatReplayOrbProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasSpawnedRow) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spawnedRow", [NSNumber numberWithInteger:self.spawnedRow]];
  }
  if (self.hasSpawnedCol) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spawnedCol", [NSNumber numberWithInteger:self.spawnedCol]];
  }
  if (self.hasSpawnedElement) {
    [output appendFormat:@"%@%@: %@\n", indent, @"spawnedElement", [NSNumber numberWithInteger:self.spawnedElement]];
  }
  if (self.hasInitialOrb) {
    [output appendFormat:@"%@%@: %@\n", indent, @"initialOrb", [NSNumber numberWithBool:self.initialOrb]];
  }
  if (self.hasSpecial) {
    [output appendFormat:@"%@%@: %@\n", indent, @"special", [NSNumber numberWithInteger:self.special]];
  }
  if (self.hasPower) {
    [output appendFormat:@"%@%@: %@\n", indent, @"power", [NSNumber numberWithInteger:self.power]];
  }
  if (self.hasOrbId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orbId", [NSNumber numberWithInteger:self.orbId]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CombatReplayOrbProto class]]) {
    return NO;
  }
  CombatReplayOrbProto *otherMessage = other;
  return
      self.hasSpawnedRow == otherMessage.hasSpawnedRow &&
      (!self.hasSpawnedRow || self.spawnedRow == otherMessage.spawnedRow) &&
      self.hasSpawnedCol == otherMessage.hasSpawnedCol &&
      (!self.hasSpawnedCol || self.spawnedCol == otherMessage.spawnedCol) &&
      self.hasSpawnedElement == otherMessage.hasSpawnedElement &&
      (!self.hasSpawnedElement || self.spawnedElement == otherMessage.spawnedElement) &&
      self.hasInitialOrb == otherMessage.hasInitialOrb &&
      (!self.hasInitialOrb || self.initialOrb == otherMessage.initialOrb) &&
      self.hasSpecial == otherMessage.hasSpecial &&
      (!self.hasSpecial || self.special == otherMessage.special) &&
      self.hasPower == otherMessage.hasPower &&
      (!self.hasPower || self.power == otherMessage.power) &&
      self.hasOrbId == otherMessage.hasOrbId &&
      (!self.hasOrbId || self.orbId == otherMessage.orbId) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasSpawnedRow) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spawnedRow] hash];
  }
  if (self.hasSpawnedCol) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.spawnedCol] hash];
  }
  if (self.hasSpawnedElement) {
    hashCode = hashCode * 31 + self.spawnedElement;
  }
  if (self.hasInitialOrb) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.initialOrb] hash];
  }
  if (self.hasSpecial) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.special] hash];
  }
  if (self.hasPower) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.power] hash];
  }
  if (self.hasOrbId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.orbId] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CombatReplayOrbProto_Builder()
@property (strong) CombatReplayOrbProto* result;
@end

@implementation CombatReplayOrbProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CombatReplayOrbProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CombatReplayOrbProto_Builder*) clear {
  self.result = [[CombatReplayOrbProto alloc] init];
  return self;
}
- (CombatReplayOrbProto_Builder*) clone {
  return [CombatReplayOrbProto builderWithPrototype:result];
}
- (CombatReplayOrbProto*) defaultInstance {
  return [CombatReplayOrbProto defaultInstance];
}
- (CombatReplayOrbProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CombatReplayOrbProto*) buildPartial {
  CombatReplayOrbProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CombatReplayOrbProto_Builder*) mergeFrom:(CombatReplayOrbProto*) other {
  if (other == [CombatReplayOrbProto defaultInstance]) {
    return self;
  }
  if (other.hasSpawnedRow) {
    [self setSpawnedRow:other.spawnedRow];
  }
  if (other.hasSpawnedCol) {
    [self setSpawnedCol:other.spawnedCol];
  }
  if (other.hasSpawnedElement) {
    [self setSpawnedElement:other.spawnedElement];
  }
  if (other.hasInitialOrb) {
    [self setInitialOrb:other.initialOrb];
  }
  if (other.hasSpecial) {
    [self setSpecial:other.special];
  }
  if (other.hasPower) {
    [self setPower:other.power];
  }
  if (other.hasOrbId) {
    [self setOrbId:other.orbId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CombatReplayOrbProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CombatReplayOrbProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setSpawnedRow:[input readInt32]];
        break;
      }
      case 16: {
        [self setSpawnedCol:[input readInt32]];
        break;
      }
      case 24: {
        Element value = (Element)[input readEnum];
        if (ElementIsValidValue(value)) {
          [self setSpawnedElement:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setInitialOrb:[input readBool]];
        break;
      }
      case 40: {
        [self setSpecial:[input readInt32]];
        break;
      }
      case 48: {
        [self setPower:[input readInt32]];
        break;
      }
      case 56: {
        [self setOrbId:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasSpawnedRow {
  return result.hasSpawnedRow;
}
- (int32_t) spawnedRow {
  return result.spawnedRow;
}
- (CombatReplayOrbProto_Builder*) setSpawnedRow:(int32_t) value {
  result.hasSpawnedRow = YES;
  result.spawnedRow = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearSpawnedRow {
  result.hasSpawnedRow = NO;
  result.spawnedRow = 0;
  return self;
}
- (BOOL) hasSpawnedCol {
  return result.hasSpawnedCol;
}
- (int32_t) spawnedCol {
  return result.spawnedCol;
}
- (CombatReplayOrbProto_Builder*) setSpawnedCol:(int32_t) value {
  result.hasSpawnedCol = YES;
  result.spawnedCol = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearSpawnedCol {
  result.hasSpawnedCol = NO;
  result.spawnedCol = 0;
  return self;
}
- (BOOL) hasSpawnedElement {
  return result.hasSpawnedElement;
}
- (Element) spawnedElement {
  return result.spawnedElement;
}
- (CombatReplayOrbProto_Builder*) setSpawnedElement:(Element) value {
  result.hasSpawnedElement = YES;
  result.spawnedElement = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearSpawnedElementList {
  result.hasSpawnedElement = NO;
  result.spawnedElement = ElementFire;
  return self;
}
- (BOOL) hasInitialOrb {
  return result.hasInitialOrb;
}
- (BOOL) initialOrb {
  return result.initialOrb;
}
- (CombatReplayOrbProto_Builder*) setInitialOrb:(BOOL) value {
  result.hasInitialOrb = YES;
  result.initialOrb = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearInitialOrb {
  result.hasInitialOrb = NO;
  result.initialOrb = NO;
  return self;
}
- (BOOL) hasSpecial {
  return result.hasSpecial;
}
- (int32_t) special {
  return result.special;
}
- (CombatReplayOrbProto_Builder*) setSpecial:(int32_t) value {
  result.hasSpecial = YES;
  result.special = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearSpecial {
  result.hasSpecial = NO;
  result.special = 0;
  return self;
}
- (BOOL) hasPower {
  return result.hasPower;
}
- (int32_t) power {
  return result.power;
}
- (CombatReplayOrbProto_Builder*) setPower:(int32_t) value {
  result.hasPower = YES;
  result.power = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearPower {
  result.hasPower = NO;
  result.power = 0;
  return self;
}
- (BOOL) hasOrbId {
  return result.hasOrbId;
}
- (int32_t) orbId {
  return result.orbId;
}
- (CombatReplayOrbProto_Builder*) setOrbId:(int32_t) value {
  result.hasOrbId = YES;
  result.orbId = value;
  return self;
}
- (CombatReplayOrbProto_Builder*) clearOrbId {
  result.hasOrbId = NO;
  result.orbId = 0;
  return self;
}
@end

@interface CombatReplayMonsterSnapshot ()
@property int32_t monsterId;
@property int32_t startingHealth;
@property int32_t maxHealth;
@property (strong) SkillProto* skillSnapshot;
@property int32_t level;
@property int32_t slotNum;
@end

@implementation CombatReplayMonsterSnapshot

- (BOOL) hasMonsterId {
  return !!hasMonsterId_;
}
- (void) setHasMonsterId:(BOOL) value_ {
  hasMonsterId_ = !!value_;
}
@synthesize monsterId;
- (BOOL) hasStartingHealth {
  return !!hasStartingHealth_;
}
- (void) setHasStartingHealth:(BOOL) value_ {
  hasStartingHealth_ = !!value_;
}
@synthesize startingHealth;
- (BOOL) hasMaxHealth {
  return !!hasMaxHealth_;
}
- (void) setHasMaxHealth:(BOOL) value_ {
  hasMaxHealth_ = !!value_;
}
@synthesize maxHealth;
- (BOOL) hasSkillSnapshot {
  return !!hasSkillSnapshot_;
}
- (void) setHasSkillSnapshot:(BOOL) value_ {
  hasSkillSnapshot_ = !!value_;
}
@synthesize skillSnapshot;
- (BOOL) hasLevel {
  return !!hasLevel_;
}
- (void) setHasLevel:(BOOL) value_ {
  hasLevel_ = !!value_;
}
@synthesize level;
- (BOOL) hasSlotNum {
  return !!hasSlotNum_;
}
- (void) setHasSlotNum:(BOOL) value_ {
  hasSlotNum_ = !!value_;
}
@synthesize slotNum;
- (id) init {
  if ((self = [super init])) {
    self.monsterId = 0;
    self.startingHealth = 0;
    self.maxHealth = 0;
    self.skillSnapshot = [SkillProto defaultInstance];
    self.level = 0;
    self.slotNum = 0;
  }
  return self;
}
static CombatReplayMonsterSnapshot* defaultCombatReplayMonsterSnapshotInstance = nil;
+ (void) initialize {
  if (self == [CombatReplayMonsterSnapshot class]) {
    defaultCombatReplayMonsterSnapshotInstance = [[CombatReplayMonsterSnapshot alloc] init];
  }
}
+ (CombatReplayMonsterSnapshot*) defaultInstance {
  return defaultCombatReplayMonsterSnapshotInstance;
}
- (CombatReplayMonsterSnapshot*) defaultInstance {
  return defaultCombatReplayMonsterSnapshotInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMonsterId) {
    [output writeInt32:1 value:self.monsterId];
  }
  if (self.hasStartingHealth) {
    [output writeInt32:2 value:self.startingHealth];
  }
  if (self.hasMaxHealth) {
    [output writeInt32:3 value:self.maxHealth];
  }
  if (self.hasSkillSnapshot) {
    [output writeMessage:4 value:self.skillSnapshot];
  }
  if (self.hasLevel) {
    [output writeInt32:5 value:self.level];
  }
  if (self.hasSlotNum) {
    [output writeInt32:6 value:self.slotNum];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMonsterId) {
    size_ += computeInt32Size(1, self.monsterId);
  }
  if (self.hasStartingHealth) {
    size_ += computeInt32Size(2, self.startingHealth);
  }
  if (self.hasMaxHealth) {
    size_ += computeInt32Size(3, self.maxHealth);
  }
  if (self.hasSkillSnapshot) {
    size_ += computeMessageSize(4, self.skillSnapshot);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(5, self.level);
  }
  if (self.hasSlotNum) {
    size_ += computeInt32Size(6, self.slotNum);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CombatReplayMonsterSnapshot*) parseFromData:(NSData*) data {
  return (CombatReplayMonsterSnapshot*)[[[CombatReplayMonsterSnapshot builder] mergeFromData:data] build];
}
+ (CombatReplayMonsterSnapshot*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayMonsterSnapshot*)[[[CombatReplayMonsterSnapshot builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayMonsterSnapshot*) parseFromInputStream:(NSInputStream*) input {
  return (CombatReplayMonsterSnapshot*)[[[CombatReplayMonsterSnapshot builder] mergeFromInputStream:input] build];
}
+ (CombatReplayMonsterSnapshot*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayMonsterSnapshot*)[[[CombatReplayMonsterSnapshot builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayMonsterSnapshot*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CombatReplayMonsterSnapshot*)[[[CombatReplayMonsterSnapshot builder] mergeFromCodedInputStream:input] build];
}
+ (CombatReplayMonsterSnapshot*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CombatReplayMonsterSnapshot*)[[[CombatReplayMonsterSnapshot builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CombatReplayMonsterSnapshot_Builder*) builder {
  return [[CombatReplayMonsterSnapshot_Builder alloc] init];
}
+ (CombatReplayMonsterSnapshot_Builder*) builderWithPrototype:(CombatReplayMonsterSnapshot*) prototype {
  return [[CombatReplayMonsterSnapshot builder] mergeFrom:prototype];
}
- (CombatReplayMonsterSnapshot_Builder*) builder {
  return [CombatReplayMonsterSnapshot builder];
}
- (CombatReplayMonsterSnapshot_Builder*) toBuilder {
  return [CombatReplayMonsterSnapshot builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMonsterId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"monsterId", [NSNumber numberWithInteger:self.monsterId]];
  }
  if (self.hasStartingHealth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startingHealth", [NSNumber numberWithInteger:self.startingHealth]];
  }
  if (self.hasMaxHealth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxHealth", [NSNumber numberWithInteger:self.maxHealth]];
  }
  if (self.hasSkillSnapshot) {
    [output appendFormat:@"%@%@ {\n", indent, @"skillSnapshot"];
    [self.skillSnapshot writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasSlotNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"slotNum", [NSNumber numberWithInteger:self.slotNum]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CombatReplayMonsterSnapshot class]]) {
    return NO;
  }
  CombatReplayMonsterSnapshot *otherMessage = other;
  return
      self.hasMonsterId == otherMessage.hasMonsterId &&
      (!self.hasMonsterId || self.monsterId == otherMessage.monsterId) &&
      self.hasStartingHealth == otherMessage.hasStartingHealth &&
      (!self.hasStartingHealth || self.startingHealth == otherMessage.startingHealth) &&
      self.hasMaxHealth == otherMessage.hasMaxHealth &&
      (!self.hasMaxHealth || self.maxHealth == otherMessage.maxHealth) &&
      self.hasSkillSnapshot == otherMessage.hasSkillSnapshot &&
      (!self.hasSkillSnapshot || [self.skillSnapshot isEqual:otherMessage.skillSnapshot]) &&
      self.hasLevel == otherMessage.hasLevel &&
      (!self.hasLevel || self.level == otherMessage.level) &&
      self.hasSlotNum == otherMessage.hasSlotNum &&
      (!self.hasSlotNum || self.slotNum == otherMessage.slotNum) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMonsterId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.monsterId] hash];
  }
  if (self.hasStartingHealth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.startingHealth] hash];
  }
  if (self.hasMaxHealth) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.maxHealth] hash];
  }
  if (self.hasSkillSnapshot) {
    hashCode = hashCode * 31 + [self.skillSnapshot hash];
  }
  if (self.hasLevel) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.level] hash];
  }
  if (self.hasSlotNum) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.slotNum] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CombatReplayMonsterSnapshot_Builder()
@property (strong) CombatReplayMonsterSnapshot* result;
@end

@implementation CombatReplayMonsterSnapshot_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[CombatReplayMonsterSnapshot alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (CombatReplayMonsterSnapshot_Builder*) clear {
  self.result = [[CombatReplayMonsterSnapshot alloc] init];
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clone {
  return [CombatReplayMonsterSnapshot builderWithPrototype:result];
}
- (CombatReplayMonsterSnapshot*) defaultInstance {
  return [CombatReplayMonsterSnapshot defaultInstance];
}
- (CombatReplayMonsterSnapshot*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CombatReplayMonsterSnapshot*) buildPartial {
  CombatReplayMonsterSnapshot* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (CombatReplayMonsterSnapshot_Builder*) mergeFrom:(CombatReplayMonsterSnapshot*) other {
  if (other == [CombatReplayMonsterSnapshot defaultInstance]) {
    return self;
  }
  if (other.hasMonsterId) {
    [self setMonsterId:other.monsterId];
  }
  if (other.hasStartingHealth) {
    [self setStartingHealth:other.startingHealth];
  }
  if (other.hasMaxHealth) {
    [self setMaxHealth:other.maxHealth];
  }
  if (other.hasSkillSnapshot) {
    [self mergeSkillSnapshot:other.skillSnapshot];
  }
  if (other.hasLevel) {
    [self setLevel:other.level];
  }
  if (other.hasSlotNum) {
    [self setSlotNum:other.slotNum];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CombatReplayMonsterSnapshot_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setMonsterId:[input readInt32]];
        break;
      }
      case 16: {
        [self setStartingHealth:[input readInt32]];
        break;
      }
      case 24: {
        [self setMaxHealth:[input readInt32]];
        break;
      }
      case 34: {
        SkillProto_Builder* subBuilder = [SkillProto builder];
        if (self.hasSkillSnapshot) {
          [subBuilder mergeFrom:self.skillSnapshot];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSkillSnapshot:[subBuilder buildPartial]];
        break;
      }
      case 40: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 48: {
        [self setSlotNum:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasMonsterId {
  return result.hasMonsterId;
}
- (int32_t) monsterId {
  return result.monsterId;
}
- (CombatReplayMonsterSnapshot_Builder*) setMonsterId:(int32_t) value {
  result.hasMonsterId = YES;
  result.monsterId = value;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clearMonsterId {
  result.hasMonsterId = NO;
  result.monsterId = 0;
  return self;
}
- (BOOL) hasStartingHealth {
  return result.hasStartingHealth;
}
- (int32_t) startingHealth {
  return result.startingHealth;
}
- (CombatReplayMonsterSnapshot_Builder*) setStartingHealth:(int32_t) value {
  result.hasStartingHealth = YES;
  result.startingHealth = value;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clearStartingHealth {
  result.hasStartingHealth = NO;
  result.startingHealth = 0;
  return self;
}
- (BOOL) hasMaxHealth {
  return result.hasMaxHealth;
}
- (int32_t) maxHealth {
  return result.maxHealth;
}
- (CombatReplayMonsterSnapshot_Builder*) setMaxHealth:(int32_t) value {
  result.hasMaxHealth = YES;
  result.maxHealth = value;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clearMaxHealth {
  result.hasMaxHealth = NO;
  result.maxHealth = 0;
  return self;
}
- (BOOL) hasSkillSnapshot {
  return result.hasSkillSnapshot;
}
- (SkillProto*) skillSnapshot {
  return result.skillSnapshot;
}
- (CombatReplayMonsterSnapshot_Builder*) setSkillSnapshot:(SkillProto*) value {
  result.hasSkillSnapshot = YES;
  result.skillSnapshot = value;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) setSkillSnapshot_Builder:(SkillProto_Builder*) builderForValue {
  return [self setSkillSnapshot:[builderForValue build]];
}
- (CombatReplayMonsterSnapshot_Builder*) mergeSkillSnapshot:(SkillProto*) value {
  if (result.hasSkillSnapshot &&
      result.skillSnapshot != [SkillProto defaultInstance]) {
    result.skillSnapshot =
      [[[SkillProto builderWithPrototype:result.skillSnapshot] mergeFrom:value] buildPartial];
  } else {
    result.skillSnapshot = value;
  }
  result.hasSkillSnapshot = YES;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clearSkillSnapshot {
  result.hasSkillSnapshot = NO;
  result.skillSnapshot = [SkillProto defaultInstance];
  return self;
}
- (BOOL) hasLevel {
  return result.hasLevel;
}
- (int32_t) level {
  return result.level;
}
- (CombatReplayMonsterSnapshot_Builder*) setLevel:(int32_t) value {
  result.hasLevel = YES;
  result.level = value;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clearLevel {
  result.hasLevel = NO;
  result.level = 0;
  return self;
}
- (BOOL) hasSlotNum {
  return result.hasSlotNum;
}
- (int32_t) slotNum {
  return result.slotNum;
}
- (CombatReplayMonsterSnapshot_Builder*) setSlotNum:(int32_t) value {
  result.hasSlotNum = YES;
  result.slotNum = value;
  return self;
}
- (CombatReplayMonsterSnapshot_Builder*) clearSlotNum {
  result.hasSlotNum = NO;
  result.slotNum = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
