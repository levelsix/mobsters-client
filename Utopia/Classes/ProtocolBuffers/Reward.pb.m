// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Reward.pb.h"
// @@protoc_insertion_point(imports)

@implementation RewardRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [RewardRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MonsterStuffRoot registerAllExtensions:registry];
    [ItemRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface RewardProto ()
@property int32_t rewardId;
@property int32_t staticDataId;
@property RewardProto_RewardType typ;
@property int32_t amt;
@end

@implementation RewardProto

- (BOOL) hasRewardId {
  return !!hasRewardId_;
}
- (void) setHasRewardId:(BOOL) value_ {
  hasRewardId_ = !!value_;
}
@synthesize rewardId;
- (BOOL) hasStaticDataId {
  return !!hasStaticDataId_;
}
- (void) setHasStaticDataId:(BOOL) value_ {
  hasStaticDataId_ = !!value_;
}
@synthesize staticDataId;
- (BOOL) hasTyp {
  return !!hasTyp_;
}
- (void) setHasTyp:(BOOL) value_ {
  hasTyp_ = !!value_;
}
@synthesize typ;
- (BOOL) hasAmt {
  return !!hasAmt_;
}
- (void) setHasAmt:(BOOL) value_ {
  hasAmt_ = !!value_;
}
@synthesize amt;
- (id) init {
  if ((self = [super init])) {
    self.rewardId = 0;
    self.staticDataId = 0;
    self.typ = RewardProto_RewardTypeNoReward;
    self.amt = 0;
  }
  return self;
}
static RewardProto* defaultRewardProtoInstance = nil;
+ (void) initialize {
  if (self == [RewardProto class]) {
    defaultRewardProtoInstance = [[RewardProto alloc] init];
  }
}
+ (RewardProto*) defaultInstance {
  return defaultRewardProtoInstance;
}
- (RewardProto*) defaultInstance {
  return defaultRewardProtoInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRewardId) {
    [output writeInt32:1 value:self.rewardId];
  }
  if (self.hasStaticDataId) {
    [output writeInt32:2 value:self.staticDataId];
  }
  if (self.hasTyp) {
    [output writeEnum:3 value:self.typ];
  }
  if (self.hasAmt) {
    [output writeInt32:4 value:self.amt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRewardId) {
    size_ += computeInt32Size(1, self.rewardId);
  }
  if (self.hasStaticDataId) {
    size_ += computeInt32Size(2, self.staticDataId);
  }
  if (self.hasTyp) {
    size_ += computeEnumSize(3, self.typ);
  }
  if (self.hasAmt) {
    size_ += computeInt32Size(4, self.amt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RewardProto*) parseFromData:(NSData*) data {
  return (RewardProto*)[[[RewardProto builder] mergeFromData:data] build];
}
+ (RewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RewardProto*)[[[RewardProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RewardProto*) parseFromInputStream:(NSInputStream*) input {
  return (RewardProto*)[[[RewardProto builder] mergeFromInputStream:input] build];
}
+ (RewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RewardProto*)[[[RewardProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RewardProto*)[[[RewardProto builder] mergeFromCodedInputStream:input] build];
}
+ (RewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RewardProto*)[[[RewardProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RewardProto_Builder*) builder {
  return [[RewardProto_Builder alloc] init];
}
+ (RewardProto_Builder*) builderWithPrototype:(RewardProto*) prototype {
  return [[RewardProto builder] mergeFrom:prototype];
}
- (RewardProto_Builder*) builder {
  return [RewardProto builder];
}
- (RewardProto_Builder*) toBuilder {
  return [RewardProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRewardId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rewardId", [NSNumber numberWithInteger:self.rewardId]];
  }
  if (self.hasStaticDataId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"staticDataId", [NSNumber numberWithInteger:self.staticDataId]];
  }
  if (self.hasTyp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"typ", [NSNumber numberWithInteger:self.typ]];
  }
  if (self.hasAmt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"amt", [NSNumber numberWithInteger:self.amt]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RewardProto class]]) {
    return NO;
  }
  RewardProto *otherMessage = other;
  return
      self.hasRewardId == otherMessage.hasRewardId &&
      (!self.hasRewardId || self.rewardId == otherMessage.rewardId) &&
      self.hasStaticDataId == otherMessage.hasStaticDataId &&
      (!self.hasStaticDataId || self.staticDataId == otherMessage.staticDataId) &&
      self.hasTyp == otherMessage.hasTyp &&
      (!self.hasTyp || self.typ == otherMessage.typ) &&
      self.hasAmt == otherMessage.hasAmt &&
      (!self.hasAmt || self.amt == otherMessage.amt) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRewardId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.rewardId] hash];
  }
  if (self.hasStaticDataId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.staticDataId] hash];
  }
  if (self.hasTyp) {
    hashCode = hashCode * 31 + self.typ;
  }
  if (self.hasAmt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.amt] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

BOOL RewardProto_RewardTypeIsValidValue(RewardProto_RewardType value) {
  switch (value) {
    case RewardProto_RewardTypeNoReward:
    case RewardProto_RewardTypeItem:
    case RewardProto_RewardTypeGems:
    case RewardProto_RewardTypeCash:
    case RewardProto_RewardTypeOil:
    case RewardProto_RewardTypeMonster:
      return YES;
    default:
      return NO;
  }
}
@interface RewardProto_Builder()
@property (strong) RewardProto* result;
@end

@implementation RewardProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[RewardProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RewardProto_Builder*) clear {
  self.result = [[RewardProto alloc] init];
  return self;
}
- (RewardProto_Builder*) clone {
  return [RewardProto builderWithPrototype:result];
}
- (RewardProto*) defaultInstance {
  return [RewardProto defaultInstance];
}
- (RewardProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RewardProto*) buildPartial {
  RewardProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (RewardProto_Builder*) mergeFrom:(RewardProto*) other {
  if (other == [RewardProto defaultInstance]) {
    return self;
  }
  if (other.hasRewardId) {
    [self setRewardId:other.rewardId];
  }
  if (other.hasStaticDataId) {
    [self setStaticDataId:other.staticDataId];
  }
  if (other.hasTyp) {
    [self setTyp:other.typ];
  }
  if (other.hasAmt) {
    [self setAmt:other.amt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setRewardId:[input readInt32]];
        break;
      }
      case 16: {
        [self setStaticDataId:[input readInt32]];
        break;
      }
      case 24: {
        RewardProto_RewardType value = (RewardProto_RewardType)[input readEnum];
        if (RewardProto_RewardTypeIsValidValue(value)) {
          [self setTyp:value];
        } else {
          [unknownFields mergeVarintField:3 value:value];
        }
        break;
      }
      case 32: {
        [self setAmt:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasRewardId {
  return result.hasRewardId;
}
- (int32_t) rewardId {
  return result.rewardId;
}
- (RewardProto_Builder*) setRewardId:(int32_t) value {
  result.hasRewardId = YES;
  result.rewardId = value;
  return self;
}
- (RewardProto_Builder*) clearRewardId {
  result.hasRewardId = NO;
  result.rewardId = 0;
  return self;
}
- (BOOL) hasStaticDataId {
  return result.hasStaticDataId;
}
- (int32_t) staticDataId {
  return result.staticDataId;
}
- (RewardProto_Builder*) setStaticDataId:(int32_t) value {
  result.hasStaticDataId = YES;
  result.staticDataId = value;
  return self;
}
- (RewardProto_Builder*) clearStaticDataId {
  result.hasStaticDataId = NO;
  result.staticDataId = 0;
  return self;
}
- (BOOL) hasTyp {
  return result.hasTyp;
}
- (RewardProto_RewardType) typ {
  return result.typ;
}
- (RewardProto_Builder*) setTyp:(RewardProto_RewardType) value {
  result.hasTyp = YES;
  result.typ = value;
  return self;
}
- (RewardProto_Builder*) clearTypList {
  result.hasTyp = NO;
  result.typ = RewardProto_RewardTypeNoReward;
  return self;
}
- (BOOL) hasAmt {
  return result.hasAmt;
}
- (int32_t) amt {
  return result.amt;
}
- (RewardProto_Builder*) setAmt:(int32_t) value {
  result.hasAmt = YES;
  result.amt = value;
  return self;
}
- (RewardProto_Builder*) clearAmt {
  result.hasAmt = NO;
  result.amt = 0;
  return self;
}
@end

@interface UserRewardProto ()
@property (strong) NSMutableArray * mutableUpdatedOrNewMonstersList;
@property (strong) NSMutableArray * mutableUpdatedUserItemsList;
@property int32_t gems;
@property int32_t cash;
@property int32_t oil;
@end

@implementation UserRewardProto

@synthesize mutableUpdatedOrNewMonstersList;
@dynamic updatedOrNewMonstersList;
@synthesize mutableUpdatedUserItemsList;
@dynamic updatedUserItemsList;
- (BOOL) hasGems {
  return !!hasGems_;
}
- (void) setHasGems:(BOOL) value_ {
  hasGems_ = !!value_;
}
@synthesize gems;
- (BOOL) hasCash {
  return !!hasCash_;
}
- (void) setHasCash:(BOOL) value_ {
  hasCash_ = !!value_;
}
@synthesize cash;
- (BOOL) hasOil {
  return !!hasOil_;
}
- (void) setHasOil:(BOOL) value_ {
  hasOil_ = !!value_;
}
@synthesize oil;
- (id) init {
  if ((self = [super init])) {
    self.gems = 0;
    self.cash = 0;
    self.oil = 0;
  }
  return self;
}
static UserRewardProto* defaultUserRewardProtoInstance = nil;
+ (void) initialize {
  if (self == [UserRewardProto class]) {
    defaultUserRewardProtoInstance = [[UserRewardProto alloc] init];
  }
}
+ (UserRewardProto*) defaultInstance {
  return defaultUserRewardProtoInstance;
}
- (UserRewardProto*) defaultInstance {
  return defaultUserRewardProtoInstance;
}
- (NSArray *)updatedOrNewMonstersList {
  return mutableUpdatedOrNewMonstersList;
}
- (FullUserMonsterProto*)updatedOrNewMonstersAtIndex:(NSUInteger)index {
  return [mutableUpdatedOrNewMonstersList objectAtIndex:index];
}
- (NSArray *)updatedUserItemsList {
  return mutableUpdatedUserItemsList;
}
- (UserItemProto*)updatedUserItemsAtIndex:(NSUInteger)index {
  return [mutableUpdatedUserItemsList objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.updatedOrNewMonstersList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.updatedUserItemsList enumerateObjectsUsingBlock:^(UserItemProto *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasGems) {
    [output writeInt32:3 value:self.gems];
  }
  if (self.hasCash) {
    [output writeInt32:4 value:self.cash];
  }
  if (self.hasOil) {
    [output writeInt32:5 value:self.oil];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.updatedOrNewMonstersList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  [self.updatedUserItemsList enumerateObjectsUsingBlock:^(UserItemProto *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasGems) {
    size_ += computeInt32Size(3, self.gems);
  }
  if (self.hasCash) {
    size_ += computeInt32Size(4, self.cash);
  }
  if (self.hasOil) {
    size_ += computeInt32Size(5, self.oil);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserRewardProto*) parseFromData:(NSData*) data {
  return (UserRewardProto*)[[[UserRewardProto builder] mergeFromData:data] build];
}
+ (UserRewardProto*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRewardProto*)[[[UserRewardProto builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserRewardProto*) parseFromInputStream:(NSInputStream*) input {
  return (UserRewardProto*)[[[UserRewardProto builder] mergeFromInputStream:input] build];
}
+ (UserRewardProto*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRewardProto*)[[[UserRewardProto builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserRewardProto*)[[[UserRewardProto builder] mergeFromCodedInputStream:input] build];
}
+ (UserRewardProto*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserRewardProto*)[[[UserRewardProto builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserRewardProto_Builder*) builder {
  return [[UserRewardProto_Builder alloc] init];
}
+ (UserRewardProto_Builder*) builderWithPrototype:(UserRewardProto*) prototype {
  return [[UserRewardProto builder] mergeFrom:prototype];
}
- (UserRewardProto_Builder*) builder {
  return [UserRewardProto builder];
}
- (UserRewardProto_Builder*) toBuilder {
  return [UserRewardProto builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.updatedOrNewMonstersList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"updatedOrNewMonsters"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.updatedUserItemsList enumerateObjectsUsingBlock:^(UserItemProto *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"updatedUserItems"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasGems) {
    [output appendFormat:@"%@%@: %@\n", indent, @"gems", [NSNumber numberWithInteger:self.gems]];
  }
  if (self.hasCash) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cash", [NSNumber numberWithInteger:self.cash]];
  }
  if (self.hasOil) {
    [output appendFormat:@"%@%@: %@\n", indent, @"oil", [NSNumber numberWithInteger:self.oil]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserRewardProto class]]) {
    return NO;
  }
  UserRewardProto *otherMessage = other;
  return
      [self.updatedOrNewMonstersList isEqualToArray:otherMessage.updatedOrNewMonstersList] &&
      [self.updatedUserItemsList isEqualToArray:otherMessage.updatedUserItemsList] &&
      self.hasGems == otherMessage.hasGems &&
      (!self.hasGems || self.gems == otherMessage.gems) &&
      self.hasCash == otherMessage.hasCash &&
      (!self.hasCash || self.cash == otherMessage.cash) &&
      self.hasOil == otherMessage.hasOil &&
      (!self.hasOil || self.oil == otherMessage.oil) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.updatedOrNewMonstersList enumerateObjectsUsingBlock:^(FullUserMonsterProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.updatedUserItemsList enumerateObjectsUsingBlock:^(UserItemProto *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasGems) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.gems] hash];
  }
  if (self.hasCash) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.cash] hash];
  }
  if (self.hasOil) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.oil] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserRewardProto_Builder()
@property (strong) UserRewardProto* result;
@end

@implementation UserRewardProto_Builder
@synthesize result;
- (id) init {
  if ((self = [super init])) {
    self.result = [[UserRewardProto alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (UserRewardProto_Builder*) clear {
  self.result = [[UserRewardProto alloc] init];
  return self;
}
- (UserRewardProto_Builder*) clone {
  return [UserRewardProto builderWithPrototype:result];
}
- (UserRewardProto*) defaultInstance {
  return [UserRewardProto defaultInstance];
}
- (UserRewardProto*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserRewardProto*) buildPartial {
  UserRewardProto* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (UserRewardProto_Builder*) mergeFrom:(UserRewardProto*) other {
  if (other == [UserRewardProto defaultInstance]) {
    return self;
  }
  if (other.mutableUpdatedOrNewMonstersList.count > 0) {
    if (result.mutableUpdatedOrNewMonstersList == nil) {
      result.mutableUpdatedOrNewMonstersList = [[NSMutableArray alloc] initWithArray:other.mutableUpdatedOrNewMonstersList];
    } else {
      [result.mutableUpdatedOrNewMonstersList addObjectsFromArray:other.mutableUpdatedOrNewMonstersList];
    }
  }
  if (other.mutableUpdatedUserItemsList.count > 0) {
    if (result.mutableUpdatedUserItemsList == nil) {
      result.mutableUpdatedUserItemsList = [[NSMutableArray alloc] initWithArray:other.mutableUpdatedUserItemsList];
    } else {
      [result.mutableUpdatedUserItemsList addObjectsFromArray:other.mutableUpdatedUserItemsList];
    }
  }
  if (other.hasGems) {
    [self setGems:other.gems];
  }
  if (other.hasCash) {
    [self setCash:other.cash];
  }
  if (other.hasOil) {
    [self setOil:other.oil];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserRewardProto_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FullUserMonsterProto_Builder* subBuilder = [FullUserMonsterProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUpdatedOrNewMonsters:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        UserItemProto_Builder* subBuilder = [UserItemProto builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addUpdatedUserItems:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setGems:[input readInt32]];
        break;
      }
      case 32: {
        [self setCash:[input readInt32]];
        break;
      }
      case 40: {
        [self setOil:[input readInt32]];
        break;
      }
    }
  }
}
- (NSMutableArray *)updatedOrNewMonstersList {
  return result.mutableUpdatedOrNewMonstersList;
}
- (FullUserMonsterProto*)updatedOrNewMonstersAtIndex:(NSUInteger)index {
  return [result updatedOrNewMonstersAtIndex:index];
}
- (UserRewardProto_Builder *)addUpdatedOrNewMonsters:(FullUserMonsterProto*)value {
  if (result.mutableUpdatedOrNewMonstersList == nil) {
    result.mutableUpdatedOrNewMonstersList = [[NSMutableArray alloc]init];
  }
  [result.mutableUpdatedOrNewMonstersList addObject:value];
  return self;
}
- (UserRewardProto_Builder *)addAllUpdatedOrNewMonsters:(NSArray *)array {
  if (result.mutableUpdatedOrNewMonstersList == nil) {
    result.mutableUpdatedOrNewMonstersList = [NSMutableArray array];
  }
  [result.mutableUpdatedOrNewMonstersList addObjectsFromArray:array];
  return self;
}
- (UserRewardProto_Builder *)clearUpdatedOrNewMonsters {
  result.mutableUpdatedOrNewMonstersList = nil;
  return self;
}
- (NSMutableArray *)updatedUserItemsList {
  return result.mutableUpdatedUserItemsList;
}
- (UserItemProto*)updatedUserItemsAtIndex:(NSUInteger)index {
  return [result updatedUserItemsAtIndex:index];
}
- (UserRewardProto_Builder *)addUpdatedUserItems:(UserItemProto*)value {
  if (result.mutableUpdatedUserItemsList == nil) {
    result.mutableUpdatedUserItemsList = [[NSMutableArray alloc]init];
  }
  [result.mutableUpdatedUserItemsList addObject:value];
  return self;
}
- (UserRewardProto_Builder *)addAllUpdatedUserItems:(NSArray *)array {
  if (result.mutableUpdatedUserItemsList == nil) {
    result.mutableUpdatedUserItemsList = [NSMutableArray array];
  }
  [result.mutableUpdatedUserItemsList addObjectsFromArray:array];
  return self;
}
- (UserRewardProto_Builder *)clearUpdatedUserItems {
  result.mutableUpdatedUserItemsList = nil;
  return self;
}
- (BOOL) hasGems {
  return result.hasGems;
}
- (int32_t) gems {
  return result.gems;
}
- (UserRewardProto_Builder*) setGems:(int32_t) value {
  result.hasGems = YES;
  result.gems = value;
  return self;
}
- (UserRewardProto_Builder*) clearGems {
  result.hasGems = NO;
  result.gems = 0;
  return self;
}
- (BOOL) hasCash {
  return result.hasCash;
}
- (int32_t) cash {
  return result.cash;
}
- (UserRewardProto_Builder*) setCash:(int32_t) value {
  result.hasCash = YES;
  result.cash = value;
  return self;
}
- (UserRewardProto_Builder*) clearCash {
  result.hasCash = NO;
  result.cash = 0;
  return self;
}
- (BOOL) hasOil {
  return result.hasOil;
}
- (int32_t) oil {
  return result.oil;
}
- (UserRewardProto_Builder*) setOil:(int32_t) value {
  result.hasOil = YES;
  result.oil = value;
  return self;
}
- (UserRewardProto_Builder*) clearOil {
  result.hasOil = NO;
  result.oil = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
